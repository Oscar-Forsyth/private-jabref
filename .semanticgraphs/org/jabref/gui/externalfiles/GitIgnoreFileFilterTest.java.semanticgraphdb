
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java≈	
4org.jabref.gui.externalfiles.GitIgnoreFileFilterTestCLASSQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java ("'
packageorg.jabref.gui.externalfiles"
isFinalfalse"
inner classfalse"

isAbstractfalse"o
declarationStringZ<mark class="modifier"> </mark><mark class="modifier">class </mark>GitIgnoreFileFilterTest"
accesspackage_private*GitIgnoreFileFilterTest2ø
]org.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnore(java.nio.file.Path)DECLARATIONQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java ($2À
iorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnoreWithAllowing(java.nio.file.Path)DECLARATIONQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java (02“
porg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnoreWithOverwritingDefs(java.nio.file.Path)DECLARATIONQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java   (72¬
`org.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkDirectoryGitIgnore(java.nio.file.Path)DECLARATIONQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java* *('Ÿ
]org.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnore(java.nio.file.Path)METHODQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java ($"
isFinalfalse"ì
declarationString˝ <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">checkSimpleGitIgnore</mark>(<mark class="annotation">@TempDir</mark> Path dir)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*checkSimpleGitIgnore2á
,java.nio.file.Path.resolve(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java (%2¶
Korg.jabref.gui.externalfiles.GitIgnoreFileFilter.accept(java.nio.file.Path)CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java( (.2á
,java.nio.file.Path.resolve(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java3 (:2≥
Xorg.jabref.gui.externalfiles.GitIgnoreFileFilter.GitIgnoreFileFilter(java.nio.file.Path)CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java6 (I2º
aorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnore(java.nio.file.Path)!dirCALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java (2º
aorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnore(java.nio.file.Path)!dirCALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.javaJ (M2ÿ
}org.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnore(java.nio.file.Path)?gitIgnoreFileFilter@18.28:18.47CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java ('2º
aorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnore(java.nio.file.Path)!dirCALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java/ (22¡
aorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnore(java.nio.file.Path)!dir	PARAMETERQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java3 (62ﬂ
}org.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnore(java.nio.file.Path)?gitIgnoreFileFilter@18.28:18.47DECLARATIONQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java (/2f
voidRETURN_TYPEQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java (¬
}org.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnore(java.nio.file.Path)?gitIgnoreFileFilter@18.28:18.47VARIABLEQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java (/"
typeGitIgnoreFileFilter"
isFinalfalse"ú
declarationStringÜ<mark class="modifier"> </mark>GitIgnoreFileFilter <mark class="class-field">gitIgnoreFileFilter</mark> = new GitIgnoreFileFilter(dir)*gitIgnoreFileFilter2ã
0org.jabref.gui.externalfiles.GitIgnoreFileFilterTYPEQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java (2≥
Xorg.jabref.gui.externalfiles.GitIgnoreFileFilter.GitIgnoreFileFilter(java.nio.file.Path)CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java6 (I2º
aorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnore(java.nio.file.Path)!dirCALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.javaJ (Mù
aorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnore(java.nio.file.Path)!dir	PARAMETERQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java3 (6"
typePath"
isFinalfalse"F
declarationString1<mark class="annotation">@TempDir</mark> Path dir*dir2m
java.nio.file.PathTYPEQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java. (2«
iorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnoreWithAllowing(java.nio.file.Path)METHODQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java (0"
isFinalfalse"ü
declarationStringâ <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">checkSimpleGitIgnoreWithAllowing</mark>(<mark class="annotation">@TempDir</mark> Path dir)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid* checkSimpleGitIgnoreWithAllowing2á
,java.nio.file.Path.resolve(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java (%2¶
Korg.jabref.gui.externalfiles.GitIgnoreFileFilter.accept(java.nio.file.Path)CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java' (-2á
,java.nio.file.Path.resolve(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java2 (92≥
Xorg.jabref.gui.externalfiles.GitIgnoreFileFilter.GitIgnoreFileFilter(java.nio.file.Path)CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java6 (I2»
morg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnoreWithAllowing(java.nio.file.Path)!dirCALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java (2»
morg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnoreWithAllowing(java.nio.file.Path)!dirCALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.javaJ (M2Â
âorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnoreWithAllowing(java.nio.file.Path)?gitIgnoreFileFilter@27.28:27.47CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java (&2»
morg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnoreWithAllowing(java.nio.file.Path)!dirCALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java. (12Õ
morg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnoreWithAllowing(java.nio.file.Path)!dir	PARAMETERQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java? (B2Ï
âorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnoreWithAllowing(java.nio.file.Path)?gitIgnoreFileFilter@27.28:27.47DECLARATIONQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java (/2f
voidRETURN_TYPEQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java (€
âorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnoreWithAllowing(java.nio.file.Path)?gitIgnoreFileFilter@27.28:27.47VARIABLEQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java (/"
typeGitIgnoreFileFilter"
isFinalfalse"ú
declarationStringÜ<mark class="modifier"> </mark>GitIgnoreFileFilter <mark class="class-field">gitIgnoreFileFilter</mark> = new GitIgnoreFileFilter(dir)*gitIgnoreFileFilter2ã
0org.jabref.gui.externalfiles.GitIgnoreFileFilterTYPEQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java (2≥
Xorg.jabref.gui.externalfiles.GitIgnoreFileFilter.GitIgnoreFileFilter(java.nio.file.Path)CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java6 (I2»
morg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnoreWithAllowing(java.nio.file.Path)!dirCALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.javaJ (M©
morg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnoreWithAllowing(java.nio.file.Path)!dir	PARAMETERQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java? (B"
typePath"
isFinalfalse"F
declarationString1<mark class="annotation">@TempDir</mark> Path dir*dir2m
java.nio.file.PathTYPEQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java: (>Ü
porg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnoreWithOverwritingDefs(java.nio.file.Path)METHODQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java   (7"
isFinalfalse"¶
declarationStringê <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">checkSimpleGitIgnoreWithOverwritingDefs</mark>(<mark class="annotation">@TempDir</mark> Path dir)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*'checkSimpleGitIgnoreWithOverwritingDefs2á
,java.nio.file.Path.resolve(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java! !(%2¶
Korg.jabref.gui.externalfiles.GitIgnoreFileFilter.accept(java.nio.file.Path)CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java&( &(.2á
,java.nio.file.Path.resolve(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java&3 &(:2≥
Xorg.jabref.gui.externalfiles.GitIgnoreFileFilter.GitIgnoreFileFilter(java.nio.file.Path)CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java%6 %(I2œ
torg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnoreWithOverwritingDefs(java.nio.file.Path)!dirCALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java! !(2œ
torg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnoreWithOverwritingDefs(java.nio.file.Path)!dirCALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java%J %(M2Ï
êorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnoreWithOverwritingDefs(java.nio.file.Path)?gitIgnoreFileFilter@37.28:37.47CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java& &('2œ
torg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnoreWithOverwritingDefs(java.nio.file.Path)!dirCALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java&/ &(22‘
torg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnoreWithOverwritingDefs(java.nio.file.Path)!dir	PARAMETERQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java F  (I2Û
êorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnoreWithOverwritingDefs(java.nio.file.Path)?gitIgnoreFileFilter@37.28:37.47DECLARATIONQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java% %(/2f
voidRETURN_TYPEQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java   (È
êorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnoreWithOverwritingDefs(java.nio.file.Path)?gitIgnoreFileFilter@37.28:37.47VARIABLEQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java% %(/"
typeGitIgnoreFileFilter"
isFinalfalse"ú
declarationStringÜ<mark class="modifier"> </mark>GitIgnoreFileFilter <mark class="class-field">gitIgnoreFileFilter</mark> = new GitIgnoreFileFilter(dir)*gitIgnoreFileFilter2ã
0org.jabref.gui.externalfiles.GitIgnoreFileFilterTYPEQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java% %(2≥
Xorg.jabref.gui.externalfiles.GitIgnoreFileFilter.GitIgnoreFileFilter(java.nio.file.Path)CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java%6 %(I2œ
torg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnoreWithOverwritingDefs(java.nio.file.Path)!dirCALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java%J %(M∞
torg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkSimpleGitIgnoreWithOverwritingDefs(java.nio.file.Path)!dir	PARAMETERQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java F  (I"
typePath"
isFinalfalse"F
declarationString1<mark class="annotation">@TempDir</mark> Path dir*dir2m
java.nio.file.PathTYPEQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java A  (Eˆ
`org.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkDirectoryGitIgnore(java.nio.file.Path)METHODQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java* *('"
isFinalfalse"ñ
declarationStringÄ <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">checkDirectoryGitIgnore</mark>(<mark class="annotation">@TempDir</mark> Path dir)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*checkDirectoryGitIgnore2á
,java.nio.file.Path.resolve(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java+ +(%2¶
Korg.jabref.gui.externalfiles.GitIgnoreFileFilter.accept(java.nio.file.Path)CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java/( /(.2á
,java.nio.file.Path.resolve(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java/3 /(:2≥
Xorg.jabref.gui.externalfiles.GitIgnoreFileFilter.GitIgnoreFileFilter(java.nio.file.Path)CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java.6 .(I2ø
dorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkDirectoryGitIgnore(java.nio.file.Path)!dirCALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java+ +(2ø
dorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkDirectoryGitIgnore(java.nio.file.Path)!dirCALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java.J .(M2‹
Äorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkDirectoryGitIgnore(java.nio.file.Path)?gitIgnoreFileFilter@46.28:46.47CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java/ /('2ø
dorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkDirectoryGitIgnore(java.nio.file.Path)!dirCALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java// /(22ƒ
dorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkDirectoryGitIgnore(java.nio.file.Path)!dir	PARAMETERQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java*6 *(92„
Äorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkDirectoryGitIgnore(java.nio.file.Path)?gitIgnoreFileFilter@46.28:46.47DECLARATIONQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java. .(/2f
voidRETURN_TYPEQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java* *(…
Äorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkDirectoryGitIgnore(java.nio.file.Path)?gitIgnoreFileFilter@46.28:46.47VARIABLEQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java. .(/"
typeGitIgnoreFileFilter"
isFinalfalse"ú
declarationStringÜ<mark class="modifier"> </mark>GitIgnoreFileFilter <mark class="class-field">gitIgnoreFileFilter</mark> = new GitIgnoreFileFilter(dir)*gitIgnoreFileFilter2ã
0org.jabref.gui.externalfiles.GitIgnoreFileFilterTYPEQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java. .(2≥
Xorg.jabref.gui.externalfiles.GitIgnoreFileFilter.GitIgnoreFileFilter(java.nio.file.Path)CALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java.6 .(I2ø
dorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkDirectoryGitIgnore(java.nio.file.Path)!dirCALLQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java.J .(M†
dorg.jabref.gui.externalfiles.GitIgnoreFileFilterTest.checkDirectoryGitIgnore(java.nio.file.Path)!dir	PARAMETERQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java*6 *(9"
typePath"
isFinalfalse"F
declarationString1<mark class="annotation">@TempDir</mark> Path dir*dir2m
java.nio.file.PathTYPEQ
Gsrc\test\java\org\jabref\gui\externalfiles\GitIgnoreFileFilterTest.java*1 *(5