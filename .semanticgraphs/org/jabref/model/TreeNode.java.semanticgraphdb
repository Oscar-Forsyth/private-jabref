
,src\main\java\org\jabref\model\TreeNode.javaˆ*
org.jabref.model.TreeNodeCLASS6
,src\main\java\org\jabref\model\TreeNode.java! !("
packageorg.jabref.model"
isFinalfalse"
inner classfalse"

isAbstracttrue"—
declarationStringª<mark class="annotation">@SuppressWarnings("unchecked")</mark> <br><mark class="modifier">public </mark><mark class="modifier">abstract </mark><mark class="modifier">class </mark>TreeNode"
accesspublic*TreeNode2}
6org.jabref.model.TreeNode.TreeNode(java.lang.Class<T>)DECLARATION6
,src\main\java\org\jabref\model\TreeNode.java8 8(2y
2org.jabref.model.TreeNode.getIndexedPathFromRoot()DECLARATION6
,src\main\java\org\jabref\model\TreeNode.javaI I(/2ë
Jorg.jabref.model.TreeNode.getDescendant(java.util.List<java.lang.Integer>)DECLARATION6
,src\main\java\org\jabref\model\TreeNode.java^ ^($2v
/org.jabref.model.TreeNode.getPositionInParent()DECLARATION6
,src\main\java\org\jabref\model\TreeNode.javas s("2u
,org.jabref.model.TreeNode.getIndexOfChild(T)DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaÉ É(,2m
$org.jabref.model.TreeNode.getLevel()DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaî î(2x
/org.jabref.model.TreeNode.getNumberOfChildren()DECLARATION8
,src\main\java\org\jabref\model\TreeNode.java† †("2l
#org.jabref.model.TreeNode.moveTo(T)DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaÆ Æ(2t
+org.jabref.model.TreeNode.getPathFromRoot()DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaø ø("2s
*org.jabref.model.TreeNode.getNextSibling()DECLARATION8
,src\main\java\org\jabref\model\TreeNode.java’ ’(%2w
.org.jabref.model.TreeNode.getPreviousSibling()DECLARATION8
,src\main\java\org\jabref\model\TreeNode.java‚ ‚()2z
1org.jabref.model.TreeNode.getRelativeSibling(int)DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaÈ È(*2n
%org.jabref.model.TreeNode.getParent()DECLARATION8
,src\main\java\org\jabref\model\TreeNode.java¸ ¸( 2o
&org.jabref.model.TreeNode.setParent(T)DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaà à(2r
)org.jabref.model.TreeNode.getChildAt(int)DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaì ì(!2x
/org.jabref.model.TreeNode.childIndexExists(int)DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaù ù(&2k
"org.jabref.model.TreeNode.isRoot()DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaß ß(2r
)org.jabref.model.TreeNode.isAncestorOf(T)DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaµ µ(2l
#org.jabref.model.TreeNode.getRoot()DECLARATION8
,src\main\java\org\jabref\model\TreeNode.java   (2k
"org.jabref.model.TreeNode.isLeaf()DECLARATION8
,src\main\java\org\jabref\model\TreeNode.java◊ ◊(2u
,org.jabref.model.TreeNode.removeFromParent()DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaﬂ ﬂ( 2v
-org.jabref.model.TreeNode.removeAllChildren()DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaÈ È(!2r
)org.jabref.model.TreeNode.getFirstChild()DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaÙ Ù($2q
(org.jabref.model.TreeNode.getLastChild()DECLARATION8
,src\main\java\org\jabref\model\TreeNode.java˝ ˝(#2v
-org.jabref.model.TreeNode.isNodeDescendant(T)DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaå å(#2p
'org.jabref.model.TreeNode.getChildren()DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaú ú((2q
(org.jabref.model.TreeNode.removeChild(T)DECLARATION8
,src\main\java\org\jabref\model\TreeNode.java• •(2s
*org.jabref.model.TreeNode.removeChild(int)DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaµ µ(2n
%org.jabref.model.TreeNode.addChild(T)DECLARATION8
,src\main\java\org\jabref\model\TreeNode.java∆ ∆(2s
*org.jabref.model.TreeNode.addChild(T, int)DECLARATION8
,src\main\java\org\jabref\model\TreeNode.java” ”(2|
3org.jabref.model.TreeNode.moveAllChildrenTo(T, int)DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaÎ Î(!2ô
Porg.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)DECLARATION8
,src\main\java\org\jabref\model\TreeNode.java¸ ¸(2q
(org.jabref.model.TreeNode.moveTo(T, int)DECLARATION8
,src\main\java\org\jabref\model\TreeNode.java£ £(2p
'org.jabref.model.TreeNode.copySubtree()DECLARATION8
,src\main\java\org\jabref\model\TreeNode.java∫ ∫(2m
$org.jabref.model.TreeNode.copyNode()DECLARATION8
,src\main\java\org\jabref\model\TreeNode.java« «(2ü
Vorg.jabref.model.TreeNode.subscribeToDescendantChanged(java.util.function.Consumer<T>)DECLARATION8
,src\main\java\org\jabref\model\TreeNode.java” ”(,2Å
8org.jabref.model.TreeNode.notifyAboutDescendantChange(T)DECLARATION8
,src\main\java\org\jabref\model\TreeNode.java‹ ‹(.2ö
Qorg.jabref.model.TreeNode.findChildrenSatisfying(java.util.function.Predicate<T>)DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaÁ Á()2u
.org.jabref.model.TreeNode?children@38.36:38.44DECLARATION6
,src\main\java\org\jabref\model\TreeNode.java&$ &(,2s
,org.jabref.model.TreeNode?parent@42.14:42.20DECLARATION6
,src\main\java\org\jabref\model\TreeNode.java* *(2Ä
9org.jabref.model.TreeNode?onDescendantChanged@46.24:46.43DECLARATION6
,src\main\java\org\jabref\model\TreeNode.java. .(+2e
org.jabref.model.TreeNode.TTYPE_PARAMETER6
,src\main\java\org\jabref\model\TreeNode.java! !( ‡
6org.jabref.model.TreeNode.TreeNode(java.lang.Class<T>)CONSTRUCTOR6
,src\main\java\org\jabref\model\TreeNode.java8 8("|
declarationStringg<mark class="modifier">public </mark><mark class="method">TreeNode</mark>(Class&lt;T&gt; derivingClass)*TreeNode2l
,java.lang.Class.isInstance(java.lang.Object)CALL6
,src\main\java\org\jabref\model\TreeNode.java< <(%2ó
Wjava.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String)CALL6
,src\main\java\org\jabref\model\TreeNode.java= =(32l
,org.jabref.model.TreeNode?parent@42.14:42.20CALL6
,src\main\java\org\jabref\model\TreeNode.java9 9(2n
.org.jabref.model.TreeNode?children@38.36:38.44CALL6
,src\main\java\org\jabref\model\TreeNode.java: :(2Ñ
Dorg.jabref.model.TreeNode.TreeNode(java.lang.Class<T>)!derivingClassCALL6
,src\main\java\org\jabref\model\TreeNode.java< <(2â
Dorg.jabref.model.TreeNode.TreeNode(java.lang.Class<T>)!derivingClass	PARAMETER6
,src\main\java\org\jabref\model\TreeNode.java8 8(*2`
org.jabref.model.TreeNodeRETURN_TYPE6
,src\main\java\org\jabref\model\TreeNode.java8 8(†
Dorg.jabref.model.TreeNode.TreeNode(java.lang.Class<T>)!derivingClass	PARAMETER6
,src\main\java\org\jabref\model\TreeNode.java8 8(*"
typeClass<T>"
isFinalfalse"+
declarationStringClass<T> derivingClass*derivingClass2O
java.lang.ClassTYPE6
,src\main\java\org\jabref\model\TreeNode.java8 8(2d
org.jabref.model.TreeNode.TTYPE_ARGUMENT6
,src\main\java\org\jabref\model\TreeNode.java8 8(°
2org.jabref.model.TreeNode.getIndexedPathFromRoot()METHOD6
,src\main\java\org\jabref\model\TreeNode.javaI I(/"
isFinalfalse"„
declarationStringÕ<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; List&lt;Integer&gt; <mark class="method">getIndexedPathFromRoot</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeList<Integer>*getIndexedPathFromRoot2r
2org.jabref.model.TreeNode.getIndexedPathFromRoot()CALL6
,src\main\java\org\jabref\model\TreeNode.javaN$ N(:2U
java.util.List.add(E)CALL6
,src\main\java\org\jabref\model\TreeNode.javaO O(2o
/org.jabref.model.TreeNode.getPositionInParent()CALL6
,src\main\java\org\jabref\model\TreeNode.javaO O($2_
java.util.ArrayList.ArrayList()CALL6
,src\main\java\org\jabref\model\TreeNode.javaK K("2l
,org.jabref.model.TreeNode?parent@42.14:42.20CALL6
,src\main\java\org\jabref\model\TreeNode.javaJ J(2l
,org.jabref.model.TreeNode?parent@42.14:42.20CALL6
,src\main\java\org\jabref\model\TreeNode.javaN N(#2É
Corg.jabref.model.TreeNode.getIndexedPathFromRoot()?path@78.22:78.26CALL6
,src\main\java\org\jabref\model\TreeNode.javaO O(2É
Corg.jabref.model.TreeNode.getIndexedPathFromRoot()?path@78.22:78.26CALL6
,src\main\java\org\jabref\model\TreeNode.javaP P(2ä
Corg.jabref.model.TreeNode.getIndexedPathFromRoot()?path@78.22:78.26DECLARATION6
,src\main\java\org\jabref\model\TreeNode.javaN N(2U
java.util.ListRETURN_TYPE6
,src\main\java\org\jabref\model\TreeNode.javaI I(2a
java.lang.IntegerRETURN_TYPE_ARGUMENT6
,src\main\java\org\jabref\model\TreeNode.javaI I(–
Corg.jabref.model.TreeNode.getIndexedPathFromRoot()?path@78.22:78.26VARIABLE6
,src\main\java\org\jabref\model\TreeNode.javaN N("
typeList<Integer>"
isFinalfalse"â
declarationStringt<mark class="modifier"> </mark>List<Integer> <mark class="class-field">path</mark> = parent.getIndexedPathFromRoot()*path2N
java.util.ListTYPE6
,src\main\java\org\jabref\model\TreeNode.javaN N(2Z
java.lang.IntegerTYPE_ARGUMENT6
,src\main\java\org\jabref\model\TreeNode.javaN N(2r
2org.jabref.model.TreeNode.getIndexedPathFromRoot()CALL6
,src\main\java\org\jabref\model\TreeNode.javaN$ N(:2l
,org.jabref.model.TreeNode?parent@42.14:42.20CALL6
,src\main\java\org\jabref\model\TreeNode.javaN N(#Ä
Jorg.jabref.model.TreeNode.getDescendant(java.util.List<java.lang.Integer>)METHOD6
,src\main\java\org\jabref\model\TreeNode.java^ ^($"
isFinalfalse"˜
declarationString·<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; Optional&lt;T&gt; <mark class="method">getDescendant</mark>(List&lt;Integer&gt; indexedPath)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeOptional<T>*getDescendant2i
)org.jabref.model.TreeNode.getChildAt(int)CALL6
,src\main\java\org\jabref\model\TreeNode.javaa' a(12^
java.util.Optional.isPresent()CALL6
,src\main\java\org\jabref\model\TreeNode.javab b(2X
java.util.Optional.get()CALL6
,src\main\java\org\jabref\model\TreeNode.javac c("2Z
java.util.Optional.empty()CALL6
,src\main\java\org\jabref\model\TreeNode.javae  e(%2X
java.util.Optional.of(T)CALL6
,src\main\java\org\jabref\model\TreeNode.javah h(2ñ
Vorg.jabref.model.TreeNode.getDescendant(java.util.List<java.lang.Integer>)!indexedPathCALL6
,src\main\java\org\jabref\model\TreeNode.java` `($2ù
]org.jabref.model.TreeNode.getDescendant(java.util.List<java.lang.Integer>)?cursor@95.10:95.16CALL6
,src\main\java\org\jabref\model\TreeNode.javaa  a(&2ú
\org.jabref.model.TreeNode.getDescendant(java.util.List<java.lang.Integer>)?index@96.17:96.22CALL6
,src\main\java\org\jabref\model\TreeNode.javaa2 a(72ú
\org.jabref.model.TreeNode.getDescendant(java.util.List<java.lang.Integer>)?child@97.24:97.29CALL6
,src\main\java\org\jabref\model\TreeNode.javab b(2ù
]org.jabref.model.TreeNode.getDescendant(java.util.List<java.lang.Integer>)?cursor@95.10:95.16CALL6
,src\main\java\org\jabref\model\TreeNode.javac c(2ú
\org.jabref.model.TreeNode.getDescendant(java.util.List<java.lang.Integer>)?child@97.24:97.29CALL6
,src\main\java\org\jabref\model\TreeNode.javac c(2ù
]org.jabref.model.TreeNode.getDescendant(java.util.List<java.lang.Integer>)?cursor@95.10:95.16CALL6
,src\main\java\org\jabref\model\TreeNode.javah h(!2õ
Vorg.jabref.model.TreeNode.getDescendant(java.util.List<java.lang.Integer>)!indexedPath	PARAMETER6
,src\main\java\org\jabref\model\TreeNode.java^3 ^(>2§
]org.jabref.model.TreeNode.getDescendant(java.util.List<java.lang.Integer>)?cursor@95.10:95.16DECLARATION6
,src\main\java\org\jabref\model\TreeNode.java_
 _(2£
\org.jabref.model.TreeNode.getDescendant(java.util.List<java.lang.Integer>)?index@96.17:96.22DECLARATION6
,src\main\java\org\jabref\model\TreeNode.java` `(2£
\org.jabref.model.TreeNode.getDescendant(java.util.List<java.lang.Integer>)?child@97.24:97.29DECLARATION6
,src\main\java\org\jabref\model\TreeNode.javaa a(2Y
java.util.OptionalRETURN_TYPE6
,src\main\java\org\jabref\model\TreeNode.java^ ^(2k
org.jabref.model.TreeNode.TRETURN_TYPE_ARGUMENT6
,src\main\java\org\jabref\model\TreeNode.java^ ^(¨
]org.jabref.model.TreeNode.getDescendant(java.util.List<java.lang.Integer>)?cursor@95.10:95.16VARIABLE6
,src\main\java\org\jabref\model\TreeNode.java_
 _("	
typeT"
isFinalfalse"Ü
declarationStringq<mark class="modifier"> </mark>T <mark class="class-field">cursor</mark> = (T) <mark class="modifier">this</mark>*cursor2[
org.jabref.model.TreeNode.TTYPE6
,src\main\java\org\jabref\model\TreeNode.java_ _(	â
\org.jabref.model.TreeNode.getDescendant(java.util.List<java.lang.Integer>)?index@96.17:96.22VARIABLE6
,src\main\java\org\jabref\model\TreeNode.java` `("
typeint"
isFinalfalse"|
declarationStringg<mark class="modifier"> </mark><mark class="modifier">int</mark> <mark class="class-field">index</mark>*index2C
intTYPE6
,src\main\java\org\jabref\model\TreeNode.java` `(∂
\org.jabref.model.TreeNode.getDescendant(java.util.List<java.lang.Integer>)?child@97.24:97.29VARIABLE6
,src\main\java\org\jabref\model\TreeNode.javaa a("
typeOptional<T>"
isFinalfalse"Å
declarationStringl<mark class="modifier"> </mark>Optional<T> <mark class="class-field">child</mark> = cursor.getChildAt(index)*child2R
java.util.OptionalTYPE6
,src\main\java\org\jabref\model\TreeNode.javaa a(2d
org.jabref.model.TreeNode.TTYPE_ARGUMENT6
,src\main\java\org\jabref\model\TreeNode.javaa a(2i
)org.jabref.model.TreeNode.getChildAt(int)CALL6
,src\main\java\org\jabref\model\TreeNode.javaa' a(12ù
]org.jabref.model.TreeNode.getDescendant(java.util.List<java.lang.Integer>)?cursor@95.10:95.16CALL6
,src\main\java\org\jabref\model\TreeNode.javaa  a(&2ú
\org.jabref.model.TreeNode.getDescendant(java.util.List<java.lang.Integer>)?index@96.17:96.22CALL6
,src\main\java\org\jabref\model\TreeNode.javaa2 a(7≠
Vorg.jabref.model.TreeNode.getDescendant(java.util.List<java.lang.Integer>)!indexedPath	PARAMETER6
,src\main\java\org\jabref\model\TreeNode.java^3 ^(>"
typeList<Integer>"
isFinalfalse".
declarationStringList<Integer> indexedPath*indexedPath2N
java.util.ListTYPE6
,src\main\java\org\jabref\model\TreeNode.java^% ^()2Z
java.lang.IntegerTYPE_ARGUMENT6
,src\main\java\org\jabref\model\TreeNode.java^* ^(1
/org.jabref.model.TreeNode.getPositionInParent()METHOD6
,src\main\java\org\jabref\model\TreeNode.javas s(""
isFinalfalse"Ó
declarationStringÿ<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; <mark class="modifier">int</mark> <mark class="method">getPositionInParent</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeint*getPositionInParent2X
java.util.Optional.get()CALL6
,src\main\java\org\jabref\model\TreeNode.javau5 u(82l
,org.jabref.model.TreeNode.getIndexOfChild(T)CALL6
,src\main\java\org\jabref\model\TreeNode.javau u(*2à
Hjava.util.Optional.orElseThrow(java.util.function.Supplier<? extends X>)CALL6
,src\main\java\org\jabref\model\TreeNode.javat t(&2e
%org.jabref.model.TreeNode.getParent()CALL6
,src\main\java\org\jabref\model\TreeNode.javat t(2ó
Wjava.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String)CALL6
,src\main\java\org\jabref\model\TreeNode.javat1 t(N2J
intRETURN_TYPE6
,src\main\java\org\jabref\model\TreeNode.javas s(¥
,org.jabref.model.TreeNode.getIndexOfChild(T)METHOD8
,src\main\java\org\jabref\model\TreeNode.javaÉ É(,"
isFinalfalse"Î
declarationString’<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; Optional&lt;Integer&gt; <mark class="method">getIndexOfChild</mark>(T childNode)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeOptional<Integer>*getIndexOfChild2e
#java.util.Objects.requireNonNull(T)CALL8
,src\main\java\org\jabref\model\TreeNode.javaÑ Ñ(2\
java.util.Optional.empty()CALL8
,src\main\java\org\jabref\model\TreeNode.javaá á(!2Z
java.util.Optional.of(T)CALL8
,src\main\java\org\jabref\model\TreeNode.javaâ â(2x
6org.jabref.model.TreeNode.getIndexOfChild(T)!childNodeCALL8
,src\main\java\org\jabref\model\TreeNode.javaÑ Ñ((2p
.org.jabref.model.TreeNode?children@38.36:38.44CALL8
,src\main\java\org\jabref\model\TreeNode.javaÖ Ö(2x
6org.jabref.model.TreeNode.getIndexOfChild(T)!childNodeCALL8
,src\main\java\org\jabref\model\TreeNode.javaÖ% Ö(.2Ç
@org.jabref.model.TreeNode.getIndexOfChild(T)?index@133.12:133.17CALL8
,src\main\java\org\jabref\model\TreeNode.javaÜ Ü(2Ç
@org.jabref.model.TreeNode.getIndexOfChild(T)?index@133.12:133.17CALL8
,src\main\java\org\jabref\model\TreeNode.javaâ â($2}
6org.jabref.model.TreeNode.getIndexOfChild(T)!childNode	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaÉ/ É(82â
@org.jabref.model.TreeNode.getIndexOfChild(T)?index@133.12:133.17DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaÖ Ö(2[
java.util.OptionalRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.javaÉ É(2c
java.lang.IntegerRETURN_TYPE_ARGUMENT8
,src\main\java\org\jabref\model\TreeNode.javaÉ É(˝
@org.jabref.model.TreeNode.getIndexOfChild(T)?index@133.12:133.17VARIABLE8
,src\main\java\org\jabref\model\TreeNode.javaÖ Ö("
typeint"
isFinalfalse"õ
declarationStringÖ<mark class="modifier"> </mark><mark class="modifier">int</mark> <mark class="class-field">index</mark> = children.indexOf(childNode)*index2E
intTYPE8
,src\main\java\org\jabref\model\TreeNode.javaÖ Ö(2p
.org.jabref.model.TreeNode?children@38.36:38.44CALL8
,src\main\java\org\jabref\model\TreeNode.javaÖ Ö(2x
6org.jabref.model.TreeNode.getIndexOfChild(T)!childNodeCALL8
,src\main\java\org\jabref\model\TreeNode.javaÖ% Ö(.¶
6org.jabref.model.TreeNode.getIndexOfChild(T)!childNode	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaÉ/ É(8"	
typeT"
isFinalfalse" 
declarationStringT childNode*	childNode2]
org.jabref.model.TreeNode.TTYPE8
,src\main\java\org\jabref\model\TreeNode.javaÉ- É(.«
$org.jabref.model.TreeNode.getLevel()METHOD8
,src\main\java\org\jabref\model\TreeNode.javaî î("
isFinalfalse"„
declarationStringÕ<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; <mark class="modifier">int</mark> <mark class="method">getLevel</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeint*getLevel2f
$org.jabref.model.TreeNode.getLevel()CALL8
,src\main\java\org\jabref\model\TreeNode.javaò ò(2n
,org.jabref.model.TreeNode?parent@42.14:42.20CALL8
,src\main\java\org\jabref\model\TreeNode.javaï ï(2n
,org.jabref.model.TreeNode?parent@42.14:42.20CALL8
,src\main\java\org\jabref\model\TreeNode.javaò ò(2L
intRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.javaî î(í
/org.jabref.model.TreeNode.getNumberOfChildren()METHOD8
,src\main\java\org\jabref\model\TreeNode.java† †(""
isFinalfalse"Ó
declarationStringÿ<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; <mark class="modifier">int</mark> <mark class="method">getNumberOfChildren</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeint*getNumberOfChildren2p
.org.jabref.model.TreeNode?children@38.36:38.44CALL8
,src\main\java\org\jabref\model\TreeNode.java° °(2L
intRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.java† †(›
#org.jabref.model.TreeNode.moveTo(T)METHOD8
,src\main\java\org\jabref\model\TreeNode.javaÆ Æ("
isFinalfalse"Í
declarationString‘<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; <mark class="modifier">void</mark> <mark class="method">moveTo</mark>(T target)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*moveTo2e
#java.util.Objects.requireNonNull(T)CALL8
,src\main\java\org\jabref\model\TreeNode.javaØ Ø(2g
%org.jabref.model.TreeNode.getParent()CALL8
,src\main\java\org\jabref\model\TreeNode.java±  ±()2`
java.util.Optional.isPresent()CALL8
,src\main\java\org\jabref\model\TreeNode.java≤ ≤(2Z
java.util.Optional.get()CALL8
,src\main\java\org\jabref\model\TreeNode.java≤0 ≤(32j
(org.jabref.model.TreeNode.moveTo(T, int)CALL8
,src\main\java\org\jabref\model\TreeNode.java≥ ≥(2q
/org.jabref.model.TreeNode.getNumberOfChildren()CALL8
,src\main\java\org\jabref\model\TreeNode.java≥' ≥(:2j
(org.jabref.model.TreeNode.moveTo(T, int)CALL8
,src\main\java\org\jabref\model\TreeNode.javaµ µ(2q
/org.jabref.model.TreeNode.getNumberOfChildren()CALL8
,src\main\java\org\jabref\model\TreeNode.javaµ' µ(:2l
*org.jabref.model.TreeNode.moveTo(T)!targetCALL8
,src\main\java\org\jabref\model\TreeNode.javaØ Ø(%2}
;org.jabref.model.TreeNode.moveTo(T)?oldParent@177.20:177.29CALL8
,src\main\java\org\jabref\model\TreeNode.java≤ ≤(2}
;org.jabref.model.TreeNode.moveTo(T)?oldParent@177.20:177.29CALL8
,src\main\java\org\jabref\model\TreeNode.java≤& ≤(/2l
*org.jabref.model.TreeNode.moveTo(T)!targetCALL8
,src\main\java\org\jabref\model\TreeNode.java≤9 ≤(?2l
*org.jabref.model.TreeNode.moveTo(T)!targetCALL8
,src\main\java\org\jabref\model\TreeNode.java≥ ≥(2l
*org.jabref.model.TreeNode.moveTo(T)!targetCALL8
,src\main\java\org\jabref\model\TreeNode.java≥  ≥(&2l
*org.jabref.model.TreeNode.moveTo(T)!targetCALL8
,src\main\java\org\jabref\model\TreeNode.javaµ µ(2l
*org.jabref.model.TreeNode.moveTo(T)!targetCALL8
,src\main\java\org\jabref\model\TreeNode.javaµ  µ(&2q
*org.jabref.model.TreeNode.moveTo(T)!target	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaÆ Æ(2Ñ
;org.jabref.model.TreeNode.moveTo(T)?oldParent@177.20:177.29DECLARATION8
,src\main\java\org\jabref\model\TreeNode.java± ±(2M
voidRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.javaÆ Æ(‘
;org.jabref.model.TreeNode.moveTo(T)?oldParent@177.20:177.29VARIABLE8
,src\main\java\org\jabref\model\TreeNode.java± ±("
typeOptional<T>"
isFinalfalse"x
declarationStringc<mark class="modifier"> </mark>Optional<T> <mark class="class-field">oldParent</mark> = getParent()*	oldParent2T
java.util.OptionalTYPE8
,src\main\java\org\jabref\model\TreeNode.java± ±(2f
org.jabref.model.TreeNode.TTYPE_ARGUMENT8
,src\main\java\org\jabref\model\TreeNode.java± ±(2g
%org.jabref.model.TreeNode.getParent()CALL8
,src\main\java\org\jabref\model\TreeNode.java±  ±()î
*org.jabref.model.TreeNode.moveTo(T)!target	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaÆ Æ("	
typeT"
isFinalfalse"
declarationStringT target*target2]
org.jabref.model.TreeNode.TTYPE8
,src\main\java\org\jabref\model\TreeNode.javaÆ Æ(é
+org.jabref.model.TreeNode.getPathFromRoot()METHOD8
,src\main\java\org\jabref\model\TreeNode.javaø ø(""
isFinalfalse"÷
declarationString¿<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; List&lt;T&gt; <mark class="method">getPathFromRoot</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeList<T>*getPathFromRoot2W
java.util.List.add(E)CALL8
,src\main\java\org\jabref\model\TreeNode.java¬ ¬(2m
+org.jabref.model.TreeNode.getPathFromRoot()CALL8
,src\main\java\org\jabref\model\TreeNode.java∆ ∆(-2W
java.util.List.add(E)CALL8
,src\main\java\org\jabref\model\TreeNode.java« «(2a
java.util.ArrayList.ArrayList()CALL8
,src\main\java\org\jabref\model\TreeNode.java¡# ¡(.2n
,org.jabref.model.TreeNode?parent@42.14:42.20CALL8
,src\main\java\org\jabref\model\TreeNode.java¿ ¿(2Ñ
Borg.jabref.model.TreeNode.getPathFromRoot()?pathToMe@193.20:193.28CALL8
,src\main\java\org\jabref\model\TreeNode.java¬ ¬(2Ñ
Borg.jabref.model.TreeNode.getPathFromRoot()?pathToMe@193.20:193.28CALL8
,src\main\java\org\jabref\model\TreeNode.java√ √(2n
,org.jabref.model.TreeNode?parent@42.14:42.20CALL8
,src\main\java\org\jabref\model\TreeNode.java∆ ∆(2Ä
>org.jabref.model.TreeNode.getPathFromRoot()?path@198.16:198.20CALL8
,src\main\java\org\jabref\model\TreeNode.java« «(2Ä
>org.jabref.model.TreeNode.getPathFromRoot()?path@198.16:198.20CALL8
,src\main\java\org\jabref\model\TreeNode.java» »(2ã
Borg.jabref.model.TreeNode.getPathFromRoot()?pathToMe@193.20:193.28DECLARATION8
,src\main\java\org\jabref\model\TreeNode.java¡ ¡(2á
>org.jabref.model.TreeNode.getPathFromRoot()?path@198.16:198.20DECLARATION8
,src\main\java\org\jabref\model\TreeNode.java∆ ∆(2W
java.util.ListRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.javaø ø(2m
org.jabref.model.TreeNode.TRETURN_TYPE_ARGUMENT8
,src\main\java\org\jabref\model\TreeNode.javaø ø(Õ
Borg.jabref.model.TreeNode.getPathFromRoot()?pathToMe@193.20:193.28VARIABLE8
,src\main\java\org\jabref\model\TreeNode.java¡ ¡("
typeList<T>"
isFinalfalse"y
declarationStringd<mark class="modifier"> </mark>List<T> <mark class="class-field">pathToMe</mark> = new ArrayList<>()*pathToMe2P
java.util.ListTYPE8
,src\main\java\org\jabref\model\TreeNode.java¡ ¡(2f
org.jabref.model.TreeNode.TTYPE_ARGUMENT8
,src\main\java\org\jabref\model\TreeNode.java¡ ¡(2a
java.util.ArrayList.ArrayList()CALL8
,src\main\java\org\jabref\model\TreeNode.java¡# ¡(.ƒ
>org.jabref.model.TreeNode.getPathFromRoot()?path@198.16:198.20VARIABLE8
,src\main\java\org\jabref\model\TreeNode.java∆ ∆("
typeList<T>"
isFinalfalse"|
declarationStringg<mark class="modifier"> </mark>List<T> <mark class="class-field">path</mark> = parent.getPathFromRoot()*path2P
java.util.ListTYPE8
,src\main\java\org\jabref\model\TreeNode.java∆ ∆(2f
org.jabref.model.TreeNode.TTYPE_ARGUMENT8
,src\main\java\org\jabref\model\TreeNode.java∆ ∆(2m
+org.jabref.model.TreeNode.getPathFromRoot()CALL8
,src\main\java\org\jabref\model\TreeNode.java∆ ∆(-2n
,org.jabref.model.TreeNode?parent@42.14:42.20CALL8
,src\main\java\org\jabref\model\TreeNode.java∆ ∆(¸
*org.jabref.model.TreeNode.getNextSibling()METHOD8
,src\main\java\org\jabref\model\TreeNode.java’ ’(%"
isFinalfalse"Ÿ
declarationString√<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; Optional&lt;T&gt; <mark class="method">getNextSibling</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeOptional<T>*getNextSibling2s
1org.jabref.model.TreeNode.getRelativeSibling(int)CALL8
,src\main\java\org\jabref\model\TreeNode.java÷ ÷(!2[
java.util.OptionalRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.java’ ’(2m
org.jabref.model.TreeNode.TRETURN_TYPE_ARGUMENT8
,src\main\java\org\jabref\model\TreeNode.java’ ’(à
.org.jabref.model.TreeNode.getPreviousSibling()METHOD8
,src\main\java\org\jabref\model\TreeNode.java‚ ‚()"
isFinalfalse"›
declarationString«<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; Optional&lt;T&gt; <mark class="method">getPreviousSibling</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeOptional<T>*getPreviousSibling2s
1org.jabref.model.TreeNode.getRelativeSibling(int)CALL8
,src\main\java\org\jabref\model\TreeNode.java„ „(!2[
java.util.OptionalRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.java‚ ‚(2m
org.jabref.model.TreeNode.TRETURN_TYPE_ARGUMENT8
,src\main\java\org\jabref\model\TreeNode.java‚ ‚(ã
1org.jabref.model.TreeNode.getRelativeSibling(int)METHOD8
,src\main\java\org\jabref\model\TreeNode.javaÈ È(*"
isFinalfalse"ä
declarationStringÙ<mark class="modifier">private </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; Optional&lt;T&gt; <mark class="method">getRelativeSibling</mark>(<mark class="modifier">int</mark> shiftIndex)"
isStaticfalse"
accessprivate"

isAbstractfalse"
typeOptional<T>*getRelativeSibling2\
java.util.Optional.empty()CALL8
,src\main\java\org\jabref\model\TreeNode.javaÎ Î(!2q
/org.jabref.model.TreeNode.getPositionInParent()CALL8
,src\main\java\org\jabref\model\TreeNode.javaÌ  Ì(32q
/org.jabref.model.TreeNode.childIndexExists(int)CALL8
,src\main\java\org\jabref\model\TreeNode.javaÔ Ô('2k
)org.jabref.model.TreeNode.getChildAt(int)CALL8
,src\main\java\org\jabref\model\TreeNode.java ((2\
java.util.Optional.empty()CALL8
,src\main\java\org\jabref\model\TreeNode.javaÚ  Ú(%2n
,org.jabref.model.TreeNode?parent@42.14:42.20CALL8
,src\main\java\org\jabref\model\TreeNode.javaÍ Í(2è
Morg.jabref.model.TreeNode.getRelativeSibling(int)?indexInParent@237.16:237.29CALL8
,src\main\java\org\jabref\model\TreeNode.javaÓ Ó(+2~
<org.jabref.model.TreeNode.getRelativeSibling(int)!shiftIndexCALL8
,src\main\java\org\jabref\model\TreeNode.javaÓ. Ó(82n
,org.jabref.model.TreeNode?parent@42.14:42.20CALL8
,src\main\java\org\jabref\model\TreeNode.javaÔ Ô(2ç
Korg.jabref.model.TreeNode.getRelativeSibling(int)?indexTarget@238.16:238.27CALL8
,src\main\java\org\jabref\model\TreeNode.javaÔ( Ô(32n
,org.jabref.model.TreeNode?parent@42.14:42.20CALL8
,src\main\java\org\jabref\model\TreeNode.java (2ç
Korg.jabref.model.TreeNode.getRelativeSibling(int)?indexTarget@238.16:238.27CALL8
,src\main\java\org\jabref\model\TreeNode.java) (42É
<org.jabref.model.TreeNode.getRelativeSibling(int)!shiftIndex	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaÈ/ È(92ñ
Morg.jabref.model.TreeNode.getRelativeSibling(int)?indexInParent@237.16:237.29DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaÌ Ì(2î
Korg.jabref.model.TreeNode.getRelativeSibling(int)?indexTarget@238.16:238.27DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaÓ Ó(2[
java.util.OptionalRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.javaÈ È(2m
org.jabref.model.TreeNode.TRETURN_TYPE_ARGUMENT8
,src\main\java\org\jabref\model\TreeNode.javaÈ È(õ
Morg.jabref.model.TreeNode.getRelativeSibling(int)?indexInParent@237.16:237.29VARIABLE8
,src\main\java\org\jabref\model\TreeNode.javaÌ Ì("
typeint"
isFinalfalse"ù
declarationStringá<mark class="modifier"> </mark><mark class="modifier">int</mark> <mark class="class-field">indexInParent</mark> = getPositionInParent()*indexInParent2E
intTYPE8
,src\main\java\org\jabref\model\TreeNode.javaÌ Ì(2q
/org.jabref.model.TreeNode.getPositionInParent()CALL8
,src\main\java\org\jabref\model\TreeNode.javaÌ  Ì(3π
Korg.jabref.model.TreeNode.getRelativeSibling(int)?indexTarget@238.16:238.27VARIABLE8
,src\main\java\org\jabref\model\TreeNode.javaÓ Ó("
typeint"
isFinalfalse"†
declarationStringä<mark class="modifier"> </mark><mark class="modifier">int</mark> <mark class="class-field">indexTarget</mark> = indexInParent + shiftIndex*indexTarget2E
intTYPE8
,src\main\java\org\jabref\model\TreeNode.javaÓ Ó(2è
Morg.jabref.model.TreeNode.getRelativeSibling(int)?indexInParent@237.16:237.29CALL8
,src\main\java\org\jabref\model\TreeNode.javaÓ Ó(+2~
<org.jabref.model.TreeNode.getRelativeSibling(int)!shiftIndexCALL8
,src\main\java\org\jabref\model\TreeNode.javaÓ. Ó(8∏
<org.jabref.model.TreeNode.getRelativeSibling(int)!shiftIndex	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaÈ/ È(9"
typeint"
isFinalfalse"A
declarationString,<mark class="modifier">int</mark> shiftIndex*
shiftIndex2E
intTYPE8
,src\main\java\org\jabref\model\TreeNode.javaÈ+ È(.Ã
%org.jabref.model.TreeNode.getParent()METHOD8
,src\main\java\org\jabref\model\TreeNode.java¸ ¸( "
isFinalfalse"‘
declarationStringæ<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; Optional&lt;T&gt; <mark class="method">getParent</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeOptional<T>*	getParent2b
 java.util.Optional.ofNullable(T)CALL8
,src\main\java\org\jabref\model\TreeNode.java˝ ˝("2n
,org.jabref.model.TreeNode?parent@42.14:42.20CALL8
,src\main\java\org\jabref\model\TreeNode.java˝# ˝()2[
java.util.OptionalRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.java¸ ¸(2m
org.jabref.model.TreeNode.TRETURN_TYPE_ARGUMENT8
,src\main\java\org\jabref\model\TreeNode.java¸ ¸(Î
&org.jabref.model.TreeNode.setParent(T)METHOD8
,src\main\java\org\jabref\model\TreeNode.javaà à("
isFinalfalse"
declarationString⁄<mark class="modifier">protected </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; <mark class="modifier">void</mark> <mark class="method">setParent</mark>(T parent)"
isStaticfalse"
access	protected"

isAbstractfalse"
typevoid*	setParent2o
-org.jabref.model.TreeNode.setParent(T)!parentCALL8
,src\main\java\org\jabref\model\TreeNode.javaâ â(2n
,org.jabref.model.TreeNode?parent@42.14:42.20CALL8
,src\main\java\org\jabref\model\TreeNode.javaâ â(2t
-org.jabref.model.TreeNode.setParent(T)!parent	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaà à(%2M
voidRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.javaà à(ó
-org.jabref.model.TreeNode.setParent(T)!parent	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaà à(%"	
typeT"
isFinalfalse"
declarationStringT parent*parent2]
org.jabref.model.TreeNode.TTYPE8
,src\main\java\org\jabref\model\TreeNode.javaà à(∆

)org.jabref.model.TreeNode.getChildAt(int)METHOD8
,src\main\java\org\jabref\model\TreeNode.javaì ì(!"
isFinalfalse"¸
declarationStringÊ<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; Optional&lt;T&gt; <mark class="method">getChildAt</mark>(<mark class="modifier">int</mark> index)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeOptional<T>*
getChildAt2q
/org.jabref.model.TreeNode.childIndexExists(int)CALL8
,src\main\java\org\jabref\model\TreeNode.javaî î(2\
java.util.Optional.empty()CALL8
,src\main\java\org\jabref\model\TreeNode.javaîU î(Z2q
/org.jabref.model.TreeNode.getChildAt(int)!indexCALL8
,src\main\java\org\jabref\model\TreeNode.javaî  î(%2p
.org.jabref.model.TreeNode?children@38.36:38.44CALL8
,src\main\java\org\jabref\model\TreeNode.javaî5 î(=2q
/org.jabref.model.TreeNode.getChildAt(int)!indexCALL8
,src\main\java\org\jabref\model\TreeNode.javaîB î(G2v
/org.jabref.model.TreeNode.getChildAt(int)!index	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaì& ì(+2[
java.util.OptionalRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.javaì ì(2m
org.jabref.model.TreeNode.TRETURN_TYPE_ARGUMENT8
,src\main\java\org\jabref\model\TreeNode.javaì ì(°
/org.jabref.model.TreeNode.getChildAt(int)!index	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaì& ì(+"
typeint"
isFinalfalse"<
declarationString'<mark class="modifier">int</mark> index*index2E
intTYPE8
,src\main\java\org\jabref\model\TreeNode.javaì" ì(%µ
/org.jabref.model.TreeNode.childIndexExists(int)METHOD8
,src\main\java\org\jabref\model\TreeNode.javaù ù(&"
isFinalfalse"ô
declarationStringÉ<mark class="modifier">protected </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; <mark class="modifier">boolean</mark> <mark class="method">childIndexExists</mark>(<mark class="modifier">int</mark> index)"
isStaticfalse"
access	protected"

isAbstractfalse"
typeboolean*childIndexExists2w
5org.jabref.model.TreeNode.childIndexExists(int)!indexCALL8
,src\main\java\org\jabref\model\TreeNode.javaû û(2w
5org.jabref.model.TreeNode.childIndexExists(int)!indexCALL8
,src\main\java\org\jabref\model\TreeNode.javaû  û(%2p
.org.jabref.model.TreeNode?children@38.36:38.44CALL8
,src\main\java\org\jabref\model\TreeNode.javaû( û(02|
5org.jabref.model.TreeNode.childIndexExists(int)!index	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaù+ ù(02P
booleanRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.javaù ù(ß
5org.jabref.model.TreeNode.childIndexExists(int)!index	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaù+ ù(0"
typeint"
isFinalfalse"<
declarationString'<mark class="modifier">int</mark> index*index2E
intTYPE8
,src\main\java\org\jabref\model\TreeNode.javaù' ù(*ı
"org.jabref.model.TreeNode.isRoot()METHOD8
,src\main\java\org\jabref\model\TreeNode.javaß ß("
isFinalfalse"Â
declarationStringœ<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; <mark class="modifier">boolean</mark> <mark class="method">isRoot</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeboolean*isRoot2n
,org.jabref.model.TreeNode?parent@42.14:42.20CALL8
,src\main\java\org\jabref\model\TreeNode.java® ®(2P
booleanRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.javaß ß(ﬁ
)org.jabref.model.TreeNode.isAncestorOf(T)METHOD8
,src\main\java\org\jabref\model\TreeNode.javaµ µ("
isFinalfalse"¯
declarationString‚<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; <mark class="modifier">boolean</mark> <mark class="method">isAncestorOf</mark>(T anotherNode)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeboolean*isAncestorOf2e
#java.util.Objects.requireNonNull(T)CALL8
,src\main\java\org\jabref\model\TreeNode.java∂ ∂(2k
)org.jabref.model.TreeNode.isAncestorOf(T)CALL8
,src\main\java\org\jabref\model\TreeNode.javaº º(&2w
5org.jabref.model.TreeNode.isAncestorOf(T)!anotherNodeCALL8
,src\main\java\org\jabref\model\TreeNode.java∂ ∂(*2w
5org.jabref.model.TreeNode.isAncestorOf(T)!anotherNodeCALL8
,src\main\java\org\jabref\model\TreeNode.java∏ ∏(2p
.org.jabref.model.TreeNode?children@38.36:38.44CALL8
,src\main\java\org\jabref\model\TreeNode.javaª ª(#2
=org.jabref.model.TreeNode.isAncestorOf(T)?child@315.19:315.24CALL8
,src\main\java\org\jabref\model\TreeNode.javaº º(2w
5org.jabref.model.TreeNode.isAncestorOf(T)!anotherNodeCALL8
,src\main\java\org\jabref\model\TreeNode.javaº' º(22|
5org.jabref.model.TreeNode.isAncestorOf(T)!anotherNode	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaµ" µ(-2Ü
=org.jabref.model.TreeNode.isAncestorOf(T)?child@315.19:315.24DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaª ª(2P
booleanRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.javaµ µ(‰
=org.jabref.model.TreeNode.isAncestorOf(T)?child@315.19:315.24VARIABLE8
,src\main\java\org\jabref\model\TreeNode.javaª ª("	
typeT"
isFinalfalse"\
declarationStringG<mark class="modifier"> </mark>T <mark class="class-field">child</mark>*child2]
org.jabref.model.TreeNode.TTYPE8
,src\main\java\org\jabref\model\TreeNode.javaª ª(©
5org.jabref.model.TreeNode.isAncestorOf(T)!anotherNode	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaµ" µ(-"	
typeT"
isFinalfalse""
declarationStringT anotherNode*anotherNode2]
org.jabref.model.TreeNode.TTYPE8
,src\main\java\org\jabref\model\TreeNode.javaµ  µ(!ü
#org.jabref.model.TreeNode.getRoot()METHOD8
,src\main\java\org\jabref\model\TreeNode.java   ("
isFinalfalse"¬
declarationString¨<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; T <mark class="method">getRoot</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"	
typeT*getRoot2e
#org.jabref.model.TreeNode.getRoot()CALL8
,src\main\java\org\jabref\model\TreeNode.javaŒ Œ(!2n
,org.jabref.model.TreeNode?parent@42.14:42.20CALL8
,src\main\java\org\jabref\model\TreeNode.javaÀ À(2n
,org.jabref.model.TreeNode?parent@42.14:42.20CALL8
,src\main\java\org\jabref\model\TreeNode.javaŒ Œ(2J
TRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.java   (¯
"org.jabref.model.TreeNode.isLeaf()METHOD8
,src\main\java\org\jabref\model\TreeNode.java◊ ◊("
isFinalfalse"Â
declarationStringœ<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; <mark class="modifier">boolean</mark> <mark class="method">isLeaf</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeboolean*isLeaf2q
/org.jabref.model.TreeNode.getNumberOfChildren()CALL8
,src\main\java\org\jabref\model\TreeNode.javaÿ ÿ("2P
booleanRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.java◊ ◊(Ê
,org.jabref.model.TreeNode.removeFromParent()METHOD8
,src\main\java\org\jabref\model\TreeNode.javaﬂ ﬂ( "
isFinalfalse"Ï
declarationString÷<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; <mark class="modifier">void</mark> <mark class="method">removeFromParent</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*removeFromParent2j
(org.jabref.model.TreeNode.removeChild(T)CALL8
,src\main\java\org\jabref\model\TreeNode.java· ·(2n
,org.jabref.model.TreeNode?parent@42.14:42.20CALL8
,src\main\java\org\jabref\model\TreeNode.java‡ ‡(2n
,org.jabref.model.TreeNode?parent@42.14:42.20CALL8
,src\main\java\org\jabref\model\TreeNode.java· ·(2M
voidRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.javaﬂ ﬂ(˛
-org.jabref.model.TreeNode.removeAllChildren()METHOD8
,src\main\java\org\jabref\model\TreeNode.javaÈ È(!"
isFinalfalse"Ì
declarationString◊<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; <mark class="modifier">void</mark> <mark class="method">removeAllChildren</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*removeAllChildren2q
/org.jabref.model.TreeNode.getNumberOfChildren()CALL8
,src\main\java\org\jabref\model\TreeNode.javaÍ Í("2l
*org.jabref.model.TreeNode.removeChild(int)CALL8
,src\main\java\org\jabref\model\TreeNode.javaÎ Î(2M
voidRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.javaÈ È(Ò
)org.jabref.model.TreeNode.getFirstChild()METHOD8
,src\main\java\org\jabref\model\TreeNode.javaÙ Ù($"
isFinalfalse"ÿ
declarationString¬<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; Optional&lt;T&gt; <mark class="method">getFirstChild</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeOptional<T>*getFirstChild2k
)org.jabref.model.TreeNode.getChildAt(int)CALL8
,src\main\java\org\jabref\model\TreeNode.javaı ı(2[
java.util.OptionalRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.javaÙ Ù(2m
org.jabref.model.TreeNode.TRETURN_TYPE_ARGUMENT8
,src\main\java\org\jabref\model\TreeNode.javaÙ Ù(Û
(org.jabref.model.TreeNode.getLastChild()METHOD8
,src\main\java\org\jabref\model\TreeNode.java˝ ˝(#"
isFinalfalse"◊
declarationString¡<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; Optional&lt;T&gt; <mark class="method">getLastChild</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeOptional<T>*getLastChild2p
.org.jabref.model.TreeNode?children@38.36:38.44CALL8
,src\main\java\org\jabref\model\TreeNode.java˛ ˛("2[
java.util.OptionalRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.java˝ ˝(2m
org.jabref.model.TreeNode.TRETURN_TYPE_ARGUMENT8
,src\main\java\org\jabref\model\TreeNode.java˝ ˝(Ç	
-org.jabref.model.TreeNode.isNodeDescendant(T)METHOD8
,src\main\java\org\jabref\model\TreeNode.javaå å(#"
isFinalfalse"¸
declarationStringÊ<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; <mark class="modifier">boolean</mark> <mark class="method">isNodeDescendant</mark>(T anotherNode)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeboolean*isNodeDescendant2e
#java.util.Objects.requireNonNull(T)CALL8
,src\main\java\org\jabref\model\TreeNode.javaç ç(2k
)org.jabref.model.TreeNode.isAncestorOf(T)CALL8
,src\main\java\org\jabref\model\TreeNode.javaè è( 2{
9org.jabref.model.TreeNode.isNodeDescendant(T)!anotherNodeCALL8
,src\main\java\org\jabref\model\TreeNode.javaç ç(*2{
9org.jabref.model.TreeNode.isNodeDescendant(T)!anotherNodeCALL8
,src\main\java\org\jabref\model\TreeNode.javaè! è(,2Ä
9org.jabref.model.TreeNode.isNodeDescendant(T)!anotherNode	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaå& å(12P
booleanRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.javaå å(≠
9org.jabref.model.TreeNode.isNodeDescendant(T)!anotherNode	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaå& å(1"	
typeT"
isFinalfalse""
declarationStringT anotherNode*anotherNode2]
org.jabref.model.TreeNode.TTYPE8
,src\main\java\org\jabref\model\TreeNode.javaå$ å(%ã
'org.jabref.model.TreeNode.getChildren()METHOD8
,src\main\java\org\jabref\model\TreeNode.javaú ú(("
isFinalfalse"‹
declarationString∆<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; ObservableList&lt;T&gt; <mark class="method">getChildren</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeObservableList<T>*getChildren2p
.org.jabref.model.TreeNode?children@38.36:38.44CALL8
,src\main\java\org\jabref\model\TreeNode.javaù8 ù(@2j
!javafx.collections.ObservableListRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.javaú ú(2m
org.jabref.model.TreeNode.TRETURN_TYPE_ARGUMENT8
,src\main\java\org\jabref\model\TreeNode.javaú ú(ü
(org.jabref.model.TreeNode.removeChild(T)METHOD8
,src\main\java\org\jabref\model\TreeNode.java• •("
isFinalfalse"Ó
declarationStringÿ<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; <mark class="modifier">void</mark> <mark class="method">removeChild</mark>(T child)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*removeChild2e
#java.util.Objects.requireNonNull(T)CALL8
,src\main\java\org\jabref\model\TreeNode.java¶ ¶(2h
&org.jabref.model.TreeNode.setParent(T)CALL8
,src\main\java\org\jabref\model\TreeNode.java© ©(2z
8org.jabref.model.TreeNode.notifyAboutDescendantChange(T)CALL8
,src\main\java\org\jabref\model\TreeNode.java´ ´(#2p
.org.jabref.model.TreeNode.removeChild(T)!childCALL8
,src\main\java\org\jabref\model\TreeNode.java¶ ¶($2p
.org.jabref.model.TreeNode?children@38.36:38.44CALL8
,src\main\java\org\jabref\model\TreeNode.java® ®(2p
.org.jabref.model.TreeNode.removeChild(T)!childCALL8
,src\main\java\org\jabref\model\TreeNode.java® ®(2p
.org.jabref.model.TreeNode.removeChild(T)!childCALL8
,src\main\java\org\jabref\model\TreeNode.java© ©(2u
.org.jabref.model.TreeNode.removeChild(T)!child	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.java• •(#2M
voidRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.java• •(ñ
.org.jabref.model.TreeNode.removeChild(T)!child	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.java• •(#"	
typeT"
isFinalfalse"
declarationStringT child*child2]
org.jabref.model.TreeNode.TTYPE8
,src\main\java\org\jabref\model\TreeNode.java• •(Ω
*org.jabref.model.TreeNode.removeChild(int)METHOD8
,src\main\java\org\jabref\model\TreeNode.javaµ µ("
isFinalfalse"ì
declarationString˝<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; <mark class="modifier">void</mark> <mark class="method">removeChild</mark>(<mark class="modifier">int</mark> childIndex)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*removeChild2k
)org.jabref.model.TreeNode.getChildAt(int)CALL8
,src\main\java\org\jabref\model\TreeNode.java∂ ∂(&2`
java.util.Optional.isPresent()CALL8
,src\main\java\org\jabref\model\TreeNode.java∑ ∑(2h
&org.jabref.model.TreeNode.setParent(T)CALL8
,src\main\java\org\jabref\model\TreeNode.javaπ π(!2Z
java.util.Optional.get()CALL8
,src\main\java\org\jabref\model\TreeNode.javaπ π(2z
8org.jabref.model.TreeNode.notifyAboutDescendantChange(T)CALL8
,src\main\java\org\jabref\model\TreeNode.javaº º(#2w
5org.jabref.model.TreeNode.removeChild(int)!childIndexCALL8
,src\main\java\org\jabref\model\TreeNode.java∂' ∂(12Ä
>org.jabref.model.TreeNode.removeChild(int)?child@438.20:438.25CALL8
,src\main\java\org\jabref\model\TreeNode.java∑ ∑(2p
.org.jabref.model.TreeNode?children@38.36:38.44CALL8
,src\main\java\org\jabref\model\TreeNode.java∏ ∏(2w
5org.jabref.model.TreeNode.removeChild(int)!childIndexCALL8
,src\main\java\org\jabref\model\TreeNode.java∏ ∏(&2Ä
>org.jabref.model.TreeNode.removeChild(int)?child@438.20:438.25CALL8
,src\main\java\org\jabref\model\TreeNode.javaπ π(2|
5org.jabref.model.TreeNode.removeChild(int)!childIndex	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaµ  µ(*2á
>org.jabref.model.TreeNode.removeChild(int)?child@438.20:438.25DECLARATION8
,src\main\java\org\jabref\model\TreeNode.java∂ ∂(2M
voidRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.javaµ µ(◊
>org.jabref.model.TreeNode.removeChild(int)?child@438.20:438.25VARIABLE8
,src\main\java\org\jabref\model\TreeNode.java∂ ∂("
typeOptional<T>"
isFinalfalse"
declarationStringj<mark class="modifier"> </mark>Optional<T> <mark class="class-field">child</mark> = getChildAt(childIndex)*child2T
java.util.OptionalTYPE8
,src\main\java\org\jabref\model\TreeNode.java∂ ∂(2f
org.jabref.model.TreeNode.TTYPE_ARGUMENT8
,src\main\java\org\jabref\model\TreeNode.java∂ ∂(2k
)org.jabref.model.TreeNode.getChildAt(int)CALL8
,src\main\java\org\jabref\model\TreeNode.java∂ ∂(&2w
5org.jabref.model.TreeNode.removeChild(int)!childIndexCALL8
,src\main\java\org\jabref\model\TreeNode.java∂' ∂(1±
5org.jabref.model.TreeNode.removeChild(int)!childIndex	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaµ  µ(*"
typeint"
isFinalfalse"A
declarationString,<mark class="modifier">int</mark> childIndex*
childIndex2E
intTYPE8
,src\main\java\org\jabref\model\TreeNode.javaµ µ(∏
%org.jabref.model.TreeNode.addChild(T)METHOD8
,src\main\java\org\jabref\model\TreeNode.java∆ ∆("
isFinalfalse" 
declarationString¥<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; T <mark class="method">addChild</mark>(T child)"
isStaticfalse"
accesspublic"

isAbstractfalse"	
typeT*addChild2m
+org.jabref.model.TreeNode.addChild(T)!childCALL8
,src\main\java\org\jabref\model\TreeNode.java« «(2p
.org.jabref.model.TreeNode?children@38.36:38.44CALL8
,src\main\java\org\jabref\model\TreeNode.java« «('2r
+org.jabref.model.TreeNode.addChild(T)!child	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.java∆ ∆(2J
TRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.java∆ ∆(ì
+org.jabref.model.TreeNode.addChild(T)!child	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.java∆ ∆("	
typeT"
isFinalfalse"
declarationStringT child*child2]
org.jabref.model.TreeNode.TTYPE8
,src\main\java\org\jabref\model\TreeNode.java∆ ∆(ù
*org.jabref.model.TreeNode.addChild(T, int)METHOD8
,src\main\java\org\jabref\model\TreeNode.java” ”("
isFinalfalse"Ø
declarationStringô<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; T <mark class="method">addChild</mark>(T child<mark class="modifier"><mark class="modifier">,</mark></mark> <mark class="modifier">int</mark> index)"
isStaticfalse"
accesspublic"

isAbstractfalse"	
typeT*addChild2e
#java.util.Objects.requireNonNull(T)CALL8
,src\main\java\org\jabref\model\TreeNode.java‘ ‘(2`
java.util.Optional.isPresent()CALL8
,src\main\java\org\jabref\model\TreeNode.java’ ’('2g
%org.jabref.model.TreeNode.getParent()CALL8
,src\main\java\org\jabref\model\TreeNode.java’ ’(2h
&org.jabref.model.TreeNode.setParent(T)CALL8
,src\main\java\org\jabref\model\TreeNode.javaŸ Ÿ(2z
8org.jabref.model.TreeNode.notifyAboutDescendantChange(T)CALL8
,src\main\java\org\jabref\model\TreeNode.java‹ ‹(#2ô
Wjava.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String)CALL8
,src\main\java\org\jabref\model\TreeNode.java÷ ÷(32r
0org.jabref.model.TreeNode.addChild(T, int)!childCALL8
,src\main\java\org\jabref\model\TreeNode.java‘ ‘($2r
0org.jabref.model.TreeNode.addChild(T, int)!childCALL8
,src\main\java\org\jabref\model\TreeNode.java’ ’(2r
0org.jabref.model.TreeNode.addChild(T, int)!childCALL8
,src\main\java\org\jabref\model\TreeNode.javaŸ Ÿ(2p
.org.jabref.model.TreeNode?children@38.36:38.44CALL8
,src\main\java\org\jabref\model\TreeNode.java⁄ ⁄(2r
0org.jabref.model.TreeNode.addChild(T, int)!indexCALL8
,src\main\java\org\jabref\model\TreeNode.java⁄ ⁄(2r
0org.jabref.model.TreeNode.addChild(T, int)!childCALL8
,src\main\java\org\jabref\model\TreeNode.java⁄ ⁄(!2r
0org.jabref.model.TreeNode.addChild(T, int)!childCALL8
,src\main\java\org\jabref\model\TreeNode.javaﬁ ﬁ(2w
0org.jabref.model.TreeNode.addChild(T, int)!child	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.java” ”(2w
0org.jabref.model.TreeNode.addChild(T, int)!index	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.java”# ”((2J
TRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.java” ”(ò
0org.jabref.model.TreeNode.addChild(T, int)!child	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.java” ”("	
typeT"
isFinalfalse"
declarationStringT child*child2]
org.jabref.model.TreeNode.TTYPE8
,src\main\java\org\jabref\model\TreeNode.java” ”(¢
0org.jabref.model.TreeNode.addChild(T, int)!index	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.java”# ”(("
typeint"
isFinalfalse"<
declarationString'<mark class="modifier">int</mark> index*index2E
intTYPE8
,src\main\java\org\jabref\model\TreeNode.java” ”("Ã
3org.jabref.model.TreeNode.moveAllChildrenTo(T, int)METHOD8
,src\main\java\org\jabref\model\TreeNode.javaÎ Î(!"
isFinalfalse"‡
declarationString <mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; <mark class="modifier">void</mark> <mark class="method">moveAllChildrenTo</mark>(T target<mark class="modifier"><mark class="modifier">,</mark></mark> <mark class="modifier">int</mark> targetIndex)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*moveAllChildrenTo2q
/org.jabref.model.TreeNode.getNumberOfChildren()CALL8
,src\main\java\org\jabref\model\TreeNode.javaÏ Ï("2j
(org.jabref.model.TreeNode.moveTo(T, int)CALL8
,src\main\java\org\jabref\model\TreeNode.javaÌ! Ì('2Z
java.util.Optional.get()CALL8
,src\main\java\org\jabref\model\TreeNode.javaÌ Ì(2j
(org.jabref.model.TreeNode.getLastChild()CALL8
,src\main\java\org\jabref\model\TreeNode.javaÌ Ì(2|
:org.jabref.model.TreeNode.moveAllChildrenTo(T, int)!targetCALL8
,src\main\java\org\jabref\model\TreeNode.javaÌ( Ì(.2Å
?org.jabref.model.TreeNode.moveAllChildrenTo(T, int)!targetIndexCALL8
,src\main\java\org\jabref\model\TreeNode.javaÌ0 Ì(;2Å
:org.jabref.model.TreeNode.moveAllChildrenTo(T, int)!target	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaÎ$ Î(*2Ü
?org.jabref.model.TreeNode.moveAllChildrenTo(T, int)!targetIndex	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaÎ0 Î(;2M
voidRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.javaÎ Î(§
:org.jabref.model.TreeNode.moveAllChildrenTo(T, int)!target	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaÎ$ Î(*"	
typeT"
isFinalfalse"
declarationStringT target*target2]
org.jabref.model.TreeNode.TTYPE8
,src\main\java\org\jabref\model\TreeNode.javaÎ" Î(#Ω
?org.jabref.model.TreeNode.moveAllChildrenTo(T, int)!targetIndex	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaÎ0 Î(;"
typeint"
isFinalfalse"B
declarationString-<mark class="modifier">int</mark> targetIndex*targetIndex2E
intTYPE8
,src\main\java\org\jabref\model\TreeNode.javaÎ, Î(/œ3
Porg.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)METHOD8
,src\main\java\org\jabref\model\TreeNode.java¸ ¸("
isFinalfalse"˚
declarationStringÂ<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; <mark class="modifier">void</mark> <mark class="method">sortChildren</mark>(Comparator&lt;? super T&gt; comparator<mark class="modifier"><mark class="modifier">,</mark></mark> <mark class="modifier">boolean</mark> recursive)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*sortChildren2e
#java.util.Objects.requireNonNull(T)CALL8
,src\main\java\org\jabref\model\TreeNode.java˝ ˝(2d
"org.jabref.model.TreeNode.isLeaf()CALL8
,src\main\java\org\jabref\model\TreeNode.javaˇ ˇ(2q
/org.jabref.model.TreeNode.getNumberOfChildren()CALL8
,src\main\java\org\jabref\model\TreeNode.javaÉ É(#2Z
java.util.Optional.get()CALL8
,src\main\java\org\jabref\model\TreeNode.javaâ- â(02k
)org.jabref.model.TreeNode.getChildAt(int)CALL8
,src\main\java\org\jabref\model\TreeNode.javaâ â(%2Z
java.util.Optional.get()CALL8
,src\main\java\org\jabref\model\TreeNode.javaä) ä(,2k
)org.jabref.model.TreeNode.getChildAt(int)CALL8
,src\main\java\org\jabref\model\TreeNode.javaä ä(%2d
"java.util.Comparator.compare(T, T)CALL8
,src\main\java\org\jabref\model\TreeNode.javaã ã(&2j
(org.jabref.model.TreeNode.moveTo(T, int)CALL8
,src\main\java\org\jabref\model\TreeNode.javaå å(!2i
'org.jabref.model.TreeNode.getChildren()CALL8
,src\main\java\org\jabref\model\TreeNode.javaí í(&2í
Porg.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)CALL8
,src\main\java\org\jabref\model\TreeNode.javaì ì("2ù
[org.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)!comparatorCALL8
,src\main\java\org\jabref\model\TreeNode.java˝ ˝()2¢
`org.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?j@515.12:515.13CALL8
,src\main\java\org\jabref\model\TreeNode.javaÖ Ö(2≠
korg.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?lastModified@516.12:516.24CALL8
,src\main\java\org\jabref\model\TreeNode.javaÜ Ü(2¢
`org.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?j@515.12:515.13CALL8
,src\main\java\org\jabref\model\TreeNode.javaÜ Ü(2¢
`org.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?j@515.12:515.13CALL8
,src\main\java\org\jabref\model\TreeNode.javaá á(2¢
`org.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?i@520.21:520.22CALL8
,src\main\java\org\jabref\model\TreeNode.javaà à(2≠
korg.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?lastModified@516.12:516.24CALL8
,src\main\java\org\jabref\model\TreeNode.javaà  à(,2¢
`org.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?i@520.21:520.22CALL8
,src\main\java\org\jabref\model\TreeNode.javaà0 à(12¢
`org.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?i@520.21:520.22CALL8
,src\main\java\org\jabref\model\TreeNode.javaâ& â('2¢
`org.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?i@520.21:520.22CALL8
,src\main\java\org\jabref\model\TreeNode.javaä& ä('2ù
[org.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)!comparatorCALL8
,src\main\java\org\jabref\model\TreeNode.javaã ã(2ß
eorg.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?child1@521.18:521.24CALL8
,src\main\java\org\jabref\model\TreeNode.javaã' ã(-2ß
eorg.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?child2@522.18:522.24CALL8
,src\main\java\org\jabref\model\TreeNode.javaã/ ã(52ß
eorg.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?child1@521.18:521.24CALL8
,src\main\java\org\jabref\model\TreeNode.javaå å(2¢
`org.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?i@520.21:520.22CALL8
,src\main\java\org\jabref\model\TreeNode.javaå, å(-2¢
`org.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?j@515.12:515.13CALL8
,src\main\java\org\jabref\model\TreeNode.javaç ç(2¢
`org.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?i@520.21:520.22CALL8
,src\main\java\org\jabref\model\TreeNode.javaç ç(2ú
Zorg.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)!recursiveCALL8
,src\main\java\org\jabref\model\TreeNode.javaë ë(2¶
dorg.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?child@530.19:530.24CALL8
,src\main\java\org\jabref\model\TreeNode.javaì ì(2ù
[org.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)!comparatorCALL8
,src\main\java\org\jabref\model\TreeNode.javaì# ì(-2¢
[org.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)!comparator	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.java¸3 ¸(=2°
Zorg.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)!recursive	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.java¸G ¸(P2©
`org.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?j@515.12:515.13DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaÉ É(2¥
korg.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?lastModified@516.12:516.24DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaÑ Ñ(2©
`org.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?i@520.21:520.22DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaà à(2Æ
eorg.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?child1@521.18:521.24DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaâ â(2Æ
eorg.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?child2@522.18:522.24DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaä ä(2≠
dorg.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?child@530.19:530.24DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaí í(2M
voidRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.java¸ ¸(ô
`org.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?j@515.12:515.13VARIABLE8
,src\main\java\org\jabref\model\TreeNode.javaÉ É("
typeint"
isFinalfalse"î
declarationString<mark class="modifier"> </mark><mark class="modifier">int</mark> <mark class="class-field">j</mark> = getNumberOfChildren() - 1*j2E
intTYPE8
,src\main\java\org\jabref\model\TreeNode.javaÉ É(2q
/org.jabref.model.TreeNode.getNumberOfChildren()CALL8
,src\main\java\org\jabref\model\TreeNode.javaÉ É(#´
korg.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?lastModified@516.12:516.24VARIABLE8
,src\main\java\org\jabref\model\TreeNode.javaÑ Ñ("
typeint"
isFinalfalse"É
declarationStringn<mark class="modifier"> </mark><mark class="modifier">int</mark> <mark class="class-field">lastModified</mark>*lastModified2E
intTYPE8
,src\main\java\org\jabref\model\TreeNode.javaÑ Ñ(ç
`org.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?i@520.21:520.22VARIABLE8
,src\main\java\org\jabref\model\TreeNode.javaà à("
typeint"
isFinalfalse"|
declarationStringg<mark class="modifier"> </mark><mark class="modifier">int</mark> <mark class="class-field">i</mark> = 1*i2E
intTYPE8
,src\main\java\org\jabref\model\TreeNode.javaà à(ñ
eorg.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?child1@521.18:521.24VARIABLE8
,src\main\java\org\jabref\model\TreeNode.javaâ â("	
typeT"
isFinalfalse"w
declarationStringb<mark class="modifier"> </mark>T <mark class="class-field">child1</mark> = getChildAt(i - 1).get()*child12]
org.jabref.model.TreeNode.TTYPE8
,src\main\java\org\jabref\model\TreeNode.javaâ â(2Z
java.util.Optional.get()CALL8
,src\main\java\org\jabref\model\TreeNode.javaâ- â(02k
)org.jabref.model.TreeNode.getChildAt(int)CALL8
,src\main\java\org\jabref\model\TreeNode.javaâ â(%2¢
`org.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?i@520.21:520.22CALL8
,src\main\java\org\jabref\model\TreeNode.javaâ& â('í
eorg.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?child2@522.18:522.24VARIABLE8
,src\main\java\org\jabref\model\TreeNode.javaä ä("	
typeT"
isFinalfalse"s
declarationString^<mark class="modifier"> </mark>T <mark class="class-field">child2</mark> = getChildAt(i).get()*child22]
org.jabref.model.TreeNode.TTYPE8
,src\main\java\org\jabref\model\TreeNode.javaä ä(2Z
java.util.Optional.get()CALL8
,src\main\java\org\jabref\model\TreeNode.javaä) ä(,2k
)org.jabref.model.TreeNode.getChildAt(int)CALL8
,src\main\java\org\jabref\model\TreeNode.javaä ä(%2¢
`org.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?i@520.21:520.22CALL8
,src\main\java\org\jabref\model\TreeNode.javaä& ä('ã
dorg.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)?child@530.19:530.24VARIABLE8
,src\main\java\org\jabref\model\TreeNode.javaí í("	
typeT"
isFinalfalse"\
declarationStringG<mark class="modifier"> </mark>T <mark class="class-field">child</mark>*child2]
org.jabref.model.TreeNode.TTYPE8
,src\main\java\org\jabref\model\TreeNode.javaí í(Ó
[org.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)!comparator	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.java¸3 ¸(="
typeComparator<? super T>"
isFinalfalse"5
declarationString Comparator<? super T> comparator*
comparator2V
java.util.ComparatorTYPE8
,src\main\java\org\jabref\model\TreeNode.java¸ ¸('‡
Zorg.jabref.model.TreeNode.sortChildren(java.util.Comparator<? super T>, boolean)!recursive	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.java¸G ¸(P"
typeboolean"
isFinalfalse"D
declarationString/<mark class="modifier">boolean</mark> recursive*	recursive2I
booleanTYPE8
,src\main\java\org\jabref\model\TreeNode.java¸? ¸(F¬
(org.jabref.model.TreeNode.moveTo(T, int)METHOD8
,src\main\java\org\jabref\model\TreeNode.java£ £("
isFinalfalse"’
declarationStringø<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; <mark class="modifier">void</mark> <mark class="method">moveTo</mark>(T target<mark class="modifier"><mark class="modifier">,</mark></mark> <mark class="modifier">int</mark> targetIndex)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*moveTo2e
#java.util.Objects.requireNonNull(T)CALL8
,src\main\java\org\jabref\model\TreeNode.java§ §(2k
)org.jabref.model.TreeNode.isAncestorOf(T)CALL8
,src\main\java\org\jabref\model\TreeNode.javaß ß(2g
%org.jabref.model.TreeNode.getParent()CALL8
,src\main\java\org\jabref\model\TreeNode.java¨  ¨()2`
java.util.Optional.isPresent()CALL8
,src\main\java\org\jabref\model\TreeNode.java≠ ≠(2j
(org.jabref.model.TreeNode.removeChild(T)CALL8
,src\main\java\org\jabref\model\TreeNode.javaÆ Æ('2Z
java.util.Optional.get()CALL8
,src\main\java\org\jabref\model\TreeNode.javaÆ Æ(2l
*org.jabref.model.TreeNode.addChild(T, int)CALL8
,src\main\java\org\jabref\model\TreeNode.java≤ ≤(2ô
Wjava.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String)CALL8
,src\main\java\org\jabref\model\TreeNode.java® ®(32q
/org.jabref.model.TreeNode.moveTo(T, int)!targetCALL8
,src\main\java\org\jabref\model\TreeNode.java§ §(%2q
/org.jabref.model.TreeNode.moveTo(T, int)!targetCALL8
,src\main\java\org\jabref\model\TreeNode.javaß ß($2Ç
@org.jabref.model.TreeNode.moveTo(T, int)?oldParent@556.20:556.29CALL8
,src\main\java\org\jabref\model\TreeNode.java≠ ≠(2Ç
@org.jabref.model.TreeNode.moveTo(T, int)?oldParent@556.20:556.29CALL8
,src\main\java\org\jabref\model\TreeNode.javaÆ Æ(2q
/org.jabref.model.TreeNode.moveTo(T, int)!targetCALL8
,src\main\java\org\jabref\model\TreeNode.java≤ ≤(2v
4org.jabref.model.TreeNode.moveTo(T, int)!targetIndexCALL8
,src\main\java\org\jabref\model\TreeNode.java≤" ≤(-2v
/org.jabref.model.TreeNode.moveTo(T, int)!target	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.java£ £(2{
4org.jabref.model.TreeNode.moveTo(T, int)!targetIndex	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.java£% £(02â
@org.jabref.model.TreeNode.moveTo(T, int)?oldParent@556.20:556.29DECLARATION8
,src\main\java\org\jabref\model\TreeNode.java¨ ¨(2M
voidRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.java£ £(Ÿ
@org.jabref.model.TreeNode.moveTo(T, int)?oldParent@556.20:556.29VARIABLE8
,src\main\java\org\jabref\model\TreeNode.java¨ ¨("
typeOptional<T>"
isFinalfalse"x
declarationStringc<mark class="modifier"> </mark>Optional<T> <mark class="class-field">oldParent</mark> = getParent()*	oldParent2T
java.util.OptionalTYPE8
,src\main\java\org\jabref\model\TreeNode.java¨ ¨(2f
org.jabref.model.TreeNode.TTYPE_ARGUMENT8
,src\main\java\org\jabref\model\TreeNode.java¨ ¨(2g
%org.jabref.model.TreeNode.getParent()CALL8
,src\main\java\org\jabref\model\TreeNode.java¨  ¨()ô
/org.jabref.model.TreeNode.moveTo(T, int)!target	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.java£ £("	
typeT"
isFinalfalse"
declarationStringT target*target2]
org.jabref.model.TreeNode.TTYPE8
,src\main\java\org\jabref\model\TreeNode.java£ £(≤
4org.jabref.model.TreeNode.moveTo(T, int)!targetIndex	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.java£% £(0"
typeint"
isFinalfalse"B
declarationString-<mark class="modifier">int</mark> targetIndex*targetIndex2E
intTYPE8
,src\main\java\org\jabref\model\TreeNode.java£! £($ë
'org.jabref.model.TreeNode.copySubtree()METHOD8
,src\main\java\org\jabref\model\TreeNode.java∫ ∫("
isFinalfalse"∆
declarationString∞<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; T <mark class="method">copySubtree</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"	
typeT*copySubtree2f
$org.jabref.model.TreeNode.copyNode()CALL8
,src\main\java\org\jabref\model\TreeNode.javaª ª(2i
'org.jabref.model.TreeNode.getChildren()CALL8
,src\main\java\org\jabref\model\TreeNode.javaº º("2e
#org.jabref.model.TreeNode.moveTo(T)CALL8
,src\main\java\org\jabref\model\TreeNode.javaΩ  Ω(&2i
'org.jabref.model.TreeNode.copySubtree()CALL8
,src\main\java\org\jabref\model\TreeNode.javaΩ Ω(2}
;org.jabref.model.TreeNode.copySubtree()?child@572.15:572.20CALL8
,src\main\java\org\jabref\model\TreeNode.javaΩ Ω(2|
:org.jabref.model.TreeNode.copySubtree()?copy@571.10:571.14CALL8
,src\main\java\org\jabref\model\TreeNode.javaΩ' Ω(+2|
:org.jabref.model.TreeNode.copySubtree()?copy@571.10:571.14CALL8
,src\main\java\org\jabref\model\TreeNode.javaø ø(2É
:org.jabref.model.TreeNode.copySubtree()?copy@571.10:571.14DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaª
 ª(2Ñ
;org.jabref.model.TreeNode.copySubtree()?child@572.15:572.20DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaº º(2J
TRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.java∫ ∫(‘
:org.jabref.model.TreeNode.copySubtree()?copy@571.10:571.14VARIABLE8
,src\main\java\org\jabref\model\TreeNode.javaª
 ª("	
typeT"
isFinalfalse"h
declarationStringS<mark class="modifier"> </mark>T <mark class="class-field">copy</mark> = copyNode()*copy2]
org.jabref.model.TreeNode.TTYPE8
,src\main\java\org\jabref\model\TreeNode.javaª ª(	2f
$org.jabref.model.TreeNode.copyNode()CALL8
,src\main\java\org\jabref\model\TreeNode.javaª ª(‚
;org.jabref.model.TreeNode.copySubtree()?child@572.15:572.20VARIABLE8
,src\main\java\org\jabref\model\TreeNode.javaº º("	
typeT"
isFinalfalse"\
declarationStringG<mark class="modifier"> </mark>T <mark class="class-field">child</mark>*child2]
org.jabref.model.TreeNode.TTYPE8
,src\main\java\org\jabref\model\TreeNode.javaº º(Å
$org.jabref.model.TreeNode.copyNode()METHOD8
,src\main\java\org\jabref\model\TreeNode.java« «("
isFinalfalse"Í
declarationString‘<mark class="modifier">public </mark><mark class="modifier">abstract </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; T <mark class="method">copyNode</mark>()"
isStaticfalse"
accesspublic"

isAbstracttrue"	
typeT*copyNode2J
TRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.java« «(”

Vorg.jabref.model.TreeNode.subscribeToDescendantChanged(java.util.function.Consumer<T>)METHOD8
,src\main\java\org\jabref\model\TreeNode.java” ”(,"
isFinalfalse"î
declarationString˛<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; <mark class="modifier">void</mark> <mark class="method">subscribeToDescendantChanged</mark>(Consumer&lt;T&gt; subscriber)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*subscribeToDescendantChanged2ç
Kjava.util.function.Consumer.andThen(java.util.function.Consumer<? super T>)CALL8
,src\main\java\org\jabref\model\TreeNode.java‘2 ‘(92{
9org.jabref.model.TreeNode?onDescendantChanged@46.24:46.43CALL8
,src\main\java\org\jabref\model\TreeNode.java‘ ‘(2{
9org.jabref.model.TreeNode?onDescendantChanged@46.24:46.43CALL8
,src\main\java\org\jabref\model\TreeNode.java‘ ‘(12£
aorg.jabref.model.TreeNode.subscribeToDescendantChanged(java.util.function.Consumer<T>)!subscriberCALL8
,src\main\java\org\jabref\model\TreeNode.java‘: ‘(D2®
aorg.jabref.model.TreeNode.subscribeToDescendantChanged(java.util.function.Consumer<T>)!subscriber	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.java”9 ”(C2M
voidRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.java” ”(œ
aorg.jabref.model.TreeNode.subscribeToDescendantChanged(java.util.function.Consumer<T>)!subscriber	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.java”9 ”(C"
typeConsumer<T>"
isFinalfalse"+
declarationStringConsumer<T> subscriber*
subscriber2]
java.util.function.ConsumerTYPE8
,src\main\java\org\jabref\model\TreeNode.java”- ”(52f
org.jabref.model.TreeNode.TTYPE_ARGUMENT8
,src\main\java\org\jabref\model\TreeNode.java”6 ”(7ì
8org.jabref.model.TreeNode.notifyAboutDescendantChange(T)METHOD8
,src\main\java\org\jabref\model\TreeNode.java‹ ‹(."
isFinalfalse"Ç
declarationStringÏ<mark class="modifier">protected </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; <mark class="modifier">void</mark> <mark class="method">notifyAboutDescendantChange</mark>(T source)"
isStaticfalse"
access	protected"

isAbstractfalse"
typevoid*notifyAboutDescendantChange2g
%java.util.function.Consumer.accept(T)CALL8
,src\main\java\org\jabref\model\TreeNode.java› ›("2d
"org.jabref.model.TreeNode.isRoot()CALL8
,src\main\java\org\jabref\model\TreeNode.javaﬂ ﬂ(2z
8org.jabref.model.TreeNode.notifyAboutDescendantChange(T)CALL8
,src\main\java\org\jabref\model\TreeNode.java‡ ‡(.2{
9org.jabref.model.TreeNode?onDescendantChanged@46.24:46.43CALL8
,src\main\java\org\jabref\model\TreeNode.java› ›(2Å
?org.jabref.model.TreeNode.notifyAboutDescendantChange(T)!sourceCALL8
,src\main\java\org\jabref\model\TreeNode.java›# ›()2n
,org.jabref.model.TreeNode?parent@42.14:42.20CALL8
,src\main\java\org\jabref\model\TreeNode.java‡ ‡(2Å
?org.jabref.model.TreeNode.notifyAboutDescendantChange(T)!sourceCALL8
,src\main\java\org\jabref\model\TreeNode.java‡/ ‡(52Ü
?org.jabref.model.TreeNode.notifyAboutDescendantChange(T)!source	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.java‹1 ‹(72M
voidRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.java‹ ‹(©
?org.jabref.model.TreeNode.notifyAboutDescendantChange(T)!source	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.java‹1 ‹(7"	
typeT"
isFinalfalse"
declarationStringT source*source2]
org.jabref.model.TreeNode.TTYPE8
,src\main\java\org\jabref\model\TreeNode.java‹/ ‹(0“
Qorg.jabref.model.TreeNode.findChildrenSatisfying(java.util.function.Predicate<T>)METHOD8
,src\main\java\org\jabref\model\TreeNode.javaÁ Á()"
isFinalfalse"˜
declarationString·<mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends TreeNode<T></mark></mark>&gt; List&lt;T&gt; <mark class="method">findChildrenSatisfying</mark>(Predicate&lt;T&gt; matcher)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeList<T>*findChildrenSatisfying2f
$java.util.function.Predicate.test(T)CALL8
,src\main\java\org\jabref\model\TreeNode.javaÍ Í(2W
java.util.List.add(E)CALL8
,src\main\java\org\jabref\model\TreeNode.javaÎ Î(2i
'org.jabref.model.TreeNode.getChildren()CALL8
,src\main\java\org\jabref\model\TreeNode.javaÓ Ó("2z
8java.util.List.addAll(java.util.Collection<? extends E>)CALL8
,src\main\java\org\jabref\model\TreeNode.javaÔ Ô(2ì
Qorg.jabref.model.TreeNode.findChildrenSatisfying(java.util.function.Predicate<T>)CALL8
,src\main\java\org\jabref\model\TreeNode.javaÔ Ô(42a
java.util.ArrayList.ArrayList()CALL8
,src\main\java\org\jabref\model\TreeNode.javaË Ë(&2õ
Yorg.jabref.model.TreeNode.findChildrenSatisfying(java.util.function.Predicate<T>)!matcherCALL8
,src\main\java\org\jabref\model\TreeNode.javaÍ Í(2¶
dorg.jabref.model.TreeNode.findChildrenSatisfying(java.util.function.Predicate<T>)?hits@616.16:616.20CALL8
,src\main\java\org\jabref\model\TreeNode.javaÎ Î(2¶
dorg.jabref.model.TreeNode.findChildrenSatisfying(java.util.function.Predicate<T>)?hits@616.16:616.20CALL8
,src\main\java\org\jabref\model\TreeNode.javaÔ Ô(2ß
eorg.jabref.model.TreeNode.findChildrenSatisfying(java.util.function.Predicate<T>)?child@622.15:622.20CALL8
,src\main\java\org\jabref\model\TreeNode.javaÔ Ô(2õ
Yorg.jabref.model.TreeNode.findChildrenSatisfying(java.util.function.Predicate<T>)!matcherCALL8
,src\main\java\org\jabref\model\TreeNode.javaÔ5 Ô(<2¶
dorg.jabref.model.TreeNode.findChildrenSatisfying(java.util.function.Predicate<T>)?hits@616.16:616.20CALL8
,src\main\java\org\jabref\model\TreeNode.javaÚ Ú(2†
Yorg.jabref.model.TreeNode.findChildrenSatisfying(java.util.function.Predicate<T>)!matcher	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaÁ7 Á(>2≠
dorg.jabref.model.TreeNode.findChildrenSatisfying(java.util.function.Predicate<T>)?hits@616.16:616.20DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaË Ë(2Æ
eorg.jabref.model.TreeNode.findChildrenSatisfying(java.util.function.Predicate<T>)?child@622.15:622.20DECLARATION8
,src\main\java\org\jabref\model\TreeNode.javaÓ Ó(2W
java.util.ListRETURN_TYPE8
,src\main\java\org\jabref\model\TreeNode.javaÁ Á(2m
org.jabref.model.TreeNode.TRETURN_TYPE_ARGUMENT8
,src\main\java\org\jabref\model\TreeNode.javaÁ Á(Á
dorg.jabref.model.TreeNode.findChildrenSatisfying(java.util.function.Predicate<T>)?hits@616.16:616.20VARIABLE8
,src\main\java\org\jabref\model\TreeNode.javaË Ë("
typeList<T>"
isFinalfalse"u
declarationString`<mark class="modifier"> </mark>List<T> <mark class="class-field">hits</mark> = new ArrayList<>()*hits2P
java.util.ListTYPE8
,src\main\java\org\jabref\model\TreeNode.javaË Ë(2f
org.jabref.model.TreeNode.TTYPE_ARGUMENT8
,src\main\java\org\jabref\model\TreeNode.javaË Ë(2a
java.util.ArrayList.ArrayList()CALL8
,src\main\java\org\jabref\model\TreeNode.javaË Ë(&å
eorg.jabref.model.TreeNode.findChildrenSatisfying(java.util.function.Predicate<T>)?child@622.15:622.20VARIABLE8
,src\main\java\org\jabref\model\TreeNode.javaÓ Ó("	
typeT"
isFinalfalse"\
declarationStringG<mark class="modifier"> </mark>T <mark class="class-field">child</mark>*child2]
org.jabref.model.TreeNode.TTYPE8
,src\main\java\org\jabref\model\TreeNode.javaÓ Ó(ƒ
Yorg.jabref.model.TreeNode.findChildrenSatisfying(java.util.function.Predicate<T>)!matcher	PARAMETER8
,src\main\java\org\jabref\model\TreeNode.javaÁ7 Á(>"
typePredicate<T>"
isFinalfalse")
declarationStringPredicate<T> matcher*matcher2^
java.util.function.PredicateTYPE8
,src\main\java\org\jabref\model\TreeNode.javaÁ* Á(32f
org.jabref.model.TreeNode.TTYPE_ARGUMENT8
,src\main\java\org\jabref\model\TreeNode.javaÁ4 Á(5≤
.org.jabref.model.TreeNode?children@38.36:38.44VALUE6
,src\main\java\org\jabref\model\TreeNode.java&$ &(,"
isFinaltrue"
typeObservableList<T>"õ
declarationStringÖ<mark class="modifier">private </mark><mark class="modifier">final </mark>ObservableList<T> <mark class="class-field">children</mark>"
isStaticfalse"
accessprivate*children2a
!javafx.collections.ObservableListTYPE6
,src\main\java\org\jabref\model\TreeNode.java& &( 2d
org.jabref.model.TreeNode.TTYPE_ARGUMENT6
,src\main\java\org\jabref\model\TreeNode.java&! &("˛
,org.jabref.model.TreeNode?parent@42.14:42.20VARIABLE6
,src\main\java\org\jabref\model\TreeNode.java* *("
isFinalfalse"	
typeT"d
declarationStringO<mark class="modifier">private </mark>T <mark class="class-field">parent</mark>"
isStaticfalse"
accessprivate*parent2[
org.jabref.model.TreeNode.TTYPE6
,src\main\java\org\jabref\model\TreeNode.java* *(ƒ
9org.jabref.model.TreeNode?onDescendantChanged@46.24:46.43VARIABLE6
,src\main\java\org\jabref\model\TreeNode.java. .(+"
isFinalfalse"
typeConsumer<T>"ü
declarationStringâ<mark class="modifier">private </mark>Consumer<T> <mark class="class-field">onDescendantChanged</mark> = t -> {
    /* Do nothing */
};"
isStaticfalse"
accessprivate*onDescendantChanged2[
java.util.function.ConsumerTYPE6
,src\main\java\org\jabref\model\TreeNode.java. .(2d
org.jabref.model.TreeNode.TTYPE_ARGUMENT6
,src\main\java\org\jabref\model\TreeNode.java. .(≈
org.jabref.model.TreeNode.TTYPE_PARAMETER6
,src\main\java\org\jabref\model\TreeNode.java! !( *T2[
org.jabref.model.TreeNodeEXTEND6
,src\main\java\org\jabref\model\TreeNode.java!) !(1