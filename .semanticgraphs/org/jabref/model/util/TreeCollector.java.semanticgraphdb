
6src\main\java\org\jabref\model\util\TreeCollector.java∑
#org.jabref.model.util.TreeCollectorCLASS@
6src\main\java\org\jabref\model\util\TreeCollector.java (" 
packageorg.jabref.model.util"
isFinalfalse"
inner classfalse"

isAbstractfalse"˚
declarationStringÂ<mark class="modifier">public </mark><mark class="modifier">class </mark>TreeCollector<mark class="modifier"><br>implements </mark>Collector&lt;T, ObservableList&lt;T&gt;<mark class="modifier">,</mark> ObservableList&lt;T&gt;&gt;"
accesspublic*TreeCollector2Å
Øorg.jabref.model.util.TreeCollector.TreeCollector(java.util.function.Function<T, java.util.List<T>>, java.util.function.BiConsumer<T, T>, java.util.function.BiPredicate<T, T>)DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.java# #(2®
Worg.jabref.model.util.TreeCollector.mergeIntoTree(java.util.function.BiPredicate<T, T>)DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.java); )(H2
.org.jabref.model.util.TreeCollector.supplier()DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.java1' 1(/2Ç
1org.jabref.model.util.TreeCollector.accumulator()DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.java6, 6(72Ä
/org.jabref.model.util.TreeCollector.merge(T, T)DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.javaG G(2
.org.jabref.model.util.TreeCollector.combiner()DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.javaW- W(52
.org.jabref.model.util.TreeCollector.finisher()DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.javaa: a(B2Ü
5org.jabref.model.util.TreeCollector.characteristics()DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.javaf  f(/2å
;org.jabref.model.util.TreeCollector?getChildren@26.33:26.44DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.java! (,2â
8org.jabref.model.util.TreeCollector?addChild@27.29:27.37DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.java (%2å
;org.jabref.model.util.TreeCollector?equivalence@28.30:28.41DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.java ()2f
java.util.stream.CollectorEXTEND@
6src\main\java\org\jabref\model\util\TreeCollector.java) (22y
%org.jabref.model.util.TreeCollector.TTYPE_PARAMETER@
6src\main\java\org\jabref\model\util\TreeCollector.java (2
%org.jabref.model.util.TreeCollector.TEXTEND_TYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java3 (42{
!javafx.collections.ObservableListEXTEND_TYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java6 (G2{
!javafx.collections.ObservableListEXTEND_TYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.javaI (Z¢
Øorg.jabref.model.util.TreeCollector.TreeCollector(java.util.function.Function<T, java.util.List<T>>, java.util.function.BiConsumer<T, T>, java.util.function.BiPredicate<T, T>)CONSTRUCTOR@
6src\main\java\org\jabref\model\util\TreeCollector.java# #("≈
declarationStringØ<mark class="modifier">private </mark><mark class="method">TreeCollector</mark>(<mark class="modifier"><mark class="modifier">,</mark></mark> List&lt;<mark class="type-parameter">T</mark>&gt;&gt; getChildren<mark class="modifier"><mark class="modifier">,</mark></mark> <mark class="modifier"><mark class="modifier">,</mark></mark> <mark class="type-parameter">T</mark>&gt; addChild<mark class="modifier"><mark class="modifier">,</mark></mark> <mark class="modifier"><mark class="modifier">,</mark></mark> <mark class="type-parameter">T</mark>&gt; equivalence)*TreeCollector2Ü
ªorg.jabref.model.util.TreeCollector.TreeCollector(java.util.function.Function<T, java.util.List<T>>, java.util.function.BiConsumer<T, T>, java.util.function.BiPredicate<T, T>)!getChildrenCALL@
6src\main\java\org\jabref\model\util\TreeCollector.java$ $(&2É
∏org.jabref.model.util.TreeCollector.TreeCollector(java.util.function.Function<T, java.util.List<T>>, java.util.function.BiConsumer<T, T>, java.util.function.BiPredicate<T, T>)!addChildCALL@
6src\main\java\org\jabref\model\util\TreeCollector.java% %( 2Ü
ªorg.jabref.model.util.TreeCollector.TreeCollector(java.util.function.Function<T, java.util.List<T>>, java.util.function.BiConsumer<T, T>, java.util.function.BiPredicate<T, T>)!equivalenceCALL@
6src\main\java\org\jabref\model\util\TreeCollector.java& &(&2Ö
;org.jabref.model.util.TreeCollector?getChildren@26.33:26.44CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java$ $(2Ç
8org.jabref.model.util.TreeCollector?addChild@27.29:27.37CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java% %(2Ö
;org.jabref.model.util.TreeCollector?equivalence@28.30:28.41CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java& &(2ã
ªorg.jabref.model.util.TreeCollector.TreeCollector(java.util.function.Function<T, java.util.List<T>>, java.util.function.BiConsumer<T, T>, java.util.function.BiPredicate<T, T>)!getChildren	PARAMETER@
6src\main\java\org\jabref\model\util\TreeCollector.java#/ #(:2à
∏org.jabref.model.util.TreeCollector.TreeCollector(java.util.function.Function<T, java.util.List<T>>, java.util.function.BiConsumer<T, T>, java.util.function.BiPredicate<T, T>)!addChild	PARAMETER@
6src\main\java\org\jabref\model\util\TreeCollector.java#M #(U2ã
ªorg.jabref.model.util.TreeCollector.TreeCollector(java.util.function.Function<T, java.util.List<T>>, java.util.function.BiConsumer<T, T>, java.util.function.BiPredicate<T, T>)!equivalence	PARAMETER@
6src\main\java\org\jabref\model\util\TreeCollector.java#i #(t2t
#org.jabref.model.util.TreeCollectorRETURN_TYPE@
6src\main\java\org\jabref\model\util\TreeCollector.java# #(ı
ªorg.jabref.model.util.TreeCollector.TreeCollector(java.util.function.Function<T, java.util.List<T>>, java.util.function.BiConsumer<T, T>, java.util.function.BiPredicate<T, T>)!getChildren	PARAMETER@
6src\main\java\org\jabref\model\util\TreeCollector.java#/ #(:"
typeFunction<T, List<T>>"
isFinalfalse"m
declarationStringX<mark class="modifier">,</mark> List<<mark class="type-parameter">T</mark>>> getChildren*getChildren2e
java.util.function.FunctionTYPE@
6src\main\java\org\jabref\model\util\TreeCollector.java# #("2a
java.util.ListTYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java## #($2x
%org.jabref.model.util.TreeCollector.TTYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java#& #(*2x
%org.jabref.model.util.TreeCollector.TTYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java#+ #(,Å
∏org.jabref.model.util.TreeCollector.TreeCollector(java.util.function.Function<T, java.util.List<T>>, java.util.function.BiConsumer<T, T>, java.util.function.BiPredicate<T, T>)!addChild	PARAMETER@
6src\main\java\org\jabref\model\util\TreeCollector.java#M #(U"
typeBiConsumer<T, T>"
isFinalfalse"d
declarationStringO<mark class="modifier">,</mark> <mark class="type-parameter">T</mark>> addChild*addChild2g
java.util.function.BiConsumerTYPE@
6src\main\java\org\jabref\model\util\TreeCollector.java#< #(F2x
%org.jabref.model.util.TreeCollector.TTYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java#G #(H2x
%org.jabref.model.util.TreeCollector.TTYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java#J #(Kå
ªorg.jabref.model.util.TreeCollector.TreeCollector(java.util.function.Function<T, java.util.List<T>>, java.util.function.BiConsumer<T, T>, java.util.function.BiPredicate<T, T>)!equivalence	PARAMETER@
6src\main\java\org\jabref\model\util\TreeCollector.java#i #(t"
typeBiPredicate<T, T>"
isFinalfalse"g
declarationStringR<mark class="modifier">,</mark> <mark class="type-parameter">T</mark>> equivalence*equivalence2h
java.util.function.BiPredicateTYPE@
6src\main\java\org\jabref\model\util\TreeCollector.java#W #(b2x
%org.jabref.model.util.TreeCollector.TTYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java#c #(d2x
%org.jabref.model.util.TreeCollector.TTYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java#f #(gƒ
Worg.jabref.model.util.TreeCollector.mergeIntoTree(java.util.function.BiPredicate<T, T>)METHOD@
6src\main\java\org\jabref\model\util\TreeCollector.java); )(H"
isFinalfalse"Ñ
declarationStringÓ<mark class="modifier">public </mark><mark class="modifier">static </mark>&lt;<mark class="modifier"><mark class="type-parameter">T</mark></mark>&gt; reeCollector&lt;<mark class="type-parameter">T</mark>&gt; <mark class="method">mergeIntoTree</mark>(<mark class="modifier"><mark class="modifier">,</mark></mark> <mark class="type-parameter">T</mark>&gt; equivalence)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeTreeCollector<T>*mergeIntoTree2˙
Øorg.jabref.model.util.TreeCollector.TreeCollector(java.util.function.Function<T, java.util.List<T>>, java.util.function.BiConsumer<T, T>, java.util.function.BiPredicate<T, T>)CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java* *("2≥
iorg.jabref.model.util.TreeCollector.mergeIntoTree(java.util.function.BiPredicate<T, T>)?child@44.25:44.30CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java,# ,((2¥
jorg.jabref.model.util.TreeCollector.mergeIntoTree(java.util.function.BiPredicate<T, T>)?parent@44.17:44.23CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java,0 ,(62≠
corg.jabref.model.util.TreeCollector.mergeIntoTree(java.util.function.BiPredicate<T, T>)!equivalenceCALL@
6src\main\java\org\jabref\model\util\TreeCollector.java- -(2≤
corg.jabref.model.util.TreeCollector.mergeIntoTree(java.util.function.BiPredicate<T, T>)!equivalence	PARAMETER@
6src\main\java\org\jabref\model\util\TreeCollector.java)[ )(f2ª
jorg.jabref.model.util.TreeCollector.mergeIntoTree(java.util.function.BiPredicate<T, T>)?parent@44.17:44.23DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.java, ,(2∫
iorg.jabref.model.util.TreeCollector.mergeIntoTree(java.util.function.BiPredicate<T, T>)?child@44.25:44.30DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.java, ,(2t
#org.jabref.model.util.TreeCollectorRETURN_TYPE@
6src\main\java\org\jabref\model\util\TreeCollector.java)* )(72≥
Yorg.jabref.model.util.TreeCollector.mergeIntoTree(java.util.function.BiPredicate<T, T>).TRETURN_TYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java)8 )(92≠
Yorg.jabref.model.util.TreeCollector.mergeIntoTree(java.util.function.BiPredicate<T, T>).TTYPE_PARAMETER@
6src\main\java\org\jabref\model\util\TreeCollector.java) )(ù
corg.jabref.model.util.TreeCollector.mergeIntoTree(java.util.function.BiPredicate<T, T>)!equivalence	PARAMETER@
6src\main\java\org\jabref\model\util\TreeCollector.java)[ )(f"
typeBiPredicate<T, T>"
isFinalfalse"g
declarationStringR<mark class="modifier">,</mark> <mark class="type-parameter">T</mark>> equivalence*equivalence2h
java.util.function.BiPredicateTYPE@
6src\main\java\org\jabref\model\util\TreeCollector.java)I )(T2¨
Yorg.jabref.model.util.TreeCollector.mergeIntoTree(java.util.function.BiPredicate<T, T>).TTYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java)U )(V2¨
Yorg.jabref.model.util.TreeCollector.mergeIntoTree(java.util.function.BiPredicate<T, T>).TTYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java)X )(YÄ
jorg.jabref.model.util.TreeCollector.mergeIntoTree(java.util.function.BiPredicate<T, T>)?parent@44.17:44.23VARIABLE@
6src\main\java\org\jabref\model\util\TreeCollector.java, ,("
type"
isFinalfalse"
declarationString parent*parent2TYPE˝
iorg.jabref.model.util.TreeCollector.mergeIntoTree(java.util.function.BiPredicate<T, T>)?child@44.25:44.30VARIABLE@
6src\main\java\org\jabref\model\util\TreeCollector.java, ,("
type"
isFinalfalse"
declarationString child*child2TYPEó
Yorg.jabref.model.util.TreeCollector.mergeIntoTree(java.util.function.BiPredicate<T, T>).TTYPE_PARAMETER@
6src\main\java\org\jabref\model\util\TreeCollector.java) )(*T2e
org.jabref.model.TreeNodeEXTEND@
6src\main\java\org\jabref\model\util\TreeCollector.java) )(%ã
.org.jabref.model.util.TreeCollector.supplier()METHOD@
6src\main\java\org\jabref\model\util\TreeCollector.java1' 1(/"
isFinalfalse"ß
declarationStringë<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T</mark></mark>&gt; Supplier&lt;ObservableList&lt;<mark class="type-parameter">T</mark>&gt;&gt; <mark class="method">supplier</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"#
typeSupplier<ObservableList<T>>*supplier2l
java.util.function.SupplierRETURN_TYPE@
6src\main\java\org\jabref\model\util\TreeCollector.java1 1(2{
!javafx.collections.ObservableListRETURN_TYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java1 1("2
%org.jabref.model.util.TreeCollector.TRETURN_TYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java1# 1($÷
1org.jabref.model.util.TreeCollector.accumulator()METHOD@
6src\main\java\org\jabref\model\util\TreeCollector.java6, 6(7"
isFinalfalse"…
declarationString≥<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T</mark></mark>&gt; &gt;<mark class="modifier"><mark class="modifier">,</mark></mark><mark class="type-parameter">T</mark>&gt; <mark class="method">accumulator</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"(
type BiConsumer<ObservableList<T>, T>*accumulator2h
java.util.Optional.isPresent()CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java= =((2n
$java.util.function.Function.apply(T)CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java>; >(@2y
/org.jabref.model.util.TreeCollector.merge(T, T)CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java? ?(2b
java.util.Optional.get()CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java?) ?(,2ä
@java.util.ArrayList.ArrayList(java.util.Collection<? extends E>)CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java># >(.2ò
Norg.jabref.model.util.TreeCollector.accumulator()?alreadyProcessed@55.16:55.32CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java9) 9(92Ö
;org.jabref.model.util.TreeCollector?equivalence@28.30:28.41CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java;$ ;(/2å
Borg.jabref.model.util.TreeCollector.accumulator()?item@59.28:59.32CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java;5 ;(92è
Eorg.jabref.model.util.TreeCollector.accumulator()?newItem@55.34:55.41CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java;; ;(B2ñ
Lorg.jabref.model.util.TreeCollector.accumulator()?sameItemInTree@57.24:57.38CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java= =(2Ö
;org.jabref.model.util.TreeCollector?getChildren@26.33:26.44CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java>/ >(:2è
Eorg.jabref.model.util.TreeCollector.accumulator()?newItem@55.34:55.41CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java>A >(H2ñ
Lorg.jabref.model.util.TreeCollector.accumulator()?sameItemInTree@57.24:57.38CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java? ?((2ç
Corg.jabref.model.util.TreeCollector.accumulator()?child@62.23:62.28CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java?0 ?(52ò
Norg.jabref.model.util.TreeCollector.accumulator()?alreadyProcessed@55.16:55.32CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaB B( 2è
Eorg.jabref.model.util.TreeCollector.accumulator()?newItem@55.34:55.41CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaB% B(,2ù
Lorg.jabref.model.util.TreeCollector.accumulator()?sameItemInTree@57.24:57.38DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.java9 9(&2î
Corg.jabref.model.util.TreeCollector.accumulator()?child@62.23:62.28DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.java> >(2ü
Norg.jabref.model.util.TreeCollector.accumulator()?alreadyProcessed@55.16:55.32DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.java7 7( 2ñ
Eorg.jabref.model.util.TreeCollector.accumulator()?newItem@55.34:55.41DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.java7" 7()2ì
Borg.jabref.model.util.TreeCollector.accumulator()?item@59.28:59.32DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.java; ;( 2n
java.util.function.BiConsumerRETURN_TYPE@
6src\main\java\org\jabref\model\util\TreeCollector.java6 6(2{
!javafx.collections.ObservableListRETURN_TYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java6 6($2
%org.jabref.model.util.TreeCollector.TRETURN_TYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java6% 6(&2
%org.jabref.model.util.TreeCollector.TRETURN_TYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java6) 6(*∏	
Lorg.jabref.model.util.TreeCollector.accumulator()?sameItemInTree@57.24:57.38VARIABLE@
6src\main\java\org\jabref\model\util\TreeCollector.java9 9(&"
typeOptional<T>"
isFinalfalse"»
declarationString≤<mark class="modifier"> </mark>Optional<T> <mark class="class-field">sameItemInTree</mark> = alreadyProcessed.stream().filter(item -> equivalence.test(item, newItem)).findFirst()*sameItemInTree2\
java.util.OptionalTYPE@
6src\main\java\org\jabref\model\util\TreeCollector.java9 9(2x
%org.jabref.model.util.TreeCollector.TTYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java9 9(2ò
Norg.jabref.model.util.TreeCollector.accumulator()?alreadyProcessed@55.16:55.32CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java9) 9(92Ö
;org.jabref.model.util.TreeCollector?equivalence@28.30:28.41CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java;$ ;(/2å
Borg.jabref.model.util.TreeCollector.accumulator()?item@59.28:59.32CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java;5 ;(92è
Eorg.jabref.model.util.TreeCollector.accumulator()?newItem@55.34:55.41CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java;; ;(BÑ
Corg.jabref.model.util.TreeCollector.accumulator()?child@62.23:62.28VARIABLE@
6src\main\java\org\jabref\model\util\TreeCollector.java> >("	
typeT"
isFinalfalse"\
declarationStringG<mark class="modifier"> </mark>T <mark class="class-field">child</mark>*child2o
%org.jabref.model.util.TreeCollector.TTYPE@
6src\main\java\org\jabref\model\util\TreeCollector.java> >(¯
Norg.jabref.model.util.TreeCollector.accumulator()?alreadyProcessed@55.16:55.32VARIABLE@
6src\main\java\org\jabref\model\util\TreeCollector.java7 7( "
type"
isFinalfalse"&
declarationString alreadyProcessed*alreadyProcessed2TYPE›
Eorg.jabref.model.util.TreeCollector.accumulator()?newItem@55.34:55.41VARIABLE@
6src\main\java\org\jabref\model\util\TreeCollector.java7" 7()"
type"
isFinalfalse"
declarationString newItem*newItem2TYPE‘
Borg.jabref.model.util.TreeCollector.accumulator()?item@59.28:59.32VARIABLE@
6src\main\java\org\jabref\model\util\TreeCollector.java; ;( "
type"
isFinalfalse"
declarationString item*item2TYPEÁ"
/org.jabref.model.util.TreeCollector.merge(T, T)METHOD@
6src\main\java\org\jabref\model\util\TreeCollector.javaG G("
isFinalfalse"‚
declarationStringÃ<mark class="modifier">private </mark>&lt;<mark class="modifier"><mark class="type-parameter">T</mark></mark>&gt; <mark class="modifier">void</mark> <mark class="method">merge</mark>(<mark class="type-parameter">T</mark> target<mark class="modifier"><mark class="modifier">,</mark></mark> <mark class="type-parameter">T</mark> node)"
isStaticfalse"
accessprivate"

isAbstractfalse"
typevoid*merge2m
#java.util.stream.Stream.findFirst()CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaK K(2ë
Gjava.util.stream.Stream.filter(java.util.function.Predicate<? super T>)CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaJ J(2g
java.util.Collection.stream()CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaI I(%2n
$java.util.function.Function.apply(T)CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaI I(2s
)java.util.function.BiPredicate.test(T, U)CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaJ, J(02h
java.util.Optional.isPresent()CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaL L($2n
$java.util.function.Function.apply(T)CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaN7 N(<2y
/org.jabref.model.util.TreeCollector.merge(T, T)CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaO O(2b
java.util.Optional.get()CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaO% O((2t
*java.util.function.BiConsumer.accept(T, U)CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaR R(2ä
@java.util.ArrayList.ArrayList(java.util.Collection<? extends E>)CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaN N(*2Ö
;org.jabref.model.util.TreeCollector?getChildren@26.33:26.44CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaH% H(02Ä
6org.jabref.model.util.TreeCollector.merge(T, T)!targetCALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaI I(2Ö
;org.jabref.model.util.TreeCollector?equivalence@28.30:28.41CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaJ  J(+2ä
@org.jabref.model.util.TreeCollector.merge(T, T)?item@74.24:74.28CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaJ1 J(52~
4org.jabref.model.util.TreeCollector.merge(T, T)!nodeCALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaJ7 J(;2î
Jorg.jabref.model.util.TreeCollector.merge(T, T)?sameItemInTree@72.20:72.34CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaL L(2Ö
;org.jabref.model.util.TreeCollector?getChildren@26.33:26.44CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaN+ N(62~
4org.jabref.model.util.TreeCollector.merge(T, T)!nodeCALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaN= N(A2î
Jorg.jabref.model.util.TreeCollector.merge(T, T)?sameItemInTree@72.20:72.34CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaO O($2ã
Aorg.jabref.model.util.TreeCollector.merge(T, T)?child@78.19:78.24CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaO, O(12Ç
8org.jabref.model.util.TreeCollector?addChild@27.29:27.37CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaR R(2Ä
6org.jabref.model.util.TreeCollector.merge(T, T)!targetCALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaR R("2~
4org.jabref.model.util.TreeCollector.merge(T, T)!nodeCALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaR$ R((2Ö
6org.jabref.model.util.TreeCollector.merge(T, T)!target	PARAMETER@
6src\main\java\org\jabref\model\util\TreeCollector.javaG G(2É
4org.jabref.model.util.TreeCollector.merge(T, T)!node	PARAMETER@
6src\main\java\org\jabref\model\util\TreeCollector.javaG# G('2õ
Jorg.jabref.model.util.TreeCollector.merge(T, T)?sameItemInTree@72.20:72.34DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.javaH H("2í
Aorg.jabref.model.util.TreeCollector.merge(T, T)?child@78.19:78.24DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.javaN N(2ë
@org.jabref.model.util.TreeCollector.merge(T, T)?item@74.24:74.28DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.javaJ J(2U
voidRETURN_TYPE@
6src\main\java\org\jabref\model\util\TreeCollector.javaG G(È
Jorg.jabref.model.util.TreeCollector.merge(T, T)?sameItemInTree@72.20:72.34VARIABLE@
6src\main\java\org\jabref\model\util\TreeCollector.javaH H(""
typeOptional<T>"
isFinalfalse"Œ
declarationString∏<mark class="modifier"> </mark>Optional<T> <mark class="class-field">sameItemInTree</mark> = getChildren.apply(target).stream().filter(item -> equivalence.test(item, node)).findFirst()*sameItemInTree2\
java.util.OptionalTYPE@
6src\main\java\org\jabref\model\util\TreeCollector.javaH H(2x
%org.jabref.model.util.TreeCollector.TTYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.javaH H(2m
#java.util.stream.Stream.findFirst()CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaK K(2ë
Gjava.util.stream.Stream.filter(java.util.function.Predicate<? super T>)CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaJ J(2g
java.util.Collection.stream()CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaI I(%2n
$java.util.function.Function.apply(T)CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaI I(2s
)java.util.function.BiPredicate.test(T, U)CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaJ, J(02Ö
;org.jabref.model.util.TreeCollector?getChildren@26.33:26.44CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaH% H(02Ä
6org.jabref.model.util.TreeCollector.merge(T, T)!targetCALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaI I(2Ö
;org.jabref.model.util.TreeCollector?equivalence@28.30:28.41CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaJ  J(+2ä
@org.jabref.model.util.TreeCollector.merge(T, T)?item@74.24:74.28CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaJ1 J(52~
4org.jabref.model.util.TreeCollector.merge(T, T)!nodeCALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaJ7 J(;Ç
Aorg.jabref.model.util.TreeCollector.merge(T, T)?child@78.19:78.24VARIABLE@
6src\main\java\org\jabref\model\util\TreeCollector.javaN N("	
typeT"
isFinalfalse"\
declarationStringG<mark class="modifier"> </mark>T <mark class="class-field">child</mark>*child2o
%org.jabref.model.util.TreeCollector.TTYPE@
6src\main\java\org\jabref\model\util\TreeCollector.javaN N(ﬁ
6org.jabref.model.util.TreeCollector.merge(T, T)!target	PARAMETER@
6src\main\java\org\jabref\model\util\TreeCollector.javaG G("	
typeT"
isFinalfalse"A
declarationString,<mark class="type-parameter">T</mark> target*target2o
%org.jabref.model.util.TreeCollector.TTYPE@
6src\main\java\org\jabref\model\util\TreeCollector.javaG G(ÿ
4org.jabref.model.util.TreeCollector.merge(T, T)!node	PARAMETER@
6src\main\java\org\jabref\model\util\TreeCollector.javaG# G('"	
typeT"
isFinalfalse"?
declarationString*<mark class="type-parameter">T</mark> node*node2o
%org.jabref.model.util.TreeCollector.TTYPE@
6src\main\java\org\jabref\model\util\TreeCollector.javaG! G("“
@org.jabref.model.util.TreeCollector.merge(T, T)?item@74.24:74.28VARIABLE@
6src\main\java\org\jabref\model\util\TreeCollector.javaJ J("
type"
isFinalfalse"
declarationString item*item2TYPE˛
.org.jabref.model.util.TreeCollector.combiner()METHOD@
6src\main\java\org\jabref\model\util\TreeCollector.javaW- W(5"
isFinalfalse"≠
declarationStringó<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T</mark></mark>&gt; BinaryOperator&lt;ObservableList&lt;<mark class="type-parameter">T</mark>&gt;&gt; <mark class="method">combiner</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse")
type!BinaryOperator<ObservableList<T>>*combiner2t
*java.util.function.BiConsumer.accept(T, U)CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaZ Z($2{
1org.jabref.model.util.TreeCollector.accumulator()CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaZ Z(2ä
@org.jabref.model.util.TreeCollector.combiner()?list2@88.23:88.28CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaY Y(2ä
@org.jabref.model.util.TreeCollector.combiner()?list1@88.16:88.21CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaZ% Z(*2â
?org.jabref.model.util.TreeCollector.combiner()?item@89.19:89.23CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javaZ, Z(02ä
@org.jabref.model.util.TreeCollector.combiner()?list1@88.16:88.21CALL@
6src\main\java\org\jabref\model\util\TreeCollector.java\ \(2ê
?org.jabref.model.util.TreeCollector.combiner()?item@89.19:89.23DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.javaY Y(2ë
@org.jabref.model.util.TreeCollector.combiner()?list1@88.16:88.21DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.javaX X(2ë
@org.jabref.model.util.TreeCollector.combiner()?list2@88.23:88.28DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.javaX X(2r
!java.util.function.BinaryOperatorRETURN_TYPE@
6src\main\java\org\jabref\model\util\TreeCollector.javaW W(2{
!javafx.collections.ObservableListRETURN_TYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.javaW W((2
%org.jabref.model.util.TreeCollector.TRETURN_TYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.javaW) W(*˛
?org.jabref.model.util.TreeCollector.combiner()?item@89.19:89.23VARIABLE@
6src\main\java\org\jabref\model\util\TreeCollector.javaY Y("	
typeT"
isFinalfalse"[
declarationStringF<mark class="modifier"> </mark>T <mark class="class-field">item</mark>*item2o
%org.jabref.model.util.TreeCollector.TTYPE@
6src\main\java\org\jabref\model\util\TreeCollector.javaY Y(‘
@org.jabref.model.util.TreeCollector.combiner()?list1@88.16:88.21VARIABLE@
6src\main\java\org\jabref\model\util\TreeCollector.javaX X("
type"
isFinalfalse"
declarationString list1*list12TYPE‘
@org.jabref.model.util.TreeCollector.combiner()?list2@88.23:88.28VARIABLE@
6src\main\java\org\jabref\model\util\TreeCollector.javaX X("
type"
isFinalfalse"
declarationString list2*list22TYPEÍ
.org.jabref.model.util.TreeCollector.finisher()METHOD@
6src\main\java\org\jabref\model\util\TreeCollector.javaa: a(B"
isFinalfalse"‹
declarationString∆<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T</mark></mark>&gt; &gt;<mark class="modifier"><mark class="modifier">,</mark></mark>ObservableList&lt;<mark class="type-parameter">T</mark>&gt;&gt; <mark class="method">finisher</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"6
type.Function<ObservableList<T>, ObservableList<T>>*finisher2Ü
<org.jabref.model.util.TreeCollector.finisher()?i@98.15:98.16CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javab b(2ç
<org.jabref.model.util.TreeCollector.finisher()?i@98.15:98.16DECLARATION@
6src\main\java\org\jabref\model\util\TreeCollector.javab b(2l
java.util.function.FunctionRETURN_TYPE@
6src\main\java\org\jabref\model\util\TreeCollector.javaa a(2{
!javafx.collections.ObservableListRETURN_TYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.javaa a("2
%org.jabref.model.util.TreeCollector.TRETURN_TYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.javaa# a($2{
!javafx.collections.ObservableListRETURN_TYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.javaa' a(52
%org.jabref.model.util.TreeCollector.TRETURN_TYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.javaa6 a(7»
<org.jabref.model.util.TreeCollector.finisher()?i@98.15:98.16VARIABLE@
6src\main\java\org\jabref\model\util\TreeCollector.javab b("
type"
isFinalfalse"
declarationString i*i2TYPE…
5org.jabref.model.util.TreeCollector.characteristics()METHOD@
6src\main\java\org\jabref\model\util\TreeCollector.javaf  f(/"
isFinalfalse"˝
declarationStringÁ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T</mark></mark>&gt; Set&lt;Characteristics&gt; <mark class="method">characteristics</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeSet<Characteristics>*characteristics2d
java.util.EnumSet.of(E, E)CALL@
6src\main\java\org\jabref\model\util\TreeCollector.javag g(2^
java.util.SetRETURN_TYPE@
6src\main\java\org\jabref\model\util\TreeCollector.javaf f(2Ñ
*java.util.stream.Collector.CharacteristicsRETURN_TYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.javaf f(®
;org.jabref.model.util.TreeCollector?getChildren@26.33:26.44VARIABLE@
6src\main\java\org\jabref\model\util\TreeCollector.java! (,"
isFinalfalse"
typeFunction<T, List<T>>"|
declarationStringg<mark class="modifier">private </mark>Function<T, List<T>> <mark class="class-field">getChildren</mark>"
isStaticfalse"
accessprivate*getChildren2e
java.util.function.FunctionTYPE@
6src\main\java\org\jabref\model\util\TreeCollector.java (2a
java.util.ListTYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java (2x
%org.jabref.model.util.TreeCollector.TTYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java (2x
%org.jabref.model.util.TreeCollector.TTYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java (∂
8org.jabref.model.util.TreeCollector?addChild@27.29:27.37VARIABLE@
6src\main\java\org\jabref\model\util\TreeCollector.java (%"
isFinalfalse"
typeBiConsumer<T, T>"u
declarationString`<mark class="modifier">private </mark>BiConsumer<T, T> <mark class="class-field">addChild</mark>"
isStaticfalse"
accessprivate*addChild2g
java.util.function.BiConsumerTYPE@
6src\main\java\org\jabref\model\util\TreeCollector.java (2x
%org.jabref.model.util.TreeCollector.TTYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java (2x
%org.jabref.model.util.TreeCollector.TTYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java (¬
;org.jabref.model.util.TreeCollector?equivalence@28.30:28.41VARIABLE@
6src\main\java\org\jabref\model\util\TreeCollector.java ()"
isFinalfalse"
typeBiPredicate<T, T>"y
declarationStringd<mark class="modifier">private </mark>BiPredicate<T, T> <mark class="class-field">equivalence</mark>"
isStaticfalse"
accessprivate*equivalence2h
java.util.function.BiPredicateTYPE@
6src\main\java\org\jabref\model\util\TreeCollector.java (2x
%org.jabref.model.util.TreeCollector.TTYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java (2x
%org.jabref.model.util.TreeCollector.TTYPE_ARGUMENT@
6src\main\java\org\jabref\model\util\TreeCollector.java (|
%org.jabref.model.util.TreeCollector.TTYPE_PARAMETER@
6src\main\java\org\jabref\model\util\TreeCollector.java (*T