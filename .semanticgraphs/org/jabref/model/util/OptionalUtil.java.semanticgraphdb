
5src\main\java\org\jabref\model\util\OptionalUtil.java¿
"org.jabref.model.util.OptionalUtilCLASS?
5src\main\java\org\jabref\model\util\OptionalUtil.java (" 
packageorg.jabref.model.util"
isFinalfalse"
inner classfalse"

isAbstractfalse"j
declarationStringU<mark class="modifier">public </mark><mark class="modifier">class </mark>OptionalUtil"
accesspublic*OptionalUtil2Õ
}org.jabref.model.util.OptionalUtil.equals(java.util.Optional<T>, java.util.Optional<U>, java.util.function.BiPredicate<T, U>)DECLARATION?
5src\main\java\org\jabref\model\util\OptionalUtil.java! ('2ê
@org.jabref.model.util.OptionalUtil.toList(java.util.Optional<T>)DECLARATION?
5src\main\java\org\jabref\model\util\OptionalUtil.java ($2ì
Corg.jabref.model.util.OptionalUtil.toList(java.util.Optional<T>...)DECLARATION?
5src\main\java\org\jabref\model\util\OptionalUtil.java) )($2Ù
£org.jabref.model.util.OptionalUtil.flatMapFromStream(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>)DECLARATION?
5src\main\java\org\jabref\model\util\OptionalUtil.java-# -(42Á
ñorg.jabref.model.util.OptionalUtil.flatMap(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.Collection<? extends R>>)DECLARATION?
5src\main\java\org\jabref\model\util\OptionalUtil.java1# 1(*2∑
gorg.jabref.model.util.OptionalUtil.isPresentAnd(java.util.Optional<T>, java.util.function.Predicate<T>)DECLARATION?
5src\main\java\org\jabref\model\util\OptionalUtil.java5 5(*2™
Zorg.jabref.model.util.OptionalUtil.isPresentAndTrue(java.util.Optional<java.lang.Boolean>)DECLARATION?
5src\main\java\org\jabref\model\util\OptionalUtil.java9 9(.2—
Äorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>)DECLARATION?
5src\main\java\org\jabref\model\util\OptionalUtil.java=( =(/2ª
korg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<? extends T>, java.util.Optional<? extends T>)DECLARATION?
5src\main\java\org\jabref\model\util\OptionalUtil.javaE" E((2ì
Corg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<T>, S)DECLARATION?
5src\main\java\org\jabref\model\util\OptionalUtil.javaM% M(+∏
}org.jabref.model.util.OptionalUtil.equals(java.util.Optional<T>, java.util.Optional<U>, java.util.function.BiPredicate<T, U>)METHOD?
5src\main\java\org\jabref\model\util\OptionalUtil.java! ('"
isFinalfalse"Ø
declarationStringô<mark class="modifier">public </mark><mark class="modifier">static </mark><mark class="modifier">boolean</mark> <mark class="method">equals</mark>(Optional&lt;T&gt; left<mark class="modifier"><mark class="modifier">,</mark></mark> Optional&lt;U&gt; right<mark class="modifier"><mark class="modifier">,</mark></mark> BiPredicate&lt;T<mark class="modifier"><mark class="modifier">,</mark></mark> U&gt; equality)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeboolean*equals2g
java.util.Optional.isPresent()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java (2g
java.util.Optional.isPresent()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java (#2g
java.util.Optional.isPresent()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java (2r
)java.util.function.BiPredicate.test(T, U)CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java  ($2a
java.util.Optional.get()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java* (-2a
java.util.Optional.get()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java7 (:2Ã
Çorg.jabref.model.util.OptionalUtil.equals(java.util.Optional<T>, java.util.Optional<U>, java.util.function.BiPredicate<T, U>)!leftCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java (2Õ
Éorg.jabref.model.util.OptionalUtil.equals(java.util.Optional<T>, java.util.Optional<U>, java.util.function.BiPredicate<T, U>)!rightCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java (2Õ
Éorg.jabref.model.util.OptionalUtil.equals(java.util.Optional<T>, java.util.Optional<U>, java.util.function.BiPredicate<T, U>)!rightCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java (2–
Üorg.jabref.model.util.OptionalUtil.equals(java.util.Optional<T>, java.util.Optional<U>, java.util.function.BiPredicate<T, U>)!equalityCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java (2Ã
Çorg.jabref.model.util.OptionalUtil.equals(java.util.Optional<T>, java.util.Optional<U>, java.util.function.BiPredicate<T, U>)!leftCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java% ()2Õ
Éorg.jabref.model.util.OptionalUtil.equals(java.util.Optional<T>, java.util.Optional<U>, java.util.function.BiPredicate<T, U>)!rightCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java1 (62—
Çorg.jabref.model.util.OptionalUtil.equals(java.util.Optional<T>, java.util.Optional<U>, java.util.function.BiPredicate<T, U>)!left	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java4 (82“
Éorg.jabref.model.util.OptionalUtil.equals(java.util.Optional<T>, java.util.Optional<U>, java.util.function.BiPredicate<T, U>)!right	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.javaF (K2’
Üorg.jabref.model.util.OptionalUtil.equals(java.util.Optional<T>, java.util.Optional<U>, java.util.function.BiPredicate<T, U>)!equality	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java_ (g2W
booleanRETURN_TYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.java ( 2“
org.jabref.model.util.OptionalUtil.equals(java.util.Optional<T>, java.util.Optional<U>, java.util.function.BiPredicate<T, U>).TTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java (2“
org.jabref.model.util.OptionalUtil.equals(java.util.Optional<T>, java.util.Optional<U>, java.util.function.BiPredicate<T, U>).UTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java (˙
Çorg.jabref.model.util.OptionalUtil.equals(java.util.Optional<T>, java.util.Optional<U>, java.util.function.BiPredicate<T, U>)!left	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java4 (8"
typeOptional<T>"
isFinalfalse"I
declarationString4Optional<<mark class="type-parameter">T</mark>> left*left2[
java.util.OptionalTYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.java( (02—
org.jabref.model.util.OptionalUtil.equals(java.util.Optional<T>, java.util.Optional<U>, java.util.function.BiPredicate<T, U>).TTYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.java1 (2˝
Éorg.jabref.model.util.OptionalUtil.equals(java.util.Optional<T>, java.util.Optional<U>, java.util.function.BiPredicate<T, U>)!right	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.javaF (K"
typeOptional<U>"
isFinalfalse"J
declarationString5Optional<<mark class="type-parameter">U</mark>> right*right2[
java.util.OptionalTYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.java: (B2—
org.jabref.model.util.OptionalUtil.equals(java.util.Optional<T>, java.util.Optional<U>, java.util.function.BiPredicate<T, U>).UTYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.javaC (D∂
Üorg.jabref.model.util.OptionalUtil.equals(java.util.Optional<T>, java.util.Optional<U>, java.util.function.BiPredicate<T, U>)!equality	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java_ (g"
typeBiPredicate<T, U>"
isFinalfalse"ñ
declarationStringÄBiPredicate<<mark class="type-parameter">T</mark><mark class="modifier">,</mark> <mark class="type-parameter">U</mark>> equality*equality2g
java.util.function.BiPredicateTYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.javaM (X2—
org.jabref.model.util.OptionalUtil.equals(java.util.Optional<T>, java.util.Optional<U>, java.util.function.BiPredicate<T, U>).UTYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.javaY (Z2—
org.jabref.model.util.OptionalUtil.equals(java.util.Optional<T>, java.util.Optional<U>, java.util.function.BiPredicate<T, U>).TTYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.java\ (]’
org.jabref.model.util.OptionalUtil.equals(java.util.Optional<T>, java.util.Optional<U>, java.util.function.BiPredicate<T, U>).TTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java (*T’
org.jabref.model.util.OptionalUtil.equals(java.util.Optional<T>, java.util.Optional<U>, java.util.function.BiPredicate<T, U>).UTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java (*Uï
@org.jabref.model.util.OptionalUtil.toList(java.util.Optional<T>)METHOD?
5src\main\java\org\jabref\model\util\OptionalUtil.java ($"
isFinalfalse"©
declarationStringì<mark class="modifier">public </mark><mark class="modifier">static </mark>List&lt;T&gt; <mark class="method">toList</mark>(Optional&lt;T&gt; value)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeList<T>*toList2g
java.util.Optional.isPresent()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java (2o
&java.util.Collections.singletonList(T)CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java (,2a
java.util.Optional.get()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java3 (62j
!java.util.Collections.emptyList()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java! !((2è
Forg.jabref.model.util.OptionalUtil.toList(java.util.Optional<T>)!valueCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java (2è
Forg.jabref.model.util.OptionalUtil.toList(java.util.Optional<T>)!valueCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java- (22î
Forg.jabref.model.util.OptionalUtil.toList(java.util.Optional<T>)!value	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java1 (62^
java.util.ListRETURN_TYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.java (2õ
Borg.jabref.model.util.OptionalUtil.toList(java.util.Optional<T>).TRETURN_TYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.java (2ï
Borg.jabref.model.util.OptionalUtil.toList(java.util.Optional<T>).TTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java (Ç
Forg.jabref.model.util.OptionalUtil.toList(java.util.Optional<T>)!value	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java1 (6"
typeOptional<T>"
isFinalfalse"J
declarationString5Optional<<mark class="type-parameter">T</mark>> value*value2[
java.util.OptionalTYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.java% (-2î
Borg.jabref.model.util.OptionalUtil.toList(java.util.Optional<T>).TTYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.java. (/ò
Borg.jabref.model.util.OptionalUtil.toList(java.util.Optional<T>).TTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java (*TŒ
Corg.jabref.model.util.OptionalUtil.toList(java.util.Optional<T>...)METHOD?
5src\main\java\org\jabref\model\util\OptionalUtil.java) )($"
isFinalfalse"ﬁ
declarationString»<mark class="annotation">@SafeVarargs</mark> <br><mark class="modifier">public </mark><mark class="modifier">static </mark>List&lt;T&gt; <mark class="method">toList</mark>(Optional&lt;T&gt;... values)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeList<T>*toList2¿
wjava.util.stream.Stream.flatMap(java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>)CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java*! *((2i
 java.util.stream.Stream.of(T...)CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java* *(2ì
Jorg.jabref.model.util.OptionalUtil.toList(java.util.Optional<T>...)!valuesCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java* *(2ò
Jorg.jabref.model.util.OptionalUtil.toList(java.util.Optional<T>...)!values	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java)4 )(:2^
java.util.ListRETURN_TYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.java) )(2û
Eorg.jabref.model.util.OptionalUtil.toList(java.util.Optional<T>...).TRETURN_TYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.java) )(2ò
Eorg.jabref.model.util.OptionalUtil.toList(java.util.Optional<T>...).TTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java) )(ˆ
Jorg.jabref.model.util.OptionalUtil.toList(java.util.Optional<T>...)!values	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java)4 )(:"
typeOptional<T>"
isFinalfalse"K
declarationString6Optional<<mark class="type-parameter">T</mark>> values*values2`
java.util.Optional<T>[]TYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.java)% )(-õ
Eorg.jabref.model.util.OptionalUtil.toList(java.util.Optional<T>...).TTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java) )(*T…
£org.jabref.model.util.OptionalUtil.flatMapFromStream(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>)METHOD?
5src\main\java\org\jabref\model\util\OptionalUtil.java-# -(4"
isFinalfalse"ı
declarationStringﬂ<mark class="modifier">public </mark><mark class="modifier">static </mark>Stream&lt;R&gt; <mark class="method">flatMapFromStream</mark>(Optional&lt;T&gt; value<mark class="modifier"><mark class="modifier">,</mark></mark> Function&lt;? super T<mark class="modifier"><mark class="modifier">,</mark></mark> ? extends Stream&lt;? extends R&gt;&gt; mapper)"
isStatictrue"
accesspublic"

isAbstractfalse"
type	Stream<R>*flatMapFromStream2¿
wjava.util.stream.Stream.flatMap(java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>)CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java. .(%2d
java.util.Optional.stream()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java. .(2Û
©org.jabref.model.util.OptionalUtil.flatMapFromStream(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>)!valueCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java. .(2Ù
™org.jabref.model.util.OptionalUtil.flatMapFromStream(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>)!mapperCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java.& .(,2¯
©org.jabref.model.util.OptionalUtil.flatMapFromStream(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>)!value	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java-A -(F2˙
™org.jabref.model.util.OptionalUtil.flatMapFromStream(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>)!mapper	PARAMETER@
5src\main\java\org\jabref\model\util\OptionalUtil.java-{ -(Å2g
java.util.stream.StreamRETURN_TYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.java- -(2ˇ
•org.jabref.model.util.OptionalUtil.flatMapFromStream(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>).RRETURN_TYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.java-  -(!2˘
•org.jabref.model.util.OptionalUtil.flatMapFromStream(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>).TTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java- -(2˘
•org.jabref.model.util.OptionalUtil.flatMapFromStream(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>).RTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java- -( 
©org.jabref.model.util.OptionalUtil.flatMapFromStream(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>)!value	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java-A -(F"
typeOptional<T>"
isFinalfalse"J
declarationString5Optional<<mark class="type-parameter">T</mark>> value*value2[
java.util.OptionalTYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.java-5 -(=2¯
•org.jabref.model.util.OptionalUtil.flatMapFromStream(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>).TTYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.java-> -(?À
™org.jabref.model.util.OptionalUtil.flatMapFromStream(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>)!mapper	PARAMETER@
5src\main\java\org\jabref\model\util\OptionalUtil.java-{ -(Å":
type2Function<? super T, ? extends Stream<? extends R>>"
isFinalfalse"µ
declarationStringüFunction<? super <mark class="type-parameter">T</mark><mark class="modifier">,</mark> ? extends Stream<? extends <mark class="type-parameter">R</mark>>> mapper*mapper2d
java.util.function.FunctionTYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.java-H -(P2[
	? super TTYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.java-Y -(Z¸
•org.jabref.model.util.OptionalUtil.flatMapFromStream(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>).TTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java- -(*T¸
•org.jabref.model.util.OptionalUtil.flatMapFromStream(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>).RTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java- -(*Rú
ñorg.jabref.model.util.OptionalUtil.flatMap(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.Collection<? extends R>>)METHOD?
5src\main\java\org\jabref\model\util\OptionalUtil.java1# 1(*"
isFinalfalse"Ô
declarationStringŸ<mark class="modifier">public </mark><mark class="modifier">static </mark>Stream&lt;R&gt; <mark class="method">flatMap</mark>(Optional&lt;T&gt; value<mark class="modifier"><mark class="modifier">,</mark></mark> Function&lt;? super T<mark class="modifier"><mark class="modifier">,</mark></mark> ? extends Collection&lt;? extends R&gt;&gt; mapper)"
isStatictrue"
accesspublic"

isAbstractfalse"
type	Stream<R>*flatMap2¿
wjava.util.stream.Stream.flatMap(java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>)CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java2 2(%2d
java.util.Optional.stream()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java2 2(2f
java.util.Collection.stream()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java2G 2(M2m
$java.util.function.Function.apply(T)CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java28 2(=2Ê
úorg.jabref.model.util.OptionalUtil.flatMap(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.Collection<? extends R>>)!valueCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java2 2(2Á
ùorg.jabref.model.util.OptionalUtil.flatMap(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.Collection<? extends R>>)!mapperCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java21 2(72Ù
™org.jabref.model.util.OptionalUtil.flatMap(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.Collection<? extends R>>)?element@50.38:50.45CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java2> 2(E2Î
úorg.jabref.model.util.OptionalUtil.flatMap(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.Collection<? extends R>>)!value	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java17 1(<2Ï
ùorg.jabref.model.util.OptionalUtil.flatMap(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.Collection<? extends R>>)!mapper	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java1u 1({2˚
™org.jabref.model.util.OptionalUtil.flatMap(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.Collection<? extends R>>)?element@50.38:50.45DECLARATION?
5src\main\java\org\jabref\model\util\OptionalUtil.java2& 2(-2g
java.util.stream.StreamRETURN_TYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.java1 1(2Ú
òorg.jabref.model.util.OptionalUtil.flatMap(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.Collection<? extends R>>).RRETURN_TYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.java1  1(!2Ï
òorg.jabref.model.util.OptionalUtil.flatMap(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.Collection<? extends R>>).TTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java1 1(2Ï
òorg.jabref.model.util.OptionalUtil.flatMap(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.Collection<? extends R>>).RTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java1 1(∞
úorg.jabref.model.util.OptionalUtil.flatMap(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.Collection<? extends R>>)!value	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java17 1(<"
typeOptional<T>"
isFinalfalse"J
declarationString5Optional<<mark class="type-parameter">T</mark>> value*value2[
java.util.OptionalTYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.java1+ 1(32Î
òorg.jabref.model.util.OptionalUtil.flatMap(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.Collection<? extends R>>).TTYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.java14 1(5≈
ùorg.jabref.model.util.OptionalUtil.flatMap(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.Collection<? extends R>>)!mapper	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java1u 1({">
type6Function<? super T, ? extends Collection<? extends R>>"
isFinalfalse"π
declarationString£Function<? super <mark class="type-parameter">T</mark><mark class="modifier">,</mark> ? extends Collection<? extends <mark class="type-parameter">R</mark>>> mapper*mapper2d
java.util.function.FunctionTYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.java1> 1(F2[
	? super TTYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.java1O 1(P¬
™org.jabref.model.util.OptionalUtil.flatMap(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.Collection<? extends R>>)?element@50.38:50.45VARIABLE?
5src\main\java\org\jabref\model\util\OptionalUtil.java2& 2(-"
type"
isFinalfalse"
declarationString element*element2TYPEÔ
òorg.jabref.model.util.OptionalUtil.flatMap(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.Collection<? extends R>>).TTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java1 1(*TÔ
òorg.jabref.model.util.OptionalUtil.flatMap(java.util.Optional<T>, java.util.function.Function<? super T, ? extends java.util.Collection<? extends R>>).RTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java1 1(*R¢
gorg.jabref.model.util.OptionalUtil.isPresentAnd(java.util.Optional<T>, java.util.function.Predicate<T>)METHOD?
5src\main\java\org\jabref\model\util\OptionalUtil.java5 5(*"
isFinalfalse"ˇ
declarationStringÈ<mark class="modifier">public </mark><mark class="modifier">static </mark>Boolean <mark class="method">isPresentAnd</mark>(Optional&lt;T&gt; value<mark class="modifier"><mark class="modifier">,</mark></mark> Predicate&lt;T&gt; check)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeBoolean*isPresentAnd2g
java.util.Optional.isPresent()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java6 6(2m
$java.util.function.Predicate.test(T)CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java6* 6(.2a
java.util.Optional.get()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java65 6(82∂
morg.jabref.model.util.OptionalUtil.isPresentAnd(java.util.Optional<T>, java.util.function.Predicate<T>)!valueCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java6 6(2∂
morg.jabref.model.util.OptionalUtil.isPresentAnd(java.util.Optional<T>, java.util.function.Predicate<T>)!checkCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java6$ 6()2∂
morg.jabref.model.util.OptionalUtil.isPresentAnd(java.util.Optional<T>, java.util.function.Predicate<T>)!valueCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java6/ 6(42ª
morg.jabref.model.util.OptionalUtil.isPresentAnd(java.util.Optional<T>, java.util.function.Predicate<T>)!value	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java57 5(<2ª
morg.jabref.model.util.OptionalUtil.isPresentAnd(java.util.Optional<T>, java.util.function.Predicate<T>)!check	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java5K 5(P2a
java.lang.BooleanRETURN_TYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.java5 5(2º
iorg.jabref.model.util.OptionalUtil.isPresentAnd(java.util.Optional<T>, java.util.function.Predicate<T>).TTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java5 5(–
morg.jabref.model.util.OptionalUtil.isPresentAnd(java.util.Optional<T>, java.util.function.Predicate<T>)!value	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java57 5(<"
typeOptional<T>"
isFinalfalse"J
declarationString5Optional<<mark class="type-parameter">T</mark>> value*value2[
java.util.OptionalTYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.java5+ 5(32ª
iorg.jabref.model.util.OptionalUtil.isPresentAnd(java.util.Optional<T>, java.util.function.Predicate<T>).TTYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.java54 5(5‹
morg.jabref.model.util.OptionalUtil.isPresentAnd(java.util.Optional<T>, java.util.function.Predicate<T>)!check	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java5K 5(P"
typePredicate<T>"
isFinalfalse"K
declarationString6Predicate<<mark class="type-parameter">T</mark>> check*check2e
java.util.function.PredicateTYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.java5> 5(G2ª
iorg.jabref.model.util.OptionalUtil.isPresentAnd(java.util.Optional<T>, java.util.function.Predicate<T>).TTYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.java5H 5(Iø
iorg.jabref.model.util.OptionalUtil.isPresentAnd(java.util.Optional<T>, java.util.function.Predicate<T>).TTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java5 5(*T≥
Zorg.jabref.model.util.OptionalUtil.isPresentAndTrue(java.util.Optional<java.lang.Boolean>)METHOD?
5src\main\java\org\jabref\model\util\OptionalUtil.java9 9(."
isFinalfalse"≥
declarationStringù<mark class="modifier">public </mark><mark class="modifier">static </mark>Boolean <mark class="method">isPresentAndTrue</mark>(Optional&lt;Boolean&gt; value)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeBoolean*isPresentAndTrue2g
java.util.Optional.isPresent()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java: :(2a
java.util.Optional.get()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java:* :(-2©
`org.jabref.model.util.OptionalUtil.isPresentAndTrue(java.util.Optional<java.lang.Boolean>)!valueCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java: :(2©
`org.jabref.model.util.OptionalUtil.isPresentAndTrue(java.util.Optional<java.lang.Boolean>)!valueCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java:$ :()2Æ
`org.jabref.model.util.OptionalUtil.isPresentAndTrue(java.util.Optional<java.lang.Boolean>)!value	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java9A 9(F2a
java.lang.BooleanRETURN_TYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.java9 9(2Ø
\org.jabref.model.util.OptionalUtil.isPresentAndTrue(java.util.Optional<java.lang.Boolean>).TTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java9 9(“
`org.jabref.model.util.OptionalUtil.isPresentAndTrue(java.util.Optional<java.lang.Boolean>)!value	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java9A 9(F"
typeOptional<Boolean>"
isFinalfalse",
declarationStringOptional<Boolean> value*value2[
java.util.OptionalTYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.java9/ 9(72c
java.lang.BooleanTYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.java98 9(?≤
\org.jabref.model.util.OptionalUtil.isPresentAndTrue(java.util.Optional<java.lang.Boolean>).TTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java9 9(*Tˇ 
Äorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>)METHOD?
5src\main\java\org\jabref\model\util\OptionalUtil.java=( =(/"
isFinalfalse"‡
declarationString <mark class="modifier">public </mark><mark class="modifier">static </mark>Optional&lt;R&gt; <mark class="method">combine</mark>(Optional&lt;T&gt; valueOne<mark class="modifier"><mark class="modifier">,</mark></mark> Optional&lt;S&gt; valueTwo<mark class="modifier"><mark class="modifier">,</mark></mark> BiFunction&lt;T<mark class="modifier"><mark class="modifier">,</mark></mark> S<mark class="modifier"><mark class="modifier">,</mark></mark> R&gt; combine)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeOptional<R>*combine2g
java.util.Optional.isPresent()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java> >(2g
java.util.Optional.isPresent()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java>- >(62i
 java.util.Optional.ofNullable(T)CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java? ?(&2r
)java.util.function.BiFunction.apply(T, U)CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java?/ ?(42a
java.util.Optional.get()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java?> ?(A2a
java.util.Optional.get()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java?N ?(Q2c
java.util.Optional.empty()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.javaA A(!2”
âorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>)!valueOneCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java> >(2”
âorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>)!valueTwoCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java>$ >(,2“
àorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>)!combineCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java?' ?(.2”
âorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>)!valueOneCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java?5 ?(=2”
âorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>)!valueTwoCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.java?E ?(M2ÿ
âorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>)!valueOne	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java=< =(D2ÿ
âorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>)!valueTwo	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java=R =(Z2◊
àorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>)!combine	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java=p =(w2b
java.util.OptionalRETURN_TYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.java= =($2‹
Çorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>).RRETURN_TYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.java=% =(&2÷
Çorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>).TTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java= =(2÷
Çorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>).STYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java= =(2÷
Çorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>).RTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java= =(ç
âorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>)!valueOne	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java=< =(D"
typeOptional<T>"
isFinalfalse"M
declarationString8Optional<<mark class="type-parameter">T</mark>> valueOne*valueOne2[
java.util.OptionalTYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.java=0 =(82’
Çorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>).TTYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.java=9 =(:ç
âorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>)!valueTwo	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java=R =(Z"
typeOptional<S>"
isFinalfalse"M
declarationString8Optional<<mark class="type-parameter">S</mark>> valueTwo*valueTwo2[
java.util.OptionalTYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.java=F =(N2’
Çorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>).STYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.java=O =(P€	
àorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>)!combine	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java=p =(w"
typeBiFunction<T, S, R>"
isFinalfalse"Ÿ
declarationString√BiFunction<<mark class="type-parameter">T</mark><mark class="modifier">,</mark> <mark class="type-parameter">S</mark><mark class="modifier">,</mark> <mark class="type-parameter">R</mark>> combine*combine2f
java.util.function.BiFunctionTYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.java=\ =(f2’
Çorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>).STYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.java=g =(h2’
Çorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>).RTYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.java=j =(k2’
Çorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>).TTYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.java=m =(nŸ
Çorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>).TTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java= =(*TŸ
Çorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>).STYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java= =(*SŸ
Çorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>).RTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.java= =(*R∞
korg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<? extends T>, java.util.Optional<? extends T>)METHOD?
5src\main\java\org\jabref\model\util\OptionalUtil.javaE" E(("
isFinalfalse"ú
declarationStringÜ<mark class="modifier">public </mark><mark class="modifier">static </mark>Optional&lt;T&gt; <mark class="method">orElse</mark>(Optional&lt;? extends T&gt; valueOne<mark class="modifier"><mark class="modifier">,</mark></mark> Optional&lt;? extends T&gt; valueTwo)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeOptional<T>*orElse2g
java.util.Optional.isPresent()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.javaF F(2î
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.javaG G(2î
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.javaI I(2Ω
torg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<? extends T>, java.util.Optional<? extends T>)!valueOneCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.javaF F(2Ω
torg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<? extends T>, java.util.Optional<? extends T>)!valueOneCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.javaG G(2¬
yorg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<? extends T>, java.util.Optional<? extends T>)?f@71.32:71.33CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.javaG% G(&2Ω
torg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<? extends T>, java.util.Optional<? extends T>)!valueTwoCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.javaI I(2¬
yorg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<? extends T>, java.util.Optional<? extends T>)?f@73.32:73.33CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.javaI% I(&2¬
torg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<? extends T>, java.util.Optional<? extends T>)!valueOne	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.javaE? E(G2¬
torg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<? extends T>, java.util.Optional<? extends T>)!valueTwo	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.javaE_ E(g2…
yorg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<? extends T>, java.util.Optional<? extends T>)?f@71.32:71.33DECLARATION?
5src\main\java\org\jabref\model\util\OptionalUtil.javaG  G(!2…
yorg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<? extends T>, java.util.Optional<? extends T>)?f@73.32:73.33DECLARATION?
5src\main\java\org\jabref\model\util\OptionalUtil.javaI  I(!2b
java.util.OptionalRETURN_TYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.javaE E(2∆
morg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<? extends T>, java.util.Optional<? extends T>).TRETURN_TYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.javaE E( 2¿
morg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<? extends T>, java.util.Optional<? extends T>).TTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.javaE E(≥
torg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<? extends T>, java.util.Optional<? extends T>)!valueOne	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.javaE? E(G"
typeOptional<? extends T>"
isFinalfalse"W
declarationStringBOptional<? extends <mark class="type-parameter">T</mark>> valueOne*valueOne2[
java.util.OptionalTYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.javaE) E(1≥
torg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<? extends T>, java.util.Optional<? extends T>)!valueTwo	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.javaE_ E(g"
typeOptional<? extends T>"
isFinalfalse"W
declarationStringBOptional<? extends <mark class="type-parameter">T</mark>> valueTwo*valueTwo2[
java.util.OptionalTYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.javaEI E(QÑ
yorg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<? extends T>, java.util.Optional<? extends T>)?f@71.32:71.33VARIABLE?
5src\main\java\org\jabref\model\util\OptionalUtil.javaG  G(!"
type"
isFinalfalse"
declarationString f*f2TYPEÑ
yorg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<? extends T>, java.util.Optional<? extends T>)?f@73.32:73.33VARIABLE?
5src\main\java\org\jabref\model\util\OptionalUtil.javaI  I(!"
type"
isFinalfalse"
declarationString f*f2TYPE√
morg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<? extends T>, java.util.Optional<? extends T>).TTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.javaE E(*T±
Corg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<T>, S)METHOD?
5src\main\java\org\jabref\model\util\OptionalUtil.javaM% M(+"
isFinalfalse"È
declarationString”<mark class="modifier">public </mark><mark class="modifier">static </mark>S <mark class="method">orElse</mark>(Optional&lt;T&gt; optional<mark class="modifier"><mark class="modifier">,</mark></mark> S otherwise)"
isStatictrue"
accesspublic"

isAbstractfalse"	
typeS*orElse2g
java.util.Optional.isPresent()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.javaN N(2a
java.util.Optional.get()CALL?
5src\main\java\org\jabref\model\util\OptionalUtil.javaO O(2ï
Lorg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<T>, S)!optionalCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.javaN N(2ï
Lorg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<T>, S)!optionalCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.javaO O(2ñ
Morg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<T>, S)!otherwiseCALL?
5src\main\java\org\jabref\model\util\OptionalUtil.javaQ Q(2ö
Lorg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<T>, S)!optional	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.javaM8 M(@2õ
Morg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<T>, S)!otherwise	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.javaMD M(M2Q
SRETURN_TYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.javaM# M($2ò
Eorg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<T>, S).TTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.javaM M(2ò
Eorg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<T>, S).STYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.javaM  M(!Ì
Lorg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<T>, S)!optional	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.javaM8 M(@"
typeOptional<T>"
isFinalfalse")
declarationStringOptional<T> optional*optional2[
java.util.OptionalTYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.javaM, M(42ó
Eorg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<T>, S).TTYPE_ARGUMENT?
5src\main\java\org\jabref\model\util\OptionalUtil.javaM5 M(6ö
Morg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<T>, S)!otherwise	PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.javaMD M(M"	
typeS"
isFinalfalse"D
declarationString/<mark class="type-parameter">S</mark> otherwise*	otherwise2é
Eorg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<T>, S).STYPE?
5src\main\java\org\jabref\model\util\OptionalUtil.javaMB M(CÆ
Eorg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<T>, S).TTYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.javaM M(*T2ê
Eorg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<T>, S).SEXTEND?
5src\main\java\org\jabref\model\util\OptionalUtil.javaM M(õ
Eorg.jabref.model.util.OptionalUtil.orElse(java.util.Optional<T>, S).STYPE_PARAMETER?
5src\main\java\org\jabref\model\util\OptionalUtil.javaM  M(!*S