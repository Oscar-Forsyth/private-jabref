
:src\test\java\org\jabref\model\groups\SearchGroupTest.java·
'org.jabref.model.groups.SearchGroupTestCLASSD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java (""
packageorg.jabref.model.groups"
isFinalfalse"
inner classfalse"

isAbstractfalse"m
declarationStringX<mark class="modifier">public </mark><mark class="modifier">class </mark>SearchGroupTest"
accesspublic*SearchGroupTest2ë
<org.jabref.model.groups.SearchGroupTest.containsFindsWords()DECLARATIOND
:src\test\java\org\jabref\model\groups\SearchGroupTest.java ("2ó
Borg.jabref.model.groups.SearchGroupTest.containsDoesNotFindWords()DECLARATIOND
:src\test\java\org\jabref\model\groups\SearchGroupTest.java% %((2•
Porg.jabref.model.groups.SearchGroupTest.containsFindsWordWithRegularExpression()DECLARATIOND
:src\test\java\org\jabref\model\groups\SearchGroupTest.java, ,(62≥
^org.jabref.model.groups.SearchGroupTest.containsDoesNotFindsWordWithInvalidRegularExpression()DECLARATIOND
:src\test\java\org\jabref\model\groups\SearchGroupTest.java5 5(D2ü
Jorg.jabref.model.groups.SearchGroupTest.notQueryWorksWithLeftPartOfQuery()DECLARATIOND
:src\test\java\org\jabref\model\groups\SearchGroupTest.java> >(02°
Lorg.jabref.model.groups.SearchGroupTest.notQueryWorksWithLRightPartOfQuery()DECLARATIOND
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaH H(22ê
;org.jabref.model.groups.SearchGroupTest?entry1D@17.28:17.35DECLARATIOND
:src\test\java\org\jabref\model\groups\SearchGroupTest.java (#2ê
;org.jabref.model.groups.SearchGroupTest?entry2D@23.28:23.35DECLARATIOND
:src\test\java\org\jabref\model\groups\SearchGroupTest.java (#Ö
<org.jabref.model.groups.SearchGroupTest.containsFindsWords()METHODD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java (""
isFinalfalse"∏
declarationString¢<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">containsFindsWords</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*containsFindsWords2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javai (o2e
java.util.List.of(E, E)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java -  (/2∞
borg.jabref.model.groups.AbstractGroup.containsAll(java.util.List<org.jabref.model.entry.BibEntry>)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java!! !(,2ò
…org.jabref.model.groups.SearchGroup.SearchGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java( (32â
;org.jabref.model.groups.SearchGroupTest?entry1D@17.28:17.35CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java 0  (72â
;org.jabref.model.groups.SearchGroupTest?entry2D@23.28:23.35CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java 9  (@2§
Vorg.jabref.model.groups.SearchGroupTest.containsFindsWords()?groupPositive@31.20:31.33CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java! !( 2•
Worg.jabref.model.groups.SearchGroupTest.containsFindsWords()?positiveResult@32.23:32.37CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java!- !(;2´
Vorg.jabref.model.groups.SearchGroupTest.containsFindsWords()?groupPositive@31.20:31.33DECLARATIOND
:src\test\java\org\jabref\model\groups\SearchGroupTest.java (!2¨
Worg.jabref.model.groups.SearchGroupTest.containsFindsWords()?positiveResult@32.23:32.37DECLARATIOND
:src\test\java\org\jabref\model\groups\SearchGroupTest.java   (%2Y
voidRETURN_TYPED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java (Ñ
Vorg.jabref.model.groups.SearchGroupTest.containsFindsWords()?groupPositive@31.20:31.33VARIABLED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java (!"
typeSearchGroup"
isFinalfalse"ô
declarationStringÉ<mark class="modifier"> </mark>SearchGroup <mark class="class-field">groupPositive</mark> = new SearchGroup("A"<mark class="modifier">,</mark> GroupHierarchyType.INDEPENDENT, "Test"<mark class="modifier">,</mark> EnumSet.noneOf(SearchRules.SearchFlags.class))*groupPositive2q
#org.jabref.model.groups.SearchGroupTYPED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java (2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javai (o2ò
…org.jabref.model.groups.SearchGroup.SearchGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java( (3…
Worg.jabref.model.groups.SearchGroupTest.containsFindsWords()?positiveResult@32.23:32.37VARIABLED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java   (%"
typeList<BibEntry>"
isFinalfalse"é
declarationStringy<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">positiveResult</mark> = List.of(entry1D, entry2D)*positiveResult2\
java.util.ListTYPED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java   (2v
org.jabref.model.entry.BibEntryTYPE_ARGUMENTD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java   (2e
java.util.List.of(E, E)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java -  (/2â
;org.jabref.model.groups.SearchGroupTest?entry1D@17.28:17.35CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java 0  (72â
;org.jabref.model.groups.SearchGroupTest?entry2D@23.28:23.35CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java 9  (@Ø
Borg.jabref.model.groups.SearchGroupTest.containsDoesNotFindWords()METHODD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java% %(("
isFinalfalse"æ
declarationString®<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">containsDoesNotFindWords</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*containsDoesNotFindWords2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java&l &(r2e
java.util.List.of(E, E)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java'- '(/2∞
borg.jabref.model.groups.AbstractGroup.containsAny(java.util.List<org.jabref.model.entry.BibEntry>)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java(" ((-2ò
…org.jabref.model.groups.SearchGroup.SearchGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java&( &(32â
;org.jabref.model.groups.SearchGroupTest?entry1D@17.28:17.35CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java'0 '(72â
;org.jabref.model.groups.SearchGroupTest?entry2D@23.28:23.35CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java'9 '(@2™
\org.jabref.model.groups.SearchGroupTest.containsDoesNotFindWords()?groupNegative@38.20:38.33CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java( ((!2´
]org.jabref.model.groups.SearchGroupTest.containsDoesNotFindWords()?positiveResult@39.23:39.37CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java(. ((<2±
\org.jabref.model.groups.SearchGroupTest.containsDoesNotFindWords()?groupNegative@38.20:38.33DECLARATIOND
:src\test\java\org\jabref\model\groups\SearchGroupTest.java& &(!2≤
]org.jabref.model.groups.SearchGroupTest.containsDoesNotFindWords()?positiveResult@39.23:39.37DECLARATIOND
:src\test\java\org\jabref\model\groups\SearchGroupTest.java' '(%2Y
voidRETURN_TYPED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java% %(ç
\org.jabref.model.groups.SearchGroupTest.containsDoesNotFindWords()?groupNegative@38.20:38.33VARIABLED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java& &(!"
typeSearchGroup"
isFinalfalse"ú
declarationStringÜ<mark class="modifier"> </mark>SearchGroup <mark class="class-field">groupNegative</mark> = new SearchGroup("A"<mark class="modifier">,</mark> GroupHierarchyType.INDEPENDENT, "Unknown"<mark class="modifier">,</mark> EnumSet.noneOf(SearchRules.SearchFlags.class))*groupNegative2q
#org.jabref.model.groups.SearchGroupTYPED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java& &(2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java&l &(r2ò
…org.jabref.model.groups.SearchGroup.SearchGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java&( &(3œ
]org.jabref.model.groups.SearchGroupTest.containsDoesNotFindWords()?positiveResult@39.23:39.37VARIABLED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java' '(%"
typeList<BibEntry>"
isFinalfalse"é
declarationStringy<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">positiveResult</mark> = List.of(entry1D, entry2D)*positiveResult2\
java.util.ListTYPED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java' '(2v
org.jabref.model.entry.BibEntryTYPE_ARGUMENTD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java' '(2e
java.util.List.of(E, E)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java'- '(/2â
;org.jabref.model.groups.SearchGroupTest?entry1D@17.28:17.35CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java'0 '(72â
;org.jabref.model.groups.SearchGroupTest?entry2D@23.28:23.35CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java'9 '(@ò
Porg.jabref.model.groups.SearchGroupTest.containsFindsWordWithRegularExpression()METHODD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java, ,(6"
isFinalfalse"Ã
declarationString∂<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">containsFindsWordWithRegularExpression</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*&containsFindsWordWithRegularExpression2h
java.util.EnumSet.of(E, E)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java-x -(z2ü
Qorg.jabref.model.entry.BibEntry.addKeyword(java.lang.String, java.lang.Character)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java/ /(2õ
Morg.jabref.model.groups.SearchGroup.contains(org.jabref.model.entry.BibEntry)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java1 1(!2ò
…org.jabref.model.groups.SearchGroup.SearchGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java-  -(+2x
*org.jabref.model.entry.BibEntry.BibEntry()CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java. .(%2∞
borg.jabref.model.groups.SearchGroupTest.containsFindsWordWithRegularExpression()?entry@46.17:46.22CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java/ /(2∞
borg.jabref.model.groups.SearchGroupTest.containsFindsWordWithRegularExpression()?group@45.20:45.25CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java1 1(2∞
borg.jabref.model.groups.SearchGroupTest.containsFindsWordWithRegularExpression()?entry@46.17:46.22CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java1" 1('2∑
borg.jabref.model.groups.SearchGroupTest.containsFindsWordWithRegularExpression()?group@45.20:45.25DECLARATIOND
:src\test\java\org\jabref\model\groups\SearchGroupTest.java- -(2∑
borg.jabref.model.groups.SearchGroupTest.containsFindsWordWithRegularExpression()?entry@46.17:46.22DECLARATIOND
:src\test\java\org\jabref\model\groups\SearchGroupTest.java. .(2Y
voidRETURN_TYPED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java, ,(∂
borg.jabref.model.groups.SearchGroupTest.containsFindsWordWithRegularExpression()?group@45.20:45.25VARIABLED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java- -("
typeSearchGroup"
isFinalfalse"Ÿ
declarationString√<mark class="modifier"> </mark>SearchGroup <mark class="class-field">group</mark> = new SearchGroup("myExplicitGroup"<mark class="modifier">,</mark> GroupHierarchyType.INDEPENDENT, "anyfield=rev*"<mark class="modifier">,</mark> EnumSet.of(SearchRules.SearchFlags.CASE_SENSITIVE, SearchRules.SearchFlags.REGULAR_EXPRESSION))*group2q
#org.jabref.model.groups.SearchGroupTYPED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java- -(2h
java.util.EnumSet.of(E, E)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java-x -(z2ò
…org.jabref.model.groups.SearchGroup.SearchGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java-  -(+æ
borg.jabref.model.groups.SearchGroupTest.containsFindsWordWithRegularExpression()?entry@46.17:46.22VARIABLED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java. .("
typeBibEntry"
isFinalfalse"t
declarationString_<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry</mark> = new BibEntry()*entry2m
org.jabref.model.entry.BibEntryTYPED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java. .(2x
*org.jabref.model.entry.BibEntry.BibEntry()CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java. .(%à
^org.jabref.model.groups.SearchGroupTest.containsDoesNotFindsWordWithInvalidRegularExpression()METHODD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java5 5(D"
isFinalfalse"⁄
declarationStringƒ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">containsDoesNotFindsWordWithInvalidRegularExpression</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*4containsDoesNotFindsWordWithInvalidRegularExpression2h
java.util.EnumSet.of(E, E)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java6y 6({2ü
Qorg.jabref.model.entry.BibEntry.addKeyword(java.lang.String, java.lang.Character)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java8 8(2õ
Morg.jabref.model.groups.SearchGroup.contains(org.jabref.model.entry.BibEntry)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java: :("2ò
…org.jabref.model.groups.SearchGroup.SearchGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java6  6(+2x
*org.jabref.model.entry.BibEntry.BibEntry()CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java7 7(%2æ
porg.jabref.model.groups.SearchGroupTest.containsDoesNotFindsWordWithInvalidRegularExpression()?entry@55.17:55.22CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java8 8(2æ
porg.jabref.model.groups.SearchGroupTest.containsDoesNotFindsWordWithInvalidRegularExpression()?group@54.20:54.25CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java: :(2æ
porg.jabref.model.groups.SearchGroupTest.containsDoesNotFindsWordWithInvalidRegularExpression()?entry@55.17:55.22CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java:# :((2≈
porg.jabref.model.groups.SearchGroupTest.containsDoesNotFindsWordWithInvalidRegularExpression()?group@54.20:54.25DECLARATIOND
:src\test\java\org\jabref\model\groups\SearchGroupTest.java6 6(2≈
porg.jabref.model.groups.SearchGroupTest.containsDoesNotFindsWordWithInvalidRegularExpression()?entry@55.17:55.22DECLARATIOND
:src\test\java\org\jabref\model\groups\SearchGroupTest.java7 7(2Y
voidRETURN_TYPED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java5 5(≈
porg.jabref.model.groups.SearchGroupTest.containsDoesNotFindsWordWithInvalidRegularExpression()?group@54.20:54.25VARIABLED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java6 6("
typeSearchGroup"
isFinalfalse"⁄
declarationStringƒ<mark class="modifier"> </mark>SearchGroup <mark class="class-field">group</mark> = new SearchGroup("myExplicitGroup"<mark class="modifier">,</mark> GroupHierarchyType.INDEPENDENT, "anyfield=*rev*"<mark class="modifier">,</mark> EnumSet.of(SearchRules.SearchFlags.CASE_SENSITIVE, SearchRules.SearchFlags.REGULAR_EXPRESSION))*group2q
#org.jabref.model.groups.SearchGroupTYPED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java6 6(2h
java.util.EnumSet.of(E, E)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java6y 6({2ò
…org.jabref.model.groups.SearchGroup.SearchGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java6  6(+Ã
porg.jabref.model.groups.SearchGroupTest.containsDoesNotFindsWordWithInvalidRegularExpression()?entry@55.17:55.22VARIABLED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java7 7("
typeBibEntry"
isFinalfalse"t
declarationString_<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry</mark> = new BibEntry()*entry2m
org.jabref.model.entry.BibEntryTYPED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java7 7(2x
*org.jabref.model.entry.BibEntry.BibEntry()CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java7 7(%ï
Jorg.jabref.model.groups.SearchGroupTest.notQueryWorksWithLeftPartOfQuery()METHODD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java> >(0"
isFinalfalse"∆
declarationString∞<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">notQueryWorksWithLeftPartOfQuery</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid* notQueryWorksWithLeftPartOfQuery2|
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLF
:src\test\java\org\jabref\model\groups\SearchGroupTest.java?† ?(¶2≠
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaC C(2è
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaB B( 2õ
Morg.jabref.model.groups.SearchGroup.contains(org.jabref.model.entry.BibEntry)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaD( D(02ò
…org.jabref.model.groups.SearchGroup.SearchGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java?. ?(92x
*org.jabref.model.entry.BibEntry.BibEntry()CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaA" A(*2∏
jorg.jabref.model.groups.SearchGroupTest.notQueryWorksWithLeftPartOfQuery()?groupToBeClassified@63.20:63.39CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaD D('2Ø
aorg.jabref.model.groups.SearchGroupTest.notQueryWorksWithLeftPartOfQuery()?alphaEntry@65.17:65.27CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaD1 D(;2ø
jorg.jabref.model.groups.SearchGroupTest.notQueryWorksWithLeftPartOfQuery()?groupToBeClassified@63.20:63.39DECLARATIOND
:src\test\java\org\jabref\model\groups\SearchGroupTest.java? ?('2∂
aorg.jabref.model.groups.SearchGroupTest.notQueryWorksWithLeftPartOfQuery()?alphaEntry@65.17:65.27DECLARATIOND
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaA A(2Y
voidRETURN_TYPED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java> >(◊
jorg.jabref.model.groups.SearchGroupTest.notQueryWorksWithLeftPartOfQuery()?groupToBeClassified@63.20:63.39VARIABLED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java? ?('"
typeSearchGroup"
isFinalfalse"–
declarationString∫<mark class="modifier"> </mark>SearchGroup <mark class="class-field">groupToBeClassified</mark> = new SearchGroup("to-be-classified"<mark class="modifier">,</mark> GroupHierarchyType.INDEPENDENT, "NOT(groups=alpha) AND NOT(groups=beta)"<mark class="modifier">,</mark> EnumSet.noneOf(SearchRules.SearchFlags.class))*groupToBeClassified2q
#org.jabref.model.groups.SearchGroupTYPED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java? ?(2|
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLF
:src\test\java\org\jabref\model\groups\SearchGroupTest.java?† ?(¶2ò
…org.jabref.model.groups.SearchGroup.SearchGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java?. ?(9Õ
aorg.jabref.model.groups.SearchGroupTest.notQueryWorksWithLeftPartOfQuery()?alphaEntry@65.17:65.27VARIABLED
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaA A("
typeBibEntry"
isFinalfalse"º
declarationString¶<mark class="modifier"> </mark>BibEntry <mark class="class-field">alphaEntry</mark> = new BibEntry().withCitationKey("alpha").withField(StandardField.GROUPS, "alpha")*
alphaEntry2m
org.jabref.model.entry.BibEntryTYPED
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaA A(2≠
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaC C(2è
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaB B( 2x
*org.jabref.model.entry.BibEntry.BibEntry()CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaA" A(*°
Lorg.jabref.model.groups.SearchGroupTest.notQueryWorksWithLRightPartOfQuery()METHODD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaH H(2"
isFinalfalse"»
declarationString≤<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">notQueryWorksWithLRightPartOfQuery</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*"notQueryWorksWithLRightPartOfQuery2|
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLF
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaI† I(¶2≠
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaM M(2è
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaL L( 2õ
Morg.jabref.model.groups.SearchGroup.contains(org.jabref.model.entry.BibEntry)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaN( N(02ò
…org.jabref.model.groups.SearchGroup.SearchGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaI. I(92x
*org.jabref.model.entry.BibEntry.BibEntry()CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaK! K()2∫
lorg.jabref.model.groups.SearchGroupTest.notQueryWorksWithLRightPartOfQuery()?groupToBeClassified@73.20:73.39CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaN N('2∞
borg.jabref.model.groups.SearchGroupTest.notQueryWorksWithLRightPartOfQuery()?betaEntry@75.17:75.26CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaN1 N(:2¡
lorg.jabref.model.groups.SearchGroupTest.notQueryWorksWithLRightPartOfQuery()?groupToBeClassified@73.20:73.39DECLARATIOND
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaI I('2∑
borg.jabref.model.groups.SearchGroupTest.notQueryWorksWithLRightPartOfQuery()?betaEntry@75.17:75.26DECLARATIOND
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaK K(2Y
voidRETURN_TYPED
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaH H(Ÿ
lorg.jabref.model.groups.SearchGroupTest.notQueryWorksWithLRightPartOfQuery()?groupToBeClassified@73.20:73.39VARIABLED
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaI I('"
typeSearchGroup"
isFinalfalse"–
declarationString∫<mark class="modifier"> </mark>SearchGroup <mark class="class-field">groupToBeClassified</mark> = new SearchGroup("to-be-classified"<mark class="modifier">,</mark> GroupHierarchyType.INDEPENDENT, "NOT(groups=alpha) AND NOT(groups=beta)"<mark class="modifier">,</mark> EnumSet.noneOf(SearchRules.SearchFlags.class))*groupToBeClassified2q
#org.jabref.model.groups.SearchGroupTYPED
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaI I(2|
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLF
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaI† I(¶2ò
…org.jabref.model.groups.SearchGroup.SearchGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaI. I(9 
borg.jabref.model.groups.SearchGroupTest.notQueryWorksWithLRightPartOfQuery()?betaEntry@75.17:75.26VARIABLED
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaK K("
typeBibEntry"
isFinalfalse"π
declarationString£<mark class="modifier"> </mark>BibEntry <mark class="class-field">betaEntry</mark> = new BibEntry().withCitationKey("beta").withField(StandardField.GROUPS, "beta")*	betaEntry2m
org.jabref.model.entry.BibEntryTYPED
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaK K(2≠
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaM M(2è
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaL L( 2x
*org.jabref.model.entry.BibEntry.BibEntry()CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.javaK! K()‹
;org.jabref.model.groups.SearchGroupTest?entry1D@17.28:17.35VARIABLED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java (#"
isFinalfalse"
typeBibEntry"»
declarationString≤<mark class="modifier">private </mark><mark class="modifier">static </mark>BibEntry <mark class="class-field">entry1D</mark> = new BibEntry(StandardEntryType.Misc).withCitationKey("entry1").withField(StandardField.AUTHOR, "Test").withField(StandardField.TITLE, "Case").withField(StandardField.GROUPS, "A");"
isStatictrue"
accessprivate*entry1D2m
org.jabref.model.entry.BibEntryTYPED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java (2≠
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java (2≠
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java (2≠
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java (2è
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java (2û
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java* (2‹
;org.jabref.model.groups.SearchGroupTest?entry2D@23.28:23.35VARIABLED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java (#"
isFinalfalse"
typeBibEntry"»
declarationString≤<mark class="modifier">private </mark><mark class="modifier">static </mark>BibEntry <mark class="class-field">entry2D</mark> = new BibEntry(StandardEntryType.Misc).withCitationKey("entry2").withField(StandardField.AUTHOR, "TEST").withField(StandardField.TITLE, "CASE").withField(StandardField.GROUPS, "A");"
isStatictrue"
accessprivate*entry2D2m
org.jabref.model.entry.BibEntryTYPED
:src\test\java\org\jabref\model\groups\SearchGroupTest.java (2≠
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java (2≠
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java (2≠
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java (2è
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java (2û
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLD
:src\test\java\org\jabref\model\groups\SearchGroupTest.java* (2