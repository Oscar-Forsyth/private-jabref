
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÛA
'org.jabref.model.strings.StringUtilTestCLASSD
:src\test\java\org\jabref\model\strings\StringUtilTest.java ("#
packageorg.jabref.model.strings"
isFinalfalse"
inner classfalse"

isAbstractfalse"f
declarationStringQ<mark class="modifier"> </mark><mark class="modifier">class </mark>StringUtilTest"
accesspackage_private*StringUtilTest2ï
@org.jabref.model.strings.StringUtilTest.StringUtilClassIsSmall()DECLARATIOND
:src\test\java\org\jabref\model\strings\StringUtilTest.java	 (2î
?org.jabref.model.strings.StringUtilTest.booleanToBinaryString()DECLARATIOND
:src\test\java\org\jabref\model\strings\StringUtilTest.java!	 !(2ä
5org.jabref.model.strings.StringUtilTest.quoteSimple()DECLARATIOND
:src\test\java\org\jabref\model\strings\StringUtilTest.java'	 '(2ë
<org.jabref.model.strings.StringUtilTest.quoteNullQuotation()DECLARATIOND
:src\test\java\org\jabref\model\strings\StringUtilTest.java,	 ,(2é
9org.jabref.model.strings.StringUtilTest.quoteNullString()DECLARATIOND
:src\test\java\org\jabref\model\strings\StringUtilTest.java1	 1(2ñ
Aorg.jabref.model.strings.StringUtilTest.quoteQuotationCharacter()DECLARATIOND
:src\test\java\org\jabref\model\strings\StringUtilTest.java6	 6( 2ì
>org.jabref.model.strings.StringUtilTest.quoteMoreComplicated()DECLARATIOND
:src\test\java\org\jabref\model\strings\StringUtilTest.java;	 ;(2é
9org.jabref.model.strings.StringUtilTest.unifyLineBreaks()DECLARATIOND
:src\test\java\org\jabref\model\strings\StringUtilTest.java@	 @(2ë
<org.jabref.model.strings.StringUtilTest.getCorrectFileName()DECLARATIOND
:src\test\java\org\jabref\model\strings\StringUtilTest.javaM	 M(2ã
6org.jabref.model.strings.StringUtilTest.quoteForHTML()DECLARATIOND
:src\test\java\org\jabref\model\strings\StringUtilTest.javaX	 X(2ô
Dorg.jabref.model.strings.StringUtilTest.removeBracesAroundCapitals()DECLARATIOND
:src\test\java\org\jabref\model\strings\StringUtilTest.java^	 ^(#2ñ
Aorg.jabref.model.strings.StringUtilTest.putBracesAroundCapitals()DECLARATIOND
:src\test\java\org\jabref\model\strings\StringUtilTest.javaf	 f( 2ä
5org.jabref.model.strings.StringUtilTest.shaveString()DECLARATIOND
:src\test\java\org\jabref\model\strings\StringUtilTest.javao	 o(2É
.org.jabref.model.strings.StringUtilTest.join()DECLARATIOND
:src\test\java\org\jabref\model\strings\StringUtilTest.java{	 {(2é
7org.jabref.model.strings.StringUtilTest.stripBrackets()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaâ	 â(2à
1org.jabref.model.strings.StringUtilTest.getPart()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaï	 ï(2ó
@org.jabref.model.strings.StringUtilTest.findEncodingsForString()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.java°	 °(2Ö
.org.jabref.model.strings.StringUtilTest.wrap()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.java¶	 ¶(2ò
Aorg.jabref.model.strings.StringUtilTest.decodeStringDoubleArray()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.java∑	 ∑( 2í
;org.jabref.model.strings.StringUtilTest.isInCurlyBrackets()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.java¿	 ¿(2ì
<org.jabref.model.strings.StringUtilTest.isInSquareBrackets()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaŒ	 Œ(2í
;org.jabref.model.strings.StringUtilTest.isInCitationMarks()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaŸ	 Ÿ(2ñ
?org.jabref.model.strings.StringUtilTest.intValueOfSingleDigit()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.java„	 „(2ï
>org.jabref.model.strings.StringUtilTest.intValueOfLongString()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÍ	 Í(2ô
Borg.jabref.model.strings.StringUtilTest.intValueOfStartWithZeros()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÔ	 Ô(!2™
Sorg.jabref.model.strings.StringUtilTest.intValueOfExceptionIfStringContainsLetter()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÙ	 Ù(22†
Iorg.jabref.model.strings.StringUtilTest.intValueOfExceptionIfStringNull()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.java˘	 ˘((2¢
Korg.jabref.model.strings.StringUtilTest.intValueOfExceptionfIfStringEmpty()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.java˛	 ˛(*2û
Gorg.jabref.model.strings.StringUtilTest.intValueOfWithNullSingleDigit()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÉ	 É(&2ù
Forg.jabref.model.strings.StringUtilTest.intValueOfWithNullLongString()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaä	 ä(%2°
Jorg.jabref.model.strings.StringUtilTest.intValueOfWithNullStartWithZeros()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaè	 è()2≤
[org.jabref.model.strings.StringUtilTest.intValueOfWithNullExceptionIfStringContainsLetter()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaî	 î(:2®
Qorg.jabref.model.strings.StringUtilTest.intValueOfWithNullExceptionIfStringNull()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaô	 ô(02™
Sorg.jabref.model.strings.StringUtilTest.intValueOfWithNullExceptionfIfStringEmpty()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaû	 û(22ó
@org.jabref.model.strings.StringUtilTest.limitStringLengthShort()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.java£	 £(2ö
Corg.jabref.model.strings.StringUtilTest.limitStringLengthLimiting()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.java®	 ®("2õ
Dorg.jabref.model.strings.StringUtilTest.limitStringLengthNullInput()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÆ	 Æ(#2ô
Borg.jabref.model.strings.StringUtilTest.replaceSpecialCharacters()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.java≥	 ≥(!2±
Zorg.jabref.model.strings.StringUtilTest.replaceSpecialCharactersWithNonNormalizedUnicode()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaπ	 π(92ï
>org.jabref.model.strings.StringUtilTest.testRepeatSpacesData()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaΩ Ω(12¢
Korg.jabref.model.strings.StringUtilTest.repeatSpaces(java.lang.String, int)DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.java»	 »(2á
0org.jabref.model.strings.StringUtilTest.repeat()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÕ	 Õ(2â
2org.jabref.model.strings.StringUtilTest.boldHTML()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.java‘	 ‘(2•
Norg.jabref.model.strings.StringUtilTest.boldHTMLReturnsOriginalTextIfNonNull()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaŸ	 Ÿ(-2•
Norg.jabref.model.strings.StringUtilTest.boldHTMLReturnsAlternativeTextIfNull()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaﬁ	 ﬁ(-2à
1org.jabref.model.strings.StringUtilTest.unquote()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.java„	 „(2ê
9org.jabref.model.strings.StringUtilTest.capitalizeFirst()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÍ	 Í(2•
Norg.jabref.model.strings.StringUtilTest.getQuoteStringIfSpaceIsContainedData()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÒ% Ò(I2¿
iorg.jabref.model.strings.StringUtilTest.guoteStringIfSpaceIsContained(java.lang.String, java.lang.String)DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.java¸	 ¸(&2ç
6org.jabref.model.strings.StringUtilTest.stripAccents()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÅ	 Å(2ì
<org.jabref.model.strings.StringUtilTest.containsWhitespace()DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÜ Ü(/2∂
_org.jabref.model.strings.StringUtilTest.containsWhitespace(java.lang.Boolean, java.lang.String)DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaò	 ò(°
@org.jabref.model.strings.StringUtilTest.StringUtilClassIsSmall()METHODD
:src\test\java\org\jabref\model\strings\StringUtilTest.java	 ("
isFinalfalse"É
declarationStringÌ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">StringUtilClassIsSmall</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*StringUtilClassIsSmall2ä
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.java (2r
$java.lang.String.replace(char, char)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaN (U2g
java.lang.Class.getName()CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaD (K2c
java.util.List.size()CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaI (M2ú
Njava.nio.file.Files.readAllLines(java.nio.file.Path, java.nio.charset.Charset)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.java (*2ü
Qorg.jabref.model.strings.StringUtilTest.StringUtilClassIsSmall()?path@24.13:24.17CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.java+ (/2§
Vorg.jabref.model.strings.StringUtilTest.StringUtilClassIsSmall()?lineCount@25.12:25.21CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.java (2§
Vorg.jabref.model.strings.StringUtilTest.StringUtilClassIsSmall()?lineCount@25.12:25.21CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaJ (S2¶
Qorg.jabref.model.strings.StringUtilTest.StringUtilClassIsSmall()?path@24.13:24.17DECLARATIOND
:src\test\java\org\jabref\model\strings\StringUtilTest.java (2´
Vorg.jabref.model.strings.StringUtilTest.StringUtilClassIsSmall()?lineCount@25.12:25.21DECLARATIOND
:src\test\java\org\jabref\model\strings\StringUtilTest.java (2Y
voidRETURN_TYPED
:src\test\java\org\jabref\model\strings\StringUtilTest.java (»
Qorg.jabref.model.strings.StringUtilTest.StringUtilClassIsSmall()?path@24.13:24.17VARIABLED
:src\test\java\org\jabref\model\strings\StringUtilTest.java ("
typePath"
isFinalfalse"∞
declarationStringö<mark class="modifier"> </mark>Path <mark class="class-field">path</mark> = Path.of("src"<mark class="modifier">,</mark> "main"<mark class="modifier">,</mark> "java"<mark class="modifier">,</mark> StringUtil.class.getName().replace('.'<mark class="modifier">,</mark> '/') + ".java")*path2`
java.nio.file.PathTYPED
:src\test\java\org\jabref\model\strings\StringUtilTest.java (2ä
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.java (2r
$java.lang.String.replace(char, char)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaN (U2g
java.lang.Class.getName()CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaD (Kâ
Vorg.jabref.model.strings.StringUtilTest.StringUtilClassIsSmall()?lineCount@25.12:25.21VARIABLED
:src\test\java\org\jabref\model\strings\StringUtilTest.java ("
typeint"
isFinalfalse"ª
declarationString•<mark class="modifier"> </mark><mark class="modifier">int</mark> <mark class="class-field">lineCount</mark> = Files.readAllLines(path, StandardCharsets.UTF_8).size()*	lineCount2Q
intTYPED
:src\test\java\org\jabref\model\strings\StringUtilTest.java (2c
java.util.List.size()CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaI (M2ú
Njava.nio.file.Files.readAllLines(java.nio.file.Path, java.nio.charset.Charset)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.java (*2ü
Qorg.jabref.model.strings.StringUtilTest.StringUtilClassIsSmall()?path@24.13:24.17CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.java+ (/¬
?org.jabref.model.strings.StringUtilTest.booleanToBinaryString()METHODD
:src\test\java\org\jabref\model\strings\StringUtilTest.java!	 !("
isFinalfalse"µ
declarationStringü<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">booleanToBinaryString</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*booleanToBinaryString2ê
Borg.jabref.model.strings.StringUtil.booleanToBinaryString(boolean)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.java"% "(:2ê
Borg.jabref.model.strings.StringUtil.booleanToBinaryString(boolean)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.java#% #(:2Y
voidRETURN_TYPED
:src\test\java\org\jabref\model\strings\StringUtilTest.java! !(¢
5org.jabref.model.strings.StringUtilTest.quoteSimple()METHODD
:src\test\java\org\jabref\model\strings\StringUtilTest.java'	 '("
isFinalfalse"´
declarationStringï<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">quoteSimple</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*quoteSimple2°
Sorg.jabref.model.strings.StringUtil.quote(java.lang.String, java.lang.String, char)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.java(' ((,2Y
voidRETURN_TYPED
:src\test\java\org\jabref\model\strings\StringUtilTest.java' '(∑
<org.jabref.model.strings.StringUtilTest.quoteNullQuotation()METHODD
:src\test\java\org\jabref\model\strings\StringUtilTest.java,	 ,("
isFinalfalse"≤
declarationStringú<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">quoteNullQuotation</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*quoteNullQuotation2°
Sorg.jabref.model.strings.StringUtil.quote(java.lang.String, java.lang.String, char)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.java-' -(,2Y
voidRETURN_TYPED
:src\test\java\org\jabref\model\strings\StringUtilTest.java, ,(Æ
9org.jabref.model.strings.StringUtilTest.quoteNullString()METHODD
:src\test\java\org\jabref\model\strings\StringUtilTest.java1	 1("
isFinalfalse"Ø
declarationStringô<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">quoteNullString</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*quoteNullString2°
Sorg.jabref.model.strings.StringUtil.quote(java.lang.String, java.lang.String, char)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.java2$ 2()2Y
voidRETURN_TYPED
:src\test\java\org\jabref\model\strings\StringUtilTest.java1 1(∆
Aorg.jabref.model.strings.StringUtilTest.quoteQuotationCharacter()METHODD
:src\test\java\org\jabref\model\strings\StringUtilTest.java6	 6( "
isFinalfalse"∑
declarationString°<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">quoteQuotationCharacter</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*quoteQuotationCharacter2°
Sorg.jabref.model.strings.StringUtil.quote(java.lang.String, java.lang.String, char)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.java7) 7(.2Y
voidRETURN_TYPED
:src\test\java\org\jabref\model\strings\StringUtilTest.java6 6(Ω
>org.jabref.model.strings.StringUtilTest.quoteMoreComplicated()METHODD
:src\test\java\org\jabref\model\strings\StringUtilTest.java;	 ;("
isFinalfalse"¥
declarationStringû<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">quoteMoreComplicated</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*quoteMoreComplicated2°
Sorg.jabref.model.strings.StringUtil.quote(java.lang.String, java.lang.String, char)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.java<- <(22Y
voidRETURN_TYPED
:src\test\java\org\jabref\model\strings\StringUtilTest.java; ;(∑
9org.jabref.model.strings.StringUtilTest.unifyLineBreaks()METHODD
:src\test\java\org\jabref\model\strings\StringUtilTest.java@	 @("
isFinalfalse"Ø
declarationStringô<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">unifyLineBreaks</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*unifyLineBreaks2•
Worg.jabref.model.strings.StringUtil.unifyLineBreaks(java.lang.String, java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaB# B(22•
Worg.jabref.model.strings.StringUtil.unifyLineBreaks(java.lang.String, java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaE E(+2•
Worg.jabref.model.strings.StringUtil.unifyLineBreaks(java.lang.String, java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaH H(+2ö
Lorg.jabref.model.strings.StringUtilTest.unifyLineBreaks()?result@66.15:66.21CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaC  C(&2ö
Lorg.jabref.model.strings.StringUtilTest.unifyLineBreaks()?result@66.15:66.21CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaE E(2ö
Lorg.jabref.model.strings.StringUtilTest.unifyLineBreaks()?result@66.15:66.21CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaF  F(&2ö
Lorg.jabref.model.strings.StringUtilTest.unifyLineBreaks()?result@66.15:66.21CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaH H(2ö
Lorg.jabref.model.strings.StringUtilTest.unifyLineBreaks()?result@66.15:66.21CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaI  I(&2°
Lorg.jabref.model.strings.StringUtilTest.unifyLineBreaks()?result@66.15:66.21DECLARATIOND
:src\test\java\org\jabref\model\strings\StringUtilTest.javaB B(2Y
voidRETURN_TYPED
:src\test\java\org\jabref\model\strings\StringUtilTest.java@ @(Ç
Lorg.jabref.model.strings.StringUtilTest.unifyLineBreaks()?result@66.15:66.21VARIABLED
:src\test\java\org\jabref\model\strings\StringUtilTest.javaB B("
typeString"
isFinalfalse"Ø
declarationStringô<mark class="modifier"> </mark>String <mark class="class-field">result</mark> = StringUtil.unifyLineBreaks("\r"<mark class="modifier">,</mark> "newline")*result2^
java.lang.StringTYPED
:src\test\java\org\jabref\model\strings\StringUtilTest.javaB B(2•
Worg.jabref.model.strings.StringUtil.unifyLineBreaks(java.lang.String, java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaB# B(2¿
<org.jabref.model.strings.StringUtilTest.getCorrectFileName()METHODD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaM	 M("
isFinalfalse"≤
declarationStringú<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getCorrectFileName</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*getCorrectFileName2®
Zorg.jabref.model.strings.StringUtil.getCorrectFileName(java.lang.String, java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaN* N(<2®
Zorg.jabref.model.strings.StringUtil.getCorrectFileName(java.lang.String, java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaO. O(@2®
Zorg.jabref.model.strings.StringUtil.getCorrectFileName(java.lang.String, java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaP) P(;2®
Zorg.jabref.model.strings.StringUtil.getCorrectFileName(java.lang.String, java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaQ) Q(;2®
Zorg.jabref.model.strings.StringUtil.getCorrectFileName(java.lang.String, java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaR) R(;2®
Zorg.jabref.model.strings.StringUtil.getCorrectFileName(java.lang.String, java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaS( S(:2®
Zorg.jabref.model.strings.StringUtil.getCorrectFileName(java.lang.String, java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaT$ T(62Y
voidRETURN_TYPED
:src\test\java\org\jabref\model\strings\StringUtilTest.javaM M(ß
6org.jabref.model.strings.StringUtilTest.quoteForHTML()METHODD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaX	 X("
isFinalfalse"¨
declarationStringñ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">quoteForHTML</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*quoteForHTML2ê
Borg.jabref.model.strings.StringUtil.quoteForHTML(java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaY) Y(52ê
Borg.jabref.model.strings.StringUtil.quoteForHTML(java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaZ3 Z(?2Y
voidRETURN_TYPED
:src\test\java\org\jabref\model\strings\StringUtilTest.javaX X(Ø	
Dorg.jabref.model.strings.StringUtilTest.removeBracesAroundCapitals()METHODD
:src\test\java\org\jabref\model\strings\StringUtilTest.java^	 ^(#"
isFinalfalse"∫
declarationString§<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">removeBracesAroundCapitals</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*removeBracesAroundCapitals2û
Porg.jabref.model.strings.StringUtil.removeBracesAroundCapitals(java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.java_' _(A2û
Porg.jabref.model.strings.StringUtil.removeBracesAroundCapitals(java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.java`' `(A2û
Porg.jabref.model.strings.StringUtil.removeBracesAroundCapitals(java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaa) a(C2û
Porg.jabref.model.strings.StringUtil.removeBracesAroundCapitals(java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javab* b(D2Y
voidRETURN_TYPED
:src\test\java\org\jabref\model\strings\StringUtilTest.java^ ^(∏

Aorg.jabref.model.strings.StringUtilTest.putBracesAroundCapitals()METHODD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaf	 f( "
isFinalfalse"∑
declarationString°<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">putBracesAroundCapitals</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*putBracesAroundCapitals2õ
Morg.jabref.model.strings.StringUtil.putBracesAroundCapitals(java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javag) g(@2õ
Morg.jabref.model.strings.StringUtil.putBracesAroundCapitals(java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javah) h(@2õ
Morg.jabref.model.strings.StringUtil.putBracesAroundCapitals(java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javai' i(>2õ
Morg.jabref.model.strings.StringUtil.putBracesAroundCapitals(java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaj) j(@2õ
Morg.jabref.model.strings.StringUtil.putBracesAroundCapitals(java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javak3 k(J2Y
voidRETURN_TYPED
:src\test\java\org\jabref\model\strings\StringUtilTest.javaf f(é
5org.jabref.model.strings.StringUtilTest.shaveString()METHODD
:src\test\java\org\jabref\model\strings\StringUtilTest.javao	 o("
isFinalfalse"´
declarationStringï<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">shaveString</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*shaveString2è
Aorg.jabref.model.strings.StringUtil.shaveString(java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javap$ p(/2è
Aorg.jabref.model.strings.StringUtil.shaveString(java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaq$ q(/2è
Aorg.jabref.model.strings.StringUtil.shaveString(java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javar' r(22è
Aorg.jabref.model.strings.StringUtil.shaveString(java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javas% s(02è
Aorg.jabref.model.strings.StringUtil.shaveString(java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javat% t(02è
Aorg.jabref.model.strings.StringUtil.shaveString(java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javau' u(22è
Aorg.jabref.model.strings.StringUtil.shaveString(java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javav' v(22è
Aorg.jabref.model.strings.StringUtil.shaveString(java.lang.String)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.javaw+ w(62Y
voidRETURN_TYPED
:src\test\java\org\jabref\model\strings\StringUtilTest.javao o(“
.org.jabref.model.strings.StringUtilTest.join()METHODD
:src\test\java\org\jabref\model\strings\StringUtilTest.java{	 {("
isFinalfalse"§
declarationStringé<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">join</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*join2¶
Xorg.jabref.model.strings.StringUtil.join(java.lang.String[], java.lang.String, int, int)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.java}. }(22¶
Xorg.jabref.model.strings.StringUtil.join(java.lang.String[], java.lang.String, int, int)CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.java* (.2®
Xorg.jabref.model.strings.StringUtil.join(java.lang.String[], java.lang.String, int, int)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÅ& Å(*2®
Xorg.jabref.model.strings.StringUtil.join(java.lang.String[], java.lang.String, int, int)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÉ$ É((2®
Xorg.jabref.model.strings.StringUtil.join(java.lang.String[], java.lang.String, int, int)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÖ$ Ö((2å
>org.jabref.model.strings.StringUtilTest.join()?s@124.17:124.18CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.java}3 }(42å
>org.jabref.model.strings.StringUtilTest.join()?s@124.17:124.18CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.java}? }(@2å
>org.jabref.model.strings.StringUtilTest.join()?s@124.17:124.18CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.java/ (02å
>org.jabref.model.strings.StringUtilTest.join()?s@124.17:124.18CALLD
:src\test\java\org\jabref\model\strings\StringUtilTest.java; (<2é
>org.jabref.model.strings.StringUtilTest.join()?s@124.17:124.18CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÅ+ Å(,2é
>org.jabref.model.strings.StringUtilTest.join()?s@124.17:124.18CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÅ7 Å(82é
>org.jabref.model.strings.StringUtilTest.join()?s@124.17:124.18CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÉ) É(*2é
>org.jabref.model.strings.StringUtilTest.join()?s@124.17:124.18CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÉ5 É(62ì
>org.jabref.model.strings.StringUtilTest.join()?s@124.17:124.18DECLARATIOND
:src\test\java\org\jabref\model\strings\StringUtilTest.java| |(2Y
voidRETURN_TYPED
:src\test\java\org\jabref\model\strings\StringUtilTest.java{ {(Õ
>org.jabref.model.strings.StringUtilTest.join()?s@124.17:124.18VARIABLED
:src\test\java\org\jabref\model\strings\StringUtilTest.java| |("
typeString"
isFinalfalse"≥
declarationStringù<mark class="modifier"> </mark>String[] <mark class="class-field">s</mark> = { "ab"<mark class="modifier">,</mark> "cd"<mark class="modifier">,</mark> "ed" }*s2`
java.lang.String[]TYPED
:src\test\java\org\jabref\model\strings\StringUtilTest.java| |(∏
7org.jabref.model.strings.StringUtilTest.stripBrackets()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaâ	 â("
isFinalfalse"≠
declarationStringó<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">stripBrackets</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*stripBrackets2ì
Corg.jabref.model.strings.StringUtil.stripBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaä' ä(42ì
Corg.jabref.model.strings.StringUtil.stripBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaã) ã(62ì
Corg.jabref.model.strings.StringUtil.stripBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaå$ å(12ì
Corg.jabref.model.strings.StringUtil.stripBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaç( ç(52ì
Corg.jabref.model.strings.StringUtil.stripBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaé% é(22ì
Corg.jabref.model.strings.StringUtil.stripBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaè$ è(12ì
Corg.jabref.model.strings.StringUtil.stripBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaê( ê(52ì
Corg.jabref.model.strings.StringUtil.stripBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaë ë(+2[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaâ â(Ó
1org.jabref.model.strings.StringUtilTest.getPart()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaï	 ï("
isFinalfalse"ß
declarationStringë<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getPart</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*getPart2õ
Korg.jabref.model.strings.StringUtil.getPart(java.lang.String, int, boolean)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaó+ ó(22õ
Korg.jabref.model.strings.StringUtil.getPart(java.lang.String, int, boolean)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaô$ ô(+2õ
Korg.jabref.model.strings.StringUtil.getPart(java.lang.String, int, boolean)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaõ$ õ(+2õ
Korg.jabref.model.strings.StringUtil.getPart(java.lang.String, int, boolean)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaù( ù(/2[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaï ï(£
@org.jabref.model.strings.StringUtilTest.findEncodingsForString()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.java°	 °("
isFinalfalse"∂
declarationString†<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findEncodingsForString</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*findEncodingsForString2[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.java° °(Ø*
.org.jabref.model.strings.StringUtilTest.wrap()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.java¶	 ¶("
isFinalfalse"§
declarationStringé<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">wrap</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*wrap2°
Qorg.jabref.model.strings.StringUtil.wrap(java.lang.String, int, java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java© ©(2°
Qorg.jabref.model.strings.StringUtil.wrap(java.lang.String, int, java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java™E ™(I2°
Qorg.jabref.model.strings.StringUtil.wrap(java.lang.String, int, java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java´E ´(I2°
Qorg.jabref.model.strings.StringUtil.wrap(java.lang.String, int, java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java¨5 ¨(92°
Qorg.jabref.model.strings.StringUtil.wrap(java.lang.String, int, java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÆ Æ(2°
Qorg.jabref.model.strings.StringUtil.wrap(java.lang.String, int, java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java± ±(2°
Qorg.jabref.model.strings.StringUtil.wrap(java.lang.String, int, java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java≥ ≥(2î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java® ®(&2î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java®5 ®(<2î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java©8 ©(?2î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java™% ™(,2î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java™b ™(i2î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java´% ´(,2î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java´c ´(j2î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java¨S ¨(Z2î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java≠ ≠(&2î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java≠0 ≠(72î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java≠F ≠(M2î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java≠W ≠(^2î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÆ; Æ(B2î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java∞ ∞(!2î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java∞+ ∞(22î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java∞< ∞(C2î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java∞R ∞(Y2î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java∞c ∞(j2î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java±= ±(D2î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java≤ ≤(&2î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java≤0 ≤(72î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java≤F ≤(M2î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java≤W ≤(^2î
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java≥? ≥(F2õ
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22DECLARATIONF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaß ß(2[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.java¶ ¶(ñ
Dorg.jabref.model.strings.StringUtilTest.wrap()?newline@167.15:167.22VARIABLEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaß ß("
typeString"
isFinalfalse"o
declarationStringZ<mark class="modifier"> </mark>String <mark class="class-field">newline</mark> = "newline"*newline2`
java.lang.StringTYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaß ß(Ü
Aorg.jabref.model.strings.StringUtilTest.decodeStringDoubleArray()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.java∑	 ∑( "
isFinalfalse"∑
declarationString°<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">decodeStringDoubleArray</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*decodeStringDoubleArray2ù
Morg.jabref.model.strings.StringUtil.decodeStringDoubleArray(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java∏M ∏(d2ù
Morg.jabref.model.strings.StringUtil.decodeStringDoubleArray(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaπL π(c2ù
Morg.jabref.model.strings.StringUtil.decodeStringDoubleArray(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaºO º(f2[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.java∑ ∑(ò
;org.jabref.model.strings.StringUtilTest.isInCurlyBrackets()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.java¿	 ¿("
isFinalfalse"±
declarationStringõ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">isInCurlyBrackets</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*isInCurlyBrackets2ó
Gorg.jabref.model.strings.StringUtil.isInCurlyBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java¡ ¡(02ó
Gorg.jabref.model.strings.StringUtil.isInCurlyBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java¬ ¬(02ó
Gorg.jabref.model.strings.StringUtil.isInCurlyBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java√ √(/2ó
Gorg.jabref.model.strings.StringUtil.isInCurlyBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaƒ ƒ(/2ó
Gorg.jabref.model.strings.StringUtil.isInCurlyBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java≈ ≈(/2ó
Gorg.jabref.model.strings.StringUtil.isInCurlyBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java∆ ∆(/2ó
Gorg.jabref.model.strings.StringUtil.isInCurlyBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java« «(02ó
Gorg.jabref.model.strings.StringUtil.isInCurlyBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java» »(02ó
Gorg.jabref.model.strings.StringUtil.isInCurlyBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java… …(02ó
Gorg.jabref.model.strings.StringUtil.isInCurlyBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java   (02[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.java¿ ¿(‘
<org.jabref.model.strings.StringUtilTest.isInSquareBrackets()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaŒ	 Œ("
isFinalfalse"≤
declarationStringú<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">isInSquareBrackets</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*isInSquareBrackets2ò
Horg.jabref.model.strings.StringUtil.isInSquareBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaœ œ(12ò
Horg.jabref.model.strings.StringUtil.isInSquareBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java– –(12ò
Horg.jabref.model.strings.StringUtil.isInSquareBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java— —(02ò
Horg.jabref.model.strings.StringUtil.isInSquareBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java“ “(02ò
Horg.jabref.model.strings.StringUtil.isInSquareBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java” ”(12ò
Horg.jabref.model.strings.StringUtil.isInSquareBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java‘ ‘(12ò
Horg.jabref.model.strings.StringUtil.isInSquareBrackets(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java’ ’(12[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaŒ Œ(∞
;org.jabref.model.strings.StringUtilTest.isInCitationMarks()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaŸ	 Ÿ("
isFinalfalse"±
declarationStringõ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">isInCitationMarks</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*isInCitationMarks2ó
Gorg.jabref.model.strings.StringUtil.isInCitationMarks(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java⁄ ⁄(02ó
Gorg.jabref.model.strings.StringUtil.isInCitationMarks(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java€ €(02ó
Gorg.jabref.model.strings.StringUtil.isInCitationMarks(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java‹ ‹(/2ó
Gorg.jabref.model.strings.StringUtil.isInCitationMarks(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java› ›(/2ó
Gorg.jabref.model.strings.StringUtil.isInCitationMarks(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaﬁ ﬁ(02ó
Gorg.jabref.model.strings.StringUtil.isInCitationMarks(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaﬂ ﬂ(02[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaŸ Ÿ(Ÿ
?org.jabref.model.strings.StringUtilTest.intValueOfSingleDigit()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.java„	 „("
isFinalfalse"µ
declarationStringü<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">intValueOfSingleDigit</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*intValueOfSingleDigit2ê
@org.jabref.model.strings.StringUtil.intValueOf(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java‰# ‰(-2ê
@org.jabref.model.strings.StringUtil.intValueOf(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÂ# Â(-2ê
@org.jabref.model.strings.StringUtil.intValueOf(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÊ# Ê(-2[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.java„ „(∞
>org.jabref.model.strings.StringUtilTest.intValueOfLongString()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÍ	 Í("
isFinalfalse"¥
declarationStringû<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">intValueOfLongString</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*intValueOfLongString2ê
@org.jabref.model.strings.StringUtil.intValueOf(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÎ, Î(62[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÍ Í(º
Borg.jabref.model.strings.StringUtilTest.intValueOfStartWithZeros()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÔ	 Ô(!"
isFinalfalse"∏
declarationString¢<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">intValueOfStartWithZeros</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*intValueOfStartWithZeros2ê
@org.jabref.model.strings.StringUtil.intValueOf(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java& (02[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÔ Ô(Ô
Sorg.jabref.model.strings.StringUtilTest.intValueOfExceptionIfStringContainsLetter()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÙ	 Ù(2"
isFinalfalse"…
declarationString≥<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">intValueOfExceptionIfStringContainsLetter</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*)intValueOfExceptionIfStringContainsLetter2ê
@org.jabref.model.strings.StringUtil.intValueOf(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaıC ı(M2[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÙ Ù(—
Iorg.jabref.model.strings.StringUtilTest.intValueOfExceptionIfStringNull()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.java˘	 ˘(("
isFinalfalse"ø
declarationString©<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">intValueOfExceptionIfStringNull</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*intValueOfExceptionIfStringNull2ê
@org.jabref.model.strings.StringUtil.intValueOf(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java˙C ˙(M2[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.java˘ ˘(◊
Korg.jabref.model.strings.StringUtilTest.intValueOfExceptionfIfStringEmpty()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.java˛	 ˛(*"
isFinalfalse"¡
declarationString´<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">intValueOfExceptionfIfStringEmpty</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*!intValueOfExceptionfIfStringEmpty2ê
@org.jabref.model.strings.StringUtil.intValueOf(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaˇC ˇ(M2[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.java˛ ˛(«

Gorg.jabref.model.strings.StringUtilTest.intValueOfWithNullSingleDigit()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÉ	 É(&"
isFinalfalse"Ω
declarationStringß<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">intValueOfWithNullSingleDigit</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*intValueOfWithNullSingleDigit2h
java.util.Optional.of(T)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÑ Ñ( 2ò
Horg.jabref.model.strings.StringUtil.intValueOfOptional(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÑ0 Ñ(B2h
java.util.Optional.of(T)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÖ Ö( 2ò
Horg.jabref.model.strings.StringUtil.intValueOfOptional(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÖ0 Ö(B2h
java.util.Optional.of(T)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÜ Ü( 2ò
Horg.jabref.model.strings.StringUtil.intValueOfOptional(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÜ0 Ü(B2[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÉ É(∫
Forg.jabref.model.strings.StringUtilTest.intValueOfWithNullLongString()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaä	 ä(%"
isFinalfalse"º
declarationString¶<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">intValueOfWithNullLongString</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*intValueOfWithNullLongString2h
java.util.Optional.of(T)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaã ã( 2ò
Horg.jabref.model.strings.StringUtil.intValueOfOptional(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaã9 ã(K2[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaä ä(∆
Jorg.jabref.model.strings.StringUtilTest.intValueOfWithNullStartWithZeros()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaè	 è()"
isFinalfalse"¿
declarationString™<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">intValueOfWithNullStartWithZeros</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid* intValueOfWithNullStartWithZeros2h
java.util.Optional.of(T)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaê ê( 2ò
Horg.jabref.model.strings.StringUtil.intValueOfOptional(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaê3 ê(E2[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaè è(˚
[org.jabref.model.strings.StringUtilTest.intValueOfWithNullExceptionIfStringContainsLetter()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaî	 î(:"
isFinalfalse"—
declarationStringª<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">intValueOfWithNullExceptionIfStringContainsLetter</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*1intValueOfWithNullExceptionIfStringContainsLetter2j
java.util.Optional.empty()CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaï ï(#2ò
Horg.jabref.model.strings.StringUtil.intValueOfOptional(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaï2 ï(D2[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaî î(›
Qorg.jabref.model.strings.StringUtilTest.intValueOfWithNullExceptionIfStringNull()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaô	 ô(0"
isFinalfalse"«
declarationString±<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">intValueOfWithNullExceptionIfStringNull</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*'intValueOfWithNullExceptionIfStringNull2j
java.util.Optional.empty()CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaö ö(#2ò
Horg.jabref.model.strings.StringUtil.intValueOfOptional(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaö2 ö(D2[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaô ô(„
Sorg.jabref.model.strings.StringUtilTest.intValueOfWithNullExceptionfIfStringEmpty()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaû	 û(2"
isFinalfalse"…
declarationString≥<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">intValueOfWithNullExceptionfIfStringEmpty</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*)intValueOfWithNullExceptionfIfStringEmpty2j
java.util.Optional.empty()CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaü ü(#2ò
Horg.jabref.model.strings.StringUtil.intValueOfOptional(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaü2 ü(D2[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaû û(¬
@org.jabref.model.strings.StringUtilTest.limitStringLengthShort()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.java£	 £("
isFinalfalse"∂
declarationString†<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">limitStringLengthShort</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*limitStringLengthShort2ú
Lorg.jabref.model.strings.StringUtil.limitStringLength(java.lang.String, int)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java§( §(92[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.java£ £(’
Corg.jabref.model.strings.StringUtilTest.limitStringLengthLimiting()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.java®	 ®(""
isFinalfalse"π
declarationString£<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">limitStringLengthLimiting</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*limitStringLengthLimiting2ú
Lorg.jabref.model.strings.StringUtil.limitStringLength(java.lang.String, int)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java©. ©(?2i
java.lang.String.length()CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java™R ™(X2ú
Lorg.jabref.model.strings.StringUtil.limitStringLength(java.lang.String, int)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java™$ ™(52[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.java® ®(Œ
Dorg.jabref.model.strings.StringUtilTest.limitStringLengthNullInput()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÆ	 Æ(#"
isFinalfalse"∫
declarationString§<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">limitStringLengthNullInput</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*limitStringLengthNullInput2ú
Lorg.jabref.model.strings.StringUtil.limitStringLength(java.lang.String, int)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaØ$ Ø(52[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÆ Æ(Î
Borg.jabref.model.strings.StringUtilTest.replaceSpecialCharacters()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.java≥	 ≥(!"
isFinalfalse"∏
declarationString¢<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">replaceSpecialCharacters</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*replaceSpecialCharacters2û
Norg.jabref.model.strings.StringUtil.replaceSpecialCharacters(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java¥/ ¥(G2û
Norg.jabref.model.strings.StringUtil.replaceSpecialCharacters(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaµ- µ(E2[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.java≥ ≥(í
Zorg.jabref.model.strings.StringUtilTest.replaceSpecialCharactersWithNonNormalizedUnicode()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaπ	 π(9"
isFinalfalse"–
declarationString∫<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">replaceSpecialCharactersWithNonNormalizedUnicode</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*0replaceSpecialCharactersWithNonNormalizedUnicode2û
Norg.jabref.model.strings.StringUtil.replaceSpecialCharacters(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java∫* ∫(B2[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaπ π(∫
>org.jabref.model.strings.StringUtilTest.testRepeatSpacesData()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaΩ Ω(1"
isFinalfalse"§
declarationStringé<mark class="modifier"> </mark><mark class="modifier">static </mark>Stream&lt;Arguments&gt; <mark class="method">testRepeatSpacesData</mark>()"
isStatictrue"
accesspackage_private"

isAbstractfalse"
typeStream<Arguments>*testRepeatSpacesData2n
java.util.stream.StreamRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaΩ Ω(2ã
+org.junit.jupiter.params.provider.ArgumentsRETURN_TYPE_ARGUMENTF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaΩ Ω(’
Korg.jabref.model.strings.StringUtilTest.repeatSpaces(java.lang.String, int)METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.java»	 »("
isFinalfalse"√
declarationString≠ <br><mark class="annotation">@MethodSource("testRepeatSpacesData")</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">repeatSpaces</mark>(String result<mark class="modifier"><mark class="modifier">,</mark></mark> <mark class="modifier">int</mark> count)"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*repeatSpaces2Ö
5org.jabref.model.strings.StringUtil.repeatSpaces(int)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java…( …(42¢
Rorg.jabref.model.strings.StringUtilTest.repeatSpaces(java.lang.String, int)!resultCALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java… …(2°
Qorg.jabref.model.strings.StringUtilTest.repeatSpaces(java.lang.String, int)!countCALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java…5 …(:2ß
Rorg.jabref.model.strings.StringUtilTest.repeatSpaces(java.lang.String, int)!result	PARAMETERF
:src\test\java\org\jabref\model\strings\StringUtilTest.java» »(#2¶
Qorg.jabref.model.strings.StringUtilTest.repeatSpaces(java.lang.String, int)!count	PARAMETERF
:src\test\java\org\jabref\model\strings\StringUtilTest.java») »(.2[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.java» »(◊
Rorg.jabref.model.strings.StringUtilTest.repeatSpaces(java.lang.String, int)!result	PARAMETERF
:src\test\java\org\jabref\model\strings\StringUtilTest.java» »(#"
typeString"
isFinalfalse""
declarationStringString result*result2`
java.lang.StringTYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.java» »(ﬂ
Qorg.jabref.model.strings.StringUtilTest.repeatSpaces(java.lang.String, int)!count	PARAMETERF
:src\test\java\org\jabref\model\strings\StringUtilTest.java») »(."
typeint"
isFinalfalse"<
declarationString'<mark class="modifier">int</mark> count*count2S
intTYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.java»% »((ã
0org.jabref.model.strings.StringUtilTest.repeat()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÕ	 Õ("
isFinalfalse"¶
declarationStringê<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">repeat</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*repeat2Ö
5org.jabref.model.strings.StringUtil.repeat(int, char)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaŒ$ Œ(*2Ö
5org.jabref.model.strings.StringUtil.repeat(int, char)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaœ% œ(+2Ö
5org.jabref.model.strings.StringUtil.repeat(int, char)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java–+ –(12[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÕ Õ(ä
2org.jabref.model.strings.StringUtilTest.boldHTML()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.java‘	 ‘("
isFinalfalse"®
declarationStringí<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">boldHTML</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*boldHTML2é
>org.jabref.model.strings.StringUtil.boldHTML(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java’- ’(52[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.java‘ ‘(
Norg.jabref.model.strings.StringUtilTest.boldHTMLReturnsOriginalTextIfNonNull()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaŸ	 Ÿ(-"
isFinalfalse"ƒ
declarationStringÆ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">boldHTMLReturnsOriginalTextIfNonNull</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*$boldHTMLReturnsOriginalTextIfNonNull2†
Porg.jabref.model.strings.StringUtil.boldHTML(java.lang.String, java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java⁄- ⁄(52[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaŸ Ÿ(
Norg.jabref.model.strings.StringUtilTest.boldHTMLReturnsAlternativeTextIfNull()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaﬁ	 ﬁ(-"
isFinalfalse"ƒ
declarationStringÆ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">boldHTMLReturnsAlternativeTextIfNull</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*$boldHTMLReturnsAlternativeTextIfNull2†
Porg.jabref.model.strings.StringUtil.boldHTML(java.lang.String, java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaﬂ- ﬂ(52[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaﬁ ﬁ(∏
1org.jabref.model.strings.StringUtilTest.unquote()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.java„	 „("
isFinalfalse"ß
declarationStringë<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">unquote</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*unquote2ì
Corg.jabref.model.strings.StringUtil.unquote(java.lang.String, char)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java‰& ‰(-2ì
Corg.jabref.model.strings.StringUtil.unquote(java.lang.String, char)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÂ' Â(.2ì
Corg.jabref.model.strings.StringUtil.unquote(java.lang.String, char)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÊ* Ê(12[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.java„ „(Ó
9org.jabref.model.strings.StringUtilTest.capitalizeFirst()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÍ	 Í("
isFinalfalse"Ø
declarationStringô<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">capitalizeFirst</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*capitalizeFirst2ï
Eorg.jabref.model.strings.StringUtil.capitalizeFirst(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÎ$ Î(32ï
Eorg.jabref.model.strings.StringUtil.capitalizeFirst(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÏ/ Ï(>2ï
Eorg.jabref.model.strings.StringUtil.capitalizeFirst(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÌ% Ì(42ï
Eorg.jabref.model.strings.StringUtil.capitalizeFirst(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÓ& Ó(52[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÍ Í(È
Norg.jabref.model.strings.StringUtilTest.getQuoteStringIfSpaceIsContainedData()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÒ% Ò(I"
isFinalfalse"ª
declarationString•<mark class="modifier">private </mark><mark class="modifier">static </mark>Stream&lt;Arguments&gt; <mark class="method">getQuoteStringIfSpaceIsContainedData</mark>()"
isStatictrue"
accessprivate"

isAbstractfalse"
typeStream<Arguments>*$getQuoteStringIfSpaceIsContainedData2n
java.util.stream.StreamRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÒ Ò(2ã
+org.junit.jupiter.params.provider.ArgumentsRETURN_TYPE_ARGUMENTF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÒ Ò(#©
iorg.jabref.model.strings.StringUtilTest.guoteStringIfSpaceIsContained(java.lang.String, java.lang.String)METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.java¸	 ¸(&"
isFinalfalse"Ã
declarationString∂ <br><mark class="annotation">@MethodSource("getQuoteStringIfSpaceIsContainedData")</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">guoteStringIfSpaceIsContained</mark>(String expected<mark class="modifier"><mark class="modifier">,</mark></mark> String source)"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*guoteStringIfSpaceIsContained2£
Sorg.jabref.model.strings.StringUtil.quoteStringIfSpaceIsContained(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java˝* ˝(G2¬
rorg.jabref.model.strings.StringUtilTest.guoteStringIfSpaceIsContained(java.lang.String, java.lang.String)!expectedCALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java˝ ˝(2¿
porg.jabref.model.strings.StringUtilTest.guoteStringIfSpaceIsContained(java.lang.String, java.lang.String)!sourceCALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.java˝H ˝(N2«
rorg.jabref.model.strings.StringUtilTest.guoteStringIfSpaceIsContained(java.lang.String, java.lang.String)!expected	PARAMETERF
:src\test\java\org\jabref\model\strings\StringUtilTest.java¸. ¸(62≈
porg.jabref.model.strings.StringUtilTest.guoteStringIfSpaceIsContained(java.lang.String, java.lang.String)!source	PARAMETERF
:src\test\java\org\jabref\model\strings\StringUtilTest.java¸? ¸(E2[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.java¸ ¸(˚
rorg.jabref.model.strings.StringUtilTest.guoteStringIfSpaceIsContained(java.lang.String, java.lang.String)!expected	PARAMETERF
:src\test\java\org\jabref\model\strings\StringUtilTest.java¸. ¸(6"
typeString"
isFinalfalse"$
declarationStringString expected*expected2`
java.lang.StringTYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.java¸' ¸(-ı
porg.jabref.model.strings.StringUtilTest.guoteStringIfSpaceIsContained(java.lang.String, java.lang.String)!source	PARAMETERF
:src\test\java\org\jabref\model\strings\StringUtilTest.java¸? ¸(E"
typeString"
isFinalfalse""
declarationStringString source*source2`
java.lang.StringTYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.java¸8 ¸(>Ø
6org.jabref.model.strings.StringUtilTest.stripAccents()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÅ	 Å("
isFinalfalse"¨
declarationStringñ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">stripAccents</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*stripAccents2í
Borg.jabref.model.strings.StringUtil.stripAccents(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÇ* Ç(62í
Borg.jabref.model.strings.StringUtil.stripAccents(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÉ, É(82[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÅ Å(¥
<org.jabref.model.strings.StringUtilTest.containsWhitespace()METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÜ Ü(/"
isFinalfalse"¢
declarationStringå<mark class="modifier"> </mark><mark class="modifier">static </mark>Stream&lt;Arguments&gt; <mark class="method">containsWhitespace</mark>()"
isStatictrue"
accesspackage_private"

isAbstractfalse"
typeStream<Arguments>*containsWhitespace2n
java.util.stream.StreamRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÜ Ü(2ã
+org.junit.jupiter.params.provider.ArgumentsRETURN_TYPE_ARGUMENTF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaÜ Ü(¨
_org.jabref.model.strings.StringUtilTest.containsWhitespace(java.lang.Boolean, java.lang.String)METHODF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaò	 ò("
isFinalfalse"ô
declarationStringÉ <br><mark class="annotation">@MethodSource</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">containsWhitespace</mark>(Boolean expected<mark class="modifier"><mark class="modifier">,</mark></mark> String input)"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*containsWhitespace2ò
Horg.jabref.model.strings.StringUtil.containsWhitespace(java.lang.String)CALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaô* ô(<2∏
horg.jabref.model.strings.StringUtilTest.containsWhitespace(java.lang.Boolean, java.lang.String)!expectedCALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaô ô(2µ
eorg.jabref.model.strings.StringUtilTest.containsWhitespace(java.lang.Boolean, java.lang.String)!inputCALLF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaô= ô(B2Ω
horg.jabref.model.strings.StringUtilTest.containsWhitespace(java.lang.Boolean, java.lang.String)!expected	PARAMETERF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaò$ ò(,2∫
eorg.jabref.model.strings.StringUtilTest.containsWhitespace(java.lang.Boolean, java.lang.String)!input	PARAMETERF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaò5 ò(:2[
voidRETURN_TYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaò ò(Ù
horg.jabref.model.strings.StringUtilTest.containsWhitespace(java.lang.Boolean, java.lang.String)!expected	PARAMETERF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaò$ ò(,"
typeBoolean"
isFinalfalse"%
declarationStringBoolean expected*expected2a
java.lang.BooleanTYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaò ò(#Ë
eorg.jabref.model.strings.StringUtilTest.containsWhitespace(java.lang.Boolean, java.lang.String)!input	PARAMETERF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaò5 ò(:"
typeString"
isFinalfalse"!
declarationStringString input*input2`
java.lang.StringTYPEF
:src\test\java\org\jabref\model\strings\StringUtilTest.javaò. ò(4