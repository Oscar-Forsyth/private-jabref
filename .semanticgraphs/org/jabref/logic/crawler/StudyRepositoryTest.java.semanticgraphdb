
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java”)
,org.jabref.logic.crawler.StudyRepositoryTestCLASSI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java- -("#
packageorg.jabref.logic.crawler"
isFinalfalse"
inner classfalse"

isAbstractfalse"k
declarationStringV<mark class="modifier"> </mark><mark class="modifier">class </mark>StudyRepositoryTest"
accesspackage_private*StudyRepositoryTest2ì
9org.jabref.logic.crawler.StudyRepositoryTest.setUpMocks()DECLARATIONI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaA A(2∫
`org.jabref.logic.crawler.StudyRepositoryTest.providePathToNonExistentRepositoryThrowsException()DECLARATIONI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java[	 [(:2¨
Rorg.jabref.logic.crawler.StudyRepositoryTest.repositoryStructureCorrectlyCreated()DECLARATIONI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaj	 j(,2¢
Horg.jabref.logic.crawler.StudyRepositoryTest.bibEntriesCorrectlyStored()DECLARATIONI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java~	 ~("2´
Oorg.jabref.logic.crawler.StudyRepositoryTest.fetcherResultsPersistedCorrectly()DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÖ	 Ö()2™
Norg.jabref.logic.crawler.StudyRepositoryTest.mergedResultsPersistedCorrectly()DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaê	 ê((2©
Morg.jabref.logic.crawler.StudyRepositoryTest.studyResultsPersistedCorrectly()DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaü	 ü('2°
Eorg.jabref.logic.crawler.StudyRepositoryTest.getTestStudyRepository()DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java• •(22ß
Korg.jabref.logic.crawler.StudyRepositoryTest.setUpTestStudyDefinitionFile()DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java≥ ≥(-2û
Borg.jabref.logic.crawler.StudyRepositoryTest.setUpTestResultFile()DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaΩ Ω($2®
Lorg.jabref.logic.crawler.StudyRepositoryTest.getNonDuplicateBibEntryResult()DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java« «(52ô
=org.jabref.logic.crawler.StudyRepositoryTest.getMockResults()DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaœ œ(,2À
oorg.jabref.logic.crawler.StudyRepositoryTest.stripCitationKeys(java.util.List<org.jabref.model.entry.BibEntry>)DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java€ €(,2•
Iorg.jabref.logic.crawler.StudyRepositoryTest.getArXivQuantumMockResults()DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‡ ‡(52®
Lorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÙ Ù(82Ø
Sorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerCloudComputingMockResults()DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaã ã(?2©
Oorg.jabref.logic.crawler.StudyRepositoryTest?NON_EXISTING_DIRECTORY@46.32:46.54DECLARATIONI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java.  .(62∞
Vorg.jabref.logic.crawler.StudyRepositoryTest?citationKeyPatternPreferences@47.34:47.63DECLARATIONI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java/" /(?2•
Korg.jabref.logic.crawler.StudyRepositoryTest?preferencesService@48.23:48.41DECLARATIONI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java0 0()2•
Korg.jabref.logic.crawler.StudyRepositoryTest?libraryPreferences@49.23:49.41DECLARATIONI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java1 1()2™
Porg.jabref.logic.crawler.StudyRepositoryTest?importFormatPreferences@50.28:50.51DECLARATIONI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java2 2(32§
Jorg.jabref.logic.crawler.StudyRepositoryTest?saveConfiguration@51.22:51.39DECLARATIONI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java3 3('2§
Jorg.jabref.logic.crawler.StudyRepositoryTest?entryTypesManager@52.25:52.42DECLARATIONI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java4 4(*2©
Oorg.jabref.logic.crawler.StudyRepositoryTest?tempRepositoryDirectory@54.9:54.32DECLARATIONI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java6	 6( 2¢
Horg.jabref.logic.crawler.StudyRepositoryTest?studyRepository@55.20:55.35DECLARATIONI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java7 7(#2ù
Corg.jabref.logic.crawler.StudyRepositoryTest?gitHandler@56.18:56.28DECLARATIONI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java8 8(2¢
Horg.jabref.logic.crawler.StudyRepositoryTest?hashCodeQuantum@57.11:57.26DECLARATIONI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java9 9(2©
Oorg.jabref.logic.crawler.StudyRepositoryTest?hashCodeCloudComputing@58.11:58.33DECLARATIONI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java: :(!2Æ
Torg.jabref.logic.crawler.StudyRepositoryTest?hashCodeSoftwareEngineering@59.11:59.38DECLARATIONI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java; ;(&ç%
9org.jabref.logic.crawler.StudyRepositoryTest.setUpMocks()METHODI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaA A("
isFinalfalse"É
declarationStringÌ<mark class="annotation">@BeforeEach</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">setUpMocks</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*
setUpMocks2≠
Zorg.jabref.logic.citationkeypattern.GlobalCitationKeyPattern.fromPattern(java.lang.String)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaN) N(42ü
Lorg.jabref.preferences.PreferencesService.getCitationKeyPatternPreferences()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaQ  Q(@2ç
:org.jabref.logic.importer.ImporterPreferences.getApiKeys()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaR9 R(C2ï
Borg.jabref.preferences.PreferencesService.getImporterPreferences()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaR  R(62ô
Forg.jabref.preferences.PreferencesService.getImportFormatPreferences()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaT  T(:2ò
Eorg.jabref.logic.preferences.TimestampPreferences.getTimestampField()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaU: U(K2ñ
Corg.jabref.preferences.PreferencesService.getTimestampPreferences()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaU  U(72ò
Eorg.jabref.logic.crawler.StudyRepositoryTest.getTestStudyRepository()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaW W(2∂
‚org.jabref.logic.citationkeypattern.CitationKeyPatternPreferences.CitationKeyPatternPreferences(boolean, boolean, boolean, org.jabref.logic.citationkeypattern.CitationKeyPatternPreferences.KeySuffix, java.lang.String, java.lang.String, java.lang.String, org.jabref.logic.citationkeypattern.GlobalCitationKeyPattern, java.lang.String, java.lang.Character)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaF, F(I2ï
Borg.jabref.model.entry.BibEntryTypesManager.BibEntryTypesManager()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaV  V(42û
Korg.jabref.logic.crawler.StudyRepositoryTest?libraryPreferences@49.23:49.41CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaB B(2ù
Jorg.jabref.logic.crawler.StudyRepositoryTest?saveConfiguration@51.22:51.39CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaC C(2£
Porg.jabref.logic.crawler.StudyRepositoryTest?importFormatPreferences@50.28:50.51CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaD D(2û
Korg.jabref.logic.crawler.StudyRepositoryTest?preferencesService@48.23:48.41CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaE E(2©
Vorg.jabref.logic.crawler.StudyRepositoryTest?citationKeyPatternPreferences@47.34:47.63CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaF F(%2û
Korg.jabref.logic.crawler.StudyRepositoryTest?preferencesService@48.23:48.41CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaQ Q(2©
Vorg.jabref.logic.crawler.StudyRepositoryTest?citationKeyPatternPreferences@47.34:47.63CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaQO Q(l2û
Korg.jabref.logic.crawler.StudyRepositoryTest?preferencesService@48.23:48.41CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaR R(2£
Porg.jabref.logic.crawler.StudyRepositoryTest?importFormatPreferences@50.28:50.51CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaS S($2û
Korg.jabref.logic.crawler.StudyRepositoryTest?preferencesService@48.23:48.41CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaT T(2£
Porg.jabref.logic.crawler.StudyRepositoryTest?importFormatPreferences@50.28:50.51CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaTI T(`2û
Korg.jabref.logic.crawler.StudyRepositoryTest?preferencesService@48.23:48.41CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaU U(2ù
Jorg.jabref.logic.crawler.StudyRepositoryTest?entryTypesManager@52.25:52.42CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaV V(2™
Porg.jabref.logic.crawler.StudyRepositoryTest.setUpMocks()?invocation@85.84:85.94DECLARATIONI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaUT U(^2^
voidRETURN_TYPEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaA A(˜
Porg.jabref.logic.crawler.StudyRepositoryTest.setUpMocks()?invocation@85.84:85.94VARIABLEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaUT U(^"
type"
isFinalfalse" 
declarationString invocation*
invocation2TYPE“
`org.jabref.logic.crawler.StudyRepositoryTest.providePathToNonExistentRepositoryThrowsException()METHODI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java[	 [(:"
isFinalfalse"—
declarationStringª<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">providePathToNonExistentRepositoryThrowsException</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*1providePathToNonExistentRepositoryThrowsException2
,java.nio.file.Path.resolve(java.lang.String)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java\F \(M2≈
Òorg.jabref.logic.crawler.StudyRepository.StudyRepository(java.nio.file.Path, org.jabref.logic.git.SlrGitHandler, org.jabref.preferences.PreferencesService, org.jabref.model.util.FileUpdateMonitor, org.jabref.model.entry.BibEntryTypesManager)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java^2 ^(A2ò
Eorg.jabref.model.util.DummyFileUpdateMonitor.DummyFileUpdateMonitor()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javab b(*2¢
Oorg.jabref.logic.crawler.StudyRepositoryTest?tempRepositoryDirectory@54.9:54.32CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java\. \(E2¢
Oorg.jabref.logic.crawler.StudyRepositoryTest?NON_EXISTING_DIRECTORY@46.32:46.54CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java\N \(d2ﬂ
ãorg.jabref.logic.crawler.StudyRepositoryTest.providePathToNonExistentRepositoryThrowsException()?nonExistingRepositoryDirectory@92.13:92.43CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java_ _(.2ñ
Corg.jabref.logic.crawler.StudyRepositoryTest?gitHandler@56.18:56.28CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java` `(2û
Korg.jabref.logic.crawler.StudyRepositoryTest?preferencesService@48.23:48.41CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaa a("2ù
Jorg.jabref.logic.crawler.StudyRepositoryTest?entryTypesManager@52.25:52.42CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javac c(!2Ê
ãorg.jabref.logic.crawler.StudyRepositoryTest.providePathToNonExistentRepositoryThrowsException()?nonExistingRepositoryDirectory@92.13:92.43DECLARATIONI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java\ \(+2^
voidRETURN_TYPEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java[ [(ã
ãorg.jabref.logic.crawler.StudyRepositoryTest.providePathToNonExistentRepositoryThrowsException()?nonExistingRepositoryDirectory@92.13:92.43VARIABLEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java\ \(+"
typePath"
isFinalfalse"≥
declarationStringù<mark class="modifier"> </mark>Path <mark class="class-field">nonExistingRepositoryDirectory</mark> = tempRepositoryDirectory.resolve(NON_EXISTING_DIRECTORY)*nonExistingRepositoryDirectory2e
java.nio.file.PathTYPEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java\ \(2
,java.nio.file.Path.resolve(java.lang.String)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java\F \(M2¢
Oorg.jabref.logic.crawler.StudyRepositoryTest?tempRepositoryDirectory@54.9:54.32CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java\. \(E2¢
Oorg.jabref.logic.crawler.StudyRepositoryTest?NON_EXISTING_DIRECTORY@46.32:46.54CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java\N \(dÅK
Rorg.jabref.logic.crawler.StudyRepositoryTest.repositoryStructureCorrectlyCreated()METHODI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaj	 j(,"
isFinalfalse"√
declarationString≠<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">repositoryStructureCorrectlyCreated</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*#repositoryStructureCorrectlyCreated2û
Kjava.nio.file.Files.exists(java.nio.file.Path, java.nio.file.LinkOption...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javal l(2è
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javal% l('2p
java.nio.file.Path.toString()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javal@ l(H2û
Kjava.nio.file.Files.exists(java.nio.file.Path, java.nio.file.LinkOption...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javam m(2è
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javam% m('2p
java.nio.file.Path.toString()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javam@ m(H2û
Kjava.nio.file.Files.exists(java.nio.file.Path, java.nio.file.LinkOption...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javan n(2è
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javan% n('2p
java.nio.file.Path.toString()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javan@ n(H2û
Kjava.nio.file.Files.exists(java.nio.file.Path, java.nio.file.LinkOption...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javao o(2è
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javao% o('2p
java.nio.file.Path.toString()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javao@ o(H2û
Kjava.nio.file.Files.exists(java.nio.file.Path, java.nio.file.LinkOption...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javap p(2è
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javap% p('2p
java.nio.file.Path.toString()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javap@ p(H2û
Kjava.nio.file.Files.exists(java.nio.file.Path, java.nio.file.LinkOption...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaq q(2è
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaq% q('2p
java.nio.file.Path.toString()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaq@ q(H2û
Kjava.nio.file.Files.exists(java.nio.file.Path, java.nio.file.LinkOption...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javar r(2è
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javar% r('2p
java.nio.file.Path.toString()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javar@ r(H2û
Kjava.nio.file.Files.exists(java.nio.file.Path, java.nio.file.LinkOption...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javas s(2è
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javas% s('2p
java.nio.file.Path.toString()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javas@ s(H2û
Kjava.nio.file.Files.exists(java.nio.file.Path, java.nio.file.LinkOption...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javat t(2è
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javat% t('2p
java.nio.file.Path.toString()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javat@ t(H2û
Kjava.nio.file.Files.exists(java.nio.file.Path, java.nio.file.LinkOption...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javau u( 2è
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javau& u((2p
java.nio.file.Path.toString()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javauA u(I2û
Kjava.nio.file.Files.exists(java.nio.file.Path, java.nio.file.LinkOption...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javav v( 2è
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javav& v((2p
java.nio.file.Path.toString()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javavA v(I2û
Kjava.nio.file.Files.exists(java.nio.file.Path, java.nio.file.LinkOption...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaw w( 2è
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaw& w((2p
java.nio.file.Path.toString()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javawA w(I2¢
Oorg.jabref.logic.crawler.StudyRepositoryTest?tempRepositoryDirectory@54.9:54.32CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javal( l(?2õ
Horg.jabref.logic.crawler.StudyRepositoryTest?hashCodeQuantum@57.11:57.26CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javalL l([2¢
Oorg.jabref.logic.crawler.StudyRepositoryTest?tempRepositoryDirectory@54.9:54.32CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javam( m(?2¢
Oorg.jabref.logic.crawler.StudyRepositoryTest?hashCodeCloudComputing@58.11:58.33CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javamL m(b2¢
Oorg.jabref.logic.crawler.StudyRepositoryTest?tempRepositoryDirectory@54.9:54.32CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javan( n(?2ß
Torg.jabref.logic.crawler.StudyRepositoryTest?hashCodeSoftwareEngineering@59.11:59.38CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javanL n(g2¢
Oorg.jabref.logic.crawler.StudyRepositoryTest?tempRepositoryDirectory@54.9:54.32CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javao( o(?2õ
Horg.jabref.logic.crawler.StudyRepositoryTest?hashCodeQuantum@57.11:57.26CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaoL o([2¢
Oorg.jabref.logic.crawler.StudyRepositoryTest?tempRepositoryDirectory@54.9:54.32CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javap( p(?2¢
Oorg.jabref.logic.crawler.StudyRepositoryTest?hashCodeCloudComputing@58.11:58.33CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javapL p(b2¢
Oorg.jabref.logic.crawler.StudyRepositoryTest?tempRepositoryDirectory@54.9:54.32CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaq( q(?2ß
Torg.jabref.logic.crawler.StudyRepositoryTest?hashCodeSoftwareEngineering@59.11:59.38CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaqL q(g2¢
Oorg.jabref.logic.crawler.StudyRepositoryTest?tempRepositoryDirectory@54.9:54.32CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javar( r(?2õ
Horg.jabref.logic.crawler.StudyRepositoryTest?hashCodeQuantum@57.11:57.26CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javarL r([2¢
Oorg.jabref.logic.crawler.StudyRepositoryTest?tempRepositoryDirectory@54.9:54.32CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javas( s(?2¢
Oorg.jabref.logic.crawler.StudyRepositoryTest?hashCodeCloudComputing@58.11:58.33CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javasL s(b2¢
Oorg.jabref.logic.crawler.StudyRepositoryTest?tempRepositoryDirectory@54.9:54.32CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javat( t(?2ß
Torg.jabref.logic.crawler.StudyRepositoryTest?hashCodeSoftwareEngineering@59.11:59.38CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javatL t(g2¢
Oorg.jabref.logic.crawler.StudyRepositoryTest?tempRepositoryDirectory@54.9:54.32CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javau) u(@2õ
Horg.jabref.logic.crawler.StudyRepositoryTest?hashCodeQuantum@57.11:57.26CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javauM u(\2¢
Oorg.jabref.logic.crawler.StudyRepositoryTest?tempRepositoryDirectory@54.9:54.32CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javav) v(@2¢
Oorg.jabref.logic.crawler.StudyRepositoryTest?hashCodeCloudComputing@58.11:58.33CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javavM v(c2¢
Oorg.jabref.logic.crawler.StudyRepositoryTest?tempRepositoryDirectory@54.9:54.32CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaw) w(@2ß
Torg.jabref.logic.crawler.StudyRepositoryTest?hashCodeSoftwareEngineering@59.11:59.38CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javawM w(h2^
voidRETURN_TYPEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaj j(õ
Horg.jabref.logic.crawler.StudyRepositoryTest.bibEntriesCorrectlyStored()METHODI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java~	 ~(""
isFinalfalse"Ü
declarationString<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">bibEntriesCorrectlyStored</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*bibEntriesCorrectlyStored2ï
Borg.jabref.logic.crawler.StudyRepositoryTest.setUpTestResultFile()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java (2é
9org.jabref.model.database.BibDatabaseContext.getEntries()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÄ\ Ä(f2π
dorg.jabref.logic.crawler.StudyRepository.getFetcherResultEntries(java.lang.String, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÄ0 Ä(G2û
Iorg.jabref.logic.crawler.StudyRepositoryTest.getArXivQuantumMockResults()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÅ Å(/2ù
Horg.jabref.logic.crawler.StudyRepositoryTest?studyRepository@55.20:55.35CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÄ  Ä(/2≤
]org.jabref.logic.crawler.StudyRepositoryTest.bibEntriesCorrectlyStored()?result@128.23:128.29CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÅ3 Å(92π
]org.jabref.logic.crawler.StudyRepositoryTest.bibEntriesCorrectlyStored()?result@128.23:128.29DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÄ Ä(2^
voidRETURN_TYPEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java~ ~(ê	
]org.jabref.logic.crawler.StudyRepositoryTest.bibEntriesCorrectlyStored()?result@128.23:128.29VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÄ Ä("
typeList<BibEntry>"
isFinalfalse"‘
declarationStringæ<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">result</mark> = studyRepository.getFetcherResultEntries("Quantum"<mark class="modifier">,</mark> "ArXiv").getEntries()*result2c
java.util.ListTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÄ Ä(2}
org.jabref.model.entry.BibEntryTYPE_ARGUMENTK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÄ Ä(2é
9org.jabref.model.database.BibDatabaseContext.getEntries()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÄ\ Ä(f2π
dorg.jabref.logic.crawler.StudyRepository.getFetcherResultEntries(java.lang.String, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÄ0 Ä(G2ù
Horg.jabref.logic.crawler.StudyRepositoryTest?studyRepository@55.20:55.35CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÄ  Ä(/…
Oorg.jabref.logic.crawler.StudyRepositoryTest.fetcherResultsPersistedCorrectly()METHODK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÖ	 Ö()"
isFinalfalse"ç
declarationString˜<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">fetcherResultsPersistedCorrectly</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid* fetcherResultsPersistedCorrectly2í
=org.jabref.logic.crawler.StudyRepositoryTest.getMockResults()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÜ( Ü(62π
dorg.jabref.logic.crawler.StudyRepository.persist(java.util.List<org.jabref.model.study.QueryResult>)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaà à(2û
Iorg.jabref.logic.crawler.StudyRepositoryTest.getArXivQuantumMockResults()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaä ä(/2è
9org.jabref.model.database.BibDatabaseContext.getEntries()CALLL
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaäx ä(Ç2π
dorg.jabref.logic.crawler.StudyRepository.getFetcherResultEntries(java.lang.String, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaäL ä(c2ö
Eorg.jabref.logic.crawler.StudyRepositoryTest.getTestStudyRepository()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaä3 ä(I2°
Lorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaã ã(22è
9org.jabref.model.database.BibDatabaseContext.getEntries()CALLL
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaã~ ã(à2π
dorg.jabref.logic.crawler.StudyRepository.getFetcherResultEntries(java.lang.String, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaãO ã(f2ö
Eorg.jabref.logic.crawler.StudyRepositoryTest.getTestStudyRepository()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaã6 ã(L2®
Sorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerCloudComputingMockResults()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaå å(92ê
9org.jabref.model.database.BibDatabaseContext.getEntries()CALLM
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaåç å(ó2π
dorg.jabref.logic.crawler.StudyRepository.getFetcherResultEntries(java.lang.String, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaåV å(m2ö
Eorg.jabref.logic.crawler.StudyRepositoryTest.getTestStudyRepository()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaå= å(S2ù
Horg.jabref.logic.crawler.StudyRepositoryTest?studyRepository@55.20:55.35CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaà à(2æ
iorg.jabref.logic.crawler.StudyRepositoryTest.fetcherResultsPersistedCorrectly()?mockResults@134.26:134.37CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaà  à(+2≈
iorg.jabref.logic.crawler.StudyRepositoryTest.fetcherResultsPersistedCorrectly()?mockResults@134.26:134.37DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÜ Ü(%2`
voidRETURN_TYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÖ Ö(Å
iorg.jabref.logic.crawler.StudyRepositoryTest.fetcherResultsPersistedCorrectly()?mockResults@134.26:134.37VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÜ Ü(%"
typeList<QueryResult>"
isFinalfalse"Ö
declarationStringp<mark class="modifier"> </mark>List<QueryResult> <mark class="class-field">mockResults</mark> = getMockResults()*mockResults2c
java.util.ListTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÜ Ü(2Ä
"org.jabref.model.study.QueryResultTYPE_ARGUMENTK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÜ Ü(2í
=org.jabref.logic.crawler.StudyRepositoryTest.getMockResults()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÜ( Ü(6≈%
Norg.jabref.logic.crawler.StudyRepositoryTest.mergedResultsPersistedCorrectly()METHODK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaê	 ê(("
isFinalfalse"å
declarationStringˆ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">mergedResultsPersistedCorrectly</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*mergedResultsPersistedCorrectly2í
=org.jabref.logic.crawler.StudyRepositoryTest.getMockResults()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaë( ë(62ç
8java.util.List.addAll(java.util.Collection<? extends E>)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaì ì(2û
Iorg.jabref.logic.crawler.StudyRepositoryTest.getArXivQuantumMockResults()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaì ì(22j
java.util.List.add(E)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaî î(2l
java.util.List.get(int)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaî5 î(82°
Lorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaî î(22j
java.util.List.add(E)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaï ï(2l
java.util.List.get(int)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaï5 ï(82°
Lorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaï ï(22π
dorg.jabref.logic.crawler.StudyRepository.persist(java.util.List<org.jabref.model.study.QueryResult>)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaó ó(2é
9org.jabref.model.database.BibDatabaseContext.getEntries()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaöY ö(c2•
Porg.jabref.logic.crawler.StudyRepository.getQueryResultEntries(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaö8 ö(M2ö
Eorg.jabref.logic.crawler.StudyRepositoryTest.getTestStudyRepository()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaö ö(52®
Sorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerCloudComputingMockResults()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaõ õ(92è
9org.jabref.model.database.BibDatabaseContext.getEntries()CALLL
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaõ õ(â2•
Porg.jabref.logic.crawler.StudyRepository.getQueryResultEntries(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaõV õ(k2ö
Eorg.jabref.logic.crawler.StudyRepositoryTest.getTestStudyRepository()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaõ= õ(S2t
java.util.ArrayList.ArrayList()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaí& í(12∫
eorg.jabref.logic.crawler.StudyRepositoryTest.mergedResultsPersistedCorrectly()?expected@146.23:146.31CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaì ì(2∫
eorg.jabref.logic.crawler.StudyRepositoryTest.mergedResultsPersistedCorrectly()?expected@146.23:146.31CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaî î(2∫
eorg.jabref.logic.crawler.StudyRepositoryTest.mergedResultsPersistedCorrectly()?expected@146.23:146.31CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaï ï(2ù
Horg.jabref.logic.crawler.StudyRepositoryTest?studyRepository@55.20:55.35CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaó ó(2Ω
horg.jabref.logic.crawler.StudyRepositoryTest.mergedResultsPersistedCorrectly()?mockResults@145.26:145.37CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaó  ó(+2∫
eorg.jabref.logic.crawler.StudyRepositoryTest.mergedResultsPersistedCorrectly()?expected@146.23:146.31CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaö ö(2ƒ
horg.jabref.logic.crawler.StudyRepositoryTest.mergedResultsPersistedCorrectly()?mockResults@145.26:145.37DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaë ë(%2¡
eorg.jabref.logic.crawler.StudyRepositoryTest.mergedResultsPersistedCorrectly()?expected@146.23:146.31DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaí í(2`
voidRETURN_TYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaê ê(Ä
horg.jabref.logic.crawler.StudyRepositoryTest.mergedResultsPersistedCorrectly()?mockResults@145.26:145.37VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaë ë(%"
typeList<QueryResult>"
isFinalfalse"Ö
declarationStringp<mark class="modifier"> </mark>List<QueryResult> <mark class="class-field">mockResults</mark> = getMockResults()*mockResults2c
java.util.ListTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaë ë(2Ä
"org.jabref.model.study.QueryResultTYPE_ARGUMENTK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaë ë(2í
=org.jabref.logic.crawler.StudyRepositoryTest.getMockResults()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaë( ë(6œ
eorg.jabref.logic.crawler.StudyRepositoryTest.mergedResultsPersistedCorrectly()?expected@146.23:146.31VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaí í("
typeList<BibEntry>"
isFinalfalse"Ä
declarationStringk<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">expected</mark> = new ArrayList<>()*expected2c
java.util.ListTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaí í(2}
org.jabref.model.entry.BibEntryTYPE_ARGUMENTK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaí í(2t
java.util.ArrayList.ArrayList()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaí& í(1ò
Morg.jabref.logic.crawler.StudyRepositoryTest.studyResultsPersistedCorrectly()METHODK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaü	 ü('"
isFinalfalse"ã
declarationStringı<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">studyResultsPersistedCorrectly</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*studyResultsPersistedCorrectly2í
=org.jabref.logic.crawler.StudyRepositoryTest.getMockResults()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java†( †(62π
dorg.jabref.logic.crawler.StudyRepository.persist(java.util.List<org.jabref.model.study.QueryResult>)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java° °(2á
2org.jabref.model.database.BibDatabase.getEntries()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¢C ¢(M2°
Lorg.jabref.logic.crawler.StudyRepositoryTest.getNonDuplicateBibEntryResult()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¢# ¢(@2ê
9org.jabref.model.database.BibDatabaseContext.getEntries()CALLM
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¢ë ¢(õ2ñ
@org.jabref.logic.crawler.StudyRepository.getStudyResultEntries()CALLL
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¢y ¢(é2ö
Eorg.jabref.logic.crawler.StudyRepositoryTest.getTestStudyRepository()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¢` ¢(v2ë
<java.util.HashSet.HashSet(java.util.Collection<? extends E>)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¢V ¢(_2ù
Horg.jabref.logic.crawler.StudyRepositoryTest?studyRepository@55.20:55.35CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java° °(2º
gorg.jabref.logic.crawler.StudyRepositoryTest.studyResultsPersistedCorrectly()?mockResults@160.26:160.37CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java°  °(+2√
gorg.jabref.logic.crawler.StudyRepositoryTest.studyResultsPersistedCorrectly()?mockResults@160.26:160.37DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java† †(%2`
voidRETURN_TYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaü ü(ˇ
gorg.jabref.logic.crawler.StudyRepositoryTest.studyResultsPersistedCorrectly()?mockResults@160.26:160.37VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java† †(%"
typeList<QueryResult>"
isFinalfalse"Ö
declarationStringp<mark class="modifier"> </mark>List<QueryResult> <mark class="class-field">mockResults</mark> = getMockResults()*mockResults2c
java.util.ListTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java† †(2Ä
"org.jabref.model.study.QueryResultTYPE_ARGUMENTK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java† †(2í
=org.jabref.logic.crawler.StudyRepositoryTest.getMockResults()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java†( †(6¬
Eorg.jabref.logic.crawler.StudyRepositoryTest.getTestStudyRepository()METHODK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java• •(2"
isFinalfalse"Õ
declarationString∑<mark class="modifier">private </mark>StudyRepository <mark class="method">getTestStudyRepository</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accessprivate"

isAbstractfalse"
typeStudyRepository*getTestStudyRepository2†
Korg.jabref.logic.crawler.StudyRepositoryTest.setUpTestStudyDefinitionFile()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¶ ¶($2«
Òorg.jabref.logic.crawler.StudyRepository.StudyRepository(java.nio.file.Path, org.jabref.logic.git.SlrGitHandler, org.jabref.preferences.PreferencesService, org.jabref.model.util.FileUpdateMonitor, org.jabref.model.entry.BibEntryTypesManager)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaß ß(-2ö
Eorg.jabref.model.util.DummyFileUpdateMonitor.DummyFileUpdateMonitor()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java´ ´(*2ù
Horg.jabref.logic.crawler.StudyRepositoryTest?studyRepository@55.20:55.35CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaß ß(2§
Oorg.jabref.logic.crawler.StudyRepositoryTest?tempRepositoryDirectory@54.9:54.32CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java® ®('2ò
Corg.jabref.logic.crawler.StudyRepositoryTest?gitHandler@56.18:56.28CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java© ©(2†
Korg.jabref.logic.crawler.StudyRepositoryTest?preferencesService@48.23:48.41CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java™ ™("2ü
Jorg.jabref.logic.crawler.StudyRepositoryTest?entryTypesManager@52.25:52.42CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¨ ¨(!2ù
Horg.jabref.logic.crawler.StudyRepositoryTest?studyRepository@55.20:55.35CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java≠ ≠(2Ñ
(org.jabref.logic.crawler.StudyRepositoryRETURN_TYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java• •(™
Korg.jabref.logic.crawler.StudyRepositoryTest.setUpTestStudyDefinitionFile()METHODK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java≥ ≥(-"
isFinalfalse"Ê
declarationString–<mark class="modifier">private </mark><mark class="modifier">void</mark> <mark class="method">setUpTestStudyDefinitionFile</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accessprivate"

isAbstractfalse"
typevoid*setUpTestStudyDefinitionFile2Å
,java.nio.file.Path.resolve(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¥3 ¥(:2Ç
-java.lang.Class.getResource(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaµ. µ(92p
java.lang.Object.getClass()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaµ# µ(+2∞
[org.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java∂ ∂(2x
#java.nio.file.Path.of(java.net.URI)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java∂ ∂(!2i
java.net.URL.toURI()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java∂2 ∂(72§
Oorg.jabref.logic.crawler.StudyRepositoryTest?tempRepositoryDirectory@54.9:54.32CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¥ ¥(22æ
iorg.jabref.logic.crawler.StudyRepositoryTest.setUpTestStudyDefinitionFile()?studyDefinition@181.12:181.27CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java∂" ∂(12∫
eorg.jabref.logic.crawler.StudyRepositoryTest.setUpTestStudyDefinitionFile()?destination@180.13:180.24CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java∂< ∂(G2¡
eorg.jabref.logic.crawler.StudyRepositoryTest.setUpTestStudyDefinitionFile()?destination@180.13:180.24DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¥ ¥(2≈
iorg.jabref.logic.crawler.StudyRepositoryTest.setUpTestStudyDefinitionFile()?studyDefinition@181.12:181.27DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaµ µ(2`
voidRETURN_TYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java≥ ≥(∂
eorg.jabref.logic.crawler.StudyRepositoryTest.setUpTestStudyDefinitionFile()?destination@180.13:180.24VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¥ ¥("
typePath"
isFinalfalse"¥
declarationStringû<mark class="modifier"> </mark>Path <mark class="class-field">destination</mark> = tempRepositoryDirectory.resolve(StudyRepository.STUDY_DEFINITION_FILE_NAME)*destination2g
java.nio.file.PathTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¥ ¥(2Å
,java.nio.file.Path.resolve(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¥3 ¥(:2§
Oorg.jabref.logic.crawler.StudyRepositoryTest?tempRepositoryDirectory@54.9:54.32CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¥ ¥(2†
iorg.jabref.logic.crawler.StudyRepositoryTest.setUpTestStudyDefinitionFile()?studyDefinition@181.12:181.27VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaµ µ("
typeURL"
isFinalfalse"—
declarationStringª<mark class="modifier"> </mark>URL <mark class="class-field">studyDefinition</mark> = <mark class="modifier">this</mark>.getClass().getResource(StudyRepository.STUDY_DEFINITION_FILE_NAME)*studyDefinition2a
java.net.URLTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaµ µ(2Ç
-java.lang.Class.getResource(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaµ. µ(92p
java.lang.Object.getClass()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaµ# µ(+∫'
Borg.jabref.logic.crawler.StudyRepositoryTest.setUpTestResultFile()METHODK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaΩ Ω($"
isFinalfalse"›
declarationString«<mark class="modifier">private </mark><mark class="modifier">void</mark> <mark class="method">setUpTestResultFile</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accessprivate"

isAbstractfalse"
typevoid*setUpTestResultFile2ë
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaæ# æ(%2r
java.nio.file.Path.toString()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaæ> æ(F2ë
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaø' ø()2r
java.nio.file.Path.toString()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaø9 ø(A2Ç
-java.lang.Class.getResource(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¿) ¿(42p
java.lang.Object.getClass()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¿ ¿(&2∞
[org.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¡ ¡(2x
#java.nio.file.Path.of(java.net.URI)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¡ ¡(!2i
java.net.URL.toURI()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¡- ¡(22ë
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¬" ¬($2r
java.nio.file.Path.toString()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¬4 ¬(<2Ç
-java.lang.Class.getResource(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java√% √(02p
java.lang.Object.getClass()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java√ √("2∞
[org.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaƒ ƒ(2x
#java.nio.file.Path.of(java.net.URI)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaƒ ƒ(!2i
java.net.URL.toURI()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaƒ- ƒ(22§
Oorg.jabref.logic.crawler.StudyRepositoryTest?tempRepositoryDirectory@54.9:54.32CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaæ& æ(=2ù
Horg.jabref.logic.crawler.StudyRepositoryTest?hashCodeQuantum@57.11:57.26CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaæJ æ(Y2¥
_org.jabref.logic.crawler.StudyRepositoryTest.setUpTestResultFile()?queryDirectory@190.13:190.27CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaø* ø(82∞
[org.jabref.logic.crawler.StudyRepositoryTest.setUpTestResultFile()?resultFile@192.12:192.22CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¡" ¡(,2∏
corg.jabref.logic.crawler.StudyRepositoryTest.setUpTestResultFile()?resultFileLocation@191.13:191.31CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¡7 ¡(I2∏
corg.jabref.logic.crawler.StudyRepositoryTest.setUpTestResultFile()?resultFileLocation@191.13:191.31CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¬ ¬(2¥
_org.jabref.logic.crawler.StudyRepositoryTest.setUpTestResultFile()?queryDirectory@190.13:190.27CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¬% ¬(32∞
[org.jabref.logic.crawler.StudyRepositoryTest.setUpTestResultFile()?resultFile@192.12:192.22CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java√ √(2∞
[org.jabref.logic.crawler.StudyRepositoryTest.setUpTestResultFile()?resultFile@192.12:192.22CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaƒ" ƒ(,2∏
corg.jabref.logic.crawler.StudyRepositoryTest.setUpTestResultFile()?resultFileLocation@191.13:191.31CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaƒ7 ƒ(I2ª
_org.jabref.logic.crawler.StudyRepositoryTest.setUpTestResultFile()?queryDirectory@190.13:190.27DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaæ æ(2ø
corg.jabref.logic.crawler.StudyRepositoryTest.setUpTestResultFile()?resultFileLocation@191.13:191.31DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaø ø(2∑
[org.jabref.logic.crawler.StudyRepositoryTest.setUpTestResultFile()?resultFile@192.12:192.22DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¿ ¿(2`
voidRETURN_TYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaΩ Ω(¯
_org.jabref.logic.crawler.StudyRepositoryTest.setUpTestResultFile()?queryDirectory@190.13:190.27VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaæ æ("
typePath"
isFinalfalse"’
declarationStringø<mark class="modifier"> </mark>Path <mark class="class-field">queryDirectory</mark> = Path.of(tempRepositoryDirectory.toString()<mark class="modifier">,</mark> hashCodeQuantum + " - Quantum")*queryDirectory2g
java.nio.file.PathTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaæ æ(2ë
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaæ# æ(%2r
java.nio.file.Path.toString()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaæ> æ(F2§
Oorg.jabref.logic.crawler.StudyRepositoryTest?tempRepositoryDirectory@54.9:54.32CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaæ& æ(=2ù
Horg.jabref.logic.crawler.StudyRepositoryTest?hashCodeQuantum@57.11:57.26CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaæJ æ(Y›
corg.jabref.logic.crawler.StudyRepositoryTest.setUpTestResultFile()?resultFileLocation@191.13:191.31VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaø ø("
typePath"
isFinalfalse"¬
declarationString¨<mark class="modifier"> </mark>Path <mark class="class-field">resultFileLocation</mark> = Path.of(queryDirectory.toString()<mark class="modifier">,</mark> "ArXiv" + ".bib")*resultFileLocation2g
java.nio.file.PathTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaø ø(2ë
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaø' ø()2r
java.nio.file.Path.toString()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaø9 ø(A2¥
_org.jabref.logic.crawler.StudyRepositoryTest.setUpTestResultFile()?queryDirectory@190.13:190.27CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaø* ø(8Ù
[org.jabref.logic.crawler.StudyRepositoryTest.setUpTestResultFile()?resultFile@192.12:192.22VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¿ ¿("
typeURL"
isFinalfalse"∏
declarationString¢<mark class="modifier"> </mark>URL <mark class="class-field">resultFile</mark> = <mark class="modifier">this</mark>.getClass().getResource("ArXivQuantumMock.bib")*
resultFile2a
java.net.URLTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¿ ¿(2Ç
-java.lang.Class.getResource(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¿) ¿(42p
java.lang.Object.getClass()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¿ ¿(&Ã
Lorg.jabref.logic.crawler.StudyRepositoryTest.getNonDuplicateBibEntryResult()METHODK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java« «(5"
isFinalfalse"Ç
declarationStringm<mark class="modifier">private </mark>BibDatabase <mark class="method">getNonDuplicateBibEntryResult</mark>()"
isStaticfalse"
accessprivate"

isAbstractfalse"
typeBibDatabase*getNonDuplicateBibEntryResult2®
Sorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerCloudComputingMockResults()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java»2 »(V2—
|org.jabref.logic.database.DatabaseMerger.merge(org.jabref.model.database.BibDatabase, org.jabref.model.database.BibDatabase)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java   (2°
Lorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java 2  (O2—
|org.jabref.logic.database.DatabaseMerger.merge(org.jabref.model.database.BibDatabase, org.jabref.model.database.BibDatabase)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÀ À(2û
Iorg.jabref.logic.crawler.StudyRepositoryTest.getArXivQuantumMockResults()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÀ2 À(L2∑
borg.jabref.model.database.BibDatabase.BibDatabase(java.util.List<org.jabref.model.entry.BibEntry>)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java»& »(12∑
borg.jabref.model.database.BibDatabase.BibDatabase(java.util.List<org.jabref.model.entry.BibEntry>)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java &  (12∑
borg.jabref.model.database.BibDatabase.BibDatabase(java.util.List<org.jabref.model.entry.BibEntry>)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÀ& À(12•
Porg.jabref.logic.crawler.StudyRepositoryTest?importFormatPreferences@50.28:50.51CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java…3 …(J2∂
aorg.jabref.logic.crawler.StudyRepositoryTest.getNonDuplicateBibEntryResult()?merger@201.23:201.29CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java   (2ª
forg.jabref.logic.crawler.StudyRepositoryTest.getNonDuplicateBibEntryResult()?mockResults@200.20:200.31CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java   ( 2∂
aorg.jabref.logic.crawler.StudyRepositoryTest.getNonDuplicateBibEntryResult()?merger@201.23:201.29CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÀ À(2ª
forg.jabref.logic.crawler.StudyRepositoryTest.getNonDuplicateBibEntryResult()?mockResults@200.20:200.31CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÀ À( 2ª
forg.jabref.logic.crawler.StudyRepositoryTest.getNonDuplicateBibEntryResult()?mockResults@200.20:200.31CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÃ Ã(2¬
forg.jabref.logic.crawler.StudyRepositoryTest.getNonDuplicateBibEntryResult()?mockResults@200.20:200.31DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java» »(2Ω
aorg.jabref.logic.crawler.StudyRepositoryTest.getNonDuplicateBibEntryResult()?merger@201.23:201.29DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java… …(2Å
%org.jabref.model.database.BibDatabaseRETURN_TYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java« «(˛
forg.jabref.logic.crawler.StudyRepositoryTest.getNonDuplicateBibEntryResult()?mockResults@200.20:200.31VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java» »("
typeBibDatabase"
isFinalfalse"ß
declarationStringë<mark class="modifier"> </mark>BibDatabase <mark class="class-field">mockResults</mark> = new BibDatabase(getSpringerCloudComputingMockResults())*mockResults2z
%org.jabref.model.database.BibDatabaseTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java» »(2®
Sorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerCloudComputingMockResults()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java»2 »(V2∑
borg.jabref.model.database.BibDatabase.BibDatabase(java.util.List<org.jabref.model.entry.BibEntry>)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java»& »(1€
aorg.jabref.logic.crawler.StudyRepositoryTest.getNonDuplicateBibEntryResult()?merger@201.23:201.29VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java… …("
typeDatabaseMerger"
isFinalfalse"≈
declarationStringØ<mark class="modifier"> </mark>DatabaseMerger <mark class="class-field">merger</mark> = new DatabaseMerger(importFormatPreferences.bibEntryPreferences().getKeywordSeparator())*merger2}
(org.jabref.logic.database.DatabaseMergerTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java… …(2•
Porg.jabref.logic.crawler.StudyRepositoryTest?importFormatPreferences@50.28:50.51CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java…3 …(JÆ 
=org.jabref.logic.crawler.StudyRepositoryTest.getMockResults()METHODK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaœ œ(,"
isFinalfalse"
declarationStringj<mark class="modifier">private </mark>List&lt;QueryResult&gt; <mark class="method">getMockResults</mark>()"
isStaticfalse"
accessprivate"

isAbstractfalse"
typeList<QueryResult>*getMockResults2l
java.util.List.of(E, E)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java—0 —(22ƒ
oorg.jabref.logic.crawler.StudyRepositoryTest.stripCitationKeys(java.util.List<org.jabref.model.entry.BibEntry>)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java“A “(R2û
Iorg.jabref.logic.crawler.StudyRepositoryTest.getArXivQuantumMockResults()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java“S “(m2ƒ
oorg.jabref.logic.crawler.StudyRepositoryTest.stripCitationKeys(java.util.List<org.jabref.model.entry.BibEntry>)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java”D ”(U2°
Lorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java”V ”(s2i
java.util.List.of(E)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‘S ‘(U2™
Sorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerCloudComputingMockResults()CALLM
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‘Ç ‘(¶2l
java.util.List.of(E, E)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java’ ’(2…
torg.jabref.model.study.QueryResult.QueryResult(java.lang.String, java.util.List<org.jabref.model.study.FetchResult>)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java— —(2º
gorg.jabref.model.study.FetchResult.FetchResult(java.lang.String, org.jabref.model.database.BibDatabase)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java“ “('2∑
borg.jabref.model.database.BibDatabase.BibDatabase(java.util.List<org.jabref.model.entry.BibEntry>)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java“5 “(@2º
gorg.jabref.model.study.FetchResult.FetchResult(java.lang.String, org.jabref.model.database.BibDatabase)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java” ”('2∑
borg.jabref.model.database.BibDatabase.BibDatabase(java.util.List<org.jabref.model.entry.BibEntry>)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java”8 ”(C2…
torg.jabref.model.study.QueryResult.QueryResult(java.lang.String, java.util.List<org.jabref.model.study.FetchResult>)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‘/ ‘(:2º
gorg.jabref.model.study.FetchResult.FetchResult(java.lang.String, org.jabref.model.database.BibDatabase)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‘Z ‘(e2∏
borg.jabref.model.database.BibDatabase.BibDatabase(java.util.List<org.jabref.model.entry.BibEntry>)CALLL
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‘v ‘(Å2Æ
Yorg.jabref.logic.crawler.StudyRepositoryTest.getMockResults()?resultQuantum@208.20:208.33CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java’ ’($2µ
`org.jabref.logic.crawler.StudyRepositoryTest.getMockResults()?resultCloudComputing@212.20:212.40CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java’& ’(:2µ
Yorg.jabref.logic.crawler.StudyRepositoryTest.getMockResults()?resultQuantum@208.20:208.33DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java– –(!2º
`org.jabref.logic.crawler.StudyRepositoryTest.getMockResults()?resultCloudComputing@212.20:212.40DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‘ ‘((2j
java.util.ListRETURN_TYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaœ œ(2á
"org.jabref.model.study.QueryResultRETURN_TYPE_ARGUMENTK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaœ œ(Æ
Yorg.jabref.logic.crawler.StudyRepositoryTest.getMockResults()?resultQuantum@208.20:208.33VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java– –(!"
typeQueryResult"
isFinalfalse"À
declarationStringµ<mark class="modifier"> </mark>QueryResult <mark class="class-field">resultQuantum</mark> = new QueryResult("Quantum"<mark class="modifier">,</mark> List.of(new FetchResult("ArXiv"<mark class="modifier">,</mark> new BibDatabase(stripCitationKeys(getArXivQuantumMockResults())))<mark class="modifier">,</mark> new FetchResult("Springer"<mark class="modifier">,</mark> new BibDatabase(stripCitationKeys(getSpringerQuantumMockResults())))))*resultQuantum2w
"org.jabref.model.study.QueryResultTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java– –(2l
java.util.List.of(E, E)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java—0 —(22ƒ
oorg.jabref.logic.crawler.StudyRepositoryTest.stripCitationKeys(java.util.List<org.jabref.model.entry.BibEntry>)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java“A “(R2û
Iorg.jabref.logic.crawler.StudyRepositoryTest.getArXivQuantumMockResults()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java“S “(m2ƒ
oorg.jabref.logic.crawler.StudyRepositoryTest.stripCitationKeys(java.util.List<org.jabref.model.entry.BibEntry>)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java”D ”(U2°
Lorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java”V ”(s2…
torg.jabref.model.study.QueryResult.QueryResult(java.lang.String, java.util.List<org.jabref.model.study.FetchResult>)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java— —(2º
gorg.jabref.model.study.FetchResult.FetchResult(java.lang.String, org.jabref.model.database.BibDatabase)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java“ “('2∑
borg.jabref.model.database.BibDatabase.BibDatabase(java.util.List<org.jabref.model.entry.BibEntry>)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java“5 “(@2º
gorg.jabref.model.study.FetchResult.FetchResult(java.lang.String, org.jabref.model.database.BibDatabase)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java” ”('2∑
borg.jabref.model.database.BibDatabase.BibDatabase(java.util.List<org.jabref.model.entry.BibEntry>)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java”8 ”(CÜ
`org.jabref.logic.crawler.StudyRepositoryTest.getMockResults()?resultCloudComputing@212.20:212.40VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‘ ‘(("
typeQueryResult"
isFinalfalse"∂
declarationString†<mark class="modifier"> </mark>QueryResult <mark class="class-field">resultCloudComputing</mark> = new QueryResult("Cloud Computing"<mark class="modifier">,</mark> List.of(new FetchResult("Springer"<mark class="modifier">,</mark> new BibDatabase(getSpringerCloudComputingMockResults()))))*resultCloudComputing2w
"org.jabref.model.study.QueryResultTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‘ ‘(2i
java.util.List.of(E)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‘S ‘(U2™
Sorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerCloudComputingMockResults()CALLM
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‘Ç ‘(¶2…
torg.jabref.model.study.QueryResult.QueryResult(java.lang.String, java.util.List<org.jabref.model.study.FetchResult>)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‘/ ‘(:2º
gorg.jabref.model.study.FetchResult.FetchResult(java.lang.String, org.jabref.model.database.BibDatabase)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‘Z ‘(e2∏
borg.jabref.model.database.BibDatabase.BibDatabase(java.util.List<org.jabref.model.entry.BibEntry>)CALLL
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‘v ‘(Åπ
oorg.jabref.logic.crawler.StudyRepositoryTest.stripCitationKeys(java.util.List<org.jabref.model.entry.BibEntry>)METHODK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java€ €(,"
isFinalfalse"ú
declarationStringÜ<mark class="modifier">private </mark>List&lt;BibEntry&gt; <mark class="method">stripCitationKeys</mark>(List&lt;BibEntry&gt; entries)"
isStaticfalse"
accessprivate"

isAbstractfalse"
typeList<BibEntry>*stripCitationKeys2ó
Bjava.lang.Iterable.forEach(java.util.function.Consumer<? super T>)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‹ ‹(2ï
@org.jabref.model.entry.BibEntry.setCitationKey(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‹- ‹(;2Ã
worg.jabref.logic.crawler.StudyRepositoryTest.stripCitationKeys(java.util.List<org.jabref.model.entry.BibEntry>)!entriesCALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‹ ‹(2‹
Üorg.jabref.logic.crawler.StudyRepositoryTest.stripCitationKeys(java.util.List<org.jabref.model.entry.BibEntry>)?bibEntry@220.24:220.32CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‹$ ‹(,2Ã
worg.jabref.logic.crawler.StudyRepositoryTest.stripCitationKeys(java.util.List<org.jabref.model.entry.BibEntry>)!entriesCALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java› ›(2—
worg.jabref.logic.crawler.StudyRepositoryTest.stripCitationKeys(java.util.List<org.jabref.model.entry.BibEntry>)!entries	PARAMETERK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java€< €(C2„
Üorg.jabref.logic.crawler.StudyRepositoryTest.stripCitationKeys(java.util.List<org.jabref.model.entry.BibEntry>)?bibEntry@220.24:220.32DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‹ ‹( 2j
java.util.ListRETURN_TYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java€ €(2Ñ
org.jabref.model.entry.BibEntryRETURN_TYPE_ARGUMENTK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java€ €(ï
worg.jabref.logic.crawler.StudyRepositoryTest.stripCitationKeys(java.util.List<org.jabref.model.entry.BibEntry>)!entries	PARAMETERK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java€< €(C"
typeList<BibEntry>"
isFinalfalse"+
declarationStringList<BibEntry> entries*entries2c
java.util.ListTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java€- €(12}
org.jabref.model.entry.BibEntryTYPE_ARGUMENTK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java€2 €(:¨
Üorg.jabref.logic.crawler.StudyRepositoryTest.stripCitationKeys(java.util.List<org.jabref.model.entry.BibEntry>)?bibEntry@220.24:220.32VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‹ ‹( "
type"
isFinalfalse"
declarationString	 bibEntry*bibEntry2TYPEò&
Iorg.jabref.logic.crawler.StudyRepositoryTest.getArXivQuantumMockResults()METHODK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‡ ‡(5"
isFinalfalse"à
declarationStrings<mark class="modifier">private </mark>List&lt;BibEntry&gt; <mark class="method">getArXivQuantumMockResults</mark>()"
isStaticfalse"
accessprivate"

isAbstractfalse"
typeList<BibEntry>*getArXivQuantumMockResults2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‰ ‰(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java„ „(2ñ
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‚ ‚( 2§
Oorg.jabref.model.entry.BibEntry.setType(org.jabref.model.entry.types.EntryType)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÂ Â(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÈ È(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaË Ë(2ñ
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÁ Á( 2§
Oorg.jabref.model.entry.BibEntry.setType(org.jabref.model.entry.types.EntryType)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÍ Í(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÓ Ó(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÌ Ì(2ñ
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÏ Ï( 2§
Oorg.jabref.model.entry.BibEntry.setType(org.jabref.model.entry.types.EntryType)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÔ Ô(2o
java.util.List.of(E, E, E)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÒ Ò(2
*org.jabref.model.entry.BibEntry.BibEntry()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java· ·(&2
*org.jabref.model.entry.BibEntry.BibEntry()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÊ Ê(&2
*org.jabref.model.entry.BibEntry.BibEntry()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÎ Î(&2≥
^org.jabref.logic.crawler.StudyRepositoryTest.getArXivQuantumMockResults()?entry1@225.17:225.23CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÂ Â(2≥
^org.jabref.logic.crawler.StudyRepositoryTest.getArXivQuantumMockResults()?entry2@230.17:230.23CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÍ Í(2≥
^org.jabref.logic.crawler.StudyRepositoryTest.getArXivQuantumMockResults()?entry3@235.17:235.23CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÔ Ô(2≥
^org.jabref.logic.crawler.StudyRepositoryTest.getArXivQuantumMockResults()?entry1@225.17:225.23CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÒ Ò(2≥
^org.jabref.logic.crawler.StudyRepositoryTest.getArXivQuantumMockResults()?entry2@230.17:230.23CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÒ Ò(%2≥
^org.jabref.logic.crawler.StudyRepositoryTest.getArXivQuantumMockResults()?entry3@235.17:235.23CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÒ' Ò(-2∫
^org.jabref.logic.crawler.StudyRepositoryTest.getArXivQuantumMockResults()?entry1@225.17:225.23DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java· ·(2∫
^org.jabref.logic.crawler.StudyRepositoryTest.getArXivQuantumMockResults()?entry2@230.17:230.23DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÊ Ê(2∫
^org.jabref.logic.crawler.StudyRepositoryTest.getArXivQuantumMockResults()?entry3@235.17:235.23DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÎ Î(2j
java.util.ListRETURN_TYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‡ ‡(2Ñ
org.jabref.model.entry.BibEntryRETURN_TYPE_ARGUMENTK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‡ ‡(©

^org.jabref.logic.crawler.StudyRepositoryTest.getArXivQuantumMockResults()?entry1@225.17:225.23VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java· ·("
typeBibEntry"
isFinalfalse"≈
declarationStringØ<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry1</mark> = new BibEntry().withCitationKey("Blaha").withField(StandardField.AUTHOR, "Stephen Blaha").withField(StandardField.TITLE, "Quantum Computers and Quantum Computer Languages: Quantum Assembly Language and Quantum C Language")*entry12t
org.jabref.model.entry.BibEntryTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java· ·(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‰ ‰(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java„ „(2ñ
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java‚ ‚( 2
*org.jabref.model.entry.BibEntry.BibEntry()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java· ·(&è

^org.jabref.logic.crawler.StudyRepositoryTest.getArXivQuantumMockResults()?entry2@230.17:230.23VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÊ Ê("
typeBibEntry"
isFinalfalse"´
declarationStringï<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry2</mark> = new BibEntry().withCitationKey("Kaye").withField(StandardField.AUTHOR, "Phillip Kaye and Michele Mosca").withField(StandardField.TITLE, "Quantum Networks for Generating Arbitrary Quantum States")*entry22t
org.jabref.model.entry.BibEntryTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÊ Ê(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÈ È(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaË Ë(2ñ
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÁ Á( 2
*org.jabref.model.entry.BibEntry.BibEntry()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÊ Ê(&Ë	
^org.jabref.logic.crawler.StudyRepositoryTest.getArXivQuantumMockResults()?entry3@235.17:235.23VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÎ Î("
typeBibEntry"
isFinalfalse"Ñ
declarationStringÓ<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry3</mark> = new BibEntry().withCitationKey("Watrous").withField(StandardField.AUTHOR, "John Watrous").withField(StandardField.TITLE, "Quantum Computational Complexity")*entry32t
org.jabref.model.entry.BibEntryTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÎ Î(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÓ Ó(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÌ Ì(2ñ
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÏ Ï( 2
*org.jabref.model.entry.BibEntry.BibEntry()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÎ Î(&ì0
Lorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()METHODK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÙ Ù(8"
isFinalfalse"ã
declarationStringv<mark class="modifier">private </mark>List&lt;BibEntry&gt; <mark class="method">getSpringerQuantumMockResults</mark>()"
isStaticfalse"
accessprivate"

isAbstractfalse"
typeList<BibEntry>*getSpringerQuantumMockResults2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java˘ ˘(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¯ ¯(2ñ
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java˜ ˜( 2§
Oorg.jabref.model.entry.BibEntry.setType(org.jabref.model.entry.types.EntryType)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java˙ ˙(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java˛ ˛(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java˝ ˝(2ñ
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¸ ¸( 2§
Oorg.jabref.model.entry.BibEntry.setType(org.jabref.model.entry.types.EntryType)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaˇ ˇ(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÇ Ç(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÅ Å(2§
Oorg.jabref.model.entry.BibEntry.setType(org.jabref.model.entry.types.EntryType)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÉ É(2¿
korg.jabref.logic.citationkeypattern.CitationKeyGenerator.generateAndSetKey(org.jabref.model.entry.BibEntry)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÜ Ü(.2o
java.util.List.of(E, E, E)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaà à(2
*org.jabref.model.entry.BibEntry.BibEntry()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaˆ ˆ(&2
*org.jabref.model.entry.BibEntry.BibEntry()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java˚ ˚(&2
*org.jabref.model.entry.BibEntry.BibEntry()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÄ Ä(&2î
æorg.jabref.logic.citationkeypattern.CitationKeyGenerator.CitationKeyGenerator(org.jabref.model.database.BibDatabaseContext, org.jabref.logic.citationkeypattern.CitationKeyPatternPreferences)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÖ8 Ö(L2ñ
Aorg.jabref.model.database.BibDatabaseContext.BibDatabaseContext()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÖQ Ö(c2∂
aorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()?entry1@246.17:246.23CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java˙ ˙(2∂
aorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()?entry2@251.17:251.23CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaˇ ˇ(2∂
aorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()?entry3@256.17:256.23CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÉ É(2¨
Vorg.jabref.logic.crawler.StudyRepositoryTest?citationKeyPatternPreferences@47.34:47.63CALLL
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÖg Ö(Ñ2ƒ
oorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()?citationKeyGenerator@261.29:261.49CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÜ Ü(2∂
aorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()?entry3@256.17:256.23CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÜ/ Ü(52∂
aorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()?entry1@246.17:246.23CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaà à(2∂
aorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()?entry2@251.17:251.23CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaà à(%2∂
aorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()?entry3@256.17:256.23CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaà' à(-2Ω
aorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()?entry1@246.17:246.23DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaˆ ˆ(2Ω
aorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()?entry2@251.17:251.23DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java˚ ˚(2Ω
aorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()?entry3@256.17:256.23DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÄ Ä(2À
oorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()?citationKeyGenerator@261.29:261.49DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÖ Ö(12j
java.util.ListRETURN_TYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÙ Ù(2Ñ
org.jabref.model.entry.BibEntryRETURN_TYPE_ARGUMENTK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÙ Ù(¨

aorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()?entry1@246.17:246.23VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaˆ ˆ("
typeBibEntry"
isFinalfalse"≈
declarationStringØ<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry1</mark> = new BibEntry().withCitationKey("Blaha").withField(StandardField.AUTHOR, "Stephen Blaha").withField(StandardField.TITLE, "Quantum Computers and Quantum Computer Languages: Quantum Assembly Language and Quantum C Language")*entry12t
org.jabref.model.entry.BibEntryTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaˆ ˆ(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java˘ ˘(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¯ ¯(2ñ
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java˜ ˜( 2
*org.jabref.model.entry.BibEntry.BibEntry()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaˆ ˆ(&ñ

aorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()?entry2@251.17:251.23VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java˚ ˚("
typeBibEntry"
isFinalfalse"Ø
declarationStringô<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry2</mark> = new BibEntry().withCitationKey("Kroeger").withField(StandardField.AUTHOR, "H. Kr√∂ger").withField(StandardField.TITLE, "Nonlinear Dynamics In Quantum Physics -- Quantum Chaos and Quantum Instantons")*entry22t
org.jabref.model.entry.BibEntryTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java˚ ˚(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java˛ ˛(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java˝ ˝(2ñ
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java¸ ¸( 2
*org.jabref.model.entry.BibEntry.BibEntry()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java˚ ˚(&‘
aorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()?entry3@256.17:256.23VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÄ Ä("
typeBibEntry"
isFinalfalse"Ü
declarationString<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry3</mark> = new BibEntry().withField(StandardField.AUTHOR, "Zieli≈Ñski, Cezary").withField(StandardField.TITLE, "Automatic Control, Robotics, and Information Processing")*entry32t
org.jabref.model.entry.BibEntryTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÄ Ä(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÇ Ç(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÅ Å(2
*org.jabref.model.entry.BibEntry.BibEntry()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÄ Ä(&Ò	
oorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()?citationKeyGenerator@261.29:261.49VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÖ Ö(1"
typeCitationKeyGenerator"
isFinalfalse"Ò
declarationString€<mark class="modifier"> </mark>CitationKeyGenerator <mark class="class-field">citationKeyGenerator</mark> = new CitationKeyGenerator(new BibDatabaseContext()<mark class="modifier">,</mark> citationKeyPatternPreferences)*citationKeyGenerator2ç
8org.jabref.logic.citationkeypattern.CitationKeyGeneratorTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÖ Ö(2î
æorg.jabref.logic.citationkeypattern.CitationKeyGenerator.CitationKeyGenerator(org.jabref.model.database.BibDatabaseContext, org.jabref.logic.citationkeypattern.CitationKeyPatternPreferences)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÖ8 Ö(L2ñ
Aorg.jabref.model.database.BibDatabaseContext.BibDatabaseContext()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÖQ Ö(c2¨
Vorg.jabref.logic.crawler.StudyRepositoryTest?citationKeyPatternPreferences@47.34:47.63CALLL
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaÖg Ö(Ñó
Sorg.jabref.logic.crawler.StudyRepositoryTest.getSpringerCloudComputingMockResults()METHODK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaã ã(?"
isFinalfalse"í
declarationString}<mark class="modifier">private </mark>List&lt;BibEntry&gt; <mark class="method">getSpringerCloudComputingMockResults</mark>()"
isStaticfalse"
accessprivate"

isAbstractfalse"
typeList<BibEntry>*$getSpringerCloudComputingMockResults2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaè è(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaé é(2ñ
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaç ç( 2§
Oorg.jabref.model.entry.BibEntry.setType(org.jabref.model.entry.types.EntryType)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaê ê(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaî î(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaì ì(2ñ
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaí í( 2§
Oorg.jabref.model.entry.BibEntry.setType(org.jabref.model.entry.types.EntryType)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaï ï(2l
java.util.List.of(E, E)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javañ ñ(2
*org.jabref.model.entry.BibEntry.BibEntry()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaå å(&2
*org.jabref.model.entry.BibEntry.BibEntry()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaë ë(&2Ω
horg.jabref.logic.crawler.StudyRepositoryTest.getSpringerCloudComputingMockResults()?entry1@268.17:268.23CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaê ê(2Ω
horg.jabref.logic.crawler.StudyRepositoryTest.getSpringerCloudComputingMockResults()?entry2@273.17:273.23CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaï ï(2Ω
horg.jabref.logic.crawler.StudyRepositoryTest.getSpringerCloudComputingMockResults()?entry1@268.17:268.23CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javañ ñ(2Ω
horg.jabref.logic.crawler.StudyRepositoryTest.getSpringerCloudComputingMockResults()?entry2@273.17:273.23CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javañ ñ(%2ƒ
horg.jabref.logic.crawler.StudyRepositoryTest.getSpringerCloudComputingMockResults()?entry1@268.17:268.23DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaå å(2ƒ
horg.jabref.logic.crawler.StudyRepositoryTest.getSpringerCloudComputingMockResults()?entry2@273.17:273.23DECLARATIONK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaë ë(2j
java.util.ListRETURN_TYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaã ã(2Ñ
org.jabref.model.entry.BibEntryRETURN_TYPE_ARGUMENTK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaã ã(˜

horg.jabref.logic.crawler.StudyRepositoryTest.getSpringerCloudComputingMockResults()?entry1@268.17:268.23VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaå å("
typeBibEntry"
isFinalfalse"â
declarationStringÛ<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry1</mark> = new BibEntry().withCitationKey("Gritzalis").withField(StandardField.AUTHOR, "Gritzalis, Dimitris and Stergiopoulos, George and Vasilellis, Efstratios and Anagnostopoulou, Argiro").withField(StandardField.TITLE, "Readiness Exercises: Are Risk Assessment Methodologies Ready for the Cloud?")*entry12t
org.jabref.model.entry.BibEntryTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaå å(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaè è(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaé é(2ñ
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaç ç( 2
*org.jabref.model.entry.BibEntry.BibEntry()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaå å(&£

horg.jabref.logic.crawler.StudyRepositoryTest.getSpringerCloudComputingMockResults()?entry2@273.17:273.23VARIABLEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaë ë("
typeBibEntry"
isFinalfalse"µ
declarationStringü<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry2</mark> = new BibEntry().withCitationKey("Rangras").withField(StandardField.AUTHOR, "Rangras, Jimit and Bhavsar, Sejal").withField(StandardField.TITLE, "Design of Framework for Disaster Recovery in Cloud Computing")*entry22t
org.jabref.model.entry.BibEntryTYPEK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaë ë(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaî î(2¥
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaì ì(2ñ
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaí í( 2
*org.jabref.model.entry.BibEntry.BibEntry()CALLK
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.javaë ë(&‘
Oorg.jabref.logic.crawler.StudyRepositoryTest?NON_EXISTING_DIRECTORY@46.32:46.54VALUEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java.  .(6"
isFinaltrue"
typeString"Î
declarationString’<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>String <mark class="class-field">NON_EXISTING_DIRECTORY</mark> = "nonExistingTestRepositoryDirectory";"
isStatictrue"
accessprivate*NON_EXISTING_DIRECTORY2c
java.lang.StringTYPEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java. .(›
Vorg.jabref.logic.crawler.StudyRepositoryTest?citationKeyPatternPreferences@47.34:47.63VARIABLEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java/" /(?"
isFinalfalse"%
typeCitationKeyPatternPreferences"ê
declarationString{<mark class="modifier"> </mark>CitationKeyPatternPreferences <mark class="class-field">citationKeyPatternPreferences</mark>"
isStaticfalse"
accesspackage_private*citationKeyPatternPreferences2î
Aorg.jabref.logic.citationkeypattern.CitationKeyPatternPreferencesTYPEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java/ /(!å
Korg.jabref.logic.crawler.StudyRepositoryTest?preferencesService@48.23:48.41VARIABLEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java0 0()"
isFinalfalse"
typePreferencesService"z
declarationStringe<mark class="modifier"> </mark>PreferencesService <mark class="class-field">preferencesService</mark>"
isStaticfalse"
accesspackage_private*preferencesService2|
)org.jabref.preferences.PreferencesServiceTYPEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java0 0(å
Korg.jabref.logic.crawler.StudyRepositoryTest?libraryPreferences@49.23:49.41VARIABLEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java1 1()"
isFinalfalse"
typeLibraryPreferences"z
declarationStringe<mark class="modifier"> </mark>LibraryPreferences <mark class="class-field">libraryPreferences</mark>"
isStaticfalse"
accesspackage_private*libraryPreferences2|
)org.jabref.preferences.LibraryPreferencesTYPEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java1 1(î
Porg.jabref.logic.crawler.StudyRepositoryTest?importFormatPreferences@50.28:50.51VARIABLEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java2 2(3"
isFinalfalse"
typeImportFormatPreferences"Ñ
declarationStringo<mark class="modifier"> </mark>ImportFormatPreferences <mark class="class-field">importFormatPreferences</mark>"
isStaticfalse"
accesspackage_private*importFormatPreferences2j
ImportFormatPreferencesTYPEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java2 2(â
Jorg.jabref.logic.crawler.StudyRepositoryTest?saveConfiguration@51.22:51.39VARIABLEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java3 3('"
isFinalfalse"
typeSaveConfiguration"x
declarationStringc<mark class="modifier"> </mark>SaveConfiguration <mark class="class-field">saveConfiguration</mark>"
isStaticfalse"
accesspackage_private*saveConfiguration2~
+org.jabref.logic.exporter.SaveConfigurationTYPEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java3 3(è
Jorg.jabref.logic.crawler.StudyRepositoryTest?entryTypesManager@52.25:52.42VARIABLEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java4 4(*"
isFinalfalse"
typeBibEntryTypesManager"{
declarationStringf<mark class="modifier"> </mark>BibEntryTypesManager <mark class="class-field">entryTypesManager</mark>"
isStaticfalse"
accesspackage_private*entryTypesManager2~
+org.jabref.model.entry.BibEntryTypesManagerTYPEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java4 4(Á
Oorg.jabref.logic.crawler.StudyRepositoryTest?tempRepositoryDirectory@54.9:54.32VARIABLEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java6	 6( "
isFinalfalse"
typePath"q
declarationString\<mark class="modifier"> </mark>Path <mark class="class-field">tempRepositoryDirectory</mark>"
isStaticfalse"
accesspackage_private*tempRepositoryDirectory2e
java.nio.file.PathTYPEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java6 6(¸
Horg.jabref.logic.crawler.StudyRepositoryTest?studyRepository@55.20:55.35VARIABLEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java7 7(#"
isFinalfalse"
typeStudyRepository"t
declarationString_<mark class="modifier"> </mark>StudyRepository <mark class="class-field">studyRepository</mark>"
isStaticfalse"
accesspackage_private*studyRepository2{
(org.jabref.logic.crawler.StudyRepositoryTYPEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java7 7(ú
Corg.jabref.logic.crawler.StudyRepositoryTest?gitHandler@56.18:56.28VARIABLEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java8 8("
isFinalfalse"
typeSlrGitHandler"•
declarationStringè<mark class="modifier"> </mark>SlrGitHandler <mark class="class-field">gitHandler</mark> = mock(SlrGitHandler.class, Answers.RETURNS_DEFAULTS);"
isStaticfalse"
accesspackage_private*
gitHandler2u
"org.jabref.logic.git.SlrGitHandlerTYPEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java8 8(›
Horg.jabref.logic.crawler.StudyRepositoryTest?hashCodeQuantum@57.11:57.26VARIABLEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java9 9("
isFinalfalse"
typeString"ì
declarationString~<mark class="modifier"> </mark>String <mark class="class-field">hashCodeQuantum</mark> = String.valueOf("Quantum".hashCode());"
isStaticfalse"
accesspackage_private*hashCodeQuantum2c
java.lang.StringTYPEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java9 9(
2p
java.lang.String.valueOf(int)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java9$ 9(+2n
java.lang.String.hashCode()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java96 9(>˚
Oorg.jabref.logic.crawler.StudyRepositoryTest?hashCodeCloudComputing@58.11:58.33VARIABLEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java: :(!"
isFinalfalse"
typeString"£
declarationStringç<mark class="modifier"> </mark>String <mark class="class-field">hashCodeCloudComputing</mark> = String.valueOf("Cloud Computing".hashCode());"
isStaticfalse"
accesspackage_private*hashCodeCloudComputing2c
java.lang.StringTYPEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java: :(
2p
java.lang.String.valueOf(int)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java:+ :(22n
java.lang.String.hashCode()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java:E :(Mì
Torg.jabref.logic.crawler.StudyRepositoryTest?hashCodeSoftwareEngineering@59.11:59.38VARIABLEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java; ;(&"
isFinalfalse"
typeString"±
declarationStringõ<mark class="modifier"> </mark>String <mark class="class-field">hashCodeSoftwareEngineering</mark> = String.valueOf("\"Software Engineering\"".hashCode());"
isStaticfalse"
accesspackage_private*hashCodeSoftwareEngineering2c
java.lang.StringTYPEI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java; ;(
2p
java.lang.String.valueOf(int)CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java;0 ;(72n
java.lang.String.hashCode()CALLI
?src\test\java\org\jabref\logic\crawler\StudyRepositoryTest.java;S ;([