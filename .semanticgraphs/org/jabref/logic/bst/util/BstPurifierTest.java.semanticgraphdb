
<src\test\java\org\jabref\logic\bst\util\BstPurifierTest.javaµ
)org.jabref.logic.bst.util.BstPurifierTestCLASSF
<src\test\java\org\jabref\logic\bst\util\BstPurifierTest.java
 
("$
packageorg.jabref.logic.bst.util"
isFinalfalse"
inner classfalse"

isAbstractfalse"m
declarationStringX<mark class="modifier">public </mark><mark class="modifier">class </mark>BstPurifierTest"
accesspublic*BstPurifierTest2«
Torg.jabref.logic.bst.util.BstPurifierTest.purify(java.lang.String, java.lang.String)DECLARATIONF
<src\test\java\org\jabref\logic\bst\util\BstPurifierTest.java (2•
>org.jabref.logic.bst.util.BstPurifierTest.provideTestStrings()DECLARATIONF
<src\test\java\org\jabref\logic\bst\util\BstPurifierTest.java% (7ú
Torg.jabref.logic.bst.util.BstPurifierTest.purify(java.lang.String, java.lang.String)METHODF
<src\test\java\org\jabref\logic\bst\util\BstPurifierTest.java ("
isFinalfalse"¯
declarationString™ <br><mark class="annotation">@MethodSource("provideTestStrings")</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">purify</mark>(String expected<mark class="modifier"><mark class="modifier">,</mark></mark> String toBePurified)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*purify2Ž
>org.jabref.logic.bst.util.BstPurifier.purify(java.lang.String)CALLF
<src\test\java\org\jabref\logic\bst\util\BstPurifierTest.java+ (12­
]org.jabref.logic.bst.util.BstPurifierTest.purify(java.lang.String, java.lang.String)!expectedCALLF
<src\test\java\org\jabref\logic\bst\util\BstPurifierTest.java (2±
aorg.jabref.logic.bst.util.BstPurifierTest.purify(java.lang.String, java.lang.String)!toBePurifiedCALLF
<src\test\java\org\jabref\logic\bst\util\BstPurifierTest.java2 (>2²
]org.jabref.logic.bst.util.BstPurifierTest.purify(java.lang.String, java.lang.String)!expected	PARAMETERF
<src\test\java\org\jabref\logic\bst\util\BstPurifierTest.java (&2¶
aorg.jabref.logic.bst.util.BstPurifierTest.purify(java.lang.String, java.lang.String)!toBePurified	PARAMETERF
<src\test\java\org\jabref\logic\bst\util\BstPurifierTest.java/ (;2[
voidRETURN_TYPEF
<src\test\java\org\jabref\logic\bst\util\BstPurifierTest.java (æ
]org.jabref.logic.bst.util.BstPurifierTest.purify(java.lang.String, java.lang.String)!expected	PARAMETERF
<src\test\java\org\jabref\logic\bst\util\BstPurifierTest.java (&"
typeString"
isFinalfalse"$
declarationStringString expected*expected2`
java.lang.StringTYPEF
<src\test\java\org\jabref\logic\bst\util\BstPurifierTest.java (ò
aorg.jabref.logic.bst.util.BstPurifierTest.purify(java.lang.String, java.lang.String)!toBePurified	PARAMETERF
<src\test\java\org\jabref\logic\bst\util\BstPurifierTest.java/ (;"
typeString"
isFinalfalse"(
declarationStringString toBePurified*toBePurified2`
java.lang.StringTYPEF
<src\test\java\org\jabref\logic\bst\util\BstPurifierTest.java( (.µ
>org.jabref.logic.bst.util.BstPurifierTest.provideTestStrings()METHODF
<src\test\java\org\jabref\logic\bst\util\BstPurifierTest.java% (7"
isFinalfalse"©
declarationString“<mark class="modifier">private </mark><mark class="modifier">static </mark>Stream&lt;Arguments&gt; <mark class="method">provideTestStrings</mark>()"
isStatictrue"
accessprivate"

isAbstractfalse"
typeStream<Arguments>*provideTestStrings2n
java.util.stream.StreamRETURN_TYPEF
<src\test\java\org\jabref\logic\bst\util\BstPurifierTest.java (2‹
+org.junit.jupiter.params.provider.ArgumentsRETURN_TYPE_ARGUMENTF
<src\test\java\org\jabref\logic\bst\util\BstPurifierTest.java (#