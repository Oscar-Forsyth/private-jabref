
1src\test\java\org\jabref\logic\bst\BstVMTest.javaï
org.jabref.logic.bst.BstVMTestCLASS;
1src\test\java\org\jabref\logic\bst\BstVMTest.java ("
packageorg.jabref.logic.bst"
isFinalfalse"
inner classfalse"

isAbstractfalse"g
declarationStringR<mark class="modifier">public </mark><mark class="modifier">class </mark>BstVMTest"
accesspublic*	BstVMTest2}
1org.jabref.logic.bst.BstVMTest.defaultTestEntry()DECLARATION;
1src\test\java\org\jabref\logic\bst\BstVMTest.java (+2r
&org.jabref.logic.bst.BstVMTest.abbrv()DECLARATION;
1src\test\java\org\jabref\logic\bst\BstVMTest.java   (2s
'org.jabref.logic.bst.BstVMTest.simple()DECLARATION;
1src\test\java\org\jabref\logic\bst\BstVMTest.java- -(2r
&org.jabref.logic.bst.BstVMTest.label()DECLARATION;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaF F(2r
&org.jabref.logic.bst.BstVMTest.quote()DECLARATION;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaZ Z(2t
(org.jabref.logic.bst.BstVMTest.buildIn()DECLARATION;
1src\test\java\org\jabref\logic\bst\BstVMTest.javab b(2v
*org.jabref.logic.bst.BstVMTest.variables()DECLARATION;
1src\test\java\org\jabref\logic\bst\BstVMTest.javal l(2|
0org.jabref.logic.bst.BstVMTest.hypthenatedName()DECLARATION;
1src\test\java\org\jabref\logic\bst\BstVMTest.java (2Ç
4org.jabref.logic.bst.BstVMTest.abbrevStyleChopWord()DECLARATION=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaç	 ç(2â
;org.jabref.logic.bst.BstVMTest.abbrevStyleSortFormatTitle()DECLARATION=
1src\test\java\org\jabref\logic\bst\BstVMTest.java±	 ±(#†
1org.jabref.logic.bst.BstVMTest.defaultTestEntry()METHOD;
1src\test\java\org\jabref\logic\bst\BstVMTest.java (+"
isFinalfalse"ó
declarationStringÅ<mark class="modifier">public </mark><mark class="modifier">static </mark>BibEntry <mark class="method">defaultTestEntry</mark>()"
isStatictrue"
accesspublic"

isAbstractfalse"
typeBibEntry*defaultTestEntry2§
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java (2§
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java (2§
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java (2§
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java (2§
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java (2§
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java (2§
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java (2Ü
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java ( 2ï
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java (2k
org.jabref.model.entry.BibEntryRETURN_TYPE;
1src\test\java\org\jabref\logic\bst\BstVMTest.java (ó
&org.jabref.logic.bst.BstVMTest.abbrv()METHOD;
1src\test\java\org\jabref\logic\bst\BstVMTest.java   ("
isFinalfalse"Ã
declarationString∂<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">abbrv</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>RecognitionException<mark class="modifier"><mark class="modifier">,</mark></mark> IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*abbrv2Å
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java!" !($2Y
java.util.List.of(E)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java"* "(,2v
1org.jabref.logic.bst.BstVMTest.defaultTestEntry()CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java"- "(=2ù
Xorg.jabref.logic.bst.BstVM.render(java.util.Collection<org.jabref.model.entry.BibEntry>)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java% %(!2Ñ
?java.lang.String.replaceAll(java.lang.String, java.lang.String)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java( ((#2Ñ
?java.lang.String.replaceAll(java.lang.String, java.lang.String)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java) )(!2y
4org.jabref.logic.bst.BstVM.BstVM(java.nio.file.Path)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java! !(2z
5org.jabref.logic.bst.BstVMTest.abbrv()?vm@33.14:33.16CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java% %(2É
>org.jabref.logic.bst.BstVMTest.abbrv()?testEntries@34.23:34.34CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java%" %(-2Ä
;org.jabref.logic.bst.BstVMTest.abbrv()?expected@36.15:36.23CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java( ((2~
9org.jabref.logic.bst.BstVMTest.abbrv()?result@37.15:37.21CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java) )(2Å
5org.jabref.logic.bst.BstVMTest.abbrv()?vm@33.14:33.16DECLARATION;
1src\test\java\org\jabref\logic\bst\BstVMTest.java! !(2ä
>org.jabref.logic.bst.BstVMTest.abbrv()?testEntries@34.23:34.34DECLARATION;
1src\test\java\org\jabref\logic\bst\BstVMTest.java" "("2á
;org.jabref.logic.bst.BstVMTest.abbrv()?expected@36.15:36.23DECLARATION;
1src\test\java\org\jabref\logic\bst\BstVMTest.java$ $(2Ö
9org.jabref.logic.bst.BstVMTest.abbrv()?result@37.15:37.21DECLARATION;
1src\test\java\org\jabref\logic\bst\BstVMTest.java% %(2P
voidRETURN_TYPE;
1src\test\java\org\jabref\logic\bst\BstVMTest.java   (Æ
5org.jabref.logic.bst.BstVMTest.abbrv()?vm@33.14:33.16VARIABLE;
1src\test\java\org\jabref\logic\bst\BstVMTest.java! !("
typeBstVM"
isFinalfalse"®
declarationStringí<mark class="modifier"> </mark>BstVM <mark class="class-field">vm</mark> = new BstVM(Path.of("src/test/resources/org/jabref/logic/bst/abbrv.bst"))*vm2_
org.jabref.logic.bst.BstVMTYPE;
1src\test\java\org\jabref\logic\bst\BstVMTest.java! !(2Å
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java!" !($2y
4org.jabref.logic.bst.BstVM.BstVM(java.nio.file.Path)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java! !(Â
>org.jabref.logic.bst.BstVMTest.abbrv()?testEntries@34.23:34.34VARIABLE;
1src\test\java\org\jabref\logic\bst\BstVMTest.java" "(""
typeList<BibEntry>"
isFinalfalse"ç
declarationStringx<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">testEntries</mark> = List.of(defaultTestEntry())*testEntries2S
java.util.ListTYPE;
1src\test\java\org\jabref\logic\bst\BstVMTest.java" "(2m
org.jabref.model.entry.BibEntryTYPE_ARGUMENT;
1src\test\java\org\jabref\logic\bst\BstVMTest.java" "(2Y
java.util.List.of(E)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java"* "(,2v
1org.jabref.logic.bst.BstVMTest.defaultTestEntry()CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java"- "(=≤
;org.jabref.logic.bst.BstVMTest.abbrv()?expected@36.15:36.23VARIABLE;
1src\test\java\org\jabref\logic\bst\BstVMTest.java$ $("
typeString"
isFinalfalse"®
declarationStringí<mark class="modifier"> </mark>String <mark class="class-field">expected</mark> = "\\begin{thebibliography}{1}\\bibitem{canh05}K.~Crowston, H.~Annabi, J.~Howison, and C.~Masango.\\newblock Effective work practices for floss development: A model and  propositions.\\newblock In {\\em Hawaii International Conference On System Sciences (HICSS)}<mark class="modifier">,</mark> 2005.\\end{thebibliography}"*expected2U
java.lang.StringTYPE;
1src\test\java\org\jabref\logic\bst\BstVMTest.java$ $(¢
9org.jabref.logic.bst.BstVMTest.abbrv()?result@37.15:37.21VARIABLE;
1src\test\java\org\jabref\logic\bst\BstVMTest.java% %("
typeString"
isFinalfalse"{
declarationStringf<mark class="modifier"> </mark>String <mark class="class-field">result</mark> = vm.render(testEntries)*result2U
java.lang.StringTYPE;
1src\test\java\org\jabref\logic\bst\BstVMTest.java% %(2ù
Xorg.jabref.logic.bst.BstVM.render(java.util.Collection<org.jabref.model.entry.BibEntry>)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java% %(!2z
5org.jabref.logic.bst.BstVMTest.abbrv()?vm@33.14:33.16CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java% %(2É
>org.jabref.logic.bst.BstVMTest.abbrv()?testEntries@34.23:34.34CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java%" %(-§
'org.jabref.logic.bst.BstVMTest.simple()METHOD;
1src\test\java\org\jabref\logic\bst\BstVMTest.java- -("
isFinalfalse"Ñ
declarationStringÓ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">simple</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>RecognitionException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*simple2Y
java.util.List.of(E)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java:* :(,2v
1org.jabref.logic.bst.BstVMTest.defaultTestEntry()CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java:- :(=2ù
Xorg.jabref.logic.bst.BstVM.render(java.util.Collection<org.jabref.model.entry.BibEntry>)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java< <(2{
6org.jabref.logic.bst.BstVMTest.simple()?vm@46.14:46.16CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java< <(
2Ñ
?org.jabref.logic.bst.BstVMTest.simple()?testEntries@58.23:58.34CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java< <(2{
6org.jabref.logic.bst.BstVMTest.simple()?vm@46.14:46.16CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java> >(2{
6org.jabref.logic.bst.BstVMTest.simple()?vm@46.14:46.16CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java? ?(2{
6org.jabref.logic.bst.BstVMTest.simple()?vm@46.14:46.16CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java@ @(2{
6org.jabref.logic.bst.BstVMTest.simple()?vm@46.14:46.16CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaA A(2{
6org.jabref.logic.bst.BstVMTest.simple()?vm@46.14:46.16CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaB B(2Ç
6org.jabref.logic.bst.BstVMTest.simple()?vm@46.14:46.16DECLARATION;
1src\test\java\org\jabref\logic\bst\BstVMTest.java. .(2ã
?org.jabref.logic.bst.BstVMTest.simple()?testEntries@58.23:58.34DECLARATION;
1src\test\java\org\jabref\logic\bst\BstVMTest.java: :("2P
voidRETURN_TYPE;
1src\test\java\org\jabref\logic\bst\BstVMTest.java- -(√
6org.jabref.logic.bst.BstVMTest.simple()?vm@46.14:46.16VARIABLE;
1src\test\java\org\jabref\logic\bst\BstVMTest.java. .("
typeBstVM"
isFinalfalse"ª
declarationString•<mark class="modifier"> </mark>BstVM <mark class="class-field">vm</mark> = new BstVM("""
    ENTRY { address author title type } { } { label }
    INTEGERS { output.state before.all mid.sentence after.sentence after.block }
    FUNCTION { init.state.consts }{
       #0 'before.all :=
       #1 'mid.sentence :=
       #2 'after.sentence :=
       #3 'after.block :=
    }
    STRINGS { s t }
    READ
    """)*vm2_
org.jabref.logic.bst.BstVMTYPE;
1src\test\java\org\jabref\logic\bst\BstVMTest.java. .(Ê
?org.jabref.logic.bst.BstVMTest.simple()?testEntries@58.23:58.34VARIABLE;
1src\test\java\org\jabref\logic\bst\BstVMTest.java: :(""
typeList<BibEntry>"
isFinalfalse"ç
declarationStringx<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">testEntries</mark> = List.of(defaultTestEntry())*testEntries2S
java.util.ListTYPE;
1src\test\java\org\jabref\logic\bst\BstVMTest.java: :(2m
org.jabref.model.entry.BibEntryTYPE_ARGUMENT;
1src\test\java\org\jabref\logic\bst\BstVMTest.java: :(2Y
java.util.List.of(E)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java:* :(,2v
1org.jabref.logic.bst.BstVMTest.defaultTestEntry()CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java:- :(=®
&org.jabref.logic.bst.BstVMTest.label()METHOD;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaF F("
isFinalfalse"É
declarationStringÌ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">label</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>RecognitionException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*label2Y
java.util.List.of(E)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaP* P(,2v
1org.jabref.logic.bst.BstVMTest.defaultTestEntry()CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaP- P(=2ù
Xorg.jabref.logic.bst.BstVM.render(java.util.Collection<org.jabref.model.entry.BibEntry>)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaR R(2z
5org.jabref.logic.bst.BstVMTest.label()?vm@71.14:71.16CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaR R(
2É
>org.jabref.logic.bst.BstVMTest.label()?testEntries@80.23:80.34CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaR R(2z
5org.jabref.logic.bst.BstVMTest.label()?vm@71.14:71.16CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaV V(2Å
5org.jabref.logic.bst.BstVMTest.label()?vm@71.14:71.16DECLARATION;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaG G(2ä
>org.jabref.logic.bst.BstVMTest.label()?testEntries@80.23:80.34DECLARATION;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaP P("2P
voidRETURN_TYPE;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaF F(£
5org.jabref.logic.bst.BstVMTest.label()?vm@71.14:71.16VARIABLE;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaG G("
typeBstVM"
isFinalfalse"ú
declarationStringÜ<mark class="modifier"> </mark>BstVM <mark class="class-field">vm</mark> = new BstVM("""
    ENTRY { title } {} { label }
    FUNCTION { test } {
        label #0 =
        title 'label :=
        #5 label #6 pop$ }
    READ
    ITERATE { test }
    """)*vm2_
org.jabref.logic.bst.BstVMTYPE;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaG G(Â
>org.jabref.logic.bst.BstVMTest.label()?testEntries@80.23:80.34VARIABLE;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaP P(""
typeList<BibEntry>"
isFinalfalse"ç
declarationStringx<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">testEntries</mark> = List.of(defaultTestEntry())*testEntries2S
java.util.ListTYPE;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaP P(2m
org.jabref.model.entry.BibEntryTYPE_ARGUMENT;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaP P(2Y
java.util.List.of(E)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaP* P(,2v
1org.jabref.logic.bst.BstVMTest.defaultTestEntry()CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaP- P(=£

&org.jabref.logic.bst.BstVMTest.quote()METHOD;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaZ Z("
isFinalfalse"É
declarationStringÌ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">quote</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>RecognitionException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*quote2ù
Xorg.jabref.logic.bst.BstVM.render(java.util.Collection<org.jabref.model.entry.BibEntry>)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java] ](2f
!java.util.Collections.emptyList()CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java] ]('2w
2org.jabref.logic.bst.BstVM.BstVM(java.lang.String)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java[ [(2z
5org.jabref.logic.bst.BstVMTest.quote()?vm@91.14:91.16CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java] ](
2z
5org.jabref.logic.bst.BstVMTest.quote()?vm@91.14:91.16CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java^ ^(2Å
5org.jabref.logic.bst.BstVMTest.quote()?vm@91.14:91.16DECLARATION;
1src\test\java\org\jabref\logic\bst\BstVMTest.java[ [(2P
voidRETURN_TYPE;
1src\test\java\org\jabref\logic\bst\BstVMTest.javaZ Z(ù
5org.jabref.logic.bst.BstVMTest.quote()?vm@91.14:91.16VARIABLE;
1src\test\java\org\jabref\logic\bst\BstVMTest.java[ [("
typeBstVM"
isFinalfalse"ù
declarationStringá<mark class="modifier"> </mark>BstVM <mark class="class-field">vm</mark> = new BstVM("FUNCTION { a }{ quote$ quote$ * } EXECUTE { a }")*vm2_
org.jabref.logic.bst.BstVMTYPE;
1src\test\java\org\jabref\logic\bst\BstVMTest.java[ [(2w
2org.jabref.logic.bst.BstVM.BstVM(java.lang.String)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java[ [(≠
(org.jabref.logic.bst.BstVMTest.buildIn()METHOD;
1src\test\java\org\jabref\logic\bst\BstVMTest.javab b("
isFinalfalse"Ö
declarationStringÔ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">buildIn</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>RecognitionException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*buildIn2ù
Xorg.jabref.logic.bst.BstVM.render(java.util.Collection<org.jabref.model.entry.BibEntry>)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.javae e(2f
!java.util.Collections.emptyList()CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.javae e('2w
2org.jabref.logic.bst.BstVM.BstVM(java.lang.String)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.javac c(2|
7org.jabref.logic.bst.BstVMTest.buildIn()?vm@99.14:99.16CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.javae e(
2|
7org.jabref.logic.bst.BstVMTest.buildIn()?vm@99.14:99.16CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.javag( g(*2|
7org.jabref.logic.bst.BstVMTest.buildIn()?vm@99.14:99.16CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.javah h(2É
7org.jabref.logic.bst.BstVMTest.buildIn()?vm@99.14:99.16DECLARATION;
1src\test\java\org\jabref\logic\bst\BstVMTest.javac c(2P
voidRETURN_TYPE;
1src\test\java\org\jabref\logic\bst\BstVMTest.javab b(Ü
7org.jabref.logic.bst.BstVMTest.buildIn()?vm@99.14:99.16VARIABLE;
1src\test\java\org\jabref\logic\bst\BstVMTest.javac c("
typeBstVM"
isFinalfalse"Ñ
declarationStringo<mark class="modifier"> </mark>BstVM <mark class="class-field">vm</mark> = new BstVM("EXECUTE { global.max$ }")*vm2_
org.jabref.logic.bst.BstVMTYPE;
1src\test\java\org\jabref\logic\bst\BstVMTest.javac c(2w
2org.jabref.logic.bst.BstVM.BstVM(java.lang.String)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.javac c( 	
*org.jabref.logic.bst.BstVMTest.variables()METHOD;
1src\test\java\org\jabref\logic\bst\BstVMTest.javal l("
isFinalfalse"á
declarationStringÒ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">variables</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>RecognitionException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*	variables2ù
Xorg.jabref.logic.bst.BstVM.render(java.util.Collection<org.jabref.model.entry.BibEntry>)CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.javay y(2f
!java.util.Collections.emptyList()CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.javay y('2Ä
;org.jabref.logic.bst.BstVMTest.variables()?vm@109.14:109.16CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.javay y(
2Ä
;org.jabref.logic.bst.BstVMTest.variables()?vm@109.14:109.16CALL;
1src\test\java\org\jabref\logic\bst\BstVMTest.java{! {(#2á
;org.jabref.logic.bst.BstVMTest.variables()?vm@109.14:109.16DECLARATION;
1src\test\java\org\jabref\logic\bst\BstVMTest.javam m(2P
voidRETURN_TYPE;
1src\test\java\org\jabref\logic\bst\BstVMTest.javal l(≈
;org.jabref.logic.bst.BstVMTest.variables()?vm@109.14:109.16VARIABLE;
1src\test\java\org\jabref\logic\bst\BstVMTest.javam m("
typeBstVM"
isFinalfalse"∏
declarationString¢<mark class="modifier"> </mark>BstVM <mark class="class-field">vm</mark> = new BstVM("""
    STRINGS { t }
    FUNCTION { not } {
        { #0 } { #1 } if$
    }
    FUNCTION { n.dashify } {
        "HELLO-WORLD" 't :=
        t empty$ not
    }
    EXECUTE { n.dashify }
    """)*vm2_
org.jabref.logic.bst.BstVMTYPE;
1src\test\java\org\jabref\logic\bst\BstVMTest.javam m(»
0org.jabref.logic.bst.BstVMTest.hypthenatedName()METHOD;
1src\test\java\org\jabref\logic\bst\BstVMTest.java ("
isFinalfalse"÷
declarationString¿<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">hypthenatedName</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>RecognitionException<mark class="modifier"><mark class="modifier">,</mark></mark> IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*hypthenatedName2É
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaÄ" Ä($2[
java.util.List.of(E)CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaÅ* Å(,2¶
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaÑ Ñ("2à
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaÉ É((2ü
Xorg.jabref.logic.bst.BstVM.render(java.util.Collection<org.jabref.model.entry.BibEntry>)CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaá á(!2x
1java.lang.String.contains(java.lang.CharSequence)CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaâ â("2{
4org.jabref.logic.bst.BstVM.BstVM(java.nio.file.Path)CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaÄ Ä(2ó
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaÇ Ç(2à
Aorg.jabref.logic.bst.BstVMTest.hypthenatedName()?vm@128.14:128.16CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaá á(2ë
Jorg.jabref.logic.bst.BstVMTest.hypthenatedName()?testEntries@129.23:129.34CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaá" á(-2å
Eorg.jabref.logic.bst.BstVMTest.hypthenatedName()?result@135.15:135.21CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaâ â(2è
Aorg.jabref.logic.bst.BstVMTest.hypthenatedName()?vm@128.14:128.16DECLARATION=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaÄ Ä(2ò
Jorg.jabref.logic.bst.BstVMTest.hypthenatedName()?testEntries@129.23:129.34DECLARATION=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaÅ Å("2ì
Eorg.jabref.logic.bst.BstVMTest.hypthenatedName()?result@135.15:135.21DECLARATION=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaá á(2P
voidRETURN_TYPE;
1src\test\java\org\jabref\logic\bst\BstVMTest.java (¬
Aorg.jabref.logic.bst.BstVMTest.hypthenatedName()?vm@128.14:128.16VARIABLE=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaÄ Ä("
typeBstVM"
isFinalfalse"®
declarationStringí<mark class="modifier"> </mark>BstVM <mark class="class-field">vm</mark> = new BstVM(Path.of("src/test/resources/org/jabref/logic/bst/abbrv.bst"))*vm2a
org.jabref.logic.bst.BstVMTYPE=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaÄ Ä(2É
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaÄ" Ä($2{
4org.jabref.logic.bst.BstVM.BstVM(java.nio.file.Path)CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaÄ Ä(≥	
Jorg.jabref.logic.bst.BstVMTest.hypthenatedName()?testEntries@129.23:129.34VARIABLE=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaÅ Å(""
typeList<BibEntry>"
isFinalfalse"Ò
declarationString€<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">testEntries</mark> = List.of(new BibEntry(StandardEntryType.Article).withCitationKey("canh05").withField(StandardField.AUTHOR, "Jean-Paul Sartre"))*testEntries2U
java.util.ListTYPE=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaÅ Å(2o
org.jabref.model.entry.BibEntryTYPE_ARGUMENT=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaÅ Å(2[
java.util.List.of(E)CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaÅ* Å(,2¶
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaÑ Ñ("2à
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaÉ É((2ó
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaÇ Ç(—
Eorg.jabref.logic.bst.BstVMTest.hypthenatedName()?result@135.15:135.21VARIABLE=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaá á("
typeString"
isFinalfalse"{
declarationStringf<mark class="modifier"> </mark>String <mark class="class-field">result</mark> = vm.render(testEntries)*result2W
java.lang.StringTYPE=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaá á(2ü
Xorg.jabref.logic.bst.BstVM.render(java.util.Collection<org.jabref.model.entry.BibEntry>)CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaá á(!2à
Aorg.jabref.logic.bst.BstVMTest.hypthenatedName()?vm@128.14:128.16CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaá á(2ë
Jorg.jabref.logic.bst.BstVMTest.hypthenatedName()?testEntries@129.23:129.34CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaá" á(-›
4org.jabref.logic.bst.BstVMTest.abbrevStyleChopWord()METHOD=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaç	 ç("
isFinalfalse"≥
declarationStringù<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">abbrevStyleChopWord</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*abbrevStyleChopWord2ü
Xorg.jabref.logic.bst.BstVM.render(java.util.Collection<org.jabref.model.entry.BibEntry>)CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.java© ©(2h
!java.util.Collections.emptyList()CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.java© ©('2å
Eorg.jabref.logic.bst.BstVMTest.abbrevStyleChopWord()?vm@142.14:142.16CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.java© ©(
2å
Eorg.jabref.logic.bst.BstVMTest.abbrevStyleChopWord()?vm@142.14:142.16CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.java´+ ´(-2å
Eorg.jabref.logic.bst.BstVMTest.abbrevStyleChopWord()?vm@142.14:142.16CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.java¨) ¨(+2å
Eorg.jabref.logic.bst.BstVMTest.abbrevStyleChopWord()?vm@142.14:142.16CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.java≠ ≠(2ì
Eorg.jabref.logic.bst.BstVMTest.abbrevStyleChopWord()?vm@142.14:142.16DECLARATION=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaé é(2R
voidRETURN_TYPE=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaç ç(ÿ
Eorg.jabref.logic.bst.BstVMTest.abbrevStyleChopWord()?vm@142.14:142.16VARIABLE=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaé é("
typeBstVM"
isFinalfalse"Ω
declarationStringß<mark class="modifier"> </mark>BstVM <mark class="class-field">vm</mark> = new BstVM("""
    STRINGS { s }
    INTEGERS { len }
    
    FUNCTION { chop.word }
    {
        's :=
            'len :=
            s #1 len substring$ =
                { s len #1 + global.max$ substring$ }
            's
            if$
    }
    
    FUNCTION { test } {
        "A " #2
        "A Colorful Morning"
        chop.word
    
        "An " #3
        "A Colorful Morning"
        chop.word
    }
    
    EXECUTE { test }
    """)*vm2a
org.jabref.logic.bst.BstVMTYPE=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaé é(È	
;org.jabref.logic.bst.BstVMTest.abbrevStyleSortFormatTitle()METHOD=
1src\test\java\org\jabref\logic\bst\BstVMTest.java±	 ±(#"
isFinalfalse"∫
declarationString§<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">abbrevStyleSortFormatTitle</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*abbrevStyleSortFormatTitle2ü
Xorg.jabref.logic.bst.BstVM.render(java.util.Collection<org.jabref.model.entry.BibEntry>)CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.java◊ ◊(2h
!java.util.Collections.emptyList()CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.java◊ ◊('2ì
Lorg.jabref.logic.bst.BstVMTest.abbrevStyleSortFormatTitle()?vm@178.14:178.16CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.java◊ ◊(
2ì
Lorg.jabref.logic.bst.BstVMTest.abbrevStyleSortFormatTitle()?vm@178.14:178.16CALL=
1src\test\java\org\jabref\logic\bst\BstVMTest.javaŸ) Ÿ(+2ö
Lorg.jabref.logic.bst.BstVMTest.abbrevStyleSortFormatTitle()?vm@178.14:178.16DECLARATION=
1src\test\java\org\jabref\logic\bst\BstVMTest.java≤ ≤(2R
voidRETURN_TYPE=
1src\test\java\org\jabref\logic\bst\BstVMTest.java± ±(±
Lorg.jabref.logic.bst.BstVMTest.abbrevStyleSortFormatTitle()?vm@178.14:178.16VARIABLE=
1src\test\java\org\jabref\logic\bst\BstVMTest.java≤ ≤("
typeBstVM"
isFinalfalse"è
declarationString˘<mark class="modifier"> </mark>BstVM <mark class="class-field">vm</mark> = new BstVM("""
    STRINGS { s t }
    INTEGERS { len }
    FUNCTION { sortify } {
        purify$
        "l" change.case$
    }
    
    FUNCTION { chop.word }
    {
        's :=
            'len :=
            s #1 len substring$ =
                { s len #1 + global.max$ substring$ }
            's
            if$
    }
    
    FUNCTION { sort.format.title }
    { 't :=
       "A " #2
        "An " #3
          "The " #4 t chop.word
        chop.word
       chop.word
      sortify
      #1 global.max$ substring$
    }
    
    FUNCTION { test } {
        "A Colorful Morning"
        sort.format.title
    }
    
    EXECUTE {test}
    """)*vm2a
org.jabref.logic.bst.BstVMTYPE=
1src\test\java\org\jabref\logic\bst\BstVMTest.java≤ ≤(