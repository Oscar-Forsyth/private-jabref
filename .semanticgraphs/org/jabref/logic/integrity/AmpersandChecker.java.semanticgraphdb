
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.javaˇ
+org.jabref.logic.integrity.AmpersandCheckerCLASSH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java ("%
packageorg.jabref.logic.integrity"
isFinalfalse"
inner classfalse"

isAbstractfalse"®
declarationStringí<mark class="modifier">public </mark><mark class="modifier">class </mark>AmpersandChecker<mark class="modifier"><br>implements </mark>EntryChecker"
accesspublic*AmpersandChecker2´
Rorg.jabref.logic.integrity.AmpersandChecker.check(org.jabref.model.entry.BibEntry)DECLARATIONH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java" ('2
ñorg.jabref.logic.integrity.AmpersandChecker.getUnescapedAmpersandsWithCount(java.util.Map.Entry<org.jabref.model.entry.field.Field, java.lang.String>)DECLARATIONH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java%- %(L2≠
Torg.jabref.logic.integrity.AmpersandChecker?BACKSLASH_PRECEDED_AMPERSAND@25.33:25.61DECLARATIONH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java! (=2{
'org.jabref.logic.integrity.EntryCheckerEXTENDH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java) (5Â
Rorg.jabref.logic.integrity.AmpersandChecker.check(org.jabref.model.entry.BibEntry)METHODH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java" ('"
isFinalfalse"∑
declarationString°<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>List&lt;IntegrityMessage&gt; <mark class="method">check</mark>(BibEntry entry)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeList<IntegrityMessage>*check2r
 java.util.stream.Stream.toList()CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java" "(2¢
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java! !(2…
wjava.util.stream.Stream.flatMap(java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>)CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java   (2ô
Gjava.util.stream.Stream.filter(java.util.function.Predicate<? super T>)CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java (2o
java.util.Collection.stream()CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java. (42j
java.util.Map.entrySet()CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java# (+2
-org.jabref.model.entry.BibEntry.getFieldMap()CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java ( 2z
(java.util.Set.contains(java.lang.Object)CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.javaE (M2Ñ
2org.jabref.model.entry.field.Field.getProperties()CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java5 (B2n
java.util.Map.Entry.getKey()CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java, (22™
Xorg.jabref.logic.integrity.AmpersandChecker.check(org.jabref.model.entry.BibEntry)!entryCALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java (2∂
dorg.jabref.logic.integrity.AmpersandChecker.check(org.jabref.model.entry.BibEntry)?field@30.28:30.33CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java& (+2µ
corg.jabref.logic.integrity.AmpersandChecker.check(org.jabref.model.entry.BibEntry)?pair@33.25:33.29CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java!b !(f2™
Xorg.jabref.logic.integrity.AmpersandChecker.check(org.jabref.model.entry.BibEntry)!entryCALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java!t !(y2µ
corg.jabref.logic.integrity.AmpersandChecker.check(org.jabref.model.entry.BibEntry)?pair@33.25:33.29CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java!{ !(2È
ñorg.jabref.logic.integrity.AmpersandChecker.getUnescapedAmpersandsWithCount(java.util.Map.Entry<org.jabref.model.entry.field.Field, java.lang.String>)CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java   (N2§
Norg.jabref.logic.integrity.EntryChecker.check(org.jabref.model.entry.BibEntry)OVERRIDEH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java" ('2Ø
Xorg.jabref.logic.integrity.AmpersandChecker.check(org.jabref.model.entry.BibEntry)!entry	PARAMETERH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java1 (62Ω
dorg.jabref.logic.integrity.AmpersandChecker.check(org.jabref.model.entry.BibEntry)?field@30.28:30.33DECLARATIONH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java (!2º
corg.jabref.logic.integrity.AmpersandChecker.check(org.jabref.model.entry.BibEntry)?pair@33.25:33.29DECLARATIONH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java! !(2g
java.util.ListRETURN_TYPEH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java (2ç
+org.jabref.logic.integrity.IntegrityMessageRETURN_TYPE_ARGUMENTH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java ( Ú
Xorg.jabref.logic.integrity.AmpersandChecker.check(org.jabref.model.entry.BibEntry)!entry	PARAMETERH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java1 (6"
typeBibEntry"
isFinalfalse"#
declarationStringBibEntry entry*entry2q
org.jabref.model.entry.BibEntryTYPEH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java( (0Ä
dorg.jabref.logic.integrity.AmpersandChecker.check(org.jabref.model.entry.BibEntry)?field@30.28:30.33VARIABLEH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java (!"
type"
isFinalfalse"
declarationString field*field2TYPE˝
corg.jabref.logic.integrity.AmpersandChecker.check(org.jabref.model.entry.BibEntry)?pair@33.25:33.29VARIABLEH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java! !("
type"
isFinalfalse"
declarationString pair*pair2TYPE€$
ñorg.jabref.logic.integrity.AmpersandChecker.getUnescapedAmpersandsWithCount(java.util.Map.Entry<org.jabref.model.entry.field.Field, java.lang.String>)METHODH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java%- %(L"
isFinalfalse"ﬂ
declarationString…<mark class="modifier">private </mark><mark class="modifier">static </mark>Stream&lt;Pair&lt;Field<mark class="modifier"><mark class="modifier">,</mark></mark>Long&gt;&gt; <mark class="method">getUnescapedAmpersandsWithCount</mark>(Map.Entry&lt;Field<mark class="modifier"><mark class="modifier">,</mark></mark> String&gt; entry)"
isStatictrue"
accessprivate"

isAbstractfalse"!
typeStream<Pair<Field, Long>>*getUnescapedAmpersandsWithCount2q
java.util.stream.Stream.count()CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java+@ +(E2ô
Gjava.util.stream.Stream.filter(java.util.function.Predicate<? super T>)CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java*@ *(F2¢
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java)@ )(C2s
!java.util.regex.Matcher.results()CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java(@ ((G2â
7java.util.regex.Pattern.matcher(java.lang.CharSequence)CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java'@ '(G2p
java.util.Map.Entry.getValue()CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java'N '(V2q
java.util.stream.Stream.empty()CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java- -(2o
java.util.stream.Stream.of(T)CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java/ /(2n
java.util.Map.Entry.getKey()CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java/* /(02¶
Torg.jabref.logic.integrity.AmpersandChecker?BACKSLASH_PRECEDED_AMPERSAND@25.33:25.61CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java'# '(?2Ô
úorg.jabref.logic.integrity.AmpersandChecker.getUnescapedAmpersandsWithCount(java.util.Map.Entry<org.jabref.model.entry.field.Field, java.lang.String>)!entryCALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java'H '(M2˜
§org.jabref.logic.integrity.AmpersandChecker.getUnescapedAmpersandsWithCount(java.util.Map.Entry<org.jabref.model.entry.field.Field, java.lang.String>)?m@42.71:42.72CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java*i *(j2â
∂org.jabref.logic.integrity.AmpersandChecker.getUnescapedAmpersandsWithCount(java.util.Map.Entry<org.jabref.model.entry.field.Field, java.lang.String>)?unescapedAmpersands@39.13:39.32CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java, ,(2Ô
úorg.jabref.logic.integrity.AmpersandChecker.getUnescapedAmpersandsWithCount(java.util.Map.Entry<org.jabref.model.entry.field.Field, java.lang.String>)!entryCALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java/$ /()2â
∂org.jabref.logic.integrity.AmpersandChecker.getUnescapedAmpersandsWithCount(java.util.Map.Entry<org.jabref.model.entry.field.Field, java.lang.String>)?unescapedAmpersands@39.13:39.32CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java/4 /(G2x
&java.util.regex.MatchResult.group(int)CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java)D )(V2Ù
úorg.jabref.logic.integrity.AmpersandChecker.getUnescapedAmpersandsWithCount(java.util.Map.Entry<org.jabref.model.entry.field.Field, java.lang.String>)!entry	PARAMETERH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java%f %(k2ê
∂org.jabref.logic.integrity.AmpersandChecker.getUnescapedAmpersandsWithCount(java.util.Map.Entry<org.jabref.model.entry.field.Field, java.lang.String>)?unescapedAmpersands@39.13:39.32DECLARATIONH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java' '( 2˛
§org.jabref.logic.integrity.AmpersandChecker.getUnescapedAmpersandsWithCount(java.util.Map.Entry<org.jabref.model.entry.field.Field, java.lang.String>)?m@42.71:42.72DECLARATIONH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java*G *(H2p
java.util.stream.StreamRETURN_TYPEH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java% %(2r
javafx.util.PairRETURN_TYPE_ARGUMENTH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java% %(2Ñ
"org.jabref.model.entry.field.FieldRETURN_TYPE_ARGUMENTH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java% %($2p
java.lang.LongRETURN_TYPE_ARGUMENTH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java%& %(*¯
∂org.jabref.logic.integrity.AmpersandChecker.getUnescapedAmpersandsWithCount(java.util.Map.Entry<org.jabref.model.entry.field.Field, java.lang.String>)?unescapedAmpersands@39.13:39.32VARIABLEH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java' '( "
typelong"
isFinalfalse"•
declarationStringè<mark class="modifier"> </mark><mark class="modifier">long</mark> <mark class="class-field">unescapedAmpersands</mark> = BACKSLASH_PRECEDED_AMPERSAND.matcher(entry.getValue()).results().map(MatchResult::group).filter(m -> CharMatcher.is('\\').countIn(m) % 2 == 0).count()*unescapedAmpersands2V
longTYPEH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java' '(2q
java.util.stream.Stream.count()CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java+@ +(E2ô
Gjava.util.stream.Stream.filter(java.util.function.Predicate<? super T>)CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java*@ *(F2¢
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java)@ )(C2s
!java.util.regex.Matcher.results()CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java(@ ((G2â
7java.util.regex.Pattern.matcher(java.lang.CharSequence)CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java'@ '(G2p
java.util.Map.Entry.getValue()CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java'N '(V2¶
Torg.jabref.logic.integrity.AmpersandChecker?BACKSLASH_PRECEDED_AMPERSAND@25.33:25.61CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java'# '(?2Ô
úorg.jabref.logic.integrity.AmpersandChecker.getUnescapedAmpersandsWithCount(java.util.Map.Entry<org.jabref.model.entry.field.Field, java.lang.String>)!entryCALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java'H '(M2˜
§org.jabref.logic.integrity.AmpersandChecker.getUnescapedAmpersandsWithCount(java.util.Map.Entry<org.jabref.model.entry.field.Field, java.lang.String>)?m@42.71:42.72CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java*i *(j2x
&java.util.regex.MatchResult.group(int)CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java)D )(V∑
úorg.jabref.logic.integrity.AmpersandChecker.getUnescapedAmpersandsWithCount(java.util.Map.Entry<org.jabref.model.entry.field.Field, java.lang.String>)!entry	PARAMETERH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java%f %(k" 
typeMap.Entry<Field, String>"
isFinalfalse"3
declarationStringMap.Entry<Field, String> entry*entry2e
java.util.Map.EntryTYPEH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java%Q %(V2}
"org.jabref.model.entry.field.FieldTYPE_ARGUMENTH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java%M %(P2k
java.lang.StringTYPE_ARGUMENTH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java%W %(\π
§org.jabref.logic.integrity.AmpersandChecker.getUnescapedAmpersandsWithCount(java.util.Map.Entry<org.jabref.model.entry.field.Field, java.lang.String>)?m@42.71:42.72VARIABLEH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java*G *(H"
type"
isFinalfalse"
declarationString m*m2TYPEÁ
Torg.jabref.logic.integrity.AmpersandChecker?BACKSLASH_PRECEDED_AMPERSAND@25.33:25.61VALUEH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java! (="
isFinaltrue"
typePattern"Á
declarationString—<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>Pattern <mark class="class-field">BACKSLASH_PRECEDED_AMPERSAND</mark> = Pattern.compile("\\\\*&");"
isStatictrue"
accessprivate*BACKSLASH_PRECEDED_AMPERSAND2i
java.util.regex.PatternTYPEH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.java ( 2É
1java.util.regex.Pattern.compile(java.lang.String)CALLH
>src\main\java\org\jabref\logic\integrity\AmpersandChecker.javaH (O