
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java˚
)org.jabref.logic.integrity.UrlCheckerTestCLASSF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java	 	("%
packageorg.jabref.logic.integrity"
isFinalfalse"
inner classfalse"

isAbstractfalse"l
declarationStringW<mark class="modifier">public </mark><mark class="modifier">class </mark>UrlCheckerTest"
accesspublic*UrlCheckerTest2ù
Forg.jabref.logic.integrity.UrlCheckerTest.urlFieldAcceptsHttpAddress()DECLARATIONF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java	 (#2ü
Horg.jabref.logic.integrity.UrlCheckerTest.urlFieldAcceptsFullLocalPath()DECLARATIONF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java	 (%2•
Norg.jabref.logic.integrity.UrlCheckerTest.urlFieldAcceptsFullPathHttpAddress()DECLARATIONF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java	 (+2±
Zorg.jabref.logic.integrity.UrlCheckerTest.urlFieldDoesNotAcceptHttpAddressWithoutTheHttp()DECLARATIONF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java	 (72™
Sorg.jabref.logic.integrity.UrlCheckerTest.urlFieldDoesNotAcceptPartialHttpAddress()DECLARATIONF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java"	 "(02®
Qorg.jabref.logic.integrity.UrlCheckerTest.urlFieldDoesNotAcceptPartialLocalPath()DECLARATIONF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java'	 '(.2î
=org.jabref.logic.integrity.UrlCheckerTest?checker@11.29:11.36DECLARATIONF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java ($¬
Forg.jabref.logic.integrity.UrlCheckerTest.urlFieldAcceptsHttpAddress()METHODF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java	 (#"
isFinalfalse"∫
declarationString§<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">urlFieldAcceptsHttpAddress</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*urlFieldAcceptsHttpAddress2j
java.util.Optional.empty()CALLF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java (#2í
Borg.jabref.logic.integrity.UrlChecker.checkValue(java.lang.String)CALLF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java/ (92ç
=org.jabref.logic.integrity.UrlCheckerTest?checker@11.29:11.36CALLF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java' (.2[
voidRETURN_TYPEF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java (»
Horg.jabref.logic.integrity.UrlCheckerTest.urlFieldAcceptsFullLocalPath()METHODF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java	 (%"
isFinalfalse"º
declarationString¶<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">urlFieldAcceptsFullLocalPath</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*urlFieldAcceptsFullLocalPath2j
java.util.Optional.empty()CALLF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java (#2í
Borg.jabref.logic.integrity.UrlChecker.checkValue(java.lang.String)CALLF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java/ (92ç
=org.jabref.logic.integrity.UrlCheckerTest?checker@11.29:11.36CALLF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java' (.2[
voidRETURN_TYPEF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java (⁄
Norg.jabref.logic.integrity.UrlCheckerTest.urlFieldAcceptsFullPathHttpAddress()METHODF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java	 (+"
isFinalfalse"¬
declarationString¨<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">urlFieldAcceptsFullPathHttpAddress</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*"urlFieldAcceptsFullPathHttpAddress2j
java.util.Optional.empty()CALLF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java (#2í
Borg.jabref.logic.integrity.UrlChecker.checkValue(java.lang.String)CALLF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java/ (92ç
=org.jabref.logic.integrity.UrlCheckerTest?checker@11.29:11.36CALLF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java' (.2[
voidRETURN_TYPEF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java (˛
Zorg.jabref.logic.integrity.UrlCheckerTest.urlFieldDoesNotAcceptHttpAddressWithoutTheHttp()METHODF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java	 (7"
isFinalfalse"Œ
declarationString∏<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">urlFieldDoesNotAcceptHttpAddressWithoutTheHttp</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*.urlFieldDoesNotAcceptHttpAddressWithoutTheHttp2j
java.util.Optional.empty()CALLF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java! (&2í
Borg.jabref.logic.integrity.UrlChecker.checkValue(java.lang.String)CALLF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java2 (<2ç
=org.jabref.logic.integrity.UrlCheckerTest?checker@11.29:11.36CALLF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java* (12[
voidRETURN_TYPEF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java (È
Sorg.jabref.logic.integrity.UrlCheckerTest.urlFieldDoesNotAcceptPartialHttpAddress()METHODF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java"	 "(0"
isFinalfalse"«
declarationString±<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">urlFieldDoesNotAcceptPartialHttpAddress</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*'urlFieldDoesNotAcceptPartialHttpAddress2j
java.util.Optional.empty()CALLF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java#! #(&2í
Borg.jabref.logic.integrity.UrlChecker.checkValue(java.lang.String)CALLF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java#2 #(<2ç
=org.jabref.logic.integrity.UrlCheckerTest?checker@11.29:11.36CALLF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java#* #(12[
voidRETURN_TYPEF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java" "(„
Qorg.jabref.logic.integrity.UrlCheckerTest.urlFieldDoesNotAcceptPartialLocalPath()METHODF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java'	 '(."
isFinalfalse"≈
declarationStringØ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">urlFieldDoesNotAcceptPartialLocalPath</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*%urlFieldDoesNotAcceptPartialLocalPath2j
java.util.Optional.empty()CALLF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java(! ((&2í
Borg.jabref.logic.integrity.UrlChecker.checkValue(java.lang.String)CALLF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java(2 ((<2ç
=org.jabref.logic.integrity.UrlCheckerTest?checker@11.29:11.36CALLF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java(* ((12[
voidRETURN_TYPEF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java' '(à
=org.jabref.logic.integrity.UrlCheckerTest?checker@11.29:11.36VALUEF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java ($"
isFinaltrue"
type
UrlChecker"ß
declarationStringë<mark class="modifier">private </mark><mark class="modifier">final </mark>UrlChecker <mark class="class-field">checker</mark> = new UrlChecker();"
isStaticfalse"
accessprivate*checker2u
%org.jabref.logic.integrity.UrlCheckerTYPEF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java (2Ç
2org.jabref.logic.integrity.UrlChecker.UrlChecker()CALLF
<src\test\java\org\jabref\logic\integrity\UrlCheckerTest.java+ (5