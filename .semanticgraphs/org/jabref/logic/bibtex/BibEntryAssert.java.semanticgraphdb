
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java∞
&org.jabref.logic.bibtex.BibEntryAssertCLASSC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java (""
packageorg.jabref.logic.bibtex"
isFinalfalse"
inner classfalse"

isAbstractfalse"l
declarationStringW<mark class="modifier">public </mark><mark class="modifier">class </mark>BibEntryAssert"
accesspublic*BibEntryAssert2Œ
zorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, org.jabref.model.entry.BibEntry)DECLARATIONC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java# #(#2ﬂ
äorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, java.util.List<org.jabref.model.entry.BibEntry>)DECLARATIONC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java5 5(#2¶
Rorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)DECLARATIONC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java?" ?(82Õ
yorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.util.List<org.jabref.model.entry.BibEntry>)DECLARATIONC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaQ Q(#2Õ
yorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.io.InputStream)DECLARATIONC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaZ Z(#2Ω
iorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, org.jabref.model.entry.BibEntry)DECLARATIONC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javai i(#2’
Äorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.nio.file.Path, org.jabref.logic.importer.Importer)DECLARATIONC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaw w(#2Œ
zorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.net.URL, org.jabref.logic.importer.Importer)DECLARATIONC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java| |(#2Û
úorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.nio.file.Path, org.jabref.logic.importer.Importer)DECLARATIONE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaä ä(#2Ì
ñorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.net.URL, org.jabref.logic.importer.Importer)DECLARATIONE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaí í(#¿
zorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, org.jabref.model.entry.BibEntry)METHODC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java# #(#"
isFinalfalse"≠
declarationStringó<mark class="modifier">public </mark><mark class="modifier">static </mark><mark class="modifier">void</mark> <mark class="method">assertEquals</mark>(Class&lt;?&gt; clazz<mark class="modifier"><mark class="modifier">,</mark></mark> String resourceName<mark class="modifier"><mark class="modifier">,</mark></mark> BibEntry entry)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStatictrue"
accesspublic"

isAbstractfalse"
typevoid*assertEquals2Ç
5java.lang.Class.getResourceAsStream(java.lang.String)CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java(, ((?2∂
iorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, org.jabref.model.entry.BibEntry)CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java) )('2Œ
Äorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, org.jabref.model.entry.BibEntry)!clazzCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java% %(2’
áorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, org.jabref.model.entry.BibEntry)!resourceNameCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java& &("2Œ
Äorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, org.jabref.model.entry.BibEntry)!entryCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java' '(2Œ
Äorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, org.jabref.model.entry.BibEntry)!clazzCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java(& ((+2’
áorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, org.jabref.model.entry.BibEntry)!resourceNameCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java(@ ((L2ﬂ
ëorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, org.jabref.model.entry.BibEntry)?shouldBeIs@40.25:40.35CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java)( )(22Œ
Äorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, org.jabref.model.entry.BibEntry)!entryCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java)4 )(92”
Äorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, org.jabref.model.entry.BibEntry)!clazz	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java#- #(22⁄
áorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, org.jabref.model.entry.BibEntry)!resourceName	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java#; #(G2”
Äorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, org.jabref.model.entry.BibEntry)!entry	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java#R #(W2Ê
ëorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, org.jabref.model.entry.BibEntry)?shouldBeIs@40.25:40.35DECLARATIONC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java( ((#2X
voidRETURN_TYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java# #(ø
ëorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, org.jabref.model.entry.BibEntry)?shouldBeIs@40.25:40.35VARIABLEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java( ((#"
typeInputStream"
isFinalfalse"ñ
declarationStringÄ<mark class="modifier"> </mark>InputStream <mark class="class-field">shouldBeIs</mark> = clazz.getResourceAsStream(resourceName)*
shouldBeIs2`
java.io.InputStreamTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java( ((2Ç
5java.lang.Class.getResourceAsStream(java.lang.String)CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java(, ((?2Œ
Äorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, org.jabref.model.entry.BibEntry)!clazzCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java(& ((+2’
áorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, org.jabref.model.entry.BibEntry)!resourceNameCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java(@ ((LÅ
Äorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, org.jabref.model.entry.BibEntry)!clazz	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java#- #(2"
typeClass<?>"
isFinalfalse"#
declarationStringClass<?> clazz*clazz2\
java.lang.ClassTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java#$ #()ì
áorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, org.jabref.model.entry.BibEntry)!resourceName	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java#; #(G"
typeString"
isFinalfalse"(
declarationStringString resourceName*resourceName2]
java.lang.StringTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java#4 #(:ë
Äorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, org.jabref.model.entry.BibEntry)!entry	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java#R #(W"
typeBibEntry"
isFinalfalse"#
declarationStringBibEntry entry*entry2l
org.jabref.model.entry.BibEntryTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java#I #(Qµ
äorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, java.util.List<org.jabref.model.entry.BibEntry>)METHODC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java5 5(#"
isFinalfalse"ø
declarationString©<mark class="modifier">public </mark><mark class="modifier">static </mark><mark class="modifier">void</mark> <mark class="method">assertEquals</mark>(Class&lt;?&gt; clazz<mark class="modifier"><mark class="modifier">,</mark></mark> String resourceName<mark class="modifier"><mark class="modifier">,</mark></mark> List&lt;BibEntry&gt; asIsEntries)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStatictrue"
accesspublic"

isAbstractfalse"
typevoid*assertEquals2Ç
5java.lang.Class.getResourceAsStream(java.lang.String)CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java:, :(?2∆
yorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.util.List<org.jabref.model.entry.BibEntry>)CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java; ;('2ﬁ
êorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, java.util.List<org.jabref.model.entry.BibEntry>)!clazzCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java7 7(2Â
óorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, java.util.List<org.jabref.model.entry.BibEntry>)!resourceNameCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java8 8("2‰
ñorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, java.util.List<org.jabref.model.entry.BibEntry>)!asIsEntriesCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java9 9(!2ﬁ
êorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, java.util.List<org.jabref.model.entry.BibEntry>)!clazzCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java:& :(+2Â
óorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, java.util.List<org.jabref.model.entry.BibEntry>)!resourceNameCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java:@ :(L2Ô
°org.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, java.util.List<org.jabref.model.entry.BibEntry>)?shouldBeIs@58.25:58.35CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java;( ;(22‰
ñorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, java.util.List<org.jabref.model.entry.BibEntry>)!asIsEntriesCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java;4 ;(?2„
êorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, java.util.List<org.jabref.model.entry.BibEntry>)!clazz	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java5- 5(22Í
óorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, java.util.List<org.jabref.model.entry.BibEntry>)!resourceName	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java5; 5(G2È
ñorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, java.util.List<org.jabref.model.entry.BibEntry>)!asIsEntries	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java5X 5(c2ˆ
°org.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, java.util.List<org.jabref.model.entry.BibEntry>)?shouldBeIs@58.25:58.35DECLARATIONC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java: :(#2X
voidRETURN_TYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java5 5(Ô
°org.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, java.util.List<org.jabref.model.entry.BibEntry>)?shouldBeIs@58.25:58.35VARIABLEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java: :(#"
typeInputStream"
isFinalfalse"ñ
declarationStringÄ<mark class="modifier"> </mark>InputStream <mark class="class-field">shouldBeIs</mark> = clazz.getResourceAsStream(resourceName)*
shouldBeIs2`
java.io.InputStreamTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java: :(2Ç
5java.lang.Class.getResourceAsStream(java.lang.String)CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java:, :(?2ﬁ
êorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, java.util.List<org.jabref.model.entry.BibEntry>)!clazzCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java:& :(+2Â
óorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, java.util.List<org.jabref.model.entry.BibEntry>)!resourceNameCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java:@ :(Lë
êorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, java.util.List<org.jabref.model.entry.BibEntry>)!clazz	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java5- 5(2"
typeClass<?>"
isFinalfalse"#
declarationStringClass<?> clazz*clazz2\
java.lang.ClassTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java5$ 5()£
óorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, java.util.List<org.jabref.model.entry.BibEntry>)!resourceName	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java5; 5(G"
typeString"
isFinalfalse"(
declarationStringString resourceName*resourceName2]
java.lang.StringTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java54 5(:•
ñorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.lang.Class<?>, java.lang.String, java.util.List<org.jabref.model.entry.BibEntry>)!asIsEntries	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java5X 5(c"
typeList<BibEntry>"
isFinalfalse"/
declarationStringList<BibEntry> asIsEntries*asIsEntries2[
java.util.ListTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java5I 5(M2u
org.jabref.model.entry.BibEntryTYPE_ARGUMENTC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java5N 5(VŒ
Rorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)METHODC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java?" ?(8"
isFinalfalse"á
declarationStringÒ<mark class="modifier">private </mark><mark class="modifier">static </mark>List&lt;BibEntry&gt; <mark class="method">getListFromInputStream</mark>(InputStream is)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStatictrue"
accessprivate"

isAbstractfalse"
typeList<BibEntry>*getListFromInputStream2î
Gorg.jabref.logic.importer.fileformat.BibtexParser.parse(java.io.Reader)CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaC C(!2Å
4org.jabref.logic.importer.ParserResult.getDatabase()CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaF F((2
2org.jabref.model.database.BibDatabase.getEntries()CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaG+ G(52Å
4org.jabref.logic.importer.ParserResult.getDatabase()CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaG G((2
2org.jabref.model.database.BibDatabase.getEntries()CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaH$ H(.2Å
4org.jabref.logic.importer.ParserResult.getDatabase()CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaH H(!2ß
Zjava.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.nio.charset.Charset)CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaA! A(22¢
Uorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)!isCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaA3 A(52≤
eorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)?result@64.21:64.27CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaC C(2≤
eorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)?parser@66.25:66.31CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaC C(2≤
eorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)?reader@65.20:65.26CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaC" C((2≤
eorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)?result@64.21:64.27CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaE E(2≤
eorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)?result@64.21:64.27CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaF F(2≤
eorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)?result@64.21:64.27CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaG G(2≤
eorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)?result@64.21:64.27CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaH H(2ß
Uorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)!is	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java?E ?(G2π
eorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)?result@64.21:64.27DECLARATIONC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java@ @(2π
eorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)?reader@65.20:65.26DECLARATIONC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaA A(2π
eorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)?parser@66.25:66.31DECLARATIONC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaB B(2b
java.util.ListRETURN_TYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java? ?(2|
org.jabref.model.entry.BibEntryRETURN_TYPE_ARGUMENTC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java? ?( ≈
eorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)?result@64.21:64.27VARIABLEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java@ @("
typeParserResult"
isFinalfalse"h
declarationStringS<mark class="modifier"> </mark>ParserResult <mark class="class-field">result</mark>*result2s
&org.jabref.logic.importer.ParserResultTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java@ @(¶
eorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)?reader@65.20:65.26VARIABLEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaA A("
typeReader"
isFinalfalse"ó
declarationStringÅ<mark class="modifier"> </mark>Reader <mark class="class-field">reader</mark> = new InputStreamReader(is, StandardCharsets.UTF_8)*reader2[
java.io.ReaderTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaA A(2ß
Zjava.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.nio.charset.Charset)CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaA! A(22¢
Uorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)!isCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaA3 A(5¶
eorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)?parser@66.25:66.31VARIABLEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaB B("
typeBibtexParser"
isFinalfalse"Ω
declarationStringß<mark class="modifier"> </mark>BibtexParser <mark class="class-field">parser</mark> = new BibtexParser(mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS))*parser2~
1org.jabref.logic.importer.fileformat.BibtexParserTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaB B(Ÿ
Uorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)!is	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java?E ?(G"
typeInputStream"
isFinalfalse"#
declarationStringInputStream is*is2`
java.io.InputStreamTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java?9 ?(D®
yorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.util.List<org.jabref.model.entry.BibEntry>)METHODC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaQ Q(#"
isFinalfalse"˚
declarationStringÂ<mark class="modifier">public </mark><mark class="modifier">static </mark><mark class="modifier">void</mark> <mark class="method">assertEquals</mark>(InputStream expectedInputStream<mark class="modifier"><mark class="modifier">,</mark></mark> List&lt;BibEntry&gt; actualEntries)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStatictrue"
accesspublic"

isAbstractfalse"
typevoid*assertEquals2ü
Rorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaV) V(?2€
çorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.util.List<org.jabref.model.entry.BibEntry>)!expectedInputStreamCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaS S()2’
áorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.util.List<org.jabref.model.entry.BibEntry>)!actualEntriesCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaT T(#2€
çorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.util.List<org.jabref.model.entry.BibEntry>)!expectedInputStreamCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaV@ V(S2„
ïorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.util.List<org.jabref.model.entry.BibEntry>)?expectedEntries@86.23:86.38CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaW  W(/2’
áorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.util.List<org.jabref.model.entry.BibEntry>)!actualEntriesCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaW1 W(>2‡
çorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.util.List<org.jabref.model.entry.BibEntry>)!expectedInputStream	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaQ0 Q(C2⁄
áorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.util.List<org.jabref.model.entry.BibEntry>)!actualEntries	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaQT Q(a2Í
ïorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.util.List<org.jabref.model.entry.BibEntry>)?expectedEntries@86.23:86.38DECLARATIONC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaV V(&2X
voidRETURN_TYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaQ Q(õ
ïorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.util.List<org.jabref.model.entry.BibEntry>)?expectedEntries@86.23:86.38VARIABLEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaV V(&"
typeList<BibEntry>"
isFinalfalse"¢
declarationStringå<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">expectedEntries</mark> = getListFromInputStream(expectedInputStream)*expectedEntries2[
java.util.ListTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaV V(2u
org.jabref.model.entry.BibEntryTYPE_ARGUMENTC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaV V(2ü
Rorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaV) V(?2€
çorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.util.List<org.jabref.model.entry.BibEntry>)!expectedInputStreamCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaV@ V(S¥
çorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.util.List<org.jabref.model.entry.BibEntry>)!expectedInputStream	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaQ0 Q(C"
typeInputStream"
isFinalfalse"4
declarationStringInputStream expectedInputStream*expectedInputStream2`
java.io.InputStreamTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaQ$ Q(/ö
áorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.util.List<org.jabref.model.entry.BibEntry>)!actualEntries	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaQT Q(a"
typeList<BibEntry>"
isFinalfalse"1
declarationStringList<BibEntry> actualEntries*actualEntries2[
java.util.ListTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaQE Q(I2u
org.jabref.model.entry.BibEntryTYPE_ARGUMENTC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaQJ Q(R’
yorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.io.InputStream)METHODC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaZ Z(#"
isFinalfalse"˚
declarationStringÂ<mark class="modifier">public </mark><mark class="modifier">static </mark><mark class="modifier">void</mark> <mark class="method">assertEquals</mark>(List&lt;BibEntry&gt; expectedEntries<mark class="modifier"><mark class="modifier">,</mark></mark> InputStream actualInputStream)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStatictrue"
accesspublic"

isAbstractfalse"
typevoid*assertEquals2ü
Rorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java_1 _(G2Ÿ
ãorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.io.InputStream)!actualInputStreamCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java\ \('2◊
âorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.io.InputStream)!expectedEntriesCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java] ](%2◊
âorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.io.InputStream)!expectedEntriesCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java_  _(/2Ÿ
ãorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.io.InputStream)!actualInputStreamCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java_H _(Y2‹
âorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.io.InputStream)!expectedEntries	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaZ3 Z(B2ﬁ
ãorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.io.InputStream)!actualInputStream	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaZP Z(a2X
voidRETURN_TYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaZ Z(†
âorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.io.InputStream)!expectedEntries	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaZ3 Z(B"
typeList<BibEntry>"
isFinalfalse"3
declarationStringList<BibEntry> expectedEntries*expectedEntries2[
java.util.ListTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaZ$ Z((2u
org.jabref.model.entry.BibEntryTYPE_ARGUMENTC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaZ) Z(1Æ
ãorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.io.InputStream)!actualInputStream	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaZP Z(a"
typeInputStream"
isFinalfalse"2
declarationStringInputStream actualInputStream*actualInputStream2`
java.io.InputStreamTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaZD Z(O•
iorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, org.jabref.model.entry.BibEntry)METHODC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javai i(#"
isFinalfalse"›
declarationString«<mark class="modifier">public </mark><mark class="modifier">static </mark><mark class="modifier">void</mark> <mark class="method">assertEquals</mark>(InputStream expected<mark class="modifier"><mark class="modifier">,</mark></mark> BibEntry actual)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStatictrue"
accesspublic"

isAbstractfalse"
typevoid*assertEquals2∆
yorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.util.List<org.jabref.model.entry.BibEntry>)CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javak k(2s
&java.util.Collections.singletonList(T)CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javak+ k(82ø
rorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, org.jabref.model.entry.BibEntry)!expectedCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javak k(2Ω
porg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, org.jabref.model.entry.BibEntry)!actualCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javak9 k(?2ƒ
rorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, org.jabref.model.entry.BibEntry)!expected	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javai0 i(82¬
porg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, org.jabref.model.entry.BibEntry)!actual	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaiC i(I2X
voidRETURN_TYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javai i(Ç
rorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, org.jabref.model.entry.BibEntry)!expected	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javai0 i(8"
typeInputStream"
isFinalfalse")
declarationStringInputStream expected*expected2`
java.io.InputStreamTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javai$ i(/Ç
porg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, org.jabref.model.entry.BibEntry)!actual	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaiC i(I"
typeBibEntry"
isFinalfalse"$
declarationStringBibEntry actual*actual2l
org.jabref.model.entry.BibEntryTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javai: i(Bä
Äorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.nio.file.Path, org.jabref.logic.importer.Importer)METHODC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaw w(#"
isFinalfalse"∞
declarationStringö<mark class="modifier">public </mark><mark class="modifier">static </mark><mark class="modifier">void</mark> <mark class="method">assertEquals</mark>(InputStream expectedIs<mark class="modifier"><mark class="modifier">,</mark></mark> Path fileToImport<mark class="modifier"><mark class="modifier">,</mark></mark> Importer importer)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStatictrue"
accesspublic"

isAbstractfalse"
typevoid*assertEquals2Í
úorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.nio.file.Path, org.jabref.logic.importer.Importer)CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javay y(2ü
Rorg.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(java.io.InputStream)CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javay y(+2Ÿ
ãorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.nio.file.Path, org.jabref.logic.importer.Importer)!expectedIsCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javay, y(62€
çorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.nio.file.Path, org.jabref.logic.importer.Importer)!fileToImportCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javay9 y(E2◊
âorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.nio.file.Path, org.jabref.logic.importer.Importer)!importerCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javayG y(O2ﬁ
ãorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.nio.file.Path, org.jabref.logic.importer.Importer)!expectedIs	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaw0 w(:2‡
çorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.nio.file.Path, org.jabref.logic.importer.Importer)!fileToImport	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javawA w(M2‹
âorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.nio.file.Path, org.jabref.logic.importer.Importer)!importer	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javawX w(`2X
voidRETURN_TYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaw w(†
ãorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.nio.file.Path, org.jabref.logic.importer.Importer)!expectedIs	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaw0 w(:"
typeInputStream"
isFinalfalse"+
declarationStringInputStream expectedIs*
expectedIs2`
java.io.InputStreamTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaw$ w(/ó
çorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.nio.file.Path, org.jabref.logic.importer.Importer)!fileToImport	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javawA w(M"
typePath"
isFinalfalse"&
declarationStringPath fileToImport*fileToImport2_
java.nio.file.PathTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaw< w(@£
âorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.nio.file.Path, org.jabref.logic.importer.Importer)!importer	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javawX w(`"
typeImporter"
isFinalfalse"&
declarationStringImporter importer*importer2o
"org.jabref.logic.importer.ImporterTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javawO w(W≈
zorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.net.URL, org.jabref.logic.importer.Importer)METHODC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java| |(#"
isFinalfalse"ˇ
declarationStringÈ<mark class="modifier">public </mark><mark class="modifier">static </mark><mark class="modifier">void</mark> <mark class="method">assertEquals</mark>(InputStream expectedIs<mark class="modifier"><mark class="modifier">,</mark></mark> URL fileToImport<mark class="modifier"><mark class="modifier">,</mark></mark> Importer importer)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>URISyntaxException<mark class="modifier"><mark class="modifier">,</mark></mark> IOException"
isStatictrue"
accesspublic"

isAbstractfalse"
typevoid*assertEquals2Œ
Äorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.nio.file.Path, org.jabref.logic.importer.Importer)CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java~ ~(2p
#java.nio.file.Path.of(java.net.URI)CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java~& ~((2a
java.net.URL.toURI()CALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java~6 ~(;2”
Öorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.net.URL, org.jabref.logic.importer.Importer)!expectedIsCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java~ ~(2’
áorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.net.URL, org.jabref.logic.importer.Importer)!fileToImportCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java~) ~(52—
Éorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.net.URL, org.jabref.logic.importer.Importer)!importerCALLC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java~@ ~(H2ÿ
Öorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.net.URL, org.jabref.logic.importer.Importer)!expectedIs	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java|0 |(:2⁄
áorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.net.URL, org.jabref.logic.importer.Importer)!fileToImport	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java|@ |(L2÷
Éorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.net.URL, org.jabref.logic.importer.Importer)!importer	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java|W |(_2X
voidRETURN_TYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java| |(ö
Öorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.net.URL, org.jabref.logic.importer.Importer)!expectedIs	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java|0 |(:"
typeInputStream"
isFinalfalse"+
declarationStringInputStream expectedIs*
expectedIs2`
java.io.InputStreamTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java|$ |(/â
áorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.net.URL, org.jabref.logic.importer.Importer)!fileToImport	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java|@ |(L"
typeURL"
isFinalfalse"%
declarationStringURL fileToImport*fileToImport2Y
java.net.URLTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java|< |(?ù
Éorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.io.InputStream, java.net.URL, org.jabref.logic.importer.Importer)!importer	PARAMETERC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java|W |(_"
typeImporter"
isFinalfalse"&
declarationStringImporter importer*importer2o
"org.jabref.logic.importer.ImporterTYPEC
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.java|N |(Vê
úorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.nio.file.Path, org.jabref.logic.importer.Importer)METHODE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaä ä(#"
isFinalfalse"∑
declarationString°<mark class="modifier">public </mark><mark class="modifier">static </mark><mark class="modifier">void</mark> <mark class="method">assertEquals</mark>(List&lt;BibEntry&gt; expected<mark class="modifier"><mark class="modifier">,</mark></mark> Path fileToImport<mark class="modifier"><mark class="modifier">,</mark></mark> Importer importer)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStatictrue"
accesspublic"

isAbstractfalse"
typevoid*assertEquals2Å
2org.jabref.model.database.BibDatabase.getEntries()CALLE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaç> ç(H2É
4org.jabref.logic.importer.ParserResult.getDatabase()CALLE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaç0 ç(;2î
Eorg.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)CALLE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaå0 å(>2ı
•org.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.nio.file.Path, org.jabref.logic.importer.Importer)!importerCALLE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaå' å(/2˘
©org.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.nio.file.Path, org.jabref.logic.importer.Importer)!fileToImportCALLE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaå? å(K2ı
•org.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.nio.file.Path, org.jabref.logic.importer.Importer)!expectedCALLE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaè  è((2à
∏org.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.nio.file.Path, org.jabref.logic.importer.Importer)?actualEntries@140.23:140.36CALLE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaè* è(72˙
•org.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.nio.file.Path, org.jabref.logic.importer.Importer)!expected	PARAMETERE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaä3 ä(;2˛
©org.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.nio.file.Path, org.jabref.logic.importer.Importer)!fileToImport	PARAMETERE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaäB ä(N2˙
•org.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.nio.file.Path, org.jabref.logic.importer.Importer)!importer	PARAMETERE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaäY ä(a2è
∏org.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.nio.file.Path, org.jabref.logic.importer.Importer)?actualEntries@140.23:140.36DECLARATIONE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaå å($2Z
voidRETURN_TYPEE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaä ä(Í
∏org.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.nio.file.Path, org.jabref.logic.importer.Importer)?actualEntries@140.23:140.36VARIABLEE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaå å($"
typeList<BibEntry>"
isFinalfalse"µ
declarationStringü<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">actualEntries</mark> = importer.importDatabase(fileToImport).getDatabase().getEntries()*actualEntries2]
java.util.ListTYPEE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaå å(2w
org.jabref.model.entry.BibEntryTYPE_ARGUMENTE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaå å(2Å
2org.jabref.model.database.BibDatabase.getEntries()CALLE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaç> ç(H2É
4org.jabref.logic.importer.ParserResult.getDatabase()CALLE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaç0 ç(;2î
Eorg.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)CALLE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaå0 å(>2ı
•org.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.nio.file.Path, org.jabref.logic.importer.Importer)!importerCALLE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaå' å(/2˘
©org.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.nio.file.Path, org.jabref.logic.importer.Importer)!fileToImportCALLE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaå? å(K¥
•org.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.nio.file.Path, org.jabref.logic.importer.Importer)!expected	PARAMETERE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaä3 ä(;"
typeList<BibEntry>"
isFinalfalse",
declarationStringList<BibEntry> expected*expected2]
java.util.ListTYPEE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaä$ ä((2w
org.jabref.model.entry.BibEntryTYPE_ARGUMENTE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaä) ä(1∑
©org.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.nio.file.Path, org.jabref.logic.importer.Importer)!fileToImport	PARAMETERE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaäB ä(N"
typePath"
isFinalfalse"&
declarationStringPath fileToImport*fileToImport2a
java.nio.file.PathTYPEE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaä= ä(A√
•org.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.nio.file.Path, org.jabref.logic.importer.Importer)!importer	PARAMETERE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaäY ä(a"
typeImporter"
isFinalfalse"&
declarationStringImporter importer*importer2q
"org.jabref.logic.importer.ImporterTYPEE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaäP ä(Xø
ñorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.net.URL, org.jabref.logic.importer.Importer)METHODE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaí í(#"
isFinalfalse"Ü
declarationString<mark class="modifier">public </mark><mark class="modifier">static </mark><mark class="modifier">void</mark> <mark class="method">assertEquals</mark>(List&lt;BibEntry&gt; expected<mark class="modifier"><mark class="modifier">,</mark></mark> URL fileToImport<mark class="modifier"><mark class="modifier">,</mark></mark> Importer importer)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>URISyntaxException<mark class="modifier"><mark class="modifier">,</mark></mark> IOException"
isStatictrue"
accesspublic"

isAbstractfalse"
typevoid*assertEquals2Ï
úorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.nio.file.Path, org.jabref.logic.importer.Importer)CALLE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaî î(2r
#java.nio.file.Path.of(java.net.URI)CALLE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaî$ î(&2c
java.net.URL.toURI()CALLE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaî4 î(92Ô
üorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.net.URL, org.jabref.logic.importer.Importer)!expectedCALLE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaî î(2Û
£org.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.net.URL, org.jabref.logic.importer.Importer)!fileToImportCALLE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaî' î(32Ô
üorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.net.URL, org.jabref.logic.importer.Importer)!importerCALLE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaî> î(F2Ù
üorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.net.URL, org.jabref.logic.importer.Importer)!expected	PARAMETERE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaí3 í(;2¯
£org.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.net.URL, org.jabref.logic.importer.Importer)!fileToImport	PARAMETERE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaíA í(M2Ù
üorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.net.URL, org.jabref.logic.importer.Importer)!importer	PARAMETERE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaíX í(`2Z
voidRETURN_TYPEE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaí í(Æ
üorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.net.URL, org.jabref.logic.importer.Importer)!expected	PARAMETERE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaí3 í(;"
typeList<BibEntry>"
isFinalfalse",
declarationStringList<BibEntry> expected*expected2]
java.util.ListTYPEE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaí$ í((2w
org.jabref.model.entry.BibEntryTYPE_ARGUMENTE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaí) í(1©
£org.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.net.URL, org.jabref.logic.importer.Importer)!fileToImport	PARAMETERE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaíA í(M"
typeURL"
isFinalfalse"%
declarationStringURL fileToImport*fileToImport2[
java.net.URLTYPEE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaí= í(@Ω
üorg.jabref.logic.bibtex.BibEntryAssert.assertEquals(java.util.List<org.jabref.model.entry.BibEntry>, java.net.URL, org.jabref.logic.importer.Importer)!importer	PARAMETERE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaíX í(`"
typeImporter"
isFinalfalse"&
declarationStringImporter importer*importer2q
"org.jabref.logic.importer.ImporterTYPEE
9src\test\java\org\jabref\logic\bibtex\BibEntryAssert.javaíO í(W