
5src\main\java\org\jabref\logic\importer\Importer.java‘
"org.jabref.logic.importer.ImporterCLASS?
5src\main\java\org\jabref\logic\importer\Importer.java ("$
packageorg.jabref.logic.importer"
isFinalfalse"
inner classfalse"

isAbstracttrue"’
declarationStringø<mark class="modifier">public </mark><mark class="modifier">abstract </mark><mark class="modifier">class </mark>Importer<mark class="modifier"><br>implements </mark>Comparable&lt;Importer&gt;"
accesspublic*Importer2ù
Morg.jabref.logic.importer.Importer.isRecognizedFormat(java.io.BufferedReader)DECLARATION?
5src\main\java\org\jabref\logic\importer\Importer.java) )(.2ô
Iorg.jabref.logic.importer.Importer.isRecognizedFormat(java.nio.file.Path)DECLARATION?
5src\main\java\org\jabref\logic\importer\Importer.java2 2(%2ó
Gorg.jabref.logic.importer.Importer.isRecognizedFormat(java.lang.String)DECLARATION?
5src\main\java\org\jabref\logic\importer\Importer.java? ?(%2ô
Iorg.jabref.logic.importer.Importer.importDatabase(java.io.BufferedReader)DECLARATION?
5src\main\java\org\jabref\logic\importer\Importer.javaS! S(/2ï
Eorg.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)DECLARATION?
5src\main\java\org\jabref\logic\importer\Importer.javaZ Z(&2ö
Jorg.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)DECLARATION?
5src\main\java\org\jabref\logic\importer\Importer.javam m('2ï
Corg.jabref.logic.importer.Importer.importDatabase(java.lang.String)DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.javaí í(&2í
@org.jabref.logic.importer.Importer.getReader(java.nio.file.Path)DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.javaô! ô(*2ì
Aorg.jabref.logic.importer.Importer.getReader(java.io.InputStream)DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.java£! £(*2~
,org.jabref.logic.importer.Importer.getName()DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.java± ±("2Ç
0org.jabref.logic.importer.Importer.getFileType()DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.java∏ ∏((2|
*org.jabref.logic.importer.Importer.getId()DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.java¿ ¿(2Ö
3org.jabref.logic.importer.Importer.getDescription()DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.javaÿ ÿ()2
-org.jabref.logic.importer.Importer.hashCode()DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.java€ €(2ç
;org.jabref.logic.importer.Importer.equals(java.lang.Object)DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.java‡ ‡(2
-org.jabref.logic.importer.Importer.toString()DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.javaÏ Ï(2¢
Porg.jabref.logic.importer.Importer.compareTo(org.jabref.logic.importer.Importer)DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.javaÒ Ò(2Ö
5org.jabref.logic.importer.Importer?LOGGER@30.32:30.38DECLARATION?
5src\main\java\org\jabref\logic\importer\Importer.java  (&2_
java.lang.ComparableEXTEND?
5src\main\java\org\jabref\logic\importer\Importer.java* (42{
"org.jabref.logic.importer.ImporterEXTEND_TYPE_ARGUMENT?
5src\main\java\org\jabref\logic\importer\Importer.java5 (=£
Morg.jabref.logic.importer.Importer.isRecognizedFormat(java.io.BufferedReader)METHOD?
5src\main\java\org\jabref\logic\importer\Importer.java) )(."
isFinalfalse"õ
declarationStringÖ<mark class="modifier">public </mark><mark class="modifier">abstract </mark><mark class="modifier">boolean</mark> <mark class="method">isRecognizedFormat</mark>(BufferedReader input)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstracttrue"
typeboolean*isRecognizedFormat2°
Sorg.jabref.logic.importer.Importer.isRecognizedFormat(java.io.BufferedReader)!input	PARAMETER?
5src\main\java\org\jabref\logic\importer\Importer.java)> )(C2W
booleanRETURN_TYPE?
5src\main\java\org\jabref\logic\importer\Importer.java) )(ﬁ
Sorg.jabref.logic.importer.Importer.isRecognizedFormat(java.io.BufferedReader)!input	PARAMETER?
5src\main\java\org\jabref\logic\importer\Importer.java)> )(C"
typeBufferedReader"
isFinalfalse")
declarationStringBufferedReader input*input2_
java.io.BufferedReaderTYPE?
5src\main\java\org\jabref\logic\importer\Importer.java)/ )(=õ
Iorg.jabref.logic.importer.Importer.isRecognizedFormat(java.nio.file.Path)METHOD?
5src\main\java\org\jabref\logic\importer\Importer.java2 2(%"
isFinalfalse"Ì
declarationString◊<mark class="modifier">public </mark><mark class="modifier">boolean</mark> <mark class="method">isRecognizedFormat</mark>(Path filePath)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeboolean*isRecognizedFormat2â
@org.jabref.logic.importer.Importer.getReader(java.nio.file.Path)CALL?
5src\main\java\org\jabref\logic\importer\Importer.java3- 3(62ñ
Morg.jabref.logic.importer.Importer.isRecognizedFormat(java.io.BufferedReader)CALL?
5src\main\java\org\jabref\logic\importer\Importer.java4 4(%2õ
Rorg.jabref.logic.importer.Importer.isRecognizedFormat(java.nio.file.Path)!filePathCALL?
5src\main\java\org\jabref\logic\importer\Importer.java37 3(?2≠
dorg.jabref.logic.importer.Importer.isRecognizedFormat(java.nio.file.Path)?bufferedReader@51.28:51.42CALL?
5src\main\java\org\jabref\logic\importer\Importer.java4& 4(42†
Rorg.jabref.logic.importer.Importer.isRecognizedFormat(java.nio.file.Path)!filePath	PARAMETER?
5src\main\java\org\jabref\logic\importer\Importer.java2+ 2(32¥
dorg.jabref.logic.importer.Importer.isRecognizedFormat(java.nio.file.Path)?bufferedReader@51.28:51.42DECLARATION?
5src\main\java\org\jabref\logic\importer\Importer.java3 3(*2W
booleanRETURN_TYPE?
5src\main\java\org\jabref\logic\importer\Importer.java2 2(Å
dorg.jabref.logic.importer.Importer.isRecognizedFormat(java.nio.file.Path)?bufferedReader@51.28:51.42VARIABLE?
5src\main\java\org\jabref\logic\importer\Importer.java3 3(*"
typeBufferedReader"
isFinalfalse"à
declarationStrings<mark class="modifier"> </mark>BufferedReader <mark class="class-field">bufferedReader</mark> = getReader(filePath)*bufferedReader2_
java.io.BufferedReaderTYPE?
5src\main\java\org\jabref\logic\importer\Importer.java3 3(2â
@org.jabref.logic.importer.Importer.getReader(java.nio.file.Path)CALL?
5src\main\java\org\jabref\logic\importer\Importer.java3- 3(62õ
Rorg.jabref.logic.importer.Importer.isRecognizedFormat(java.nio.file.Path)!filePathCALL?
5src\main\java\org\jabref\logic\importer\Importer.java37 3(?À
Rorg.jabref.logic.importer.Importer.isRecognizedFormat(java.nio.file.Path)!filePath	PARAMETER?
5src\main\java\org\jabref\logic\importer\Importer.java2+ 2(3"
typePath"
isFinalfalse""
declarationStringPath filePath*filePath2[
java.nio.file.PathTYPE?
5src\main\java\org\jabref\logic\importer\Importer.java2& 2(*ÿ
Gorg.jabref.logic.importer.Importer.isRecognizedFormat(java.lang.String)METHOD?
5src\main\java\org\jabref\logic\importer\Importer.java? ?(%"
isFinalfalse"Î
declarationString’<mark class="modifier">public </mark><mark class="modifier">boolean</mark> <mark class="method">isRecognizedFormat</mark>(String data)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeboolean*isRecognizedFormat2ñ
Morg.jabref.logic.importer.Importer.isRecognizedFormat(java.io.BufferedReader)CALL?
5src\main\java\org\jabref\logic\importer\Importer.javaB B(%2|
3java.io.StringReader.StringReader(java.lang.String)CALL?
5src\main\java\org\jabref\logic\importer\Importer.java@- @(92~
5java.io.BufferedReader.BufferedReader(java.io.Reader)CALL?
5src\main\java\org\jabref\logic\importer\Importer.javaA1 A(?2ï
Lorg.jabref.logic.importer.Importer.isRecognizedFormat(java.lang.String)!dataCALL?
5src\main\java\org\jabref\logic\importer\Importer.java@: @(>2©
`org.jabref.logic.importer.Importer.isRecognizedFormat(java.lang.String)?stringReader@64.26:64.38CALL?
5src\main\java\org\jabref\logic\importer\Importer.javaA@ A(L2´
borg.jabref.logic.importer.Importer.isRecognizedFormat(java.lang.String)?bufferedReader@65.28:65.42CALL?
5src\main\java\org\jabref\logic\importer\Importer.javaB& B(42ö
Lorg.jabref.logic.importer.Importer.isRecognizedFormat(java.lang.String)!data	PARAMETER?
5src\main\java\org\jabref\logic\importer\Importer.java?- ?(12∞
`org.jabref.logic.importer.Importer.isRecognizedFormat(java.lang.String)?stringReader@64.26:64.38DECLARATION?
5src\main\java\org\jabref\logic\importer\Importer.java@ @(&2≤
borg.jabref.logic.importer.Importer.isRecognizedFormat(java.lang.String)?bufferedReader@65.28:65.42DECLARATION?
5src\main\java\org\jabref\logic\importer\Importer.javaA A(*2W
booleanRETURN_TYPE?
5src\main\java\org\jabref\logic\importer\Importer.java? ?(‚
`org.jabref.logic.importer.Importer.isRecognizedFormat(java.lang.String)?stringReader@64.26:64.38VARIABLE?
5src\main\java\org\jabref\logic\importer\Importer.java@ @(&"
typeStringReader"
isFinalfalse"á
declarationStringr<mark class="modifier"> </mark>StringReader <mark class="class-field">stringReader</mark> = new StringReader(data)*stringReader2]
java.io.StringReaderTYPE?
5src\main\java\org\jabref\logic\importer\Importer.java@ @(2|
3java.io.StringReader.StringReader(java.lang.String)CALL?
5src\main\java\org\jabref\logic\importer\Importer.java@- @(92ï
Lorg.jabref.logic.importer.Importer.isRecognizedFormat(java.lang.String)!dataCALL?
5src\main\java\org\jabref\logic\importer\Importer.java@: @(>è
borg.jabref.logic.importer.Importer.isRecognizedFormat(java.lang.String)?bufferedReader@65.28:65.42VARIABLE?
5src\main\java\org\jabref\logic\importer\Importer.javaA A(*"
typeBufferedReader"
isFinalfalse"ñ
declarationStringÄ<mark class="modifier"> </mark>BufferedReader <mark class="class-field">bufferedReader</mark> = new BufferedReader(stringReader)*bufferedReader2_
java.io.BufferedReaderTYPE?
5src\main\java\org\jabref\logic\importer\Importer.javaA A(2~
5java.io.BufferedReader.BufferedReader(java.io.Reader)CALL?
5src\main\java\org\jabref\logic\importer\Importer.javaA1 A(?2©
`org.jabref.logic.importer.Importer.isRecognizedFormat(java.lang.String)?stringReader@64.26:64.38CALL?
5src\main\java\org\jabref\logic\importer\Importer.javaA@ A(Lø
Lorg.jabref.logic.importer.Importer.isRecognizedFormat(java.lang.String)!data	PARAMETER?
5src\main\java\org\jabref\logic\importer\Importer.java?- ?(1"
typeString"
isFinalfalse" 
declarationStringString data*data2Y
java.lang.StringTYPE?
5src\main\java\org\jabref\logic\importer\Importer.java?& ?(,û
Iorg.jabref.logic.importer.Importer.importDatabase(java.io.BufferedReader)METHOD?
5src\main\java\org\jabref\logic\importer\Importer.javaS! S(/"
isFinalfalse"˛
declarationStringË<mark class="modifier">public </mark><mark class="modifier">abstract </mark>ParserResult <mark class="method">importDatabase</mark>(BufferedReader input)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstracttrue"
typeParserResult*importDatabase2ù
Oorg.jabref.logic.importer.Importer.importDatabase(java.io.BufferedReader)!input	PARAMETER?
5src\main\java\org\jabref\logic\importer\Importer.javaS? S(D2v
&org.jabref.logic.importer.ParserResultRETURN_TYPE?
5src\main\java\org\jabref\logic\importer\Importer.javaS S( ⁄
Oorg.jabref.logic.importer.Importer.importDatabase(java.io.BufferedReader)!input	PARAMETER?
5src\main\java\org\jabref\logic\importer\Importer.javaS? S(D"
typeBufferedReader"
isFinalfalse")
declarationStringBufferedReader input*input2_
java.io.BufferedReaderTYPE?
5src\main\java\org\jabref\logic\importer\Importer.javaS0 S(>ö.
Eorg.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)METHOD?
5src\main\java\org\jabref\logic\importer\Importer.javaZ Z(&"
isFinalfalse"–
declarationString∫<mark class="modifier">public </mark>ParserResult <mark class="method">importDatabase</mark>(Path filePath)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeParserResult*importDatabase2ú
Sjava.nio.file.Files.newInputStream(java.nio.file.Path, java.nio.file.OpenOption...)CALL?
5src\main\java\org\jabref\logic\importer\Importer.java[- [(;2í
Iorg.jabref.logic.importer.Importer.importDatabase(java.io.BufferedReader)CALL?
5src\main\java\org\jabref\logic\importer\Importer.javaa( a(62ë
Horg.jabref.model.metadata.MetaData.setEncoding(java.nio.charset.Charset)CALL?
5src\main\java\org\jabref\logic\importer\Importer.javab' b(22}
4org.jabref.logic.importer.ParserResult.getMetaData()CALL?
5src\main\java\org\jabref\logic\importer\Importer.javab b($2ã
Borg.jabref.logic.importer.ParserResult.setPath(java.nio.file.Path)CALL?
5src\main\java\org\jabref\logic\importer\Importer.javac c( 2e
java.util.Optional.isEmpty()CALL?
5src\main\java\org\jabref\logic\importer\Importer.javaf5 f(<2u
,org.jabref.model.metadata.MetaData.getMode()CALL?
5src\main\java\org\jabref\logic\importer\Importer.javaf+ f(22}
4org.jabref.logic.importer.ParserResult.getMetaData()CALL?
5src\main\java\org\jabref\logic\importer\Importer.javaf f((2û
Uorg.jabref.model.metadata.MetaData.setMode(org.jabref.model.database.BibDatabaseMode)CALL?
5src\main\java\org\jabref\logic\importer\Importer.javag+ g(22}
4org.jabref.logic.importer.ParserResult.getMetaData()CALL?
5src\main\java\org\jabref\logic\importer\Importer.javag g((2¨
corg.jabref.model.database.BibDatabaseModeDetection.inferMode(org.jabref.model.database.BibDatabase)CALL?
5src\main\java\org\jabref\logic\importer\Importer.javagL g(U2}
4org.jabref.logic.importer.ParserResult.getDatabase()CALL?
5src\main\java\org\jabref\logic\importer\Importer.javagc g(n2ç
Djava.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)CALL?
5src\main\java\org\jabref\logic\importer\Importer.java\: \(M2~
5java.io.BufferedReader.BufferedReader(java.io.Reader)CALL?
5src\main\java\org\jabref\logic\importer\Importer.java`0 `(>2£
Zjava.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.nio.charset.Charset)CALL?
5src\main\java\org\jabref\logic\importer\Importer.java`C `(T2ó
Norg.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)!filePathCALL?
5src\main\java\org\jabref\logic\importer\Importer.java[< [(D2¶
]org.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?inputStream@91.25:91.36CALL?
5src\main\java\org\jabref\logic\importer\Importer.java\N \(Y2Æ
eorg.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?bufferedInputStream@92.32:92.51CALL?
5src\main\java\org\jabref\logic\importer\Importer.java`U `(h2¢
Yorg.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?charset@94.20:94.27CALL?
5src\main\java\org\jabref\logic\importer\Importer.java`j `(q2©
`org.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?bufferedReader@96.27:96.41CALL?
5src\main\java\org\jabref\logic\importer\Importer.javaa7 a(E2ß
^org.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?parserResult@97.25:97.37CALL?
5src\main\java\org\jabref\logic\importer\Importer.javab b(2¢
Yorg.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?charset@94.20:94.27CALL?
5src\main\java\org\jabref\logic\importer\Importer.javab3 b(:2ß
^org.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?parserResult@97.25:97.37CALL?
5src\main\java\org\jabref\logic\importer\Importer.javac c(2ó
Norg.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)!filePathCALL?
5src\main\java\org\jabref\logic\importer\Importer.javac! c()2ß
^org.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?parserResult@97.25:97.37CALL?
5src\main\java\org\jabref\logic\importer\Importer.javaf f(2ß
^org.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?parserResult@97.25:97.37CALL?
5src\main\java\org\jabref\logic\importer\Importer.javag g(2ß
^org.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?parserResult@97.25:97.37CALL?
5src\main\java\org\jabref\logic\importer\Importer.javagV g(b2ß
^org.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?parserResult@97.25:97.37CALL?
5src\main\java\org\jabref\logic\importer\Importer.javai i(2ú
Norg.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)!filePath	PARAMETER?
5src\main\java\org\jabref\logic\importer\Importer.javaZ, Z(42≠
]org.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?inputStream@91.25:91.36DECLARATION?
5src\main\java\org\jabref\logic\importer\Importer.java[ [($2µ
eorg.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?bufferedInputStream@92.32:92.51DECLARATION?
5src\main\java\org\jabref\logic\importer\Importer.java\  \(32©
Yorg.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?charset@94.20:94.27DECLARATION?
5src\main\java\org\jabref\logic\importer\Importer.java^ ^(2∞
`org.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?bufferedReader@96.27:96.41DECLARATION?
5src\main\java\org\jabref\logic\importer\Importer.java` `()2Æ
^org.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?parserResult@97.25:97.37DECLARATION?
5src\main\java\org\jabref\logic\importer\Importer.javaa a(%2v
&org.jabref.logic.importer.ParserResultRETURN_TYPE?
5src\main\java\org\jabref\logic\importer\Importer.javaZ Z(ü
]org.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?inputStream@91.25:91.36VARIABLE?
5src\main\java\org\jabref\logic\importer\Importer.java[ [($"
typeInputStream"
isFinalfalse"ß
declarationStringë<mark class="modifier"> </mark>InputStream <mark class="class-field">inputStream</mark> = Files.newInputStream(filePath, StandardOpenOption.READ)*inputStream2\
java.io.InputStreamTYPE?
5src\main\java\org\jabref\logic\importer\Importer.java[ [(2ú
Sjava.nio.file.Files.newInputStream(java.nio.file.Path, java.nio.file.OpenOption...)CALL?
5src\main\java\org\jabref\logic\importer\Importer.java[- [(;2ó
Norg.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)!filePathCALL?
5src\main\java\org\jabref\logic\importer\Importer.java[< [(Dº
eorg.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?bufferedInputStream@92.32:92.51VARIABLE?
5src\main\java\org\jabref\logic\importer\Importer.java\  \(3"
typeBufferedInputStream"
isFinalfalse"§
declarationStringé<mark class="modifier"> </mark>BufferedInputStream <mark class="class-field">bufferedInputStream</mark> = new BufferedInputStream(inputStream)*bufferedInputStream2d
java.io.BufferedInputStreamTYPE?
5src\main\java\org\jabref\logic\importer\Importer.java\ \(2ç
Djava.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)CALL?
5src\main\java\org\jabref\logic\importer\Importer.java\: \(M2¶
]org.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?inputStream@91.25:91.36CALL?
5src\main\java\org\jabref\logic\importer\Importer.java\N \(Y¥
Yorg.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?charset@94.20:94.27VARIABLE?
5src\main\java\org\jabref\logic\importer\Importer.java^ ^("
typeCharset"
isFinalfalse"}
declarationStringh<mark class="modifier"> </mark>Charset <mark class="class-field">charset</mark> = StandardCharsets.UTF_8*charset2a
java.nio.charset.CharsetTYPE?
5src\main\java\org\jabref\logic\importer\Importer.java^ ^(Ñ	
`org.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?bufferedReader@96.27:96.41VARIABLE?
5src\main\java\org\jabref\logic\importer\Importer.java` `()"
typeBufferedReader"
isFinalfalse"Ω
declarationStringß<mark class="modifier"> </mark>BufferedReader <mark class="class-field">bufferedReader</mark> = new BufferedReader(new InputStreamReader(bufferedInputStream, charset))*bufferedReader2_
java.io.BufferedReaderTYPE?
5src\main\java\org\jabref\logic\importer\Importer.java` `(2~
5java.io.BufferedReader.BufferedReader(java.io.Reader)CALL?
5src\main\java\org\jabref\logic\importer\Importer.java`0 `(>2£
Zjava.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.nio.charset.Charset)CALL?
5src\main\java\org\jabref\logic\importer\Importer.java`C `(T2Æ
eorg.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?bufferedInputStream@92.32:92.51CALL?
5src\main\java\org\jabref\logic\importer\Importer.java`U `(h2¢
Yorg.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?charset@94.20:94.27CALL?
5src\main\java\org\jabref\logic\importer\Importer.java`j `(q•
^org.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?parserResult@97.25:97.37VARIABLE?
5src\main\java\org\jabref\logic\importer\Importer.javaa a(%"
typeParserResult"
isFinalfalse"è
declarationStringz<mark class="modifier"> </mark>ParserResult <mark class="class-field">parserResult</mark> = importDatabase(bufferedReader)*parserResult2o
&org.jabref.logic.importer.ParserResultTYPE?
5src\main\java\org\jabref\logic\importer\Importer.javaa a(2í
Iorg.jabref.logic.importer.Importer.importDatabase(java.io.BufferedReader)CALL?
5src\main\java\org\jabref\logic\importer\Importer.javaa( a(62©
`org.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)?bufferedReader@96.27:96.41CALL?
5src\main\java\org\jabref\logic\importer\Importer.javaa7 a(E«
Norg.jabref.logic.importer.Importer.importDatabase(java.nio.file.Path)!filePath	PARAMETER?
5src\main\java\org\jabref\logic\importer\Importer.javaZ, Z(4"
typePath"
isFinalfalse""
declarationStringPath filePath*filePath2[
java.nio.file.PathTYPE?
5src\main\java\org\jabref\logic\importer\Importer.javaZ' Z(+æ!
Jorg.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)METHOD?
5src\main\java\org\jabref\logic\importer\Importer.javam m('"
isFinalfalse"∫
declarationString§<mark class="modifier">protected </mark><mark class="modifier">static </mark>Charset <mark class="method">getCharset</mark>(BufferedInputStream bufferedInputStream)"
isStatictrue"
access	protected"

isAbstractfalse"
typeCharset*
getCharset2í
Ijava.util.stream.Stream.anyMatch(java.util.function.Predicate<? super T>)CALL?
5src\main\java\org\jabref\logic\importer\Importer.java{' {(/2e
java.util.Arrays.stream(T[])CALL?
5src\main\java\org\jabref\logic\importer\Importer.java{ {(2±
horg.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?charsetDetector@114.24:114.39CALL?
5src\main\java\org\jabref\logic\importer\Importer.javat t(2ß
^org.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)!bufferedInputStreamCALL?
5src\main\java\org\jabref\logic\importer\Importer.javat$ t(72±
horg.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?charsetDetector@114.24:114.39CALL?
5src\main\java\org\jabref\logic\importer\Importer.javav% v(42©
`org.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?matches@118.27:118.34CALL?
5src\main\java\org\jabref\logic\importer\Importer.javaw w(2©
`org.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?matches@118.27:118.34CALL?
5src\main\java\org\jabref\logic\importer\Importer.javaw& w(-2∞
gorg.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?defaultCharSet@110.16:110.30CALL?
5src\main\java\org\jabref\logic\importer\Importer.javax x(%2©
`org.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?matches@118.27:118.34CALL?
5src\main\java\org\jabref\logic\importer\Importer.java{ {(%2©
`org.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?charset@123.48:123.55CALL?
5src\main\java\org\jabref\logic\importer\Importer.java{J {(Q2∞
gorg.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?defaultCharSet@110.16:110.30CALL?
5src\main\java\org\jabref\logic\importer\Importer.java| |(%2©
`org.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?matches@118.27:118.34CALL?
5src\main\java\org\jabref\logic\importer\Importer.java (2´
`org.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?matches@118.27:118.34CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaÄ' Ä(.2Ä
5org.jabref.logic.importer.Importer?LOGGER@30.32:30.38CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaÉ É(2•
Zorg.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?e@130.29:130.30CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaÉL É(M2≤
gorg.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?defaultCharSet@110.16:110.30CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaÖ Ö(2¨
^org.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)!bufferedInputStream	PARAMETER?
5src\main\java\org\jabref\logic\importer\Importer.javam< m(O2∑
gorg.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?defaultCharSet@110.16:110.30DECLARATION?
5src\main\java\org\jabref\logic\importer\Importer.javan n(2∏
horg.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?charsetDetector@114.24:114.39DECLARATION?
5src\main\java\org\jabref\logic\importer\Importer.javar r('2∞
`org.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?matches@118.27:118.34DECLARATION?
5src\main\java\org\jabref\logic\importer\Importer.javav v("2∞
`org.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?charset@123.48:123.55DECLARATION?
5src\main\java\org\jabref\logic\importer\Importer.java{0 {(72¨
Zorg.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?e@130.29:130.30DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.javaÇ Ç(2h
java.nio.charset.CharsetRETURN_TYPE?
5src\main\java\org\jabref\logic\importer\Importer.javam m(—
gorg.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?defaultCharSet@110.16:110.30VARIABLE?
5src\main\java\org\jabref\logic\importer\Importer.javan n("
typeCharset"
isFinalfalse"Ñ
declarationStringo<mark class="modifier"> </mark>Charset <mark class="class-field">defaultCharSet</mark> = StandardCharsets.UTF_8*defaultCharSet2a
java.nio.charset.CharsetTYPE?
5src\main\java\org\jabref\logic\importer\Importer.javan n(Î
horg.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?charsetDetector@114.24:114.39VARIABLE?
5src\main\java\org\jabref\logic\importer\Importer.javar r('"
typeCharsetDetector"
isFinalfalse"å
declarationStringw<mark class="modifier"> </mark>CharsetDetector <mark class="class-field">charsetDetector</mark> = new CharsetDetector()*charsetDetector2i
 com.ibm.icu.text.CharsetDetectorTYPE?
5src\main\java\org\jabref\logic\importer\Importer.javar r(à
`org.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?matches@118.27:118.34VARIABLE?
5src\main\java\org\jabref\logic\importer\Importer.javav v(""
typeCharsetMatch"
isFinalfalse"â
declarationStringt<mark class="modifier"> </mark>CharsetMatch[] <mark class="class-field">matches</mark> = charsetDetector.detectAll()*matches2h
com.ibm.icu.text.CharsetMatch[]TYPE?
5src\main\java\org\jabref\logic\importer\Importer.javav v(2±
horg.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?charsetDetector@114.24:114.39CALL?
5src\main\java\org\jabref\logic\importer\Importer.javav% v(4î
^org.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)!bufferedInputStream	PARAMETER?
5src\main\java\org\jabref\logic\importer\Importer.javam< m(O"
typeBufferedInputStream"
isFinalfalse"<
declarationString'BufferedInputStream bufferedInputStream*bufferedInputStream2d
java.io.BufferedInputStreamTYPE?
5src\main\java\org\jabref\logic\importer\Importer.javam( m(;˜
`org.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?charset@123.48:123.55VARIABLE?
5src\main\java\org\jabref\logic\importer\Importer.java{0 {(7"
type"
isFinalfalse"
declarationString charset*charset2TYPE◊
Zorg.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)?e@130.29:130.30VARIABLEA
5src\main\java\org\jabref\logic\importer\Importer.javaÇ Ç("
typeIOException"
isFinalfalse""
declarationStringIOException e*e2^
java.io.IOExceptionTYPEA
5src\main\java\org\jabref\logic\importer\Importer.javaÇ Ç(⁄
Corg.jabref.logic.importer.Importer.importDatabase(java.lang.String)METHODA
5src\main\java\org\jabref\logic\importer\Importer.javaí í(&"
isFinalfalse"Œ
declarationString∏<mark class="modifier">public </mark>ParserResult <mark class="method">importDatabase</mark>(String data)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeParserResult*importDatabase2î
Iorg.jabref.logic.importer.Importer.importDatabase(java.io.BufferedReader)CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaï ï(!2~
3java.io.StringReader.StringReader(java.lang.String)CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaì- ì(92Ä
5java.io.BufferedReader.BufferedReader(java.io.Reader)CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaî1 î(?2ì
Horg.jabref.logic.importer.Importer.importDatabase(java.lang.String)!dataCALLA
5src\main\java\org\jabref\logic\importer\Importer.javaì: ì(>2©
^org.jabref.logic.importer.Importer.importDatabase(java.lang.String)?stringReader@147.26:147.38CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaî@ î(L2´
`org.jabref.logic.importer.Importer.importDatabase(java.lang.String)?bufferedReader@148.28:148.42CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaï" ï(02ò
Horg.jabref.logic.importer.Importer.importDatabase(java.lang.String)!data	PARAMETERA
5src\main\java\org\jabref\logic\importer\Importer.javaí. í(22∞
^org.jabref.logic.importer.Importer.importDatabase(java.lang.String)?stringReader@147.26:147.38DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.javaì ì(&2≤
`org.jabref.logic.importer.Importer.importDatabase(java.lang.String)?bufferedReader@148.28:148.42DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.javaî î(*2x
&org.jabref.logic.importer.ParserResultRETURN_TYPEA
5src\main\java\org\jabref\logic\importer\Importer.javaí í(‰
^org.jabref.logic.importer.Importer.importDatabase(java.lang.String)?stringReader@147.26:147.38VARIABLEA
5src\main\java\org\jabref\logic\importer\Importer.javaì ì(&"
typeStringReader"
isFinalfalse"á
declarationStringr<mark class="modifier"> </mark>StringReader <mark class="class-field">stringReader</mark> = new StringReader(data)*stringReader2_
java.io.StringReaderTYPEA
5src\main\java\org\jabref\logic\importer\Importer.javaì ì(2~
3java.io.StringReader.StringReader(java.lang.String)CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaì- ì(92ì
Horg.jabref.logic.importer.Importer.importDatabase(java.lang.String)!dataCALLA
5src\main\java\org\jabref\logic\importer\Importer.javaì: ì(>î
`org.jabref.logic.importer.Importer.importDatabase(java.lang.String)?bufferedReader@148.28:148.42VARIABLEA
5src\main\java\org\jabref\logic\importer\Importer.javaî î(*"
typeBufferedReader"
isFinalfalse"ñ
declarationStringÄ<mark class="modifier"> </mark>BufferedReader <mark class="class-field">bufferedReader</mark> = new BufferedReader(stringReader)*bufferedReader2a
java.io.BufferedReaderTYPEA
5src\main\java\org\jabref\logic\importer\Importer.javaî î(2Ä
5java.io.BufferedReader.BufferedReader(java.io.Reader)CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaî1 î(?2©
^org.jabref.logic.importer.Importer.importDatabase(java.lang.String)?stringReader@147.26:147.38CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaî@ î(Lø
Horg.jabref.logic.importer.Importer.importDatabase(java.lang.String)!data	PARAMETERA
5src\main\java\org\jabref\logic\importer\Importer.javaí. í(2"
typeString"
isFinalfalse" 
declarationStringString data*data2[
java.lang.StringTYPEA
5src\main\java\org\jabref\logic\importer\Importer.javaí' í(-¸
@org.jabref.logic.importer.Importer.getReader(java.nio.file.Path)METHODA
5src\main\java\org\jabref\logic\importer\Importer.javaô! ô(*"
isFinalfalse"Ú
declarationString‹<mark class="modifier">public </mark><mark class="modifier">static </mark>BufferedReader <mark class="method">getReader</mark>(Path filePath)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStatictrue"
accesspublic"

isAbstractfalse"
typeBufferedReader*	getReader2û
Sjava.nio.file.Files.newInputStream(java.nio.file.Path, java.nio.file.OpenOption...)CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaö# ö(12ä
?org.jabref.logic.util.io.FileUtil.isBibFile(java.nio.file.Path)CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaú ú(2å
Aorg.jabref.logic.importer.Importer.getReader(java.io.InputStream)CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaù ù(2Ä
5java.io.BufferedReader.BufferedReader(java.io.Reader)CALLA
5src\main\java\org\jabref\logic\importer\Importer.java† †(!2•
Zjava.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.nio.charset.Charset)CALLA
5src\main\java\org\jabref\logic\importer\Importer.java†& †(72î
Iorg.jabref.logic.importer.Importer.getReader(java.nio.file.Path)!filePathCALLA
5src\main\java\org\jabref\logic\importer\Importer.javaö2 ö(:2î
Iorg.jabref.logic.importer.Importer.getReader(java.nio.file.Path)!filePathCALLA
5src\main\java\org\jabref\logic\importer\Importer.javaú ú('2†
Uorg.jabref.logic.importer.Importer.getReader(java.nio.file.Path)?stream@154.20:154.26CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaù ù(#2†
Uorg.jabref.logic.importer.Importer.getReader(java.nio.file.Path)?stream@154.20:154.26CALLA
5src\main\java\org\jabref\logic\importer\Importer.java†8 †(>2ô
Iorg.jabref.logic.importer.Importer.getReader(java.nio.file.Path)!filePath	PARAMETERA
5src\main\java\org\jabref\logic\importer\Importer.javaô0 ô(82ß
Uorg.jabref.logic.importer.Importer.getReader(java.nio.file.Path)?stream@154.20:154.26DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.javaö ö(2h
java.io.BufferedReaderRETURN_TYPEA
5src\main\java\org\jabref\logic\importer\Importer.javaô ô( ê
Uorg.jabref.logic.importer.Importer.getReader(java.nio.file.Path)?stream@154.20:154.26VARIABLEA
5src\main\java\org\jabref\logic\importer\Importer.javaö ö("
typeInputStream"
isFinalfalse"¢
declarationStringå<mark class="modifier"> </mark>InputStream <mark class="class-field">stream</mark> = Files.newInputStream(filePath, StandardOpenOption.READ)*stream2^
java.io.InputStreamTYPEA
5src\main\java\org\jabref\logic\importer\Importer.javaö ö(2û
Sjava.nio.file.Files.newInputStream(java.nio.file.Path, java.nio.file.OpenOption...)CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaö# ö(12î
Iorg.jabref.logic.importer.Importer.getReader(java.nio.file.Path)!filePathCALLA
5src\main\java\org\jabref\logic\importer\Importer.javaö2 ö(:∆
Iorg.jabref.logic.importer.Importer.getReader(java.nio.file.Path)!filePath	PARAMETERA
5src\main\java\org\jabref\logic\importer\Importer.javaô0 ô(8"
typePath"
isFinalfalse""
declarationStringPath filePath*filePath2]
java.nio.file.PathTYPEA
5src\main\java\org\jabref\logic\importer\Importer.javaô+ ô(/—
Aorg.jabref.logic.importer.Importer.getReader(java.io.InputStream)METHODA
5src\main\java\org\jabref\logic\importer\Importer.java£! £(*"
isFinalfalse"®
declarationStringí<mark class="modifier">public </mark><mark class="modifier">static </mark>BufferedReader <mark class="method">getReader</mark>(InputStream stream)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeBufferedReader*	getReader2ï
Jorg.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)CALLA
5src\main\java\org\jabref\logic\importer\Importer.java• •($2è
Djava.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)CALLA
5src\main\java\org\jabref\logic\importer\Importer.java§6 §(I2•
Zjava.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.nio.charset.Charset)CALLA
5src\main\java\org\jabref\logic\importer\Importer.java¶' ¶(82Ä
5java.io.BufferedReader.BufferedReader(java.io.Reader)CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaß ß(!2ì
Horg.jabref.logic.importer.Importer.getReader(java.io.InputStream)!streamCALLA
5src\main\java\org\jabref\logic\importer\Importer.java§J §(P2Æ
corg.jabref.logic.importer.Importer.getReader(java.io.InputStream)?bufferedInputStream@164.28:164.47CALLA
5src\main\java\org\jabref\logic\importer\Importer.java•% •(82Æ
corg.jabref.logic.importer.Importer.getReader(java.io.InputStream)?bufferedInputStream@164.28:164.47CALLA
5src\main\java\org\jabref\logic\importer\Importer.java¶9 ¶(L2¢
Worg.jabref.logic.importer.Importer.getReader(java.io.InputStream)?charset@165.16:165.23CALLA
5src\main\java\org\jabref\logic\importer\Importer.java¶N ¶(U2°
Vorg.jabref.logic.importer.Importer.getReader(java.io.InputStream)?reader@166.26:166.32CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaß" ß((2ò
Horg.jabref.logic.importer.Importer.getReader(java.io.InputStream)!stream	PARAMETERA
5src\main\java\org\jabref\logic\importer\Importer.java£7 £(=2µ
corg.jabref.logic.importer.Importer.getReader(java.io.InputStream)?bufferedInputStream@164.28:164.47DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.java§ §(/2©
Worg.jabref.logic.importer.Importer.getReader(java.io.InputStream)?charset@165.16:165.23DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.java• •(2®
Vorg.jabref.logic.importer.Importer.getReader(java.io.InputStream)?reader@166.26:166.32DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.java¶ ¶( 2h
java.io.BufferedReaderRETURN_TYPEA
5src\main\java\org\jabref\logic\importer\Importer.java£ £( ®
corg.jabref.logic.importer.Importer.getReader(java.io.InputStream)?bufferedInputStream@164.28:164.47VARIABLEA
5src\main\java\org\jabref\logic\importer\Importer.java§ §(/"
typeBufferedInputStream"
isFinalfalse"ü
declarationStringâ<mark class="modifier"> </mark>BufferedInputStream <mark class="class-field">bufferedInputStream</mark> = new BufferedInputStream(stream)*bufferedInputStream2f
java.io.BufferedInputStreamTYPEA
5src\main\java\org\jabref\logic\importer\Importer.java§ §(2è
Djava.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)CALLA
5src\main\java\org\jabref\logic\importer\Importer.java§6 §(I2ì
Horg.jabref.logic.importer.Importer.getReader(java.io.InputStream)!streamCALLA
5src\main\java\org\jabref\logic\importer\Importer.java§J §(Pâ
Worg.jabref.logic.importer.Importer.getReader(java.io.InputStream)?charset@165.16:165.23VARIABLEA
5src\main\java\org\jabref\logic\importer\Importer.java• •("
typeCharset"
isFinalfalse"Ü
declarationStringq<mark class="modifier"> </mark>Charset <mark class="class-field">charset</mark> = getCharset(bufferedInputStream)*charset2c
java.nio.charset.CharsetTYPEA
5src\main\java\org\jabref\logic\importer\Importer.java• •(2ï
Jorg.jabref.logic.importer.Importer.getCharset(java.io.BufferedInputStream)CALLA
5src\main\java\org\jabref\logic\importer\Importer.java• •($2Æ
corg.jabref.logic.importer.Importer.getReader(java.io.InputStream)?bufferedInputStream@164.28:164.47CALLA
5src\main\java\org\jabref\logic\importer\Importer.java•% •(8Â
Vorg.jabref.logic.importer.Importer.getReader(java.io.InputStream)?reader@166.26:166.32VARIABLEA
5src\main\java\org\jabref\logic\importer\Importer.java¶ ¶( "
typeInputStreamReader"
isFinalfalse"§
declarationStringé<mark class="modifier"> </mark>InputStreamReader <mark class="class-field">reader</mark> = new InputStreamReader(bufferedInputStream, charset)*reader2d
java.io.InputStreamReaderTYPEA
5src\main\java\org\jabref\logic\importer\Importer.java¶ ¶(2•
Zjava.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.nio.charset.Charset)CALLA
5src\main\java\org\jabref\logic\importer\Importer.java¶' ¶(82Æ
corg.jabref.logic.importer.Importer.getReader(java.io.InputStream)?bufferedInputStream@164.28:164.47CALLA
5src\main\java\org\jabref\logic\importer\Importer.java¶9 ¶(L2¢
Worg.jabref.logic.importer.Importer.getReader(java.io.InputStream)?charset@165.16:165.23CALLA
5src\main\java\org\jabref\logic\importer\Importer.java¶N ¶(U–
Horg.jabref.logic.importer.Importer.getReader(java.io.InputStream)!stream	PARAMETERA
5src\main\java\org\jabref\logic\importer\Importer.java£7 £(="
typeInputStream"
isFinalfalse"'
declarationStringInputStream stream*stream2^
java.io.InputStreamTYPEA
5src\main\java\org\jabref\logic\importer\Importer.java£+ £(6—
,org.jabref.logic.importer.Importer.getName()METHODA
5src\main\java\org\jabref\logic\importer\Importer.java± ±(""
isFinalfalse"ç
declarationStringx<mark class="modifier">public </mark><mark class="modifier">abstract </mark>String <mark class="method">getName</mark>()"
isStaticfalse"
accesspublic"

isAbstracttrue"
typeString*getName2b
java.lang.StringRETURN_TYPEA
5src\main\java\org\jabref\logic\importer\Importer.java± ±(Ô
0org.jabref.logic.importer.Importer.getFileType()METHODA
5src\main\java\org\jabref\logic\importer\Importer.java∏ ∏(("
isFinalfalse"ì
declarationString~<mark class="modifier">public </mark><mark class="modifier">abstract </mark>FileType <mark class="method">getFileType</mark>()"
isStaticfalse"
accesspublic"

isAbstracttrue"
typeFileType*getFileType2p
org.jabref.logic.util.FileTypeRETURN_TYPEA
5src\main\java\org\jabref\logic\importer\Importer.java∏ ∏(∞
*org.jabref.logic.importer.Importer.getId()METHODA
5src\main\java\org\jabref\logic\importer\Importer.java¿ ¿("
isFinalfalse"d
declarationStringO<mark class="modifier">public </mark>String <mark class="method">getId</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*getId2w
,org.jabref.logic.importer.Importer.getName()CALLA
5src\main\java\org\jabref\logic\importer\Importer.java¡ ¡(2d
java.lang.String.length()CALLA
5src\main\java\org\jabref\logic\importer\Importer.java¬4 ¬(:2d
java.lang.String.length()CALLA
5src\main\java\org\jabref\logic\importer\Importer.java√ √(%2g
java.lang.String.charAt(int)CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaƒ ƒ(2t
)java.lang.Character.isLetterOrDigit(char)CALLA
5src\main\java\org\jabref\logic\importer\Importer.java≈ ≈()2o
$java.lang.StringBuilder.append(char)CALLA
5src\main\java\org\jabref\logic\importer\Importer.java∆ ∆(2p
%java.lang.Character.toLowerCase(char)CALLA
5src\main\java\org\jabref\logic\importer\Importer.java∆( ∆(32m
"java.lang.StringBuilder.toString()CALLA
5src\main\java\org\jabref\logic\importer\Importer.java… …(2u
*java.lang.StringBuilder.StringBuilder(int)CALLA
5src\main\java\org\jabref\logic\importer\Importer.java¬# ¬(02Ü
;org.jabref.logic.importer.Importer.getId()?id@193.15:193.17CALLA
5src\main\java\org\jabref\logic\importer\Importer.java¬1 ¬(32Ö
:org.jabref.logic.importer.Importer.getId()?i@195.17:195.18CALLA
5src\main\java\org\jabref\logic\importer\Importer.java√ √(2Ü
;org.jabref.logic.importer.Importer.getId()?id@193.15:193.17CALLA
5src\main\java\org\jabref\logic\importer\Importer.java√ √(2Ö
:org.jabref.logic.importer.Importer.getId()?i@195.17:195.18CALLA
5src\main\java\org\jabref\logic\importer\Importer.java√) √(*2Ü
;org.jabref.logic.importer.Importer.getId()?id@193.15:193.17CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaƒ ƒ(2Ö
:org.jabref.logic.importer.Importer.getId()?i@195.17:195.18CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaƒ ƒ( 2Ö
:org.jabref.logic.importer.Importer.getId()?c@196.17:196.18CALLA
5src\main\java\org\jabref\logic\importer\Importer.java≈* ≈(+2ä
?org.jabref.logic.importer.Importer.getId()?result@194.22:194.28CALLA
5src\main\java\org\jabref\logic\importer\Importer.java∆ ∆(2Ö
:org.jabref.logic.importer.Importer.getId()?c@196.17:196.18CALLA
5src\main\java\org\jabref\logic\importer\Importer.java∆4 ∆(52ä
?org.jabref.logic.importer.Importer.getId()?result@194.22:194.28CALLA
5src\main\java\org\jabref\logic\importer\Importer.java… …(2ç
;org.jabref.logic.importer.Importer.getId()?id@193.15:193.17DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.java¡ ¡(2ë
?org.jabref.logic.importer.Importer.getId()?result@194.22:194.28DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.java¬ ¬(2å
:org.jabref.logic.importer.Importer.getId()?i@195.17:195.18DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.java√ √(2å
:org.jabref.logic.importer.Importer.getId()?c@196.17:196.18DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.javaƒ ƒ(2b
java.lang.StringRETURN_TYPEA
5src\main\java\org\jabref\logic\importer\Importer.java¿ ¿(Ú
;org.jabref.logic.importer.Importer.getId()?id@193.15:193.17VARIABLEA
5src\main\java\org\jabref\logic\importer\Importer.java¡ ¡("
typeString"
isFinalfalse"j
declarationStringU<mark class="modifier"> </mark>String <mark class="class-field">id</mark> = getName()*id2[
java.lang.StringTYPEA
5src\main\java\org\jabref\logic\importer\Importer.java¡ ¡(2w
,org.jabref.logic.importer.Importer.getName()CALLA
5src\main\java\org\jabref\logic\importer\Importer.java¡ ¡(ñ
?org.jabref.logic.importer.Importer.getId()?result@194.22:194.28VARIABLEA
5src\main\java\org\jabref\logic\importer\Importer.java¬ ¬("
typeStringBuilder"
isFinalfalse"ä
declarationStringu<mark class="modifier"> </mark>StringBuilder <mark class="class-field">result</mark> = new StringBuilder(id.length())*result2b
java.lang.StringBuilderTYPEA
5src\main\java\org\jabref\logic\importer\Importer.java¬ ¬(2d
java.lang.String.length()CALLA
5src\main\java\org\jabref\logic\importer\Importer.java¬4 ¬(:2u
*java.lang.StringBuilder.StringBuilder(int)CALLA
5src\main\java\org\jabref\logic\importer\Importer.java¬# ¬(02Ü
;org.jabref.logic.importer.Importer.getId()?id@193.15:193.17CALLA
5src\main\java\org\jabref\logic\importer\Importer.java¬1 ¬(3˘
:org.jabref.logic.importer.Importer.getId()?i@195.17:195.18VARIABLEA
5src\main\java\org\jabref\logic\importer\Importer.java√ √("
typeint"
isFinalfalse"|
declarationStringg<mark class="modifier"> </mark><mark class="modifier">int</mark> <mark class="class-field">i</mark> = 0*i2N
intTYPEA
5src\main\java\org\jabref\logic\importer\Importer.java√ √(„
:org.jabref.logic.importer.Importer.getId()?c@196.17:196.18VARIABLEA
5src\main\java\org\jabref\logic\importer\Importer.javaƒ ƒ("
typechar"
isFinalfalse"j
declarationStringU<mark class="modifier"> </mark>char <mark class="class-field">c</mark> = id.charAt(i)*c2O
charTYPEA
5src\main\java\org\jabref\logic\importer\Importer.javaƒ ƒ(2g
java.lang.String.charAt(int)CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaƒ ƒ(2Ü
;org.jabref.logic.importer.Importer.getId()?id@193.15:193.17CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaƒ ƒ(2Ö
:org.jabref.logic.importer.Importer.getId()?i@195.17:195.18CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaƒ ƒ( Ê
3org.jabref.logic.importer.Importer.getDescription()METHODA
5src\main\java\org\jabref\logic\importer\Importer.javaÿ ÿ()"
isFinalfalse"î
declarationString<mark class="modifier">public </mark><mark class="modifier">abstract </mark>String <mark class="method">getDescription</mark>()"
isStaticfalse"
accesspublic"

isAbstracttrue"
typeString*getDescription2b
java.lang.StringRETURN_TYPEA
5src\main\java\org\jabref\logic\importer\Importer.javaÿ ÿ(…
-org.jabref.logic.importer.Importer.hashCode()METHODA
5src\main\java\org\jabref\logic\importer\Importer.java€ €("
isFinalfalse"±
declarationStringõ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark><mark class="modifier">int</mark> <mark class="method">hashCode</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeint*hashCode2f
java.lang.String.hashCode()CALLA
5src\main\java\org\jabref\logic\importer\Importer.java‹ ‹(!2w
,org.jabref.logic.importer.Importer.getName()CALLA
5src\main\java\org\jabref\logic\importer\Importer.java‹ ‹(2U
intRETURN_TYPEA
5src\main\java\org\jabref\logic\importer\Importer.java€ €(˛
;org.jabref.logic.importer.Importer.equals(java.lang.Object)METHODA
5src\main\java\org\jabref\logic\importer\Importer.java‡ ‡("
isFinalfalse"Ω
declarationStringß<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark><mark class="modifier">boolean</mark> <mark class="method">equals</mark>(Object obj)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeboolean*equals2á
<java.util.Objects.equals(java.lang.Object, java.lang.Object)CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaË Ë(2w
,org.jabref.logic.importer.Importer.getName()CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaË# Ë(*2w
,org.jabref.logic.importer.Importer.getName()CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaË4 Ë(;2ä
?org.jabref.logic.importer.Importer.equals(java.lang.Object)!objCALLA
5src\main\java\org\jabref\logic\importer\Importer.java· ·(2ä
?org.jabref.logic.importer.Importer.equals(java.lang.Object)!objCALLA
5src\main\java\org\jabref\logic\importer\Importer.java‰ ‰(2ä
?org.jabref.logic.importer.Importer.equals(java.lang.Object)!objCALLA
5src\main\java\org\jabref\logic\importer\Importer.javaÁ$ Á('2ö
Oorg.jabref.logic.importer.Importer.equals(java.lang.Object)?other@231.17:231.22CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaË. Ë(32è
?org.jabref.logic.importer.Importer.equals(java.lang.Object)!obj	PARAMETERA
5src\main\java\org\jabref\logic\importer\Importer.java‡! ‡($2°
Oorg.jabref.logic.importer.Importer.equals(java.lang.Object)?other@231.17:231.22DECLARATIONA
5src\main\java\org\jabref\logic\importer\Importer.javaÁ Á(2Y
booleanRETURN_TYPEA
5src\main\java\org\jabref\logic\importer\Importer.java‡ ‡(ª
Oorg.jabref.logic.importer.Importer.equals(java.lang.Object)?other@231.17:231.22VARIABLEA
5src\main\java\org\jabref\logic\importer\Importer.javaÁ Á("
typeImporter"
isFinalfalse"t
declarationString_<mark class="modifier"> </mark>Importer <mark class="class-field">other</mark> = (Importer) obj*other2m
"org.jabref.logic.importer.ImporterTYPEA
5src\main\java\org\jabref\logic\importer\Importer.javaÁ Á(2ä
?org.jabref.logic.importer.Importer.equals(java.lang.Object)!objCALLA
5src\main\java\org\jabref\logic\importer\Importer.javaÁ$ Á('¥
?org.jabref.logic.importer.Importer.equals(java.lang.Object)!obj	PARAMETERA
5src\main\java\org\jabref\logic\importer\Importer.java‡! ‡($"
typeObject"
isFinalfalse"
declarationString
Object obj*obj2[
java.lang.ObjectTYPEA
5src\main\java\org\jabref\logic\importer\Importer.java‡ ‡( ÷
-org.jabref.logic.importer.Importer.toString()METHODA
5src\main\java\org\jabref\logic\importer\Importer.javaÏ Ï("
isFinalfalse"ñ
declarationStringÄ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>String <mark class="method">toString</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*toString2w
,org.jabref.logic.importer.Importer.getName()CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaÌ Ì(2b
java.lang.StringRETURN_TYPEA
5src\main\java\org\jabref\logic\importer\Importer.javaÏ Ï(«	
Porg.jabref.logic.importer.Importer.compareTo(org.jabref.logic.importer.Importer)METHODA
5src\main\java\org\jabref\logic\importer\Importer.javaÒ Ò("
isFinalfalse"º
declarationString¶<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark><mark class="modifier">int</mark> <mark class="method">compareTo</mark>(Importer o)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeint*	compareTo2w
,java.lang.String.compareTo(java.lang.String)CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaÚ Ú("2w
,org.jabref.logic.importer.Importer.getName()CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaÚ Ú(2w
,org.jabref.logic.importer.Importer.getName()CALLA
5src\main\java\org\jabref\logic\importer\Importer.javaÚ% Ú(,2ù
Rorg.jabref.logic.importer.Importer.compareTo(org.jabref.logic.importer.Importer)!oCALLA
5src\main\java\org\jabref\logic\importer\Importer.javaÚ# Ú($2¢
Rorg.jabref.logic.importer.Importer.compareTo(org.jabref.logic.importer.Importer)!o	PARAMETERA
5src\main\java\org\jabref\logic\importer\Importer.javaÒ" Ò(#2U
intRETURN_TYPEA
5src\main\java\org\jabref\logic\importer\Importer.javaÒ Ò(Ÿ
Rorg.jabref.logic.importer.Importer.compareTo(org.jabref.logic.importer.Importer)!o	PARAMETERA
5src\main\java\org\jabref\logic\importer\Importer.javaÒ" Ò(#"
typeImporter"
isFinalfalse"
declarationString
Importer o*o2m
"org.jabref.logic.importer.ImporterTYPEA
5src\main\java\org\jabref\logic\importer\Importer.javaÒ Ò(!â
5org.jabref.logic.importer.Importer?LOGGER@30.32:30.38VALUE?
5src\main\java\org\jabref\logic\importer\Importer.java  (&"
isFinaltrue"
typeLogger"ﬁ
declarationString»<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>Logger <mark class="class-field">LOGGER</mark> = LoggerFactory.getLogger(Importer.class);"
isStatictrue"
accessprivate*LOGGER2Y
org.slf4j.LoggerTYPE?
5src\main\java\org\jabref\logic\importer\Importer.java (