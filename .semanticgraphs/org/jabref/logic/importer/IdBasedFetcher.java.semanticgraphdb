
;src\main\java\org\jabref\logic\importer\IdBasedFetcher.java¾
(org.jabref.logic.importer.IdBasedFetcherTRAITE
;src\main\java\org\jabref\logic\importer\IdBasedFetcher.java
 
("$
packageorg.jabref.logic.importer"
isFinalfalse"
inner classfalse"

isAbstractfalse"¢
declarationStringŒ<mark class="modifier">public </mark><mark class="modifier">interface </mark>IdBasedFetcher<mark class="modifier"> extends </mark>WebFetcher"
accesspublic*IdBasedFetcher2¢
Lorg.jabref.logic.importer.IdBasedFetcher.performSearchById(java.lang.String)DECLARATIONE
;src\main\java\org\jabref\logic\importer\IdBasedFetcher.java ((2u
$org.jabref.logic.importer.WebFetcherEXTENDE
;src\main\java\org\jabref\logic\importer\IdBasedFetcher.java
( 
(2ž
Lorg.jabref.logic.importer.IdBasedFetcher.performSearchById(java.lang.String)METHODE
;src\main\java\org\jabref\logic\importer\IdBasedFetcher.java (("
isFinalfalse"â
declarationStringÌ<mark class="modifier"> </mark>Optional&lt;BibEntry&gt; <mark class="method">performSearchById</mark>(String identifier)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typeOptional<BibEntry>*performSearchById2«
Worg.jabref.logic.importer.IdBasedFetcher.performSearchById(java.lang.String)!identifier	PARAMETERE
;src\main\java\org\jabref\logic\importer\IdBasedFetcher.java0 (:2h
java.util.OptionalRETURN_TYPEE
;src\main\java\org\jabref\logic\importer\IdBasedFetcher.java (2~
org.jabref.model.entry.BibEntryRETURN_TYPE_ARGUMENTE
;src\main\java\org\jabref\logic\importer\IdBasedFetcher.java (â
Worg.jabref.logic.importer.IdBasedFetcher.performSearchById(java.lang.String)!identifier	PARAMETERE
;src\main\java\org\jabref\logic\importer\IdBasedFetcher.java0 (:"
typeString"
isFinalfalse"&
declarationStringString identifier*
identifier2_
java.lang.StringTYPEE
;src\main\java\org\jabref\logic\importer\IdBasedFetcher.java) (/