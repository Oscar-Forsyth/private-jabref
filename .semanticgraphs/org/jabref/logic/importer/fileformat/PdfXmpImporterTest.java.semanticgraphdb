
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaÿ
7org.jabref.logic.importer.fileformat.PdfXmpImporterTestCLASST
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java ("/
package$org.jabref.logic.importer.fileformat"
isFinalfalse"
inner classfalse"

isAbstractfalse"p
declarationString[<mark class="modifier">public </mark><mark class="modifier">class </mark>PdfXmpImporterTest"
accesspublic*PdfXmpImporterTest2Ø
Jorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.invalidFileNames()DECLARATIONT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java" (22§
?org.jabref.logic.importer.fileformat.PdfXmpImporterTest.setUp()DECLARATIONT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java$ $(2¨
Gorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.getFormatName()DECLARATIONT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java) )(2≠
Horg.jabref.logic.importer.fileformat.PdfXmpImporterTest.sGetExtensions()DECLARATIONT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java. .(2≠
Horg.jabref.logic.importer.fileformat.PdfXmpImporterTest.getDescription()DECLARATIONT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java3 3(2æ
Yorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEncryptedFileReturnsError()DECLARATIONT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java9 9(/2¨
Gorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEntries()DECLARATIONT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java@ @(2±
Lorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.isRecognizedFormat()DECLARATIONT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaN N("2«
borg.jabref.logic.importer.fileformat.PdfXmpImporterTest.isRecognizedFormatReject(java.lang.String)DECLARATIONT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaU U((2Ø
Jorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.getCommandLineId()DECLARATIONT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaZ Z( 2±
Lorg.jabref.logic.importer.fileformat.PdfXmpImporterTest?importer@28.27:28.35DECLARATIONT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java (#˛
Jorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.invalidFileNames()METHODT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java" (2"
isFinalfalse"Û
declarationString›<mark class="modifier">private </mark><mark class="modifier">static </mark>Stream&lt;String&gt; <mark class="method">invalidFileNames</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStatictrue"
accessprivate"

isAbstractfalse"
typeStream<String>*invalidFileNames2è
1java.lang.String.contains(java.lang.CharSequence)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java3 (;2{
java.util.Collection.stream()CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java 9  (?2“
torg.jabref.logic.importer.fileformat.ImporterTestEngine.getTestFiles(java.util.function.Predicate<java.lang.String>)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java "  (.2π
[org.jabref.logic.importer.fileformat.PdfXmpImporterTest.invalidFileNames()?name@31.37:31.41CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java. (22Ω
_org.jabref.logic.importer.fileformat.PdfXmpImporterTest.invalidFileNames()?fileName@31.26:31.34CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java /  (72ƒ
_org.jabref.logic.importer.fileformat.PdfXmpImporterTest.invalidFileNames()?fileName@31.26:31.34DECLARATIONT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java ("2¿
[org.jabref.logic.importer.fileformat.PdfXmpImporterTest.invalidFileNames()?name@31.37:31.41DECLARATIONT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java% ()2|
java.util.stream.StreamRETURN_TYPET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java (2~
java.lang.StringRETURN_TYPE_ARGUMENTT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java ( ÿ
_org.jabref.logic.importer.fileformat.PdfXmpImporterTest.invalidFileNames()?fileName@31.26:31.34VARIABLET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java (""
typePredicate<String>"
isFinalfalse"ö
declarationStringÑ<mark class="modifier"> </mark>Predicate<String> <mark class="class-field">fileName</mark> = name -> !name.contains("annotated.pdf")*fileName2z
java.util.function.PredicateTYPET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java (2w
java.lang.StringTYPE_ARGUMENTT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java (2è
1java.lang.String.contains(java.lang.CharSequence)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java3 (;2π
[org.jabref.logic.importer.fileformat.PdfXmpImporterTest.invalidFileNames()?name@31.37:31.41CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java. (2Å
[org.jabref.logic.importer.fileformat.PdfXmpImporterTest.invalidFileNames()?name@31.37:31.41VARIABLET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java% ()"
type"
isFinalfalse"
declarationString name*name2TYPEÃ
?org.jabref.logic.importer.fileformat.PdfXmpImporterTest.setUp()METHODT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java$ $("
isFinalfalse"±
declarationStringõ<mark class="annotation">@BeforeEach</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">setUp</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*setUp2™
Lorg.jabref.logic.importer.fileformat.PdfXmpImporterTest?importer@28.27:28.35CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java% %(2i
voidRETURN_TYPET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java$ $(¸
Gorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.getFormatName()METHODT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java) )("
isFinalfalse"≥
declarationStringù<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">getFormatName</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*getFormatName2õ
=org.jabref.logic.importer.fileformat.PdfXmpImporter.getName()CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java*3 *(:2™
Lorg.jabref.logic.importer.fileformat.PdfXmpImporterTest?importer@28.27:28.35CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java** *(22i
voidRETURN_TYPET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java) )(É
Horg.jabref.logic.importer.fileformat.PdfXmpImporterTest.sGetExtensions()METHODT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java. .("
isFinalfalse"¥
declarationStringû<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">sGetExtensions</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*sGetExtensions2ü
Aorg.jabref.logic.importer.fileformat.PdfXmpImporter.getFileType()CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java/4 /(?2™
Lorg.jabref.logic.importer.fileformat.PdfXmpImporterTest?importer@28.27:28.35CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java/+ /(32i
voidRETURN_TYPET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java. .(Ü
Horg.jabref.logic.importer.fileformat.PdfXmpImporterTest.getDescription()METHODT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java3 3("
isFinalfalse"¥
declarationStringû<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">getDescription</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*getDescription2¢
Dorg.jabref.logic.importer.fileformat.PdfXmpImporter.getDescription()CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java4Z 4(h2™
Lorg.jabref.logic.importer.fileformat.PdfXmpImporterTest?importer@28.27:28.35CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java4Q 4(Y2i
voidRETURN_TYPET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java3 3(¡
Yorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEncryptedFileReturnsError()METHODT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java9 9(/"
isFinalfalse"‚
declarationStringÃ reader prints warnings to the logger when parsing does not work") <br><mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">importEncryptedFileReturnsError</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>URISyntaxException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*importEncryptedFileReturnsError2Å
#java.nio.file.Path.of(java.net.URI)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java: :(2r
java.net.URL.toURI()CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java:X :(]2ã
-java.lang.Class.getResource(java.lang.String)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java:5 :(@2¥
Vorg.jabref.logic.importer.fileformat.PdfXmpImporter.importDatabase(java.nio.file.Path)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java;' ;(52í
4org.jabref.logic.importer.ParserResult.hasWarnings()CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java< <(%2™
Lorg.jabref.logic.importer.fileformat.PdfXmpImporterTest?importer@28.27:28.35CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java; ;(&2»
jorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEncryptedFileReturnsError()?file@58.13:58.17CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java;6 ;(:2 
lorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEncryptedFileReturnsError()?result@59.21:59.27CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java< <(2œ
jorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEncryptedFileReturnsError()?file@58.13:58.17DECLARATIONT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java: :(2—
lorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEncryptedFileReturnsError()?result@59.21:59.27DECLARATIONT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java; ;(2i
voidRETURN_TYPET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java9 9(õ
jorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEncryptedFileReturnsError()?file@58.13:58.17VARIABLET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java: :("
typePath"
isFinalfalse"Æ
declarationStringò<mark class="modifier"> </mark>Path <mark class="class-field">file</mark> = Path.of(PdfXmpImporterTest.class.getResource("/pdfs/encrypted.pdf").toURI())*file2p
java.nio.file.PathTYPET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java: :(2Å
#java.nio.file.Path.of(java.net.URI)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java: :(2r
java.net.URL.toURI()CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java:X :(]2ã
-java.lang.Class.getResource(java.lang.String)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java:5 :(@ø
lorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEncryptedFileReturnsError()?result@59.21:59.27VARIABLET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java; ;("
typeParserResult"
isFinalfalse"à
declarationStrings<mark class="modifier"> </mark>ParserResult <mark class="class-field">result</mark> = importer.importDatabase(file)*result2Ñ
&org.jabref.logic.importer.ParserResultTYPET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java; ;(2¥
Vorg.jabref.logic.importer.fileformat.PdfXmpImporter.importDatabase(java.nio.file.Path)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java;' ;(52™
Lorg.jabref.logic.importer.fileformat.PdfXmpImporterTest?importer@28.27:28.35CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java; ;(&2»
jorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEncryptedFileReturnsError()?file@58.13:58.17CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java;6 ;(:˛%
Gorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEntries()METHODT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java@ @("
isFinalfalse"â
declarationStringÛ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">importEntries</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>URISyntaxException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*importEntries2Å
#java.nio.file.Path.of(java.net.URI)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaA A(2r
java.net.URL.toURI()CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaAR A(W2ã
-java.lang.Class.getResource(java.lang.String)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaA5 A(@2ê
2org.jabref.model.database.BibDatabase.getEntries()CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaBP B(Z2í
4org.jabref.logic.importer.ParserResult.getDatabase()CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaBB B(M2¥
Vorg.jabref.logic.importer.fileformat.PdfXmpImporter.importDatabase(java.nio.file.Path)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaB- B(;2s
java.util.List.size()CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaD# D('2v
java.util.Optional.of(T)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaG G( 2™
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaG? G(G2v
java.util.Optional.of(T)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaH H( 2™
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaH/ H(72v
java.util.Optional.of(T)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaI I( 2™
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaI9 I(A2v
java.util.Optional.of(T)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaJ J( 2™
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaJ; J(C2™
Lorg.jabref.logic.importer.fileformat.PdfXmpImporterTest?importer@28.27:28.35CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaB$ B(,2∂
Xorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEntries()?file@65.13:65.17CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaB< B(@2º
^org.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEntries()?bibEntries@66.23:66.33CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaD D("2º
^org.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEntries()?bibEntries@66.23:66.33CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaF F(!2µ
Worg.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEntries()?be0@70.17:70.20CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaG; G(>2µ
Worg.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEntries()?be0@70.17:70.20CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaH+ H(.2µ
Worg.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEntries()?be0@70.17:70.20CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaI5 I(82µ
Worg.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEntries()?be0@70.17:70.20CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaJ7 J(:2Ω
Xorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEntries()?file@65.13:65.17DECLARATIONT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaA A(2√
^org.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEntries()?bibEntries@66.23:66.33DECLARATIONT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaB B(!2º
Worg.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEntries()?be0@70.17:70.20DECLARATIONT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaF F(2i
voidRETURN_TYPET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java@ @(É
Xorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEntries()?file@65.13:65.17VARIABLET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaA A("
typePath"
isFinalfalse"®
declarationStringí<mark class="modifier"> </mark>Path <mark class="class-field">file</mark> = Path.of(PdfXmpImporterTest.class.getResource("annotated.pdf").toURI())*file2p
java.nio.file.PathTYPET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaA A(2Å
#java.nio.file.Path.of(java.net.URI)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaA A(2r
java.net.URL.toURI()CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaAR A(W2ã
-java.lang.Class.getResource(java.lang.String)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaA5 A(@ﬂ
^org.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEntries()?bibEntries@66.23:66.33VARIABLET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaB B(!"
typeList<BibEntry>"
isFinalfalse"™
declarationStringî<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">bibEntries</mark> = importer.importDatabase(file).getDatabase().getEntries()*
bibEntries2l
java.util.ListTYPET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaB B(2Ü
org.jabref.model.entry.BibEntryTYPE_ARGUMENTT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaB B(2ê
2org.jabref.model.database.BibDatabase.getEntries()CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaBP B(Z2í
4org.jabref.logic.importer.ParserResult.getDatabase()CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaBB B(M2¥
Vorg.jabref.logic.importer.fileformat.PdfXmpImporter.importDatabase(java.nio.file.Path)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaB- B(;2™
Lorg.jabref.logic.importer.fileformat.PdfXmpImporterTest?importer@28.27:28.35CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaB$ B(,2∂
Xorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEntries()?file@65.13:65.17CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaB< B(@õ
Worg.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEntries()?be0@70.17:70.20VARIABLET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaF F("
typeBibEntry"
isFinalfalse"y
declarationStringd<mark class="modifier"> </mark>BibEntry <mark class="class-field">be0</mark> = bibEntries.getFirst()*be02}
org.jabref.model.entry.BibEntryTYPET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaF F(2º
^org.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEntries()?bibEntries@66.23:66.33CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaF F(!–
Lorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.isRecognizedFormat()METHODT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaN N(""
isFinalfalse"◊
declarationString¡<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">isRecognizedFormat</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException<mark class="modifier"><mark class="modifier">,</mark></mark> URISyntaxException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*isRecognizedFormat2Å
#java.nio.file.Path.of(java.net.URI)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaO O(2r
java.net.URL.toURI()CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaOR O(W2ã
-java.lang.Class.getResource(java.lang.String)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaO5 O(@2∏
Zorg.jabref.logic.importer.fileformat.PdfXmpImporter.isRecognizedFormat(java.nio.file.Path)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaP P(.2™
Lorg.jabref.logic.importer.fileformat.PdfXmpImporterTest?importer@28.27:28.35CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaP P(2ª
]org.jabref.logic.importer.fileformat.PdfXmpImporterTest.isRecognizedFormat()?file@79.13:79.17CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaP/ P(32¬
]org.jabref.logic.importer.fileformat.PdfXmpImporterTest.isRecognizedFormat()?file@79.13:79.17DECLARATIONT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaO O(2i
voidRETURN_TYPET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaN N(à
]org.jabref.logic.importer.fileformat.PdfXmpImporterTest.isRecognizedFormat()?file@79.13:79.17VARIABLET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaO O("
typePath"
isFinalfalse"®
declarationStringí<mark class="modifier"> </mark>Path <mark class="class-field">file</mark> = Path.of(PdfXmpImporterTest.class.getResource("annotated.pdf").toURI())*file2p
java.nio.file.PathTYPET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaO O(2Å
#java.nio.file.Path.of(java.net.URI)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaO O(2r
java.net.URL.toURI()CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaOR O(W2ã
-java.lang.Class.getResource(java.lang.String)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaO5 O(@‰
borg.jabref.logic.importer.fileformat.PdfXmpImporterTest.isRecognizedFormatReject(java.lang.String)METHODT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaU U(("
isFinalfalse"ç
declarationString˜ <br><mark class="annotation">@MethodSource("invalidFileNames")</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">isRecognizedFormatReject</mark>(String fileName)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException<mark class="modifier"><mark class="modifier">,</mark></mark> URISyntaxException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*isRecognizedFormatReject2Ê
áorg.jabref.logic.importer.fileformat.ImporterTestEngine.testIsNotRecognizedFormat(org.jabref.logic.importer.Importer, java.lang.String)CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaV V(42™
Lorg.jabref.logic.importer.fileformat.PdfXmpImporterTest?importer@28.27:28.35CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaV5 V(=2…
korg.jabref.logic.importer.fileformat.PdfXmpImporterTest.isRecognizedFormatReject(java.lang.String)!fileNameCALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaV? V(G2Œ
korg.jabref.logic.importer.fileformat.PdfXmpImporterTest.isRecognizedFormatReject(java.lang.String)!fileName	PARAMETERT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaU0 U(82i
voidRETURN_TYPET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaU U(ê
korg.jabref.logic.importer.fileformat.PdfXmpImporterTest.isRecognizedFormatReject(java.lang.String)!fileName	PARAMETERT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaU0 U(8"
typeString"
isFinalfalse"$
declarationStringString fileName*fileName2n
java.lang.StringTYPET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaU) U(/É
Jorg.jabref.logic.importer.fileformat.PdfXmpImporterTest.getCommandLineId()METHODT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaZ Z( "
isFinalfalse"∂
declarationString†<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">getCommandLineId</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*getCommandLineId2ô
;org.jabref.logic.importer.fileformat.PdfXmpImporter.getId()CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java[% [(*2™
Lorg.jabref.logic.importer.fileformat.PdfXmpImporterTest?importer@28.27:28.35CALLT
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java[ [($2i
voidRETURN_TYPET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.javaZ Z(ë
Lorg.jabref.logic.importer.fileformat.PdfXmpImporterTest?importer@28.27:28.35VARIABLET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java (#"
isFinalfalse"
typePdfXmpImporter"s
declarationString^<mark class="modifier">private </mark>PdfXmpImporter <mark class="class-field">importer</mark>"
isStaticfalse"
accessprivate*importer2ë
3org.jabref.logic.importer.fileformat.PdfXmpImporterTYPET
Jsrc\test\java\org\jabref\logic\importer\fileformat\PdfXmpImporterTest.java (