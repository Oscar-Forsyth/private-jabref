
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.javaÜ
Iorg.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTestCLASSf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java ('"9
package.org.jabref.logic.importer.fetcher.isbntobibtex"
isFinalfalse"
inner classfalse"

isAbstractfalse"∑
declarationString°<mark class="modifier">public </mark><mark class="modifier">class </mark>OpenLibraryIsbnFetcherTest<mark class="modifier"> extends </mark>AbstractIsbnFetcherTest"
accesspublic*OpenLibraryIsbnFetcherTest2»
Qorg.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.setUp()DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java (2À
Torg.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.testName()DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java% %(2‰
morg.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.searchByIdSuccessfulWithShortISBN()DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java+ +(12„
lorg.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.searchByIdSuccessfulWithLongISBN()DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java2 2(02ﬂ
horg.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.authorsAreCorrectlyFormatted()DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java9 9(,2Û
|org.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.isbnNeitherAvailableOnEbookDeNorOrViaOpenLibrary()DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.javaI I(@2´
9org.jabref.logic.importer.fetcher.AbstractIsbnFetcherTestEXTENDf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java0 (GÑ
Qorg.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.setUp()METHODf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java ("
isFinalfalse"±
declarationStringõ<mark class="annotation">@BeforeEach</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">setUp</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*setUp2œ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java (2œ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java (2œ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java (2œ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java (2œ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java (2œ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java (2¿
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java$ (,2{
voidRETURN_TYPEf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java (Ω
Torg.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.testName()METHODf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java% %("
isFinalfalse"∑
declarationString° <br><mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">testName</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*testName2û
.org.jabref.logic.importer.WebFetcher.getName()CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java&, &(32∏
Dorg.jabref.logic.importer.fetcher.AbstractIsbnFetcherTest.testName()OVERRIDEf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java% %(2{
voidRETURN_TYPEf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java% %(ü
morg.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.searchByIdSuccessfulWithShortISBN()METHODf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java+ +(1"
isFinalfalse"§
declarationStringé <br><mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">searchByIdSuccessfulWithShortISBN</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*!searchByIdSuccessfulWithShortISBN2¬
Rorg.jabref.logic.importer.IdBasedParserFetcher.performSearchById(java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java,2 ,(C2à
java.util.Optional.of(T)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java- -( 2˜
Üorg.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.searchByIdSuccessfulWithShortISBN()?fetchedEntry@44.27:44.39CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java-9 -(E2—
]org.jabref.logic.importer.fetcher.AbstractIsbnFetcherTest.searchByIdSuccessfulWithShortISBN()OVERRIDEf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java+ +(12˛
Üorg.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.searchByIdSuccessfulWithShortISBN()?fetchedEntry@44.27:44.39DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java, ,('2{
voidRETURN_TYPEf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java+ +(æ
Üorg.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.searchByIdSuccessfulWithShortISBN()?fetchedEntry@44.27:44.39VARIABLEf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java, ,('"
typeOptional<BibEntry>"
isFinalfalse"ü
declarationStringâ<mark class="modifier"> </mark>Optional<BibEntry> <mark class="class-field">fetchedEntry</mark> = fetcher.performSearchById("0321356683")*fetchedEntry2Ç
java.util.OptionalTYPEf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java, ,(2ò
org.jabref.model.entry.BibEntryTYPE_ARGUMENTf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java, ,(2¬
Rorg.jabref.logic.importer.IdBasedParserFetcher.performSearchById(java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java,2 ,(Cô
lorg.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.searchByIdSuccessfulWithLongISBN()METHODf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java2 2(0"
isFinalfalse"£
declarationStringç <br><mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">searchByIdSuccessfulWithLongISBN</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid* searchByIdSuccessfulWithLongISBN2¬
Rorg.jabref.logic.importer.IdBasedParserFetcher.performSearchById(java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java32 3(C2à
java.util.Optional.of(T)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java4 4( 2ˆ
Öorg.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.searchByIdSuccessfulWithLongISBN()?fetchedEntry@51.27:51.39CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java49 4(E2–
\org.jabref.logic.importer.fetcher.AbstractIsbnFetcherTest.searchByIdSuccessfulWithLongISBN()OVERRIDEf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java2 2(02˝
Öorg.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.searchByIdSuccessfulWithLongISBN()?fetchedEntry@51.27:51.39DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java3 3('2{
voidRETURN_TYPEf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java2 2(¿
Öorg.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.searchByIdSuccessfulWithLongISBN()?fetchedEntry@51.27:51.39VARIABLEf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java3 3('"
typeOptional<BibEntry>"
isFinalfalse"¢
declarationStringå<mark class="modifier"> </mark>Optional<BibEntry> <mark class="class-field">fetchedEntry</mark> = fetcher.performSearchById("9780321356680")*fetchedEntry2Ç
java.util.OptionalTYPEf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java3 3(2ò
org.jabref.model.entry.BibEntryTYPE_ARGUMENTf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java3 3(2¬
Rorg.jabref.logic.importer.IdBasedParserFetcher.performSearchById(java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java32 3(Cê
horg.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.authorsAreCorrectlyFormatted()METHODf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java9 9(,"
isFinalfalse"ò
declarationStringÇ <br><mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">authorsAreCorrectlyFormatted</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*authorsAreCorrectlyFormatted2œ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java@ @(2œ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java? ?(2œ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java> >(2œ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java= =(2œ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java< <(2œ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java; ;(2¬
Rorg.jabref.logic.importer.IdBasedParserFetcher.performSearchById(java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.javaA2 A(C2à
java.util.Optional.of(T)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.javaB B( 2¿
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java:  :((2Ì
}org.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.authorsAreCorrectlyFormatted()?bibEntry@58.17:58.25CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.javaB! B()2Ú
Åorg.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.authorsAreCorrectlyFormatted()?fetchedEntry@65.27:65.39CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.javaB, B(82Ã
Xorg.jabref.logic.importer.fetcher.AbstractIsbnFetcherTest.authorsAreCorrectlyFormatted()OVERRIDEf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java9 9(,2Ù
}org.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.authorsAreCorrectlyFormatted()?bibEntry@58.17:58.25DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java: :(2˘
Åorg.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.authorsAreCorrectlyFormatted()?fetchedEntry@65.27:65.39DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.javaA A('2{
voidRETURN_TYPEf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java9 9(∆
}org.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.authorsAreCorrectlyFormatted()?bibEntry@58.17:58.25VARIABLEf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java: :("
typeBibEntry"
isFinalfalse"„
declarationStringÕ<mark class="modifier"> </mark>BibEntry <mark class="class-field">bibEntry</mark> = new BibEntry(StandardEntryType.Book).withField(StandardField.TITLE, "Repository Eine Einf√ºhrung").withField(StandardField.SUBTITLE, "Eine Einf√ºhrung").withField(StandardField.PUBLISHER, "de Gruyter GmbH, Walter").withField(StandardField.AUTHOR, "Habermann, Hans-Joachim and Leymann, Frank").withField(StandardField.ISBN, "9783110702125").withField(StandardField.YEAR, "2020")*bibEntry2è
org.jabref.model.entry.BibEntryTYPEf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java: :(2œ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java@ @(2œ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java? ?(2œ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java> >(2œ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java= =(2œ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java< <(2œ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java; ;(2¿
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.java:  :((º
Åorg.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.authorsAreCorrectlyFormatted()?fetchedEntry@65.27:65.39VARIABLEf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.javaA A('"
typeOptional<BibEntry>"
isFinalfalse"¢
declarationStringå<mark class="modifier"> </mark>Optional<BibEntry> <mark class="class-field">fetchedEntry</mark> = fetcher.performSearchById("9783110702125")*fetchedEntry2Ç
java.util.OptionalTYPEf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.javaA A(2ò
org.jabref.model.entry.BibEntryTYPE_ARGUMENTf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.javaA A(2¬
Rorg.jabref.logic.importer.IdBasedParserFetcher.performSearchById(java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.javaA2 A(C‚
|org.jabref.logic.importer.fetcher.isbntobibtex.OpenLibraryIsbnFetcherTest.isbnNeitherAvailableOnEbookDeNorOrViaOpenLibrary()METHODf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.javaI I(@"
isFinalfalse"£
declarationStringç<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">isbnNeitherAvailableOnEbookDeNorOrViaOpenLibrary</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*0isbnNeitherAvailableOnEbookDeNorOrViaOpenLibrary2¬
Rorg.jabref.logic.importer.IdBasedParserFetcher.performSearchById(java.lang.String)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.javaLA L(R2{
voidRETURN_TYPEf
\src\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\OpenLibraryIsbnFetcherTest.javaI I(