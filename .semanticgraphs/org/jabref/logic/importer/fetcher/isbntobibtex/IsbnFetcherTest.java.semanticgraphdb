
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java˛
>org.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTestCLASS[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java ("9
package.org.jabref.logic.importer.fetcher.isbntobibtex"
isFinalfalse"
inner classfalse"

isAbstractfalse"ô
declarationStringÉ<mark class="annotation">@FetcherTest</mark> <br><mark class="modifier"> </mark><mark class="modifier">class </mark>IsbnFetcherTest"
accesspackage_private*IsbnFetcherTest2≤
Forg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.setUp()DECLARATION[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java	 (2±
Eorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.name()DECLARATION[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java/	 /(2Œ
borg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByIdSuccessfulWithShortISBN()DECLARATION[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java4	 4(*2Õ
aorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByIdSuccessfulWithLongISBN()DECLARATION[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java:	 :()2–
dorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByIdReturnsEmptyWithEmptyISBN()DECLARATION[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java@	 @(,2Ÿ
morg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByIdThrowsExceptionForShortInvalidISBN()DECLARATION[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaF	 F(52◊
korg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByIdThrowsExceptionForLongInvalidISB()DECLARATION[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaK	 K(32‘
horg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByIdThrowsExceptionForInvalidISBN()DECLARATION[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaP	 P(02Ã
`org.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByEntryWithISBNSuccessful()DECLARATION[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaU	 U((2€
oorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchForIsbnAvailableAtOttoBibButNonOnEbookDe()DECLARATION[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaa	 a(72æ
Rorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?fetcher@26.24:26.31DECLARATION[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java (2ø
Sorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?bibEntry@27.21:27.29DECLARATION[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java (⁄
Forg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.setUp()METHOD[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java	 ("
isFinalfalse"´
declarationStringï<mark class="annotation">@BeforeEach</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">setUp</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*setUp2ƒ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java+ +(2ƒ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java* *(2ƒ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java) )(2ƒ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java( ((2ƒ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java' '(2ƒ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java& &(2ƒ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java% %(2ƒ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java$ $(2ƒ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java# #(2ƒ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java" "(2µ
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java! !(2≠
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java) )(+2∑
Rorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?fetcher@26.24:26.31CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java (2∏
Sorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?bibEntry@27.21:27.29CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java! !(2p
voidRETURN_TYPE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java (î
Eorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.name()METHOD[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java/	 /("
isFinalfalse"§
declarationStringé<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">name</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*name2©
Dorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcher.getName()CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java0% 0(,2∑
Rorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?fetcher@26.24:26.31CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java0 0($2p
voidRETURN_TYPE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java/ /(‡
borg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByIdSuccessfulWithShortISBN()METHOD[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java4	 4(*"
isFinalfalse"ï
declarationStringˇ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchByIdSuccessfulWithShortISBN</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*!searchByIdSuccessfulWithShortISBN2√
^org.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcher.performSearchById(java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java52 5(C2}
java.util.Optional.of(T)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java6 6( 2∑
Rorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?fetcher@26.24:26.31CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java5* 5(12∏
Sorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?bibEntry@27.21:27.29CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java6! 6()2‡
{org.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByIdSuccessfulWithShortISBN()?fetchedEntry@53.27:53.39CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java6, 6(82Á
{org.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByIdSuccessfulWithShortISBN()?fetchedEntry@53.27:53.39DECLARATION[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java5 5('2p
voidRETURN_TYPE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java4 4(À
{org.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByIdSuccessfulWithShortISBN()?fetchedEntry@53.27:53.39VARIABLE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java5 5('"
typeOptional<BibEntry>"
isFinalfalse"ü
declarationStringâ<mark class="modifier"> </mark>Optional<BibEntry> <mark class="class-field">fetchedEntry</mark> = fetcher.performSearchById("0134685997")*fetchedEntry2w
java.util.OptionalTYPE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java5 5(2ç
org.jabref.model.entry.BibEntryTYPE_ARGUMENT[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java5 5(2√
^org.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcher.performSearchById(java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java52 5(C2∑
Rorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?fetcher@26.24:26.31CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java5* 5(1€
aorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByIdSuccessfulWithLongISBN()METHOD[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java:	 :()"
isFinalfalse"î
declarationString˛<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchByIdSuccessfulWithLongISBN</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid* searchByIdSuccessfulWithLongISBN2√
^org.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcher.performSearchById(java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java;2 ;(C2}
java.util.Optional.of(T)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java< <( 2∑
Rorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?fetcher@26.24:26.31CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java;* ;(12∏
Sorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?bibEntry@27.21:27.29CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java<! <()2ﬂ
zorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByIdSuccessfulWithLongISBN()?fetchedEntry@59.27:59.39CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java<, <(82Ê
zorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByIdSuccessfulWithLongISBN()?fetchedEntry@59.27:59.39DECLARATION[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java; ;('2p
voidRETURN_TYPE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java: :(Õ
zorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByIdSuccessfulWithLongISBN()?fetchedEntry@59.27:59.39VARIABLE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java; ;('"
typeOptional<BibEntry>"
isFinalfalse"¢
declarationStringå<mark class="modifier"> </mark>Optional<BibEntry> <mark class="class-field">fetchedEntry</mark> = fetcher.performSearchById("9780134685991")*fetchedEntry2w
java.util.OptionalTYPE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java; ;(2ç
org.jabref.model.entry.BibEntryTYPE_ARGUMENT[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java; ;(2√
^org.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcher.performSearchById(java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java;2 ;(C2∑
Rorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?fetcher@26.24:26.31CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java;* ;(1±
dorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByIdReturnsEmptyWithEmptyISBN()METHOD[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java@	 @(,"
isFinalfalse"ó
declarationStringÅ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchByIdReturnsEmptyWithEmptyISBN</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*#searchByIdReturnsEmptyWithEmptyISBN2√
^org.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcher.performSearchById(java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaA2 A(C2
java.util.Optional.empty()CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaB B(#2∑
Rorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?fetcher@26.24:26.31CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaA* A(12‚
}org.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByIdReturnsEmptyWithEmptyISBN()?fetchedEntry@65.27:65.39CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaB' B(32È
}org.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByIdReturnsEmptyWithEmptyISBN()?fetchedEntry@65.27:65.39DECLARATION[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaA A('2p
voidRETURN_TYPE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java@ @(¬
}org.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByIdReturnsEmptyWithEmptyISBN()?fetchedEntry@65.27:65.39VARIABLE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaA A('"
typeOptional<BibEntry>"
isFinalfalse"î
declarationString<mark class="modifier"> </mark>Optional<BibEntry> <mark class="class-field">fetchedEntry</mark> = fetcher.performSearchById("")*fetchedEntry2w
java.util.OptionalTYPE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaA A(2ç
org.jabref.model.entry.BibEntryTYPE_ARGUMENT[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaA A(2√
^org.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcher.performSearchById(java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaA2 A(C2∑
Rorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?fetcher@26.24:26.31CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaA* A(1¶
morg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByIdThrowsExceptionForShortInvalidISBN()METHOD[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaF	 F(5"
isFinalfalse"Ã
declarationString∂<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchByIdThrowsExceptionForShortInvalidISBN</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*,searchByIdThrowsExceptionForShortInvalidISBN2√
^org.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcher.performSearchById(java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaG; G(L2∑
Rorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?fetcher@26.24:26.31CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaG3 G(:2p
voidRETURN_TYPE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaF F(†
korg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByIdThrowsExceptionForLongInvalidISB()METHOD[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaK	 K(3"
isFinalfalse" 
declarationString¥<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchByIdThrowsExceptionForLongInvalidISB</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid**searchByIdThrowsExceptionForLongInvalidISB2√
^org.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcher.performSearchById(java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaL; L(L2∑
Rorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?fetcher@26.24:26.31CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaL3 L(:2p
voidRETURN_TYPE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaK K(ó
horg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByIdThrowsExceptionForInvalidISBN()METHOD[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaP	 P(0"
isFinalfalse"«
declarationString±<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchByIdThrowsExceptionForInvalidISBN</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*'searchByIdThrowsExceptionForInvalidISBN2√
^org.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcher.performSearchById(java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaQ; Q(L2∑
Rorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?fetcher@26.24:26.31CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaQ3 Q(:2p
voidRETURN_TYPE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaP P(Ñ
`org.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByEntryWithISBNSuccessful()METHOD[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaU	 U(("
isFinalfalse"ì
declarationString˝<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchByEntryWithISBNSuccessful</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*searchByEntryWithISBNSuccessful2ƒ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaV( V(12Œ
iorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcher.performSearch(org.jabref.model.entry.BibEntry)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaX. X(;2ã
&java.util.Collections.singletonList(T)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaY! Y(.2è
*org.jabref.model.entry.BibEntry.BibEntry()CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaV V(%2∑
Rorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?fetcher@26.24:26.31CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaX& X(-2◊
rorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByEntryWithISBNSuccessful()?input@86.17:86.22CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaX< X(A2∏
Sorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?bibEntry@27.21:27.29CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaY/ Y(72ﬁ
yorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByEntryWithISBNSuccessful()?fetchedEntry@88.23:88.35CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaY: Y(F2ﬁ
rorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByEntryWithISBNSuccessful()?input@86.17:86.22DECLARATION[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaV V(2Â
yorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByEntryWithISBNSuccessful()?fetchedEntry@88.23:88.35DECLARATION[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaX X(#2p
voidRETURN_TYPE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaU U(ä
rorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByEntryWithISBNSuccessful()?input@86.17:86.22VARIABLE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaV V("
typeBibEntry"
isFinalfalse"°
declarationStringã<mark class="modifier"> </mark>BibEntry <mark class="class-field">input</mark> = new BibEntry().withField(StandardField.ISBN, "0134685997")*input2Ñ
org.jabref.model.entry.BibEntryTYPE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaV V(2ƒ
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaV( V(12è
*org.jabref.model.entry.BibEntry.BibEntry()CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaV V(%ñ

yorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByEntryWithISBNSuccessful()?fetchedEntry@88.23:88.35VARIABLE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaX X(#"
typeList<BibEntry>"
isFinalfalse"è
declarationStringz<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">fetchedEntry</mark> = fetcher.performSearch(input)*fetchedEntry2s
java.util.ListTYPE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaX X(2ç
org.jabref.model.entry.BibEntryTYPE_ARGUMENT[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaX X(2Œ
iorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcher.performSearch(org.jabref.model.entry.BibEntry)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaX. X(;2∑
Rorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?fetcher@26.24:26.31CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaX& X(-2◊
rorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchByEntryWithISBNSuccessful()?input@86.17:86.22CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaX< X(AÍ
oorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchForIsbnAvailableAtOttoBibButNonOnEbookDe()METHOD[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaa	 a(7"
isFinalfalse"¢
declarationStringå<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchForIsbnAvailableAtOttoBibButNonOnEbookDe</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*.searchForIsbnAvailableAtOttoBibButNonOnEbookDe2√
^org.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcher.performSearchById(java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javab2 b(C2
java.util.Optional.empty()CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javac! c(&2∑
Rorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?fetcher@26.24:26.31CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javab* b(12Ó
àorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchForIsbnAvailableAtOttoBibButNonOnEbookDe()?fetchedEntry@98.27:98.39CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javac* c(62ı
àorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchForIsbnAvailableAtOttoBibButNonOnEbookDe()?fetchedEntry@98.27:98.39DECLARATION[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javab b('2p
voidRETURN_TYPE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javaa a(Ÿ
àorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest.searchForIsbnAvailableAtOttoBibButNonOnEbookDe()?fetchedEntry@98.27:98.39VARIABLE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javab b('"
typeOptional<BibEntry>"
isFinalfalse"ü
declarationStringâ<mark class="modifier"> </mark>Optional<BibEntry> <mark class="class-field">fetchedEntry</mark> = fetcher.performSearchById("3728128155")*fetchedEntry2w
java.util.OptionalTYPE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javab b(2ç
org.jabref.model.entry.BibEntryTYPE_ARGUMENT[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javab b(2√
^org.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcher.performSearchById(java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javab2 b(C2∑
Rorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?fetcher@26.24:26.31CALL[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.javab* b(1§
Rorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?fetcher@26.24:26.31VARIABLE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java ("
isFinalfalse"
typeIsbnFetcher"o
declarationStringZ<mark class="modifier">private </mark>IsbnFetcher <mark class="class-field">fetcher</mark>"
isStaticfalse"
accessprivate*fetcher2ü
:org.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTYPE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java (Ü
Sorg.jabref.logic.importer.fetcher.isbntobibtex.IsbnFetcherTest?bibEntry@27.21:27.29VARIABLE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java ("
isFinalfalse"
typeBibEntry"m
declarationStringX<mark class="modifier">private </mark>BibEntry <mark class="class-field">bibEntry</mark>"
isStaticfalse"
accessprivate*bibEntry2Ñ
org.jabref.model.entry.BibEntryTYPE[
Qsrc\test\java\org\jabref\logic\importer\fetcher\isbntobibtex\IsbnFetcherTest.java (