
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaï
Borg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTestTRAIT_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java
 (*",
package!org.jabref.logic.importer.fetcher"
isFinalfalse"
inner classfalse"

isAbstractfalse"|
declarationStringg<mark class="modifier"> </mark><mark class="modifier">interface </mark>SearchBasedFetcherCapabilityTest"
accesspackage_private* SearchBasedFetcherCapabilityTest2…
Yorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java! !(%2«
Worg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearSearch()DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java5 5(#2Ã
\org.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearRangeSearch()DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaF F((2 
Zorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsJournalSearch()DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java\ \(&2ø
Oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getFetcher()DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javah h(!2√
Sorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getTestAuthors()DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaj j(2√
Sorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getTestJournal()DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javal l(2¿
Porg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getTestYear()DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javan n(Ã1
Yorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()METHOD_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java! !(%"
isFinalfalse"Å
declarationStringÎ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">supportsAuthorSearch</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*supportsAuthorSearch2´
Bjava.lang.Iterable.forEach(java.util.function.Consumer<? super T>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java# #( 2º
Sorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getTestAuthors()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java# #(2µ
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java%- %(:2∏
Oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getFetcher()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java%  %(*2ä
!java.util.StringJoiner.toString()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java%H %(P2’
lorg.jabref.logic.importer.ImportCleanup.doPostCleanup(java.util.Collection<org.jabref.model.entry.BibEntry>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java&8 &(E2≈
\org.jabref.logic.importer.ImportCleanup.targeting(org.jabref.model.database.BibDatabaseMode)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java& &(2Å
java.util.List.isEmpty()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java( (("2´
Bjava.lang.Iterable.forEach(java.util.function.Consumer<? super T>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java) )(2Ö
java.util.Optional.orElse(T)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java*D *(J2µ
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java*% *(-2´
Bjava.lang.Iterable.forEach(java.util.function.Consumer<? super T>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java- -($2º
Sorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getTestAuthors()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java- -(2ö
1java.lang.String.contains(java.lang.CharSequence)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java-T -(\2±
Hjava.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java-l -(s2‘
kjava.util.StringJoiner.StringJoiner(java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java"( "(42€
rorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()?queryBuilder@34.21:34.33CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java%; %(G2’
lorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()?result@37.23:37.29CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java&F &(L2’
lorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()?result@37.23:37.29CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java( ((2’
lorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()?result@37.23:37.29CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java) )(2◊
norg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()?bibEntry@41.23:41.31CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java* *($2’
lorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()?author@42.19:42.25CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java-M -(S2›
torg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()?expectedAuthor@45.37:45.51CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java-] -(k2õ
2java.util.StringJoiner.add(java.lang.CharSequence)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java#! #(22‚
rorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()?queryBuilder@34.21:34.33DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java" "(!2‹
lorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()?result@37.23:37.29DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java% %(2‹
lorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()?author@42.19:42.25DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java* *(2ﬁ
norg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()?bibEntry@41.23:41.31DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java) )(2‰
torg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()?expectedAuthor@45.37:45.51DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java-% -(32t
voidRETURN_TYPE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java! !(’
rorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()?queryBuilder@34.21:34.33VARIABLE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java" "(!"
typeStringJoiner"
isFinalfalse"Â
declarationStringœ<mark class="modifier"> </mark>StringJoiner <mark class="class-field">queryBuilder</mark> = new StringJoiner("\" AND author:\""<mark class="modifier">,</mark> "author:\""<mark class="modifier">,</mark> "\"")*queryBuilder2
java.util.StringJoinerTYPE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java" "(2‘
kjava.util.StringJoiner.StringJoiner(java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java"( "(4ö
lorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()?result@37.23:37.29VARIABLE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java% %("
typeList<BibEntry>"
isFinalfalse"°
declarationStringã<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">result</mark> = getFetcher().performSearch(queryBuilder.toString())*result2w
java.util.ListTYPE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java% %(2ë
org.jabref.model.entry.BibEntryTYPE_ARGUMENT_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java% %(2µ
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java%- %(:2∏
Oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getFetcher()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java%  %(*2ä
!java.util.StringJoiner.toString()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java%H %(P2€
rorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()?queryBuilder@34.21:34.33CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java%; %(G≥
lorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()?author@42.19:42.25VARIABLE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java* *("
typeString"
isFinalfalse"ò
declarationStringÇ<mark class="modifier"> </mark>String <mark class="class-field">author</mark> = bibEntry.getField(StandardField.AUTHOR).orElse("")*author2y
java.lang.StringTYPE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java* *(2Ö
java.util.Optional.orElse(T)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java*D *(J2µ
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java*% *(-2◊
norg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()?bibEntry@41.23:41.31CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java* *($ß
norg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()?bibEntry@41.23:41.31VARIABLE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java) )("
type"
isFinalfalse"
declarationString	 bibEntry*bibEntry2TYPEπ
torg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()?expectedAuthor@45.37:45.51VARIABLE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java-% -(3"
type"
isFinalfalse"$
declarationString expectedAuthor*expectedAuthor2TYPEπ)
Worg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearSearch()METHOD_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java5 5(#"
isFinalfalse"ˇ
declarationStringÈ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">supportsYearSearch</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*supportsYearSearch2µ
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java6- 6(:2∏
Oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getFetcher()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java6  6(*2π
Porg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getTestYear()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java6E 6(P2’
lorg.jabref.logic.importer.ImportCleanup.doPostCleanup(java.util.Collection<org.jabref.model.entry.BibEntry>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java78 7(E2≈
\org.jabref.logic.importer.ImportCleanup.targeting(org.jabref.model.database.BibDatabaseMode)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java7 7(2µ
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java=5 =(<2ã
"java.util.stream.Stream.distinct()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java<5 <(=2π
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java;5 ;(82∞
Gjava.util.stream.Stream.filter(java.util.function.Predicate<? super T>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java:5 :(;2π
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java95 9(82Ü
java.util.Collection.stream()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java85 8(;2µ
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java9N 9(V2ç
$java.util.stream.Collectors.toList()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java=H =(N2è
&java.util.Collections.singletonList(T)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java?! ?(.2Ö
java.lang.Integer.toString()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java?= ?(E2π
Porg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getTestYear()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java?/ ?(:2”
jorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearSearch()?result@54.23:54.29CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java7F 7(L2”
jorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearSearch()?result@54.23:54.29CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java8. 8(42’
lorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearSearch()?bibEntry@57.57:57.65CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java9E 9(M2„
zorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearSearch()?differentYearsInResult@56.21:56.43CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java?J ?(`2á
java.util.Optional.isPresent()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java:< :(O2Å
java.util.Optional.get()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java;9 ;(F2⁄
jorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearSearch()?result@54.23:54.29DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java6 6(2Í
zorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearSearch()?differentYearsInResult@56.21:56.43DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java8 8(+2‹
lorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearSearch()?bibEntry@57.57:57.65DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java99 9(A2t
voidRETURN_TYPE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java5 5(È	
jorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearSearch()?result@54.23:54.29VARIABLE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java6 6("
typeList<BibEntry>"
isFinalfalse"°
declarationStringã<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">result</mark> = getFetcher().performSearch("year:" + getTestYear())*result2w
java.util.ListTYPE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java6 6(2ë
org.jabref.model.entry.BibEntryTYPE_ARGUMENT_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java6 6(2µ
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java6- 6(:2∏
Oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getFetcher()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java6  6(*2π
Porg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getTestYear()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java6E 6(Pø
zorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearSearch()?differentYearsInResult@56.21:56.43VARIABLE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java8 8(+"
typeList<String>"
isFinalfalse"ô
declarationStringÉ<mark class="modifier"> </mark>List<String> <mark class="class-field">differentYearsInResult</mark> = result.stream().map(bibEntry -> bibEntry.getField(StandardField.YEAR)).filter(Optional::isPresent).map(Optional::get).distinct().collect(Collectors.toList())*differentYearsInResult2w
java.util.ListTYPE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java8 8(2Ç
java.lang.StringTYPE_ARGUMENT_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java8 8(2µ
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java=5 =(<2ã
"java.util.stream.Stream.distinct()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java<5 <(=2π
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java;5 ;(82∞
Gjava.util.stream.Stream.filter(java.util.function.Predicate<? super T>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java:5 :(;2π
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java95 9(82Ü
java.util.Collection.stream()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java85 8(;2µ
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java9N 9(V2ç
$java.util.stream.Collectors.toList()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java=H =(N2”
jorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearSearch()?result@54.23:54.29CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java8. 8(42’
lorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearSearch()?bibEntry@57.57:57.65CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java9E 9(M2á
java.util.Optional.isPresent()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java:< :(O2Å
java.util.Optional.get()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java;9 ;(F•
lorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearSearch()?bibEntry@57.57:57.65VARIABLE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java99 9(A"
type"
isFinalfalse"
declarationString	 bibEntry*bibEntry2TYPE«-
\org.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearRangeSearch()METHOD_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaF F(("
isFinalfalse"Ñ
declarationStringÓ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">supportsYearRangeSearch</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*supportsYearRangeSearch2É
java.util.List.of(E, E, E)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaG- G(/2µ
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaI- I(:2∏
Oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getFetcher()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaI  I(*2’
lorg.jabref.logic.importer.ImportCleanup.doPostCleanup(java.util.Collection<org.jabref.model.entry.BibEntry>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaJ8 J(E2≈
\org.jabref.logic.importer.ImportCleanup.targeting(org.jabref.model.database.BibDatabaseMode)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaJ J(2µ
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaP5 P(<2ã
"java.util.stream.Stream.distinct()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaO5 O(=2π
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaN5 N(82∞
Gjava.util.stream.Stream.filter(java.util.function.Predicate<? super T>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaM5 M(;2π
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaL5 L(82Ü
java.util.Collection.stream()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaK5 K(;2µ
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaLN L(V2ç
$java.util.stream.Collectors.toList()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaPH P(N2Å
java.util.List.isEmpty()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaQ Q("2µ
Ljava.util.List.containsAll(java.util.Collection<? extends java.lang.Object>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaR$ R(/2ÿ
oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearRangeSearch()?result@73.23:73.29CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaJF J(L2ÿ
oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearRangeSearch()?result@73.23:73.29CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaK. K(42⁄
qorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearRangeSearch()?bibEntry@76.57:76.65CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaLE L(M2ÿ
oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearRangeSearch()?result@73.23:73.29CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaQ Q(2‚
yorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearRangeSearch()?yearsInYearRange@71.21:71.37CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaR R(#2Ë
org.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearRangeSearch()?differentYearsInResult@75.21:75.43CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaR0 R(F2á
java.util.Optional.isPresent()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaM< M(O2Å
java.util.Optional.get()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaN9 N(F2È
yorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearRangeSearch()?yearsInYearRange@71.21:71.37DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaG G(%2ﬂ
oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearRangeSearch()?result@73.23:73.29DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaI I(2Ô
org.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearRangeSearch()?differentYearsInResult@75.21:75.43DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaK K(+2·
qorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearRangeSearch()?bibEntry@76.57:76.65DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaL9 L(A2t
voidRETURN_TYPE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaF F(¯
yorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearRangeSearch()?yearsInYearRange@71.21:71.37VARIABLE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaG G(%"
typeList<String>"
isFinalfalse"—
declarationStringª<mark class="modifier"> </mark>List<String> <mark class="class-field">yearsInYearRange</mark> = List.of("2018"<mark class="modifier">,</mark> "2019"<mark class="modifier">,</mark> "2020")*yearsInYearRange2w
java.util.ListTYPE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaG G(2Ç
java.lang.StringTYPE_ARGUMENT_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaG G(2É
java.util.List.of(E, E, E)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaG- G(/±
oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearRangeSearch()?result@73.23:73.29VARIABLE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaI I("
typeList<BibEntry>"
isFinalfalse"†
declarationStringä<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">result</mark> = getFetcher().performSearch("year-range:2018-2020")*result2w
java.util.ListTYPE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaI I(2ë
org.jabref.model.entry.BibEntryTYPE_ARGUMENT_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaI I(2µ
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaI- I(:2∏
Oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getFetcher()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaI  I(*Œ
org.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearRangeSearch()?differentYearsInResult@75.21:75.43VARIABLE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaK K(+"
typeList<String>"
isFinalfalse"ô
declarationStringÉ<mark class="modifier"> </mark>List<String> <mark class="class-field">differentYearsInResult</mark> = result.stream().map(bibEntry -> bibEntry.getField(StandardField.YEAR)).filter(Optional::isPresent).map(Optional::get).distinct().collect(Collectors.toList())*differentYearsInResult2w
java.util.ListTYPE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaK K(2Ç
java.lang.StringTYPE_ARGUMENT_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaK K(2µ
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaP5 P(<2ã
"java.util.stream.Stream.distinct()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaO5 O(=2π
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaN5 N(82∞
Gjava.util.stream.Stream.filter(java.util.function.Predicate<? super T>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaM5 M(;2π
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaL5 L(82Ü
java.util.Collection.stream()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaK5 K(;2µ
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaLN L(V2ç
$java.util.stream.Collectors.toList()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaPH P(N2ÿ
oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearRangeSearch()?result@73.23:73.29CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaK. K(42⁄
qorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearRangeSearch()?bibEntry@76.57:76.65CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaLE L(M2á
java.util.Optional.isPresent()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaM< M(O2Å
java.util.Optional.get()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaN9 N(F™
qorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearRangeSearch()?bibEntry@76.57:76.65VARIABLE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaL9 L(A"
type"
isFinalfalse"
declarationString	 bibEntry*bibEntry2TYPEÑ'
Zorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsJournalSearch()METHOD_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java\ \(&"
isFinalfalse"Ç
declarationStringÏ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">supportsJournalSearch</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*supportsJournalSearch2µ
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java]- ](:2∏
Oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getFetcher()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java]  ](*2º
Sorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getTestJournal()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java]J ](X2’
lorg.jabref.logic.importer.ImportCleanup.doPostCleanup(java.util.Collection<org.jabref.model.entry.BibEntry>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java^8 ^(E2≈
\org.jabref.logic.importer.ImportCleanup.targeting(org.jabref.model.database.BibDatabaseMode)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java^ ^(2Å
java.util.List.isEmpty()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java` `("2´
Bjava.lang.Iterable.forEach(java.util.function.Consumer<? super T>)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaa a(2µ
Lorg.jabref.model.entry.BibEntry.hasField(org.jabref.model.entry.field.Field)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javab  b((2Ö
java.util.Optional.orElse(T)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javacF c(L2µ
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javac& c(.2ö
1java.lang.String.contains(java.lang.CharSequence)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javad d('2±
Hjava.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javad9 d(@2º
Sorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getTestJournal()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javad( d(62÷
morg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsJournalSearch()?result@93.23:93.29CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java^F ^(L2÷
morg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsJournalSearch()?result@93.23:93.29CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java` `(2÷
morg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsJournalSearch()?result@93.23:93.29CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaa a(2ÿ
oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsJournalSearch()?bibEntry@97.23:97.31CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javab b(2ÿ
oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsJournalSearch()?bibEntry@97.23:97.31CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javac c(%2◊
norg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsJournalSearch()?journal@99.19:99.26CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javad d(2›
morg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsJournalSearch()?result@93.23:93.29DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java] ](2ﬁ
norg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsJournalSearch()?journal@99.19:99.26DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javac c(2ﬂ
oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsJournalSearch()?bibEntry@97.23:97.31DECLARATION_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaa a(2t
voidRETURN_TYPE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java\ \(˛	
morg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsJournalSearch()?result@93.23:93.29VARIABLE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java] ]("
typeList<BibEntry>"
isFinalfalse"∞
declarationStringö<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">result</mark> = getFetcher().performSearch("journal:\"" + getTestJournal() + "\"")*result2w
java.util.ListTYPE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java] ](2ë
org.jabref.model.entry.BibEntryTYPE_ARGUMENT_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java] ](2µ
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java]- ](:2∏
Oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getFetcher()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java]  ](*2º
Sorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getTestJournal()CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.java]J ](Xπ
norg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsJournalSearch()?journal@99.19:99.26VARIABLE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javac c("
typeString"
isFinalfalse"ö
declarationStringÑ<mark class="modifier"> </mark>String <mark class="class-field">journal</mark> = bibEntry.getField(StandardField.JOURNAL).orElse("")*journal2y
java.lang.StringTYPE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javac c(2Ö
java.util.Optional.orElse(T)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javacF c(L2µ
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javac& c(.2ÿ
oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsJournalSearch()?bibEntry@97.23:97.31CALL_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javac c(%®
oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsJournalSearch()?bibEntry@97.23:97.31VARIABLE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaa a("
type"
isFinalfalse"
declarationString	 bibEntry*bibEntry2TYPE«
Oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getFetcher()METHOD_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javah h(!"
isFinalfalse"o
declarationStringZ<mark class="modifier"> </mark>SearchBasedFetcher <mark class="method">getFetcher</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typeSearchBasedFetcher*
getFetcher2ú
,org.jabref.logic.importer.SearchBasedFetcherRETURN_TYPE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javah h(∫
Sorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getTestAuthors()METHOD_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaj j("
isFinalfalse"s
declarationString^<mark class="modifier"> </mark>List&lt;String&gt; <mark class="method">getTestAuthors</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typeList<String>*getTestAuthors2~
java.util.ListRETURN_TYPE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaj j(2â
java.lang.StringRETURN_TYPE_ARGUMENT_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javaj	 j(ü
Sorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getTestJournal()METHOD_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javal l("
isFinalfalse"g
declarationStringR<mark class="modifier"> </mark>String <mark class="method">getTestJournal</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typeString*getTestJournal2Ä
java.lang.StringRETURN_TYPE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javal l(
ô
Porg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getTestYear()METHOD_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javan n("
isFinalfalse"e
declarationStringP<mark class="modifier"> </mark>Integer <mark class="method">getTestYear</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typeInteger*getTestYear2Å
java.lang.IntegerRETURN_TYPE_
Usrc\test\java\org\jabref\logic\importer\fetcher\SearchBasedFetcherCapabilityTest.javan n(