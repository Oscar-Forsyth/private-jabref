
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java˛
.org.jabref.logic.importer.fetcher.JstorFetcherCLASSK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java$ $(",
package!org.jabref.logic.importer.fetcher"
isFinalfalse"
inner classfalse"

isAbstractfalse"◊
declarationString¡<mark class="modifier">public </mark><mark class="modifier">class </mark>JstorFetcher<mark class="modifier"><br>implements </mark>SearchBasedParserFetcher, FulltextFetcher, IdBasedParserFetcher"
accesspublic*JstorFetcher2h
JstorFetcherDECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java- -(2÷
zorg.jabref.logic.importer.fetcher.JstorFetcher.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java2 2(2∞
Torg.jabref.logic.importer.fetcher.JstorFetcher.getUrlForIdentifier(java.lang.String)DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java9 9("2ñ
:org.jabref.logic.importer.fetcher.JstorFetcher.getParser()DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaN N(2î
8org.jabref.logic.importer.fetcher.JstorFetcher.getName()DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javan n(2∏
\org.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javas s(%2ú
>org.jabref.logic.importer.fetcher.JstorFetcher.getTrustLevel()DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaÜ Ü(#2ª
]org.jabref.logic.importer.fetcher.JstorFetcher.doPostCleanup(org.jabref.model.entry.BibEntry)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaã ã(2õ
?org.jabref.logic.importer.fetcher.JstorFetcher?HOST@38.32:38.36DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java&  &($2¢
Forg.jabref.logic.importer.fetcher.JstorFetcher?SEARCH_HOST@39.32:39.43DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java'  '(+2†
Dorg.jabref.logic.importer.fetcher.JstorFetcher?CITE_HOST@40.32:40.41DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java(  (()2¶
Jorg.jabref.logic.importer.fetcher.JstorFetcher?URL_QUERY_REGEX@41.32:41.47DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java)  )(/2Æ
Rorg.jabref.logic.importer.fetcher.JstorFetcher?importFormatPreferences@43.42:43.65DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java+* +(A2â
2org.jabref.logic.importer.SearchBasedParserFetcherEXTENDK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java$% $(=2Ä
)org.jabref.logic.importer.FulltextFetcherEXTENDK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java$? $(N2Ö
.org.jabref.logic.importer.IdBasedParserFetcherEXTENDK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java$P $(d√
JstorFetcherCONSTRUCTORK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java- -("ì
declarationString~<mark class="modifier">public </mark><mark class="method">JstorFetcher</mark>(ImportFormatPreferences importFormatPreferences)*JstorFetcher2ß
Rorg.jabref.logic.importer.fetcher.JstorFetcher?importFormatPreferences@43.42:43.65CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java. .($2ä
.org.jabref.logic.importer.fetcher.JstorFetcherRETURN_TYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java- -(Ò
importFormatPreferences	PARAMETERK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java-0 -(G"
typeImportFormatPreferences"
isFinalfalse"D
declarationString/ImportFormatPreferences importFormatPreferences*importFormatPreferences2l
ImportFormatPreferencesTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java- -(/Ä
zorg.jabref.logic.importer.fetcher.JstorFetcher.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)METHODK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java2 2("
isFinalfalse"•
declarationStringè<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>URL <mark class="method">getURLForQuery</mark>(QueryNode luceneQuery)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>URISyntaxException<mark class="modifier"><mark class="modifier">,</mark></mark> MalformedURLException<mark class="modifier"><mark class="modifier">,</mark></mark> FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeURL*getURLForQuery2±
\org.jabref.logic.importer.fetcher.transformers.JstorQueryTransformer.JstorQueryTransformer()CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java4- 4(B2õ
Forg.jabref.logic.importer.fetcher.JstorFetcher?SEARCH_HOST@39.32:39.43CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java3/ 3(:2Á
ëorg.jabref.logic.importer.fetcher.JstorFetcher.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)?uriBuilder@51.19:51.29CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java4 4(2‹
Üorg.jabref.logic.importer.fetcher.JstorFetcher.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)!luceneQueryCALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java4Z 4(e2Á
ëorg.jabref.logic.importer.fetcher.JstorFetcher.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)?uriBuilder@51.19:51.29CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java5 5(2◊
~org.jabref.logic.importer.SearchBasedParserFetcher.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)OVERRIDEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java2 2(2·
Üorg.jabref.logic.importer.fetcher.JstorFetcher.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)!luceneQuery	PARAMETERK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java2( 2(32Ó
ëorg.jabref.logic.importer.fetcher.JstorFetcher.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)?uriBuilder@51.19:51.29DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java3 3(2h
java.net.URLRETURN_TYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java2 2(ƒ
ëorg.jabref.logic.importer.fetcher.JstorFetcher.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)?uriBuilder@51.19:51.29VARIABLEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java3 3("
type
URIBuilder"
isFinalfalse"à
declarationStrings<mark class="modifier"> </mark>URIBuilder <mark class="class-field">uriBuilder</mark> = new URIBuilder(SEARCH_HOST)*
uriBuilder2|
'org.apache.http.client.utils.URIBuilderTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java3 3(2õ
Forg.jabref.logic.importer.fetcher.JstorFetcher?SEARCH_HOST@39.32:39.43CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java3/ 3(:“
Üorg.jabref.logic.importer.fetcher.JstorFetcher.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)!luceneQuery	PARAMETERK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java2( 2(3"
type	QueryNode"
isFinalfalse"*
declarationStringQueryNode luceneQuery*luceneQuery2ê
;org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java2 2('ä(
Torg.jabref.logic.importer.fetcher.JstorFetcher.getUrlForIdentifier(java.lang.String)METHODK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java9 9(""
isFinalfalse"É
declarationStringÌ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>URL <mark class="method">getUrlForIdentifier</mark>(String identifier)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeURL*getUrlForIdentifier2Ç
-java.lang.String.startsWith(java.lang.String)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java; ;(!2ù
Hjava.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java<$ <(+2ù
Hjava.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java=$ =(+2î
?java.lang.String.replaceAll(java.lang.String, java.lang.String)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java?  ?(*2Ü
1java.lang.String.contains(java.lang.CharSequence)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaB B(#2w
"java.net.URL.URL(java.lang.String)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaD D(2w
"java.net.URL.URL(java.lang.String)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaG G(2∑
borg.jabref.logic.importer.FetcherException.FetcherException(java.lang.String, java.lang.Throwable)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaI I(&2¥
_org.jabref.logic.importer.fetcher.JstorFetcher.getUrlForIdentifier(java.lang.String)!identifierCALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java; ;(2¥
_org.jabref.logic.importer.fetcher.JstorFetcher.getUrlForIdentifier(java.lang.String)!identifierCALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java< <(2¥
_org.jabref.logic.importer.fetcher.JstorFetcher.getUrlForIdentifier(java.lang.String)!identifierCALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java< <(#2¥
_org.jabref.logic.importer.fetcher.JstorFetcher.getUrlForIdentifier(java.lang.String)!identifierCALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java= =(2¥
_org.jabref.logic.importer.fetcher.JstorFetcher.getUrlForIdentifier(java.lang.String)!identifierCALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java= =(#2¥
_org.jabref.logic.importer.fetcher.JstorFetcher.getUrlForIdentifier(java.lang.String)!identifierCALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java? ?(2¥
_org.jabref.logic.importer.fetcher.JstorFetcher.getUrlForIdentifier(java.lang.String)!identifierCALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java? ?(2ü
Jorg.jabref.logic.importer.fetcher.JstorFetcher?URL_QUERY_REGEX@41.32:41.47CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java?+ ?(:2¥
_org.jabref.logic.importer.fetcher.JstorFetcher.getUrlForIdentifier(java.lang.String)!identifierCALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaB B(2ª
forg.jabref.logic.importer.fetcher.JstorFetcher.getUrlForIdentifier(java.lang.String)?start@58.15:58.20CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaD D($2¥
_org.jabref.logic.importer.fetcher.JstorFetcher.getUrlForIdentifier(java.lang.String)!identifierCALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaD' D(12ª
forg.jabref.logic.importer.fetcher.JstorFetcher.getUrlForIdentifier(java.lang.String)?start@58.15:58.20CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaG G( 2¥
_org.jabref.logic.importer.fetcher.JstorFetcher.getUrlForIdentifier(java.lang.String)!identifierCALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaG0 G(:2∑
borg.jabref.logic.importer.fetcher.JstorFetcher.getUrlForIdentifier(java.lang.String)?e@72.29:72.30CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaIL I(M2≠
Torg.jabref.logic.importer.IdBasedParserFetcher.getUrlForIdentifier(java.lang.String)OVERRIDEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java9 9("2π
_org.jabref.logic.importer.fetcher.JstorFetcher.getUrlForIdentifier(java.lang.String)!identifier	PARAMETERK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java9* 9(42¬
forg.jabref.logic.importer.fetcher.JstorFetcher.getUrlForIdentifier(java.lang.String)?start@58.15:58.20DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java: :(2æ
borg.jabref.logic.importer.fetcher.JstorFetcher.getUrlForIdentifier(java.lang.String)?e@72.29:72.30DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaH H(2h
java.net.URLRETURN_TYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java9 9(‹
forg.jabref.logic.importer.fetcher.JstorFetcher.getUrlForIdentifier(java.lang.String)?start@58.15:58.20VARIABLEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java: :("
typeString"
isFinalfalse"ä
declarationStringu<mark class="modifier"> </mark>String <mark class="class-field">start</mark> = "https://www.jstor.org/citation/text/"*start2e
java.lang.StringTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java: :(ˆ
_org.jabref.logic.importer.fetcher.JstorFetcher.getUrlForIdentifier(java.lang.String)!identifier	PARAMETERK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java9* 9(4"
typeString"
isFinalfalse"&
declarationStringString identifier*
identifier2e
java.lang.StringTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java9# 9()Û
borg.jabref.logic.importer.fetcher.JstorFetcher.getUrlForIdentifier(java.lang.String)?e@72.29:72.30VARIABLEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaH H("
typeIOException"
isFinalfalse""
declarationStringIOException e*e2h
java.io.IOExceptionTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaH H(Õ>
:org.jabref.logic.importer.fetcher.JstorFetcher.getParser()METHODK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaN N("
isFinalfalse"ó
declarationStringÅ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>Parser <mark class="method">getParser</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeParser*	getParser2°
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaRX R(_2s
java.io.BufferedReader.lines()CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaRP R(U2z
%java.util.stream.Collectors.joining()CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaRk R(r2Ç
-java.lang.String.startsWith(java.lang.String)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaU U(2î
?org.jabref.logic.importer.Parser.parseEntries(java.lang.String)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaV V(*2Ä
+org.jabref.logic.net.URLDownload.asString()CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javabB b(J2Ö
0java.lang.StringBuilder.append(java.lang.String)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javac" c((2î
?org.jabref.logic.importer.Parser.parseEntries(java.lang.String)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javae1 e(=2w
"java.lang.StringBuilder.toString()CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaeL e(T2ä
5java.io.BufferedReader.BufferedReader(java.io.Reader)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaQ Q(,2Ø
Zjava.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.nio.charset.Charset)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaR R()2|
'java.lang.StringBuilder.StringBuilder()CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java]2 ](?2ì
>org.jabref.logic.net.URLDownload.URLDownload(java.lang.String)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javab& b(12ï
@java.util.ArrayList.ArrayList(java.util.Collection<? extends E>)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javae e()2≥
^org.jabref.logic.importer.ParseException.ParseException(java.lang.String, java.lang.Throwable)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javag g((2ß
Rorg.jabref.logic.importer.fetcher.JstorFetcher?importFormatPreferences@43.42:43.65CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaP3 P(J2ß
Rorg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?inputStream@79.15:79.26CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaR* R(52†
Korg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?text@81.19:81.23CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaU U(2¢
Morg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?parser@80.25:80.31CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaV V(2†
Korg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?text@81.19:81.23CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaV+ V(/2ß
Rorg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?inputStream@79.15:79.26CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java[+ [(62î
?org.jabref.logic.importer.fetcher.JstorFetcher?HOST@38.32:38.36CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java[> [(B2ü
Jorg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?doc@91.25:91.28CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java^) ^(,2§
Oorg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?elements@94.30:94.38CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java_' _(/2£
Norg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?element@95.29:95.36CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java`  `('2ô
Dorg.jabref.logic.importer.fetcher.JstorFetcher?CITE_HOST@40.32:40.41CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javab2 b(;2û
Iorg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?id@96.27:96.29CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javab> b(@2©
Torg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?stringBuilder@93.30:93.43CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javac c(!2†
Korg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?data@98.27:98.31CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javac) c(-2£
Norg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?entries@89.27:89.34CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javae e(2¢
Morg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?parser@80.25:80.31CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javae* e(02©
Torg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?stringBuilder@93.30:93.43CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javae> e(K2ü
Jorg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?e@102.33:102.34CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javagS g(T2£
Norg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?entries@89.27:89.34CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javai i(2ó
>org.jabref.logic.importer.SearchBasedParserFetcher.getParser()OVERRIDEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaN N(2ì
:org.jabref.logic.importer.IdBasedParserFetcher.getParser()OVERRIDEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaN N(2©
Morg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?parser@80.25:80.31DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaP P(2ß
Korg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?text@81.19:81.23DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaQ Q(2™
Norg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?entries@89.27:89.34DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaY Y("2¶
Jorg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?doc@91.25:91.28DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java[ [(2∞
Torg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?stringBuilder@93.30:93.43DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java] ](+2´
Oorg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?elements@94.30:94.38DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java^ ^(&2™
Norg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?element@95.29:95.36DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java_ _($2•
Iorg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?id@96.27:96.29DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java` `(2ß
Korg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?data@98.27:98.31DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javab b(2Æ
Rorg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?inputStream@79.15:79.26DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaO O(2¶
Jorg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?e@102.33:102.34DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaf! f("2|
 org.jabref.logic.importer.ParserRETURN_TYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaN N(†
Morg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?parser@80.25:80.31VARIABLEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaP P("
typeBibtexParser"
isFinalfalse"î
declarationString<mark class="modifier"> </mark>BibtexParser <mark class="class-field">parser</mark> = new BibtexParser(importFormatPreferences)*parser2Ü
1org.jabref.logic.importer.fileformat.BibtexParserTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaP P(2ß
Rorg.jabref.logic.importer.fetcher.JstorFetcher?importFormatPreferences@43.42:43.65CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaP3 P(Jå
Korg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?text@81.19:81.23VARIABLEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaQ Q("
typeString"
isFinalfalse"ÿ
declarationString¬<mark class="modifier"> </mark>String <mark class="class-field">text</mark> = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8)).lines().collect(Collectors.joining())*text2e
java.lang.StringTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaQ Q(2°
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaRX R(_2s
java.io.BufferedReader.lines()CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaRP R(U2z
%java.util.stream.Collectors.joining()CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaRk R(r2ä
5java.io.BufferedReader.BufferedReader(java.io.Reader)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaQ Q(,2Ø
Zjava.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.nio.charset.Charset)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaR R()2ß
Rorg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?inputStream@79.15:79.26CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaR* R(5´
Norg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?entries@89.27:89.34VARIABLEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaY Y(""
typeList<BibEntry>"
isFinalfalse"k
declarationStringV<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">entries</mark>*entries2c
java.util.ListTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaY Y(2}
org.jabref.model.entry.BibEntryTYPE_ARGUMENTK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaY Y(ƒ
Jorg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?doc@91.25:91.28VARIABLEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java[ [("
typeDocument"
isFinalfalse"≈
declarationStringØ<mark class="modifier"> </mark>Document <mark class="class-field">doc</mark> = Jsoup.parse(inputStream, <mark class="modifier">null</mark><mark class="modifier">,</mark> HOST)*doc2m
org.jsoup.nodes.DocumentTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java[ [(2ß
Rorg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?inputStream@79.15:79.26CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java[+ [(62î
?org.jabref.logic.importer.fetcher.JstorFetcher?HOST@38.32:38.36CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java[> [(B⁄
Torg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?stringBuilder@93.30:93.43VARIABLEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java] ](+"
typeStringBuilder"
isFinalfalse"Ü
declarationStringq<mark class="modifier"> </mark>StringBuilder <mark class="class-field">stringBuilder</mark> = new StringBuilder()*stringBuilder2l
java.lang.StringBuilderTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java] ](2|
'java.lang.StringBuilder.StringBuilder()CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java]2 ](?ò
Oorg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?elements@94.30:94.38VARIABLEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java^ ^(&"
typeList<Element>"
isFinalfalse"º
declarationString¶<mark class="modifier"> </mark>List<Element> <mark class="class-field">elements</mark> = doc.body().getElementsByClass("cite-<mark class="modifier">this</mark>-item")*elements2c
java.util.ListTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java^ ^(2u
org.jsoup.nodes.ElementTYPE_ARGUMENTK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java^ ^(2ü
Jorg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?doc@91.25:91.28CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java^) ^(,ß
Norg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?element@95.29:95.36VARIABLEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java_ _($"
typeElement"
isFinalfalse"d
declarationStringO<mark class="modifier"> </mark>Element <mark class="class-field">element</mark>*element2l
org.jsoup.nodes.ElementTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java_ _(ä
Iorg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?id@96.27:96.29VARIABLEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java` `("
typeString"
isFinalfalse"≤
declarationStringú<mark class="modifier"> </mark>String <mark class="class-field">id</mark> = element.attr("href").replace("citation/info/"<mark class="modifier">,</mark> "")*id2e
java.lang.StringTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java` `(2£
Norg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?element@95.29:95.36CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java`  `('ô
Korg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?data@98.27:98.31VARIABLEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javab b("
typeString"
isFinalfalse"ç
declarationStringx<mark class="modifier"> </mark>String <mark class="class-field">data</mark> = new URLDownload(CITE_HOST + id).asString()*data2e
java.lang.StringTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javab b(2Ä
+org.jabref.logic.net.URLDownload.asString()CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javabB b(J2ì
>org.jabref.logic.net.URLDownload.URLDownload(java.lang.String)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javab& b(12ô
Dorg.jabref.logic.importer.fetcher.JstorFetcher?CITE_HOST@40.32:40.41CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javab2 b(;2û
Iorg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?id@96.27:96.29CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javab> b(@˝
Rorg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?inputStream@79.15:79.26VARIABLEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaO O("
type"
isFinalfalse"!
declarationString inputStream*inputStream2TYPE€
Jorg.jabref.logic.importer.fetcher.JstorFetcher.getParser()?e@102.33:102.34VARIABLEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaf! f(""
typeIOException"
isFinalfalse""
declarationStringIOException e*e2h
java.io.IOExceptionTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaf f( ç
8org.jabref.logic.importer.fetcher.JstorFetcher.getName()METHODK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javan n("
isFinalfalse"î
declarationString<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>String <mark class="method">getName</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*getName2á
.org.jabref.logic.importer.WebFetcher.getName()OVERRIDEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javan n(2á
.org.jabref.logic.importer.WebFetcher.getName()OVERRIDEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javan n(2l
java.lang.StringRETURN_TYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javan n(ö%
\org.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)METHODK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javas s(%"
isFinalfalse"Ñ
declarationStringÓ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>Optional&lt;URL&gt; <mark class="method">findFullText</mark>(BibEntry entry)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeOptional<URL>*findFullText2q
java.util.Optional.isEmpty()CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javat. t(52°
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javat t(2o
java.util.Optional.empty()CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javau u(!2Ä
+org.jabref.logic.net.URLDownload.asString()CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaxO x(W2m
java.util.Optional.get()CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaxH x(K2°
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javax, x(42j
java.util.List.size()CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java} }(2o
java.util.Optional.empty()CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java~ ~(!2o
java.util.Optional.of(T)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaÇ Ç(2ì
>org.jabref.logic.net.URLDownload.URLDownload(java.lang.String)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javax x(%2y
"java.net.URL.URL(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaÇ Ç("2∑
borg.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)!entryCALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javat t(2∑
borg.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)!entryCALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javax& x(+2ƒ
oorg.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)?page@120.15:120.19CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaz# z('2√
norg.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)?doc@122.17:122.20CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java|! |($2»
sorg.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)?elements@124.22:124.30CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java} }(2 
sorg.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)?elements@124.22:124.30CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaÅ Å(2≈
norg.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)?url@129.15:129.18CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaÇ# Ç(&2∞
Worg.jabref.logic.importer.FulltextFetcher.findFullText(org.jabref.model.entry.BibEntry)OVERRIDEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javas s(%2º
borg.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)!entry	PARAMETERK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javas/ s(42À
oorg.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)?page@120.15:120.19DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javax x(2 
norg.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)?doc@122.17:122.20DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaz z(2œ
sorg.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)?elements@124.22:124.30DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java| |(2Ã
norg.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)?url@129.15:129.18DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaÅ Å(2n
java.util.OptionalRETURN_TYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javas s(2q
java.net.URLRETURN_TYPE_ARGUMENTK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javas s(Á	
oorg.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)?page@120.15:120.19VARIABLEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javax x("
typeString"
isFinalfalse"ß
declarationStringë<mark class="modifier"> </mark>String <mark class="class-field">page</mark> = new URLDownload(entry.getField(StandardField.URL).get()).asString()*page2e
java.lang.StringTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javax x(2Ä
+org.jabref.logic.net.URLDownload.asString()CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaxO x(W2m
java.util.Optional.get()CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaxH x(K2°
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javax, x(42ì
>org.jabref.logic.net.URLDownload.URLDownload(java.lang.String)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javax x(%2∑
borg.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)!entryCALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javax& x(+ù
norg.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)?doc@122.17:122.20VARIABLEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaz z("
typeDocument"
isFinalfalse"u
declarationString`<mark class="modifier"> </mark>Document <mark class="class-field">doc</mark> = Jsoup.parse(page)*doc2m
org.jsoup.nodes.DocumentTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaz z(2ƒ
oorg.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)?page@120.15:120.19CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaz# z('∏
sorg.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)?elements@124.22:124.30VARIABLEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java| |("
typeList<Element>"
isFinalfalse"î
declarationString<mark class="modifier"> </mark>List<Element> <mark class="class-field">elements</mark> = doc.getElementsByAttribute("data-doi")*elements2c
java.util.ListTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java| |(2u
org.jsoup.nodes.ElementTYPE_ARGUMENTK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java| |(2√
norg.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)?doc@122.17:122.20CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java|! |($´
norg.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)?url@129.15:129.18VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaÅ Å("
typeString"
isFinalfalse"Ç
declarationStringm<mark class="modifier"> </mark>String <mark class="class-field">url</mark> = elements.getFirst().attr("href")*url2g
java.lang.StringTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaÅ Å(2 
sorg.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)?elements@124.22:124.30CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaÅ Å(Ç
borg.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)!entry	PARAMETERK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javas/ s(4"
typeBibEntry"
isFinalfalse"#
declarationStringBibEntry entry*entry2t
org.jabref.model.entry.BibEntryTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javas& s(.Ã
>org.jabref.logic.importer.fetcher.JstorFetcher.getTrustLevel()METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaÜ Ü(#"
isFinalfalse"ü
declarationStringâ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>TrustLevel <mark class="method">getTrustLevel</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
type
TrustLevel*getTrustLevel2î
9org.jabref.logic.importer.FulltextFetcher.getTrustLevel()OVERRIDEM
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaÜ Ü(#2ä
,org.jabref.logic.importer.fetcher.TrustLevelRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaÜ Ü(á	
]org.jabref.logic.importer.fetcher.JstorFetcher.doPostCleanup(org.jabref.model.entry.BibEntry)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaã ã("
isFinalfalse"≈
declarationStringØ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">doPostCleanup</mark>(BibEntry entry)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*doPostCleanup2º
aorg.jabref.logic.importer.SearchBasedParserFetcher.doPostCleanup(org.jabref.model.entry.BibEntry)OVERRIDEM
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaã ã(2∏
]org.jabref.logic.importer.IdBasedParserFetcher.doPostCleanup(org.jabref.model.entry.BibEntry)OVERRIDEM
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaã ã(2ø
corg.jabref.logic.importer.fetcher.JstorFetcher.doPostCleanup(org.jabref.model.entry.BibEntry)!entry	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaã' ã(,2b
voidRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaã ã(á
corg.jabref.logic.importer.fetcher.JstorFetcher.doPostCleanup(org.jabref.model.entry.BibEntry)!entry	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaã' ã(,"
typeBibEntry"
isFinalfalse"#
declarationStringBibEntry entry*entry2v
org.jabref.model.entry.BibEntryTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.javaã ã(&ó
?org.jabref.logic.importer.fetcher.JstorFetcher?HOST@38.32:38.36VALUEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java&  &($"
isFinaltrue"
typeString"Ã
declarationString∂<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>String <mark class="class-field">HOST</mark> = "https://www.jstor.org";"
isStatictrue"
accessprivate*HOST2e
java.lang.StringTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java& &(¡
Forg.jabref.logic.importer.fetcher.JstorFetcher?SEARCH_HOST@39.32:39.43VALUEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java'  '(+"
isFinaltrue"
typeString"—
declarationStringª<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>String <mark class="class-field">SEARCH_HOST</mark> = HOST + "/open/search";"
isStatictrue"
accessprivate*SEARCH_HOST2e
java.lang.StringTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java' '(2î
?org.jabref.logic.importer.fetcher.JstorFetcher?HOST@38.32:38.36CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java'. '(2æ
Dorg.jabref.logic.importer.fetcher.JstorFetcher?CITE_HOST@40.32:40.41VALUEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java(  (()"
isFinaltrue"
typeString"“
declarationStringº<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>String <mark class="class-field">CITE_HOST</mark> = HOST + "/citation/text/";"
isStatictrue"
accessprivate*	CITE_HOST2e
java.lang.StringTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java( ((2î
?org.jabref.logic.importer.fetcher.JstorFetcher?HOST@38.32:38.36CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java(, ((0≠
Jorg.jabref.logic.importer.fetcher.JstorFetcher?URL_QUERY_REGEX@41.32:41.47VALUEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java)  )(/"
isFinaltrue"
typeString"Ã
declarationString∂<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>String <mark class="class-field">URL_QUERY_REGEX</mark> = "(?<=\\?).*";"
isStatictrue"
accessprivate*URL_QUERY_REGEX2e
java.lang.StringTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java) )(∫
Rorg.jabref.logic.importer.fetcher.JstorFetcher?importFormatPreferences@43.42:43.65VALUEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java+* +(A"
isFinaltrue"
typeImportFormatPreferences"∞
declarationStringö<mark class="modifier">private </mark><mark class="modifier">final </mark>ImportFormatPreferences <mark class="class-field">importFormatPreferences</mark>"
isStaticfalse"
accessprivate*importFormatPreferences2l
ImportFormatPreferencesTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\JstorFetcher.java+ +()