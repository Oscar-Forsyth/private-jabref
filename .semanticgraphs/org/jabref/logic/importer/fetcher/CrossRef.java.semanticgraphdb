
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaº
*org.jabref.logic.importer.fetcher.CrossRefCLASSG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java, ,(",
package!org.jabref.logic.importer.fetcher"
isFinalfalse"
inner classfalse"

isAbstractfalse"ï
declarationStringˇ<mark class="modifier">public </mark><mark class="modifier">class </mark>CrossRef<mark class="modifier"><br>implements </mark>IdParserFetcher&lt;DOI&gt;<mark class="modifier">,</mark> EntryBasedParserFetcher, SearchBasedParserFetcher, IdBasedParserFetcher"
accesspublic*CrossRef2å
4org.jabref.logic.importer.fetcher.CrossRef.getName()DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java3 3(2≤
Zorg.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java8 8(2Œ
vorg.jabref.logic.importer.fetcher.CrossRef.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaE E(2®
Porg.jabref.logic.importer.fetcher.CrossRef.getUrlForIdentifier(java.lang.String)DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaL L("2é
6org.jabref.logic.importer.fetcher.CrossRef.getParser()DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaR R(2±
Yorg.jabref.logic.importer.fetcher.CrossRef.doPostCleanup(org.jabref.model.entry.BibEntry)DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaq q(2≥
[org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javax x('2´
Qorg.jabref.logic.importer.fetcher.CrossRef.toAuthors(kong.unirest.json.JSONArray)DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaò ò(2¢
Horg.jabref.logic.importer.fetcher.CrossRef.convertType(java.lang.String)DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaß ß(!2È
éorg.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java¨ ¨(*2ò
>org.jabref.logic.importer.fetcher.CrossRef.getIdentifierName()DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java« «(#2≠
Sorg.jabref.logic.importer.fetcher.CrossRef.getKeywords(kong.unirest.json.JSONArray)DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÀ À(2ñ
>org.jabref.logic.importer.fetcher.CrossRef?API_URL@46.32:46.39DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java.  .('2¶
Norg.jabref.logic.importer.fetcher.CrossRef?REMOVE_BRACES_FORMATTER@48.47:48.70DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java0/ 0(F2|
)org.jabref.logic.importer.IdParserFetcherEXTENDG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java,! ,(02Ñ
1org.jabref.logic.importer.EntryBasedParserFetcherEXTENDG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java,7 ,(N2Ö
2org.jabref.logic.importer.SearchBasedParserFetcherEXTENDG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java,P ,(h2Å
.org.jabref.logic.importer.IdBasedParserFetcherEXTENDG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java,j ,(~2Ü
%org.jabref.model.entry.identifier.DOIEXTEND_TYPE_ARGUMENTG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java,1 ,(4Ö
4org.jabref.logic.importer.fetcher.CrossRef.getName()METHODG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java3 3("
isFinalfalse"î
declarationString<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>String <mark class="method">getName</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*getName2É
.org.jabref.logic.importer.WebFetcher.getName()OVERRIDEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java3 3(2É
.org.jabref.logic.importer.WebFetcher.getName()OVERRIDEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java3 3(2É
.org.jabref.logic.importer.WebFetcher.getName()OVERRIDEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java3 3(2É
.org.jabref.logic.importer.WebFetcher.getName()OVERRIDEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java3 3(2h
java.lang.StringRETURN_TYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java3 3(∞+
Zorg.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)METHODG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java8 8("
isFinalfalse"û
declarationStringà<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>URL <mark class="method">getURLForEntry</mark>(BibEntry entry)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>URISyntaxException<mark class="modifier"><mark class="modifier">,</mark></mark> MalformedURLException<mark class="modifier"><mark class="modifier">,</mark></mark> FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeURL*getURLForEntry2ï
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java:5 :(>2¶
Uorg.jabref.model.entry.BibEntry.getFieldLatexFree(org.jabref.model.entry.field.Field)CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java: :(2ï
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java;6 ;(?2¶
Uorg.jabref.model.entry.BibEntry.getFieldLatexFree(org.jabref.model.entry.field.Field)CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java; ;(2ï
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java<4 <(=2¶
Uorg.jabref.model.entry.BibEntry.getFieldLatexFree(org.jabref.model.entry.field.Field)CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java< <(2è
>org.jabref.logic.importer.fetcher.CrossRef?API_URL@46.32:46.39CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java9/ 9(62±
`org.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)!entryCALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java: :(2¬
qorg.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)?uriBuilder@57.19:57.29CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java:H :(R2Ω
lorg.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)?title@58.63:58.68CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java:w :(|2±
`org.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)!entryCALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java; ;(2¬
qorg.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)?uriBuilder@57.19:57.29CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java;J ;(T2æ
morg.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)?author@59.64:59.70CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java;r ;(x2±
`org.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)!entryCALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java< <(2¬
qorg.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)?uriBuilder@57.19:57.29CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java= =(2º
korg.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)?year@60.62:60.66CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java=E =(I2¬
qorg.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)?uriBuilder@57.19:57.29CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java? ?(2¬
qorg.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)?uriBuilder@57.19:57.29CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java@ @(2¬
qorg.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)?uriBuilder@57.19:57.29CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaA A(2Æ
Yorg.jabref.logic.importer.IdParserFetcher.getURLForEntry(org.jabref.model.entry.BibEntry)OVERRIDEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java8 8(2∂
aorg.jabref.logic.importer.EntryBasedParserFetcher.getURLForEntry(org.jabref.model.entry.BibEntry)OVERRIDEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java8 8(2∂
`org.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)!entry	PARAMETERG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java8' 8(,2…
qorg.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)?uriBuilder@57.19:57.29DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java9 9(2ƒ
lorg.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)?title@58.63:58.68DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java:? :(D2≈
morg.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)?author@59.64:59.70DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java;@ ;(F2√
korg.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)?year@60.62:60.66DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java<> <(B2d
java.net.URLRETURN_TYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java8 8(ã
qorg.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)?uriBuilder@57.19:57.29VARIABLEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java9 9("
type
URIBuilder"
isFinalfalse"Ñ
declarationStringo<mark class="modifier"> </mark>URIBuilder <mark class="class-field">uriBuilder</mark> = new URIBuilder(API_URL)*
uriBuilder2x
'org.apache.http.client.utils.URIBuilderTYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java9 9(2è
>org.jabref.logic.importer.fetcher.CrossRef?API_URL@46.32:46.39CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java9/ 9(6¯
`org.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)!entry	PARAMETERG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java8' 8(,"
typeBibEntry"
isFinalfalse"#
declarationStringBibEntry entry*entry2p
org.jabref.model.entry.BibEntryTYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java8 8(&á
lorg.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)?title@58.63:58.68VARIABLEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java:? :(D"
type"
isFinalfalse"
declarationString title*title2TYPEä
morg.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)?author@59.64:59.70VARIABLEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java;@ ;(F"
type"
isFinalfalse"
declarationString author*author2TYPEÑ
korg.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(org.jabref.model.entry.BibEntry)?year@60.62:60.66VARIABLEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java<> <(B"
type"
isFinalfalse"
declarationString year*year2TYPEº
vorg.jabref.logic.importer.fetcher.CrossRef.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)METHODG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaE E("
isFinalfalse"•
declarationStringè<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>URL <mark class="method">getURLForQuery</mark>(QueryNode luceneQuery)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>URISyntaxException<mark class="modifier"><mark class="modifier">,</mark></mark> MalformedURLException<mark class="modifier"><mark class="modifier">,</mark></mark> FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeURL*getURLForQuery2±
`org.jabref.logic.importer.fetcher.transformers.DefaultQueryTransformer.DefaultQueryTransformer()CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaG- G(D2è
>org.jabref.logic.importer.fetcher.CrossRef?API_URL@46.32:46.39CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaF/ F(62ﬂ
çorg.jabref.logic.importer.fetcher.CrossRef.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)?uriBuilder@70.19:70.29CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaG G(2‘
Çorg.jabref.logic.importer.fetcher.CrossRef.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)!luceneQueryCALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaG\ G(g2ﬂ
çorg.jabref.logic.importer.fetcher.CrossRef.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)?uriBuilder@70.19:70.29CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaH H(2”
~org.jabref.logic.importer.SearchBasedParserFetcher.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)OVERRIDEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaE E(2Ÿ
Çorg.jabref.logic.importer.fetcher.CrossRef.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)!luceneQuery	PARAMETERG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaE( E(32Ê
çorg.jabref.logic.importer.fetcher.CrossRef.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)?uriBuilder@70.19:70.29DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaF F(2d
java.net.URLRETURN_TYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaE E(®
çorg.jabref.logic.importer.fetcher.CrossRef.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)?uriBuilder@70.19:70.29VARIABLEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaF F("
type
URIBuilder"
isFinalfalse"Ñ
declarationStringo<mark class="modifier"> </mark>URIBuilder <mark class="class-field">uriBuilder</mark> = new URIBuilder(API_URL)*
uriBuilder2x
'org.apache.http.client.utils.URIBuilderTYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaF F(2è
>org.jabref.logic.importer.fetcher.CrossRef?API_URL@46.32:46.39CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaF/ F(6∆
Çorg.jabref.logic.importer.fetcher.CrossRef.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)!luceneQuery	PARAMETERG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaE( E(3"
type	QueryNode"
isFinalfalse"*
declarationStringQueryNode luceneQuery*luceneQuery2å
;org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeTYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaE E('æ
Porg.jabref.logic.importer.fetcher.CrossRef.getUrlForIdentifier(java.lang.String)METHODG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaL L(""
isFinalfalse"¶
declarationStringê<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>URL <mark class="method">getUrlForIdentifier</mark>(String identifier)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>URISyntaxException<mark class="modifier"><mark class="modifier">,</mark></mark> MalformedURLException<mark class="modifier"><mark class="modifier">,</mark></mark> FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeURL*getUrlForIdentifier2è
>org.jabref.logic.importer.fetcher.CrossRef?API_URL@46.32:46.39CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaM/ M(62¨
[org.jabref.logic.importer.fetcher.CrossRef.getUrlForIdentifier(java.lang.String)!identifierCALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaM? M(I2∏
gorg.jabref.logic.importer.fetcher.CrossRef.getUrlForIdentifier(java.lang.String)?uriBuilder@77.19:77.29CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaN N(2©
Torg.jabref.logic.importer.IdBasedParserFetcher.getUrlForIdentifier(java.lang.String)OVERRIDEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaL L("2±
[org.jabref.logic.importer.fetcher.CrossRef.getUrlForIdentifier(java.lang.String)!identifier	PARAMETERG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaL* L(42ø
gorg.jabref.logic.importer.fetcher.CrossRef.getUrlForIdentifier(java.lang.String)?uriBuilder@77.19:77.29DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaM M(2d
java.net.URLRETURN_TYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaL L(ƒ
gorg.jabref.logic.importer.fetcher.CrossRef.getUrlForIdentifier(java.lang.String)?uriBuilder@77.19:77.29VARIABLEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaM M("
type
URIBuilder"
isFinalfalse"ò
declarationStringÇ<mark class="modifier"> </mark>URIBuilder <mark class="class-field">uriBuilder</mark> = new URIBuilder(API_URL + "/" + identifier)*
uriBuilder2x
'org.apache.http.client.utils.URIBuilderTYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaM M(2è
>org.jabref.logic.importer.fetcher.CrossRef?API_URL@46.32:46.39CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaM/ M(62¨
[org.jabref.logic.importer.fetcher.CrossRef.getUrlForIdentifier(java.lang.String)!identifierCALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaM? M(IÍ
[org.jabref.logic.importer.fetcher.CrossRef.getUrlForIdentifier(java.lang.String)!identifier	PARAMETERG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaL* L(4"
typeString"
isFinalfalse"&
declarationStringString identifier*
identifier2a
java.lang.StringTYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaL# L()ˆ1
6org.jabref.logic.importer.fetcher.CrossRef.getParser()METHODG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaR R("
isFinalfalse"ó
declarationStringÅ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>Parser <mark class="method">getParser</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeParser*	getParser2ú
Korg.jabref.logic.importer.util.JsonReader.toJsonObject(java.io.InputStream)CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaT- T(92r
!java.util.Collections.emptyList()CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaV# V(,2r
!java.util.Collections.emptyList()CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java[# [(,2¨
[org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java`! `(32w
&java.util.Collections.singletonList(T)CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaa# a(02¨
[org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javai! i(32f
java.util.List.add(E)CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaj j(2ü
Norg.jabref.logic.importer.fetcher.CrossRef.getParser()?inputStream@83.15:83.26CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaT: T(E2ú
Korg.jabref.logic.importer.fetcher.CrossRef.getParser()?response@84.23:84.31CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaU U(2ú
Korg.jabref.logic.importer.fetcher.CrossRef.getParser()?response@84.23:84.31CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaY Y(2ú
Korg.jabref.logic.importer.fetcher.CrossRef.getParser()?response@84.23:84.31CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaY Y(2ú
Korg.jabref.logic.importer.fetcher.CrossRef.getParser()?response@84.23:84.31CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaZ Z(2ú
Korg.jabref.logic.importer.fetcher.CrossRef.getParser()?response@84.23:84.31CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java^ ^(2ú
Korg.jabref.logic.importer.fetcher.CrossRef.getParser()?response@84.23:84.31CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java`4 `(<2ô
Horg.jabref.logic.importer.fetcher.CrossRef.getParser()?entry@96.25:96.30CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaa1 a(62ú
Korg.jabref.logic.importer.fetcher.CrossRef.getParser()?response@84.23:84.31CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javae e(&2õ
Jorg.jabref.logic.importer.fetcher.CrossRef.getParser()?items@101.22:101.27CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaf5 f(:2ó
Forg.jabref.logic.importer.fetcher.CrossRef.getParser()?i@103.21:103.22CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javag g(2õ
Jorg.jabref.logic.importer.fetcher.CrossRef.getParser()?items@101.22:101.27CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javag  g(%2ó
Forg.jabref.logic.importer.fetcher.CrossRef.getParser()?i@103.21:103.22CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javag0 g(12õ
Jorg.jabref.logic.importer.fetcher.CrossRef.getParser()?items@101.22:101.27CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javah" h('2ó
Forg.jabref.logic.importer.fetcher.CrossRef.getParser()?i@103.21:103.22CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javah6 h(72ö
Iorg.jabref.logic.importer.fetcher.CrossRef.getParser()?item@104.27:104.31CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javai4 i(82ù
Lorg.jabref.logic.importer.fetcher.CrossRef.getParser()?entries@102.27:102.34CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaj j(2õ
Jorg.jabref.logic.importer.fetcher.CrossRef.getParser()?entry@105.25:105.30CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaj j(!2ù
Lorg.jabref.logic.importer.fetcher.CrossRef.getParser()?entries@102.27:102.34CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javal l(2ä
5org.jabref.logic.importer.IdParserFetcher.getParser()OVERRIDEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaR R(2í
=org.jabref.logic.importer.EntryBasedParserFetcher.getParser()OVERRIDEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaR R(2ì
>org.jabref.logic.importer.SearchBasedParserFetcher.getParser()OVERRIDEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaR R(2è
:org.jabref.logic.importer.IdBasedParserFetcher.getParser()OVERRIDEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaR R(2£
Korg.jabref.logic.importer.fetcher.CrossRef.getParser()?response@84.23:84.31DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaT T(2†
Horg.jabref.logic.importer.fetcher.CrossRef.getParser()?entry@96.25:96.30DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java` `(2¢
Jorg.jabref.logic.importer.fetcher.CrossRef.getParser()?items@101.22:101.27DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javae e(2§
Lorg.jabref.logic.importer.fetcher.CrossRef.getParser()?entries@102.27:102.34DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaf f("2û
Forg.jabref.logic.importer.fetcher.CrossRef.getParser()?i@103.21:103.22DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javag g(2°
Iorg.jabref.logic.importer.fetcher.CrossRef.getParser()?item@104.27:104.31DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javah h(2¢
Jorg.jabref.logic.importer.fetcher.CrossRef.getParser()?entry@105.25:105.30DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javai i(2¶
Norg.jabref.logic.importer.fetcher.CrossRef.getParser()?inputStream@83.15:83.26DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaS S(2x
 org.jabref.logic.importer.ParserRETURN_TYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaR R(í
Korg.jabref.logic.importer.fetcher.CrossRef.getParser()?response@84.23:84.31VARIABLEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaT T("
type
JSONObject"
isFinalfalse"è
declarationStringz<mark class="modifier"> </mark>JSONObject <mark class="class-field">response</mark> = JsonReader.toJsonObject(inputStream)*response2m
kong.unirest.json.JSONObjectTYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaT T(2ú
Korg.jabref.logic.importer.util.JsonReader.toJsonObject(java.io.InputStream)CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaT- T(92ü
Norg.jabref.logic.importer.fetcher.CrossRef.getParser()?inputStream@83.15:83.26CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaT: T(Eç
Horg.jabref.logic.importer.fetcher.CrossRef.getParser()?entry@96.25:96.30VARIABLEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java` `("
typeBibEntry"
isFinalfalse"Ç
declarationStringm<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry</mark> = jsonItemToBibEntry(response)*entry2p
org.jabref.model.entry.BibEntryTYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java` `(2¨
[org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java`! `(32ú
Korg.jabref.logic.importer.fetcher.CrossRef.getParser()?response@84.23:84.31CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java`4 `(<‡
Jorg.jabref.logic.importer.fetcher.CrossRef.getParser()?items@101.22:101.27VARIABLEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javae e("
type	JSONArray"
isFinalfalse"Ö
declarationStringp<mark class="modifier"> </mark>JSONArray <mark class="class-field">items</mark> = response.getJSONArray("items")*items2l
kong.unirest.json.JSONArrayTYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javae e(2ú
Korg.jabref.logic.importer.fetcher.CrossRef.getParser()?response@84.23:84.31CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javae e(&ﬁ
Lorg.jabref.logic.importer.fetcher.CrossRef.getParser()?entries@102.27:102.34VARIABLEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaf f(""
typeList<BibEntry>"
isFinalfalse"ç
declarationStringx<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">entries</mark> = new ArrayList<>(items.length())*entries2_
java.util.ListTYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaf f(2y
org.jabref.model.entry.BibEntryTYPE_ARGUMENTG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaf f(2õ
Jorg.jabref.logic.importer.fetcher.CrossRef.getParser()?items@101.22:101.27CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaf5 f(:ë
Forg.jabref.logic.importer.fetcher.CrossRef.getParser()?i@103.21:103.22VARIABLEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javag g("
typeint"
isFinalfalse"|
declarationStringg<mark class="modifier"> </mark><mark class="modifier">int</mark> <mark class="class-field">i</mark> = 0*i2T
intTYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javag g(
Iorg.jabref.logic.importer.fetcher.CrossRef.getParser()?item@104.27:104.31VARIABLEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javah h("
type
JSONObject"
isFinalfalse"}
declarationStringh<mark class="modifier"> </mark>JSONObject <mark class="class-field">item</mark> = items.getJSONObject(i)*item2m
kong.unirest.json.JSONObjectTYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javah h(2õ
Jorg.jabref.logic.importer.fetcher.CrossRef.getParser()?items@101.22:101.27CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javah" h('2ó
Forg.jabref.logic.importer.fetcher.CrossRef.getParser()?i@103.21:103.22CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javah6 h(7à
Jorg.jabref.logic.importer.fetcher.CrossRef.getParser()?entry@105.25:105.30VARIABLEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javai i("
typeBibEntry"
isFinalfalse"~
declarationStringi<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry</mark> = jsonItemToBibEntry(item)*entry2p
org.jabref.model.entry.BibEntryTYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javai i(2¨
[org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javai! i(32ö
Iorg.jabref.logic.importer.fetcher.CrossRef.getParser()?item@104.27:104.31CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javai4 i(8ı
Norg.jabref.logic.importer.fetcher.CrossRef.getParser()?inputStream@83.15:83.26VARIABLEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaS S("
type"
isFinalfalse"!
declarationString inputStream*inputStream2TYPE«
Yorg.jabref.logic.importer.fetcher.CrossRef.doPostCleanup(org.jabref.model.entry.BibEntry)METHODG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaq q("
isFinalfalse"≈
declarationStringØ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">doPostCleanup</mark>(BibEntry entry)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*doPostCleanup2|
+java.util.Optional.equals(java.lang.Object)CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javas0 s(62ù
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javas s(2ù
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javas= s(E2®
Worg.jabref.logic.cleanup.FieldFormatterCleanup.cleanup(org.jabref.model.entry.BibEntry)CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javatT t([2ﬁ
åorg.jabref.logic.cleanup.FieldFormatterCleanup.FieldFormatterCleanup(org.jabref.model.entry.field.Field, org.jabref.logic.cleanup.Formatter)CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javat t(%2ò
Gorg.jabref.logic.formatter.bibtexfields.ClearFormatter.ClearFormatter()CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javatB t(P2∞
_org.jabref.logic.importer.fetcher.CrossRef.doPostCleanup(org.jabref.model.entry.BibEntry)!entryCALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javas s(2∞
_org.jabref.logic.importer.fetcher.CrossRef.doPostCleanup(org.jabref.model.entry.BibEntry)!entryCALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javas7 s(<2∞
_org.jabref.logic.importer.fetcher.CrossRef.doPostCleanup(org.jabref.model.entry.BibEntry)!entryCALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javat\ t(a2≠
Xorg.jabref.logic.importer.IdParserFetcher.doPostCleanup(org.jabref.model.entry.BibEntry)OVERRIDEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaq q(2µ
`org.jabref.logic.importer.EntryBasedParserFetcher.doPostCleanup(org.jabref.model.entry.BibEntry)OVERRIDEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaq q(2∂
aorg.jabref.logic.importer.SearchBasedParserFetcher.doPostCleanup(org.jabref.model.entry.BibEntry)OVERRIDEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaq q(2≤
]org.jabref.logic.importer.IdBasedParserFetcher.doPostCleanup(org.jabref.model.entry.BibEntry)OVERRIDEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaq q(2µ
_org.jabref.logic.importer.fetcher.CrossRef.doPostCleanup(org.jabref.model.entry.BibEntry)!entry	PARAMETERG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaq' q(,2\
voidRETURN_TYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaq q(˜
_org.jabref.logic.importer.fetcher.CrossRef.doPostCleanup(org.jabref.model.entry.BibEntry)!entry	PARAMETERG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaq' q(,"
typeBibEntry"
isFinalfalse"#
declarationStringBibEntry entry*entry2p
org.jabref.model.entry.BibEntryTYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaq q(&˘I
[org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)METHODG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javax x('"
isFinalfalse"÷
declarationString¿<mark class="modifier">private </mark>BibEntry <mark class="method">jsonItemToBibEntry</mark>(JSONObject item)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>ParseException"
isStaticfalse"
accessprivate"

isAbstractfalse"
typeBibEntry*jsonItemToBibEntry2{
*org.jabref.model.entry.BibEntry.BibEntry()CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaz! z()2¿
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?entry@122.21:122.26CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java{ {(2±
`org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)!itemCALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java{& {(*2¿
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?entry@122.21:122.26CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java| |(2±
`org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)!itemCALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java}( }(,2¿
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?array@126.33:126.38CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java~* ~(/2¿
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?entry@122.21:122.26CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java (2≥
`org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)!itemCALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÄ( Ä(,2¬
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?array@129.33:129.38CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÅ* Å(/2¬
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?entry@122.21:122.26CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÇ Ç(2≥
`org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)!itemCALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÇ; Ç(?2¬
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?entry@122.21:122.26CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÉ É(2≥
`org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)!itemCALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÑ( Ñ(,2¬
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?array@133.33:133.38CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÖ* Ö(/2¬
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?array@134.33:134.38CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÜ* Ü(/2¬
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?array@135.33:135.38CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaá* á(/2¡
norg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?year@136.33:136.37CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaà: à(>2¬
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?entry@122.21:122.26CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaä ä(2≥
`org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)!itemCALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaä. ä(22¬
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?entry@122.21:122.26CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaã ã(2≥
`org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)!itemCALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaã2 ã(62¬
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?entry@122.21:122.26CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaå å(2≥
`org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)!itemCALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaå4 å(82¬
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?entry@122.21:122.26CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaç ç(2≥
`org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)!itemCALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaç1 ç(52¬
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?entry@122.21:122.26CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaé é(2≥
`org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)!itemCALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaéG é(K2¬
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?entry@122.21:122.26CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaè è(2≥
`org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)!itemCALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaè0 è(42¬
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?entry@122.21:122.26CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaê ê(2≥
`org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)!itemCALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaê1 ê(52¬
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?entry@122.21:122.26CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaë ë(2≥
`org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)!itemCALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaëC ë(G2√
porg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?array@145.98:145.103CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaëk ë(p2¬
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?entry@122.21:122.26CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaí í(2∆
sorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?exception@147.31:147.40CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaîM î(V2∂
`org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)!item	PARAMETERG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javax3 x(72«
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?entry@122.21:122.26DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaz z(2«
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?array@126.33:126.38DECLARATIONG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java~! ~(&2…
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?array@129.33:129.38DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÅ! Å(&2…
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?array@133.33:133.38DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÖ! Ö(&2…
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?array@134.33:134.38DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÜ! Ü(&2…
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?array@135.33:135.38DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaá! á(&2»
norg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?year@136.33:136.37DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaà! à(%2 
porg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?array@145.98:145.103DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaëb ë(g2Õ
sorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?exception@147.31:147.40DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaì ì((2w
org.jabref.model.entry.BibEntryRETURN_TYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javax x(‘
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?entry@122.21:122.26VARIABLEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaz z("
typeBibEntry"
isFinalfalse"t
declarationString_<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry</mark> = new BibEntry()*entry2p
org.jabref.model.entry.BibEntryTYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaz z(2{
*org.jabref.model.entry.BibEntry.BibEntry()CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaz! z()˜
`org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)!item	PARAMETERG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javax3 x(7"
type
JSONObject"
isFinalfalse"$
declarationStringJSONObject item*item2m
kong.unirest.json.JSONObjectTYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javax( x(2ä
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?array@126.33:126.38VARIABLEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java~! ~(&"
type"
isFinalfalse"
declarationString array*array2TYPEå
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?array@129.33:129.38VARIABLEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÅ! Å(&"
type"
isFinalfalse"
declarationString array*array2TYPEå
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?array@133.33:133.38VARIABLEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÖ! Ö(&"
type"
isFinalfalse"
declarationString array*array2TYPEå
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?array@134.33:134.38VARIABLEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÜ! Ü(&"
type"
isFinalfalse"
declarationString array*array2TYPEå
oorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?array@135.33:135.38VARIABLEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaá! á(&"
type"
isFinalfalse"
declarationString array*array2TYPEâ
norg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?year@136.33:136.37VARIABLEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaà! à(%"
type"
isFinalfalse"
declarationString year*year2TYPEç
porg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?array@145.98:145.103VARIABLEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaëb ë(g"
type"
isFinalfalse"
declarationString array*array2TYPE†
sorg.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(kong.unirest.json.JSONObject)?exception@147.31:147.40VARIABLEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaì ì(("
typeJSONException"
isFinalfalse",
declarationStringJSONException exception*	exception2r
kong.unirest.json.JSONExceptionTYPEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaì ì(√
Qorg.jabref.logic.importer.fetcher.CrossRef.toAuthors(kong.unirest.json.JSONArray)METHODI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaò ò("
isFinalfalse"z
declarationStringe<mark class="modifier">private </mark>String <mark class="method">toAuthors</mark>(JSONArray authors)"
isStaticfalse"
accessprivate"

isAbstractfalse"
typeString*	toAuthors2~
+org.jabref.model.entry.AuthorList.collect()CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java£, £(32¨
Yorg.jabref.logic.importer.fetcher.CrossRef.toAuthors(kong.unirest.json.JSONArray)!authorsCALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaô ô(2¨
Yorg.jabref.logic.importer.fetcher.CrossRef.toAuthors(kong.unirest.json.JSONArray)!authorsCALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaû" û()2π
forg.jabref.logic.importer.fetcher.CrossRef.toAuthors(kong.unirest.json.JSONArray)?author@160.29:160.35CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java°  °(&2π
forg.jabref.logic.importer.fetcher.CrossRef.toAuthors(kong.unirest.json.JSONArray)?author@160.29:160.35CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java¢  ¢(&2±
Yorg.jabref.logic.importer.fetcher.CrossRef.toAuthors(kong.unirest.json.JSONArray)!authors	PARAMETERI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaò' ò(.2¿
forg.jabref.logic.importer.fetcher.CrossRef.toAuthors(kong.unirest.json.JSONArray)?author@160.29:160.35DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java† †(#2j
java.lang.StringRETURN_TYPEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaò ò(˜
Yorg.jabref.logic.importer.fetcher.CrossRef.toAuthors(kong.unirest.json.JSONArray)!authors	PARAMETERI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaò' ò(."
type	JSONArray"
isFinalfalse"&
declarationStringJSONArray authors*authors2n
kong.unirest.json.JSONArrayTYPEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaò ò(&Ö
forg.jabref.logic.importer.fetcher.CrossRef.toAuthors(kong.unirest.json.JSONArray)?author@160.29:160.35VARIABLEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java† †(#"
type"
isFinalfalse"
declarationString author*author2TYPE—
Horg.jabref.logic.importer.fetcher.CrossRef.convertType(java.lang.String)METHODI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaß ß(!"
isFinalfalse"y
declarationStringd<mark class="modifier">private </mark>EntryType <mark class="method">convertType</mark>(String type)"
isStaticfalse"
accessprivate"

isAbstractfalse"
type	EntryType*convertType2|
)java.lang.String.equals(java.lang.Object)CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java®! ®('2†
Morg.jabref.logic.importer.fetcher.CrossRef.convertType(java.lang.String)!typeCALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java®( ®(,2•
Morg.jabref.logic.importer.fetcher.CrossRef.convertType(java.lang.String)!type	PARAMETERI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaß) ß(-2Ä
&org.jabref.model.entry.types.EntryTypeRETURN_TYPEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaß ß(‘
Morg.jabref.logic.importer.fetcher.CrossRef.convertType(java.lang.String)!type	PARAMETERI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaß) ß(-"
typeString"
isFinalfalse" 
declarationStringString type*type2c
java.lang.StringTYPEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaß" ß((◊S
éorg.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)METHODI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java¨ ¨(*"
isFinalfalse"Ù
declarationStringﬁ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>Optional&lt;DOI&gt; <mark class="method">extractIdentifier</mark>(BibEntry inputEntry<mark class="modifier"><mark class="modifier">,</mark></mark> List&lt;BibEntry&gt; fetchedEntries)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeOptional<DOI>*extractIdentifier2©
Vorg.jabref.logic.formatter.bibtexfields.RemoveBracesFormatter.format(java.lang.String)CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÆ: Æ(@2o
java.util.Optional.orElse(T)CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÆs Æ(y2®
Uorg.jabref.model.entry.BibEntry.getFieldLatexFree(org.jabref.model.entry.field.Field)CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÆL Æ(]2ü
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java¥6 ¥(>2∫
gorg.jabref.model.util.OptionalUtil.isPresentAnd(java.util.Optional<T>, java.util.function.Predicate<T>)CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java∂ ∂()2{
(org.jabref.model.entry.BibEntry.getDOI()CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java∑$ ∑(*2ü
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaº9 º(A2‘
Äorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>)CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaΩ= Ω(D2∫
gorg.jabref.model.util.OptionalUtil.isPresentAnd(java.util.Optional<T>, java.util.function.Predicate<T>)CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaæ æ()2{
(org.jabref.model.entry.BibEntry.getDOI()CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaø$ ø(*2m
java.util.Optional.empty()CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java√ √(2î
Aorg.jabref.logic.util.strings.StringSimilarity.StringSimilarity()CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaØ6 Ø(F2°
Norg.jabref.logic.importer.fetcher.CrossRef?REMOVE_BRACES_FORMATTER@48.47:48.70CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÆ" Æ(92Ì
ôorg.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)!inputEntryCALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÆA Æ(K2Ò
ùorg.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)!fetchedEntriesCALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java±% ±(32˝
©org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?fetchedEntry@177.22:177.34CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java¥) ¥(52˙
¶org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?dataTitle@180.29:180.38CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java∂* ∂(32Å
≠org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?stringSimilarity@175.31:175.47CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java∂> ∂(N2˚
ßorg.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?entryTitle@174.21:174.31CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java∂Y ∂(c2ˆ
¢org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?title@182.53:182.58CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java∂e ∂(j2˝
©org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?fetchedEntry@177.22:177.34CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java∑ ∑(#2˝
©org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?fetchedEntry@177.22:177.34CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaº, º(82˙
¶org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?dataTitle@180.29:180.38CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaΩE Ω(N2˝
©org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?dataSubtitle@188.29:188.41CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaΩP Ω(\2˜
£org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?title@189.95:189.100CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaΩs Ω(x2˝
ßorg.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?subtitle@189.102:189.110CALLK
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaΩÅ Ω(â2Å
≠org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?dataWithSubTitle@189.29:189.45CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaæ* æ(:2Å
≠org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?stringSimilarity@175.31:175.47CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaæQ æ(a2˚
ßorg.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?entryTitle@174.21:174.31CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaæl æ(v2É
Æorg.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?titleWithSubtitle@190.60:190.77CALLJ
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaæx æ(â2˝
©org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?fetchedEntry@177.22:177.34CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaø ø(#2Ú
ôorg.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)!inputEntry	PARAMETERI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java¨4 ¨(>2ˆ
ùorg.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)!fetchedEntries	PARAMETERI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java¨O ¨(]2Ç
ßorg.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?entryTitle@174.21:174.31DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÆ Æ(2à
≠org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?stringSimilarity@175.31:175.47DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaØ Ø(/2Ñ
©org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?fetchedEntry@177.22:177.34DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java± ±("2Å
¶org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?dataTitle@180.29:180.38DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java¥ ¥(&2Ñ
©org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?dataSubtitle@188.29:188.41DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaº º()2à
≠org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?dataWithSubTitle@189.29:189.45DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaΩ Ω(-2˝
¢org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?title@182.53:182.58DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java∂5 ∂(:2˛
£org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?title@189.95:189.100DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaΩ_ Ω(d2Ç
ßorg.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?subtitle@189.102:189.110DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaΩf Ω(n2â
Æorg.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?titleWithSubtitle@190.60:190.77DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaæ< æ(M2l
java.util.OptionalRETURN_TYPEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java¨ ¨(2à
%org.jabref.model.entry.identifier.DOIRETURN_TYPE_ARGUMENTI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java¨ ¨(◊
ßorg.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?entryTitle@174.21:174.31VALUEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÆ Æ("
typeString"
isFinaltrue"Í
declarationString‘<mark class="modifier"> </mark><mark class="modifier">final </mark>String <mark class="class-field">entryTitle</mark> = REMOVE_BRACES_FORMATTER.format(inputEntry.getFieldLatexFree(StandardField.TITLE).orElse(""))*
entryTitle2c
java.lang.StringTYPEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÆ Æ(2©
Vorg.jabref.logic.formatter.bibtexfields.RemoveBracesFormatter.format(java.lang.String)CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÆ: Æ(@2o
java.util.Optional.orElse(T)CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÆs Æ(y2®
Uorg.jabref.model.entry.BibEntry.getFieldLatexFree(org.jabref.model.entry.field.Field)CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÆL Æ(]2°
Norg.jabref.logic.importer.fetcher.CrossRef?REMOVE_BRACES_FORMATTER@48.47:48.70CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÆ" Æ(92Ì
ôorg.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)!inputEntryCALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÆA Æ(Kë
≠org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?stringSimilarity@175.31:175.47VALUEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaØ Ø(/"
typeStringSimilarity"
isFinaltrue"¥
declarationStringû<mark class="modifier"> </mark><mark class="modifier">final </mark>StringSimilarity <mark class="class-field">stringSimilarity</mark> = new StringSimilarity()*stringSimilarity2Å
.org.jabref.logic.util.strings.StringSimilarityTYPEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaØ Ø(2î
Aorg.jabref.logic.util.strings.StringSimilarity.StringSimilarity()CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaØ6 Ø(Fì
©org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?fetchedEntry@177.22:177.34VARIABLEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java± ±(""
typeBibEntry"
isFinalfalse"j
declarationStringU<mark class="modifier"> </mark>BibEntry <mark class="class-field">fetchedEntry</mark>*fetchedEntry2r
org.jabref.model.entry.BibEntryTYPEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java± ±(Ã
¶org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?dataTitle@180.29:180.38VARIABLEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java¥ ¥(&"
typeOptional<String>"
isFinalfalse"ù
declarationStringá<mark class="modifier"> </mark>Optional<String> <mark class="class-field">dataTitle</mark> = fetchedEntry.getField(StandardField.TITLE)*	dataTitle2e
java.util.OptionalTYPEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java¥ ¥(2l
java.lang.StringTYPE_ARGUMENTI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java¥ ¥(2ü
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java¥6 ¥(>2˝
©org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?fetchedEntry@177.22:177.34CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java¥) ¥(5ÿ
©org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?dataSubtitle@188.29:188.41VARIABLEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaº º()"
typeOptional<String>"
isFinalfalse"£
declarationStringç<mark class="modifier"> </mark>Optional<String> <mark class="class-field">dataSubtitle</mark> = fetchedEntry.getField(StandardField.SUBTITLE)*dataSubtitle2e
java.util.OptionalTYPEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaº º(2l
java.lang.StringTYPE_ARGUMENTI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaº º(2ü
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaº9 º(A2˝
©org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?fetchedEntry@177.22:177.34CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaº, º(8Ω
≠org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?dataWithSubTitle@189.29:189.45VARIABLEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaΩ Ω(-"
typeOptional<String>"
isFinalfalse"‘
declarationStringæ<mark class="modifier"> </mark>Optional<String> <mark class="class-field">dataWithSubTitle</mark> = OptionalUtil.combine(dataTitle, dataSubtitle, (title, subtitle) -> title + " " + subtitle)*dataWithSubTitle2e
java.util.OptionalTYPEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaΩ Ω(2l
java.lang.StringTYPE_ARGUMENTI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaΩ Ω(2‘
Äorg.jabref.model.util.OptionalUtil.combine(java.util.Optional<T>, java.util.Optional<S>, java.util.function.BiFunction<T, S, R>)CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaΩ= Ω(D2˙
¶org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?dataTitle@180.29:180.38CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaΩE Ω(N2˝
©org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?dataSubtitle@188.29:188.41CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaΩP Ω(\2˜
£org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?title@189.95:189.100CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaΩs Ω(x2˝
ßorg.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?subtitle@189.102:189.110CALLK
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaΩÅ Ω(â¿
ôorg.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)!inputEntry	PARAMETERI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java¨4 ¨(>"
typeBibEntry"
isFinalfalse"(
declarationStringBibEntry inputEntry*
inputEntry2r
org.jabref.model.entry.BibEntryTYPEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java¨+ ¨(3ƒ
ùorg.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)!fetchedEntries	PARAMETERI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java¨O ¨(]"
typeList<BibEntry>"
isFinalfalse"2
declarationStringList<BibEntry> fetchedEntries*fetchedEntries2a
java.util.ListTYPEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java¨@ ¨(D2{
org.jabref.model.entry.BibEntryTYPE_ARGUMENTI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java¨E ¨(M¿
¢org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?title@182.53:182.58VARIABLEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java∂5 ∂(:"
type"
isFinalfalse"
declarationString title*title2TYPE¡
£org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?title@189.95:189.100VARIABLEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaΩ_ Ω(d"
type"
isFinalfalse"
declarationString title*title2TYPEÀ
ßorg.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?subtitle@189.102:189.110VARIABLEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaΩf Ω(n"
type"
isFinalfalse"
declarationString	 subtitle*subtitle2TYPE‰
Æorg.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(org.jabref.model.entry.BibEntry, java.util.List<org.jabref.model.entry.BibEntry>)?titleWithSubtitle@190.60:190.77VARIABLEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaæ< æ(M"
type"
isFinalfalse"'
declarationString titleWithSubtitle*titleWithSubtitle2TYPE°
>org.jabref.logic.importer.fetcher.CrossRef.getIdentifierName()METHODI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java« «(#"
isFinalfalse"ü
declarationStringâ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>String <mark class="method">getIdentifierName</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*getIdentifierName2é
7org.jabref.logic.importer.IdFetcher.getIdentifierName()OVERRIDEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java« «(#2j
java.lang.StringRETURN_TYPEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java« «(Û
Sorg.jabref.logic.importer.fetcher.CrossRef.getKeywords(kong.unirest.json.JSONArray)METHODI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÀ À("
isFinalfalse"~
declarationStringi<mark class="modifier">private </mark>String <mark class="method">getKeywords</mark>(JSONArray jsonArray)"
isStaticfalse"
accessprivate"

isAbstractfalse"
typeString*getKeywords2É
0java.lang.StringBuilder.append(java.lang.String)CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java— —(2u
"java.lang.StringBuilder.toString()CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java‘ ‘( 2z
'java.lang.StringBuilder.StringBuilder()CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÃ% Ã(22∂
corg.jabref.logic.importer.fetcher.CrossRef.getKeywords(kong.unirest.json.JSONArray)?i@206.17:206.18CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaŒ Œ(2∞
]org.jabref.logic.importer.fetcher.CrossRef.getKeywords(kong.unirest.json.JSONArray)!jsonArrayCALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaŒ Œ(%2∂
corg.jabref.logic.importer.fetcher.CrossRef.getKeywords(kong.unirest.json.JSONArray)?i@206.17:206.18CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaŒ0 Œ(12Ω
jorg.jabref.logic.importer.fetcher.CrossRef.getKeywords(kong.unirest.json.JSONArray)?keywords@204.22:204.30CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaœ œ(2∞
]org.jabref.logic.importer.fetcher.CrossRef.getKeywords(kong.unirest.json.JSONArray)!jsonArrayCALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaœ œ(!2∂
corg.jabref.logic.importer.fetcher.CrossRef.getKeywords(kong.unirest.json.JSONArray)?i@206.17:206.18CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaœ, œ(-2∂
corg.jabref.logic.importer.fetcher.CrossRef.getKeywords(kong.unirest.json.JSONArray)?i@206.17:206.18CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java– –(2∞
]org.jabref.logic.importer.fetcher.CrossRef.getKeywords(kong.unirest.json.JSONArray)!jsonArrayCALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java– –(2Ω
jorg.jabref.logic.importer.fetcher.CrossRef.getKeywords(kong.unirest.json.JSONArray)?keywords@204.22:204.30CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java— —(2Ω
jorg.jabref.logic.importer.fetcher.CrossRef.getKeywords(kong.unirest.json.JSONArray)?keywords@204.22:204.30CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java‘ ‘(2µ
]org.jabref.logic.importer.fetcher.CrossRef.getKeywords(kong.unirest.json.JSONArray)!jsonArray	PARAMETERI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÀ) À(22ƒ
jorg.jabref.logic.importer.fetcher.CrossRef.getKeywords(kong.unirest.json.JSONArray)?keywords@204.22:204.30DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÃ Ã(2Ω
corg.jabref.logic.importer.fetcher.CrossRef.getKeywords(kong.unirest.json.JSONArray)?i@206.17:206.18DECLARATIONI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaŒ Œ(2j
java.lang.StringRETURN_TYPEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÀ À(‡
jorg.jabref.logic.importer.fetcher.CrossRef.getKeywords(kong.unirest.json.JSONArray)?keywords@204.22:204.30VARIABLEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÃ Ã("
typeStringBuilder"
isFinalfalse"Å
declarationStringl<mark class="modifier"> </mark>StringBuilder <mark class="class-field">keywords</mark> = new StringBuilder()*keywords2j
java.lang.StringBuilderTYPEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÃ Ã(2z
'java.lang.StringBuilder.StringBuilder()CALLI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÃ% Ã(2≤
corg.jabref.logic.importer.fetcher.CrossRef.getKeywords(kong.unirest.json.JSONArray)?i@206.17:206.18VARIABLEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaŒ Œ("
typeint"
isFinalfalse"|
declarationStringg<mark class="modifier"> </mark><mark class="modifier">int</mark> <mark class="class-field">i</mark> = 0*i2V
intTYPEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaŒ Œ(ˇ
]org.jabref.logic.importer.fetcher.CrossRef.getKeywords(kong.unirest.json.JSONArray)!jsonArray	PARAMETERI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÀ) À(2"
type	JSONArray"
isFinalfalse"(
declarationStringJSONArray jsonArray*	jsonArray2n
kong.unirest.json.JSONArrayTYPEI
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.javaÀ À((ù
>org.jabref.logic.importer.fetcher.CrossRef?API_URL@46.32:46.39VALUEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java.  .('"
isFinaltrue"
typeString"ÿ
declarationString¬<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>String <mark class="class-field">API_URL</mark> = "https://api.crossref.org/works";"
isStatictrue"
accessprivate*API_URL2a
java.lang.StringTYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java. .(Ω
Norg.jabref.logic.importer.fetcher.CrossRef?REMOVE_BRACES_FORMATTER@48.47:48.70VALUEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java0/ 0(F"
isFinaltrue"
typeRemoveBracesFormatter"Ú
declarationString‹<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>RemoveBracesFormatter <mark class="class-field">REMOVE_BRACES_FORMATTER</mark> = new RemoveBracesFormatter();"
isStatictrue"
accessprivate*REMOVE_BRACES_FORMATTER2é
=org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatterTYPEG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java0 0(.2¶
Uorg.jabref.logic.formatter.bibtexfields.RemoveBracesFormatter.RemoveBracesFormatter()CALLG
=src\main\java\org\jabref\logic\importer\fetcher\CrossRef.java0M 0(b