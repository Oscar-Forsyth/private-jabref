
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java≥

4org.jabref.logic.importer.fetcher.INSPIREFetcherTestCLASSQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java (",
package!org.jabref.logic.importer.fetcher"
isFinalfalse"
inner classfalse"

isAbstractfalse"ú
declarationStringÜ<mark class="annotation">@FetcherTest</mark> <br><mark class="modifier"> </mark><mark class="modifier">class </mark>INSPIREFetcherTest"
accesspackage_private*INSPIREFetcherTest2û
<org.jabref.logic.importer.fetcher.INSPIREFetcherTest.setUp()DECLARATIONQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java	 (2∞
Norg.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByQueryFindsEntry()DECLARATIONQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java	 ( 2µ
Sorg.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByIdentifierFindsEntry()DECLARATIONQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java. .(,2Æ
Lorg.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByExistingEntry()DECLARATIONQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java@ @(%2™
Horg.jabref.logic.importer.fetcher.INSPIREFetcherTest?fetcher@22.27:22.34DECLARATIONQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java ("¬
<org.jabref.logic.importer.fetcher.INSPIREFetcherTest.setUp()METHODQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java	 ("
isFinalfalse"´
declarationStringï<mark class="annotation">@BeforeEach</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">setUp</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*setUp2£
Horg.jabref.logic.importer.fetcher.INSPIREFetcherTest?fetcher@22.27:22.34CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java (2ª
`org.jabref.logic.importer.fetcher.INSPIREFetcherTest.setUp()?importFormatPreferences@26.32:26.55CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java% (<2¬
`org.jabref.logic.importer.fetcher.INSPIREFetcherTest.setUp()?importFormatPreferences@26.32:26.55DECLARATIONQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java  (72f
voidRETURN_TYPEQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java (…
`org.jabref.logic.importer.fetcher.INSPIREFetcherTest.setUp()?importFormatPreferences@26.32:26.55VARIABLEQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java  (7"
typeImportFormatPreferences"
isFinalfalse"«
declarationString±<mark class="modifier"> </mark>ImportFormatPreferences <mark class="class-field">importFormatPreferences</mark> = mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS)*importFormatPreferences2r
ImportFormatPreferencesTYPEQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java (¸
Norg.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByQueryFindsEntry()METHODQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java	 ( "
isFinalfalse"Ñ
declarationStringÓ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchByQueryFindsEntry</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*searchByQueryFindsEntry2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java( ((2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java' '(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java& &(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java% %(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java$ $(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java# #(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java" "(2ú
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java! !( 2ß
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java)0 )(=2Å
&java.util.Collections.singletonList(T)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java*! *(.2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java   (&2£
Horg.jabref.logic.importer.fetcher.INSPIREFetcherTest?fetcher@22.27:22.34CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java)( )(/2º
aorg.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByQueryFindsEntry()?master@32.17:32.23CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java*/ *(52ƒ
iorg.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByQueryFindsEntry()?fetchedEntries@41.23:41.37CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java*8 *(F2√
aorg.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByQueryFindsEntry()?master@32.17:32.23DECLARATIONQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java   (2À
iorg.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByQueryFindsEntry()?fetchedEntries@41.23:41.37DECLARATIONQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java) )(%2f
voidRETURN_TYPEQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java (õ
aorg.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByQueryFindsEntry()?master@32.17:32.23VARIABLEQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java   ("
typeBibEntry"
isFinalfalse"∏
declarationString¢<mark class="modifier"> </mark>BibEntry <mark class="class-field">master</mark> = new BibEntry(StandardEntryType.MastersThesis).withCitationKey("Diez:2013fdp").withField(StandardField.AUTHOR, "Diez, Tobias").withField(StandardField.TITLE, "Slice theorem for Fr√©chet group actions and covariant symplectic field theory").withField(StandardField.SCHOOL, "Leipzig U.").withField(StandardField.YEAR, "2013").withField(StandardField.EPRINT, "1405.2249").withField(StandardField.ARCHIVEPREFIX, "arXiv").withField(StandardField.PRIMARYCLASS, "math-ph")*master2z
org.jabref.model.entry.BibEntryTYPEQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java   (2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java( ((2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java' '(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java& &(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java% %(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java$ $(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java# #(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java" "(2ú
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java! !( 2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java   (&Ò
iorg.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByQueryFindsEntry()?fetchedEntries@41.23:41.37VARIABLEQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java) )(%"
typeList<BibEntry>"
isFinalfalse"´
declarationStringï<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">fetchedEntries</mark> = fetcher.performSearch("Fr√©chet group actions field")*fetchedEntries2i
java.util.ListTYPEQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java) )(2É
org.jabref.model.entry.BibEntryTYPE_ARGUMENTQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java) )(2ß
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java)0 )(=2£
Horg.jabref.logic.importer.fetcher.INSPIREFetcherTest?fetcher@22.27:22.34CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java)( )(/˚!
Sorg.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByIdentifierFindsEntry()METHODQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java. .(,"
isFinalfalse"è
declarationString˘<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">searchByIdentifierFindsEntry</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*searchByIdentifierFindsEntry2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java: :(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java9 9(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java8 8(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java7 7(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java6 6(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java5 5(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java4 4(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java3 3(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java2 2(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java1 1(2ú
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java0 0( 2ß
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java;0 ;(=2Å
&java.util.Collections.singletonList(T)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java<! <(.2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java/ /('2£
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java: :(+2£
Horg.jabref.logic.importer.fetcher.INSPIREFetcherTest?fetcher@22.27:22.34CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java;( ;(/2¬
gorg.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByIdentifierFindsEntry()?article@47.17:47.24CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java</ <(62…
norg.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByIdentifierFindsEntry()?fetchedEntries@59.23:59.37CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java<9 <(G2…
gorg.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByIdentifierFindsEntry()?article@47.17:47.24DECLARATIONQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java/ /(2–
norg.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByIdentifierFindsEntry()?fetchedEntries@59.23:59.37DECLARATIONQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java; ;(%2f
voidRETURN_TYPEQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java. .(⁄
gorg.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByIdentifierFindsEntry()?article@47.17:47.24VARIABLEQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java/ /("
typeBibEntry"
isFinalfalse"ì
declarationString˝<mark class="modifier"> </mark>BibEntry <mark class="class-field">article</mark> = new BibEntry(StandardEntryType.Article).withCitationKey("Melnikov:1998pr").withField(StandardField.AUTHOR, "Melnikov, Kirill and Yelkhovsky, Alexander").withField(StandardField.TITLE, "Top quark production at threshold with O(alpha-s**2) accuracy").withField(StandardField.DOI, "10.1016/S0550-3213(98)00348-4").withField(StandardField.JOURNAL, "Nucl. Phys. B").withField(StandardField.PAGES, "59--72").withField(StandardField.VOLUME, "528").withField(StandardField.YEAR, "1998").withField(StandardField.EPRINT, "hep-ph/9802379").withField(StandardField.ARCHIVEPREFIX, "arXiv").withField(new UnknownField("reportnumber")<mark class="modifier">,</mark> "BUDKER-INP-1998-7, TTP-98-10")*article2z
org.jabref.model.entry.BibEntryTYPEQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java/ /(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java: :(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java9 9(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java8 8(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java7 7(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java6 6(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java5 5(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java4 4(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java3 3(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java2 2(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java1 1(2ú
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java0 0( 2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java/ /('2£
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java: :(+Ï
norg.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByIdentifierFindsEntry()?fetchedEntries@59.23:59.37VARIABLEQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java; ;(%"
typeList<BibEntry>"
isFinalfalse"°
declarationStringã<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">fetchedEntries</mark> = fetcher.performSearch("\"hep-ph/9802379\"")*fetchedEntries2i
java.util.ListTYPEQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java; ;(2É
org.jabref.model.entry.BibEntryTYPE_ARGUMENTQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java; ;(2ß
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java;0 ;(=2£
Horg.jabref.logic.importer.fetcher.INSPIREFetcherTest?fetcher@22.27:22.34CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java;( ;(/õ#
Lorg.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByExistingEntry()METHODQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java@ @(%"
isFinalfalse"à
declarationStringÚ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">searchByExistingEntry</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*searchByExistingEntry2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaL L(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaK K(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaJ J(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaI I(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaH H(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaG G(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaF F(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaE E(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaD D(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaC C(2ú
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaB B( 2∫
_org.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaM0 M(=2Å
&java.util.Collections.singletonList(T)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaN! N(.2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaA A('2£
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaL L(+2£
Horg.jabref.logic.importer.fetcher.INSPIREFetcherTest?fetcher@22.27:22.34CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaM( M(/2ª
`org.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByExistingEntry()?article@65.17:65.24CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaM> M(E2ª
`org.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByExistingEntry()?article@65.17:65.24CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaN/ N(62¬
gorg.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByExistingEntry()?fetchedEntries@77.23:77.37CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaN9 N(G2¬
`org.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByExistingEntry()?article@65.17:65.24DECLARATIONQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaA A(2…
gorg.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByExistingEntry()?fetchedEntries@77.23:77.37DECLARATIONQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaM M(%2f
voidRETURN_TYPEQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java@ @(”
`org.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByExistingEntry()?article@65.17:65.24VARIABLEQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaA A("
typeBibEntry"
isFinalfalse"ì
declarationString˝<mark class="modifier"> </mark>BibEntry <mark class="class-field">article</mark> = new BibEntry(StandardEntryType.Article).withCitationKey("Melnikov:1998pr").withField(StandardField.AUTHOR, "Melnikov, Kirill and Yelkhovsky, Alexander").withField(StandardField.TITLE, "Top quark production at threshold with O(alpha-s**2) accuracy").withField(StandardField.DOI, "10.1016/S0550-3213(98)00348-4").withField(StandardField.JOURNAL, "Nucl. Phys. B").withField(StandardField.PAGES, "59--72").withField(StandardField.VOLUME, "528").withField(StandardField.YEAR, "1998").withField(StandardField.EPRINT, "hep-ph/9802379").withField(StandardField.ARCHIVEPREFIX, "arXiv").withField(new UnknownField("reportnumber")<mark class="modifier">,</mark> "BUDKER-INP-1998-7, TTP-98-10")*article2z
org.jabref.model.entry.BibEntryTYPEQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaA A(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaL L(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaK K(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaJ J(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaI I(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaH H(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaG G(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaF F(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaE E(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaD D(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaC C(2ú
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaB B( 2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaA A('2£
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaL L(+®	
gorg.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByExistingEntry()?fetchedEntries@77.23:77.37VARIABLEQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaM M(%"
typeList<BibEntry>"
isFinalfalse"ì
declarationString~<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">fetchedEntries</mark> = fetcher.performSearch(article)*fetchedEntries2i
java.util.ListTYPEQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaM M(2É
org.jabref.model.entry.BibEntryTYPE_ARGUMENTQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaM M(2∫
_org.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaM0 M(=2£
Horg.jabref.logic.importer.fetcher.INSPIREFetcherTest?fetcher@22.27:22.34CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaM( M(/2ª
`org.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByExistingEntry()?article@65.17:65.24CALLQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.javaM> M(EÇ
Horg.jabref.logic.importer.fetcher.INSPIREFetcherTest?fetcher@22.27:22.34VARIABLEQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java (""
isFinalfalse"
typeINSPIREFetcher"r
declarationString]<mark class="modifier">private </mark>INSPIREFetcher <mark class="class-field">fetcher</mark>"
isStaticfalse"
accessprivate*fetcher2ã
0org.jabref.logic.importer.fetcher.INSPIREFetcherTYPEQ
Gsrc\test\java\org\jabref\logic\importer\fetcher\INSPIREFetcherTest.java (