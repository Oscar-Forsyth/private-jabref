
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÀ
(org.jabref.logic.importer.fetcher.ZbMATHCLASSE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java$ $(",
package!org.jabref.logic.importer.fetcher"
isFinalfalse"
inner classfalse"

isAbstractfalse"Ÿ
declarationString√<mark class="modifier">public </mark><mark class="modifier">class </mark>ZbMATH<mark class="modifier"><br>implements </mark>SearchBasedParserFetcher, IdBasedParserFetcher, EntryBasedParserFetcher"
accesspublic*ZbMATH2\
ZbMATHDECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java( ((2à
2org.jabref.logic.importer.fetcher.ZbMATH.getName()DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java- -(2Æ
Xorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java2 2(2 
torg.jabref.logic.importer.fetcher.ZbMATH.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaj j(2§
Norg.jabref.logic.importer.fetcher.ZbMATH.getUrlForIdentifier(java.lang.String)DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javas s("2ä
4org.jabref.logic.importer.fetcher.ZbMATH.getParser()DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java} }(2Ø
Worg.jabref.logic.importer.fetcher.ZbMATH.doPostCleanup(org.jabref.model.entry.BibEntry)DECLARATIONG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÇ Ç(2ñ
@org.jabref.logic.importer.fetcher.ZbMATH?preferences@38.42:38.53DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java&* &(52É
2org.jabref.logic.importer.SearchBasedParserFetcherEXTENDE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java$ $(72
.org.jabref.logic.importer.IdBasedParserFetcherEXTENDE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java$9 $(M2Ç
1org.jabref.logic.importer.EntryBasedParserFetcherEXTENDE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java$O $(f˙
ZbMATHCONSTRUCTORE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java( (("Å
declarationStringl<mark class="modifier">public </mark><mark class="method">ZbMATH</mark>(ImportFormatPreferences preferences)*ZbMATH2è
@org.jabref.logic.importer.fetcher.ZbMATH?preferences@38.42:38.53CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java) )(2~
(org.jabref.logic.importer.fetcher.ZbMATHRETURN_TYPEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java( ((¡
preferences	PARAMETERE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java(* ((5"
typeImportFormatPreferences"
isFinalfalse"8
declarationString#ImportFormatPreferences preferences*preferences2f
ImportFormatPreferencesTYPEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java( (()Û
2org.jabref.logic.importer.fetcher.ZbMATH.getName()METHODE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java- -("
isFinalfalse"î
declarationString<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>String <mark class="method">getName</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*getName2Å
.org.jabref.logic.importer.WebFetcher.getName()OVERRIDEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java- -(2Å
.org.jabref.logic.importer.WebFetcher.getName()OVERRIDEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java- -(2Å
.org.jabref.logic.importer.WebFetcher.getName()OVERRIDEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java- -(2f
java.lang.StringRETURN_TYPEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java- -(Çx
Xorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)METHODE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java2 2("
isFinalfalse"û
declarationStringà<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>URL <mark class="method">getURLForEntry</mark>(BibEntry entry)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>URISyntaxException<mark class="modifier"><mark class="modifier">,</mark></mark> MalformedURLException<mark class="modifier"><mark class="modifier">,</mark></mark> FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeURL*getURLForEntry2õ
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java3. 3(62m
java.util.Optional.isPresent()CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java4 4("2ù
Norg.jabref.logic.importer.fetcher.ZbMATH.getUrlForIdentifier(java.lang.String)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java6 6(&2g
java.util.Optional.get()CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java64 6(72ì
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java=3 =(<2¢
Sorg.jabref.model.entry.BibEntry.getFieldOrAlias(org.jabref.model.entry.field.Field)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java= =(2ì
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java>5 >(>2¢
Sorg.jabref.model.entry.BibEntry.getFieldOrAlias(org.jabref.model.entry.field.Field)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java> >(2ì
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java?2 ?(;2¢
Sorg.jabref.model.entry.BibEntry.getFieldOrAlias(org.jabref.model.entry.field.Field)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java? ?(2ì
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaA A(2¢
Sorg.jabref.model.entry.BibEntry.getFieldOrAlias(org.jabref.model.entry.field.Field)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java@ @(2ì
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaB4 B(=2¢
Sorg.jabref.model.entry.BibEntry.getFieldOrAlias(org.jabref.model.entry.field.Field)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaB B(2ì
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaC3 C(<2¢
Sorg.jabref.model.entry.BibEntry.getFieldOrAlias(org.jabref.model.entry.field.Field)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaC C(2m
java.util.Optional.isPresent()CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaE8 E(A2¢
Sorg.jabref.model.entry.BibEntry.getFieldOrAlias(org.jabref.model.entry.field.Field)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaE E(!2à
9org.jabref.model.entry.AuthorList.parse(java.lang.String)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaG, G(12g
java.util.Optional.get()CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaG^ G(a2¢
Sorg.jabref.model.entry.BibEntry.getFieldOrAlias(org.jabref.model.entry.field.Field)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaG8 G(G2õ
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaJ2 J(92ü
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaI2 I(52l
java.util.Collection.stream()CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaH? H(E2}
.org.jabref.model.entry.AuthorList.getAuthors()CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaH2 H(<2Ç
3org.jabref.model.entry.Author.getLastFirst(boolean)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaIG I(S2ä
;java.util.stream.Collectors.joining(java.lang.CharSequence)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaJE J(L2ù
Norg.jabref.logic.importer.fetcher.ZbMATH.getUrlForIdentifier(java.lang.String)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javae e(&2≠
^org.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)!entryCALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java3( 3(-2¿
qorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?zblidInEntry@51.25:51.37CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java4 4(2¿
qorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?zblidInEntry@51.25:51.37CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java6' 6(32æ
oorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?uriBuilder@57.19:57.29CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java: :(2æ
oorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?uriBuilder@57.19:57.29CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java; ;(2≠
^org.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)!entryCALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java= =(2æ
oorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?uriBuilder@57.19:57.29CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java=F =(P2π
jorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?title@61.61:61.66CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java=c =(h2≠
^org.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)!entryCALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java> >(2æ
oorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?uriBuilder@57.19:57.29CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java>J >(T2ª
lorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?journal@62.63:62.70CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java>g >(n2≠
^org.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)!entryCALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java? ?(2æ
oorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?uriBuilder@57.19:57.29CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java?D ?(N2∏
iorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?year@63.60:63.64CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java?a ?(e2≠
^org.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)!entryCALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java@ @(2æ
oorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?uriBuilder@57.19:57.29CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaA& A(02æ
oorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?pagination@65.24:65.34CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaAC A(M2≠
^org.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)!entryCALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaB B(2æ
oorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?uriBuilder@57.19:57.29CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaBH B(R2∫
korg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?volume@66.62:66.68CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaBe B(k2≠
^org.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)!entryCALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaC C(2æ
oorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?uriBuilder@57.19:57.29CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaCF C(P2π
jorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?issue@67.61:67.66CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaCc C(h2≠
^org.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)!entryCALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaE E(2≠
^org.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)!entryCALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaG2 G(72ª
lorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?authors@71.23:71.30CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaH* H(12∫
korg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?author@73.54:73.60CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaI@ I(F2æ
oorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?uriBuilder@57.19:57.29CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaK K(2»
yorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?authorsWithSemicolon@72.19:72.39CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaK) K(=2æ
oorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?uriBuilder@57.19:57.29CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaS S(%2Ω
norg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?urlString@83.15:83.24CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaT6 T(?2º
morg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?response@84.31:84.39CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaW W(2º
morg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?response@84.31:84.39CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaX X('2∫
korg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?result@88.22:88.28CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java[ [(2π
jorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?zblid@86.15:86.20CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java\ \(2∫
korg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?result@88.22:88.28CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java\ \(2π
jorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?zblid@86.15:86.20CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaa a(2π
jorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?zblid@86.15:86.20CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javae' e(,2¥
aorg.jabref.logic.importer.EntryBasedParserFetcher.getURLForEntry(org.jabref.model.entry.BibEntry)OVERRIDEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java2 2(2≤
^org.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)!entry	PARAMETERE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java2' 2(,2«
qorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?zblidInEntry@51.25:51.37DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java3 3(%2≈
oorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?uriBuilder@57.19:57.29DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java9 9(2¬
lorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?authors@71.23:71.30DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaG G(2œ
yorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?authorsWithSemicolon@72.19:72.39DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaH H('2ƒ
norg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?urlString@83.15:83.24DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaS S(2√
morg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?response@84.31:84.39DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaT T('2¿
jorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?zblid@86.15:86.20DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaV V(2¡
korg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?result@88.22:88.28DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaX X(2¿
jorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?title@61.61:61.66DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java== =(B2¬
lorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?journal@62.63:62.70DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java>? >(F2ø
iorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?year@63.60:63.64DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java?< ?(@2≈
oorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?pagination@65.24:65.34DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaA A("2¡
korg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?volume@66.62:66.68DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaB> B(D2¿
jorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?issue@67.61:67.66DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaC= C(B2¡
korg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?author@73.54:73.60DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaI6 I(<2b
java.net.URLRETURN_TYPEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java2 2(∫
qorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?zblidInEntry@51.25:51.37VARIABLEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java3 3(%"
typeOptional<String>"
isFinalfalse"û
declarationStringà<mark class="modifier"> </mark>Optional<String> <mark class="class-field">zblidInEntry</mark> = entry.getField(StandardField.ZBL_NUMBER)*zblidInEntry2a
java.util.OptionalTYPEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java3 3(2h
java.lang.StringTYPE_ARGUMENTE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java3 3(2õ
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java3. 3(62≠
^org.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)!entryCALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java3( 3(-ò
oorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?uriBuilder@57.19:57.29VARIABLEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java9 9("
type
URIBuilder"
isFinalfalse"©
declarationStringì<mark class="modifier"> </mark>URIBuilder <mark class="class-field">uriBuilder</mark> = new URIBuilder("https://zbmath.org/citationmatching/match")*
uriBuilder2v
'org.apache.http.client.utils.URIBuilderTYPEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java9 9(⁄
lorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?authors@71.23:71.30VARIABLEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaG G("
type
AuthorList"
isFinalfalse"Æ
declarationStringò<mark class="modifier"> </mark>AuthorList <mark class="class-field">authors</mark> = AuthorList.parse(entry.getFieldOrAlias(StandardField.AUTHOR).get())*authors2p
!org.jabref.model.entry.AuthorListTYPEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaG G(2à
9org.jabref.model.entry.AuthorList.parse(java.lang.String)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaG, G(12g
java.util.Optional.get()CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaG^ G(a2¢
Sorg.jabref.model.entry.BibEntry.getFieldOrAlias(org.jabref.model.entry.field.Field)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaG8 G(G2≠
^org.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)!entryCALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaG2 G(7ú
yorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?authorsWithSemicolon@72.19:72.39VARIABLEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaH H('"
typeString"
isFinalfalse"˙
declarationString‰<mark class="modifier"> </mark>String <mark class="class-field">authorsWithSemicolon</mark> = authors.getAuthors().stream().map(author -> author.getLastFirst(<mark class="modifier">false</mark>)).collect(Collectors.joining(";"))*authorsWithSemicolon2_
java.lang.StringTYPEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaH H(2õ
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaJ2 J(92ü
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaI2 I(52l
java.util.Collection.stream()CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaH? H(E2}
.org.jabref.model.entry.AuthorList.getAuthors()CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaH2 H(<2Ç
3org.jabref.model.entry.Author.getLastFirst(boolean)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaIG I(S2ä
;java.util.stream.Collectors.joining(java.lang.CharSequence)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaJE J(L2ª
lorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?authors@71.23:71.30CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaH* H(12∫
korg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?author@73.54:73.60CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaI@ I(Fò
norg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?urlString@83.15:83.24VARIABLEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaS S("
typeString"
isFinalfalse"Ö
declarationStringp<mark class="modifier"> </mark>String <mark class="class-field">urlString</mark> = uriBuilder.build().toString()*	urlString2_
java.lang.StringTYPEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaS S(2æ
oorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?uriBuilder@57.19:57.29CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaS S(%Ø
morg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?response@84.31:84.39VARIABLEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaT T('"
typeHttpResponse<JsonNode>"
isFinalfalse"ó
declarationStringÅ<mark class="modifier"> </mark>HttpResponse<JsonNode> <mark class="class-field">response</mark> = Unirest.get(urlString).asJson()*response2h
kong.unirest.HttpResponseTYPEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaT T(2m
kong.unirest.JsonNodeTYPE_ARGUMENTE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaT T(2Ω
norg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?urlString@83.15:83.24CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaT6 T(?–
jorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?zblid@86.15:86.20VARIABLEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaV V("
typeString"
isFinalfalse"Ü
declarationStringq<mark class="modifier"> </mark>String <mark class="class-field">zblid</mark> = <mark class="modifier">null</mark>*zblid2_
java.lang.StringTYPEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaV V(∏
korg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?result@88.22:88.28VARIABLEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaX X("
type	JSONArray"
isFinalfalse"ü
declarationStringâ<mark class="modifier"> </mark>JSONArray <mark class="class-field">result</mark> = response.getBody().getObject().getJSONArray("results")*result2j
kong.unirest.json.JSONArrayTYPEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaX X(2º
morg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?response@84.31:84.39CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaX X('Ú
^org.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)!entry	PARAMETERE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java2' 2(,"
typeBibEntry"
isFinalfalse"#
declarationStringBibEntry entry*entry2n
org.jabref.model.entry.BibEntryTYPEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java2 2(&É
jorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?title@61.61:61.66VARIABLEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java== =(B"
type"
isFinalfalse"
declarationString title*title2TYPEâ
lorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?journal@62.63:62.70VARIABLEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java>? >(F"
type"
isFinalfalse"
declarationString journal*journal2TYPEÄ
iorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?year@63.60:63.64VARIABLEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java?< ?(@"
type"
isFinalfalse"
declarationString year*year2TYPEí
oorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?pagination@65.24:65.34VARIABLEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaA A(""
type"
isFinalfalse" 
declarationString pagination*
pagination2TYPEÜ
korg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?volume@66.62:66.68VARIABLEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaB> B(D"
type"
isFinalfalse"
declarationString volume*volume2TYPEÉ
jorg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?issue@67.61:67.66VARIABLEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaC= C(B"
type"
isFinalfalse"
declarationString issue*issue2TYPEÜ
korg.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(org.jabref.model.entry.BibEntry)?author@73.54:73.60VARIABLEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaI6 I(<"
type"
isFinalfalse"
declarationString author*author2TYPE–
torg.jabref.logic.importer.fetcher.ZbMATH.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)METHODE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaj j("
isFinalfalse"•
declarationStringè<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>URL <mark class="method">getURLForQuery</mark>(QueryNode luceneQuery)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>URISyntaxException<mark class="modifier"><mark class="modifier">,</mark></mark> MalformedURLException<mark class="modifier"><mark class="modifier">,</mark></mark> FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeURL*getURLForQuery2≠
^org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformer.ZbMathQueryTransformer()CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javal) l(?2›
çorg.jabref.logic.importer.fetcher.ZbMATH.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)?uriBuilder@107.19:107.29CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javal l(2–
Äorg.jabref.logic.importer.fetcher.ZbMATH.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)!luceneQueryCALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javalW l(b2›
çorg.jabref.logic.importer.fetcher.ZbMATH.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)?uriBuilder@107.19:107.29CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javam m(2›
çorg.jabref.logic.importer.fetcher.ZbMATH.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)?uriBuilder@107.19:107.29CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javan n(2›
çorg.jabref.logic.importer.fetcher.ZbMATH.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)?uriBuilder@107.19:107.29CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javao o(2—
~org.jabref.logic.importer.SearchBasedParserFetcher.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)OVERRIDEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaj j(2’
Äorg.jabref.logic.importer.fetcher.ZbMATH.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)!luceneQuery	PARAMETERE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaj( j(32‰
çorg.jabref.logic.importer.fetcher.ZbMATH.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)?uriBuilder@107.19:107.29DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javak k(2b
java.net.URLRETURN_TYPEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaj j(Æ
çorg.jabref.logic.importer.fetcher.ZbMATH.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)?uriBuilder@107.19:107.29VARIABLEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javak k("
type
URIBuilder"
isFinalfalse"†
declarationStringä<mark class="modifier"> </mark>URIBuilder <mark class="class-field">uriBuilder</mark> = new URIBuilder("https://zbmath.org/bibtexoutput/")*
uriBuilder2v
'org.apache.http.client.utils.URIBuilderTYPEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javak k(¿
Äorg.jabref.logic.importer.fetcher.ZbMATH.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)!luceneQuery	PARAMETERE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaj( j(3"
type	QueryNode"
isFinalfalse"*
declarationStringQueryNode luceneQuery*luceneQuery2ä
;org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeTYPEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaj j('¨
Norg.jabref.logic.importer.fetcher.ZbMATH.getUrlForIdentifier(java.lang.String)METHODE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javas s(""
isFinalfalse"¶
declarationStringê<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>URL <mark class="method">getUrlForIdentifier</mark>(String identifier)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>URISyntaxException<mark class="modifier"><mark class="modifier">,</mark></mark> MalformedURLException<mark class="modifier"><mark class="modifier">,</mark></mark> FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeURL*getUrlForIdentifier2x
)java.lang.String.concat(java.lang.String)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javau u(#2®
Yorg.jabref.logic.importer.fetcher.ZbMATH.getUrlForIdentifier(java.lang.String)!identifierCALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javau$ u(.2∂
gorg.jabref.logic.importer.fetcher.ZbMATH.getUrlForIdentifier(java.lang.String)?uriBuilder@116.19:116.29CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javav v(2±
borg.jabref.logic.importer.fetcher.ZbMATH.getUrlForIdentifier(java.lang.String)?query@117.15:117.20CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javav% v(*2∂
gorg.jabref.logic.importer.fetcher.ZbMATH.getUrlForIdentifier(java.lang.String)?uriBuilder@116.19:116.29CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaw w(2∂
gorg.jabref.logic.importer.fetcher.ZbMATH.getUrlForIdentifier(java.lang.String)?uriBuilder@116.19:116.29CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javax x(2∂
gorg.jabref.logic.importer.fetcher.ZbMATH.getUrlForIdentifier(java.lang.String)?uriBuilder@116.19:116.29CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javay y(2ß
Torg.jabref.logic.importer.IdBasedParserFetcher.getUrlForIdentifier(java.lang.String)OVERRIDEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javas s("2≠
Yorg.jabref.logic.importer.fetcher.ZbMATH.getUrlForIdentifier(java.lang.String)!identifier	PARAMETERE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javas* s(42Ω
gorg.jabref.logic.importer.fetcher.ZbMATH.getUrlForIdentifier(java.lang.String)?uriBuilder@116.19:116.29DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javat t(2∏
borg.jabref.logic.importer.fetcher.ZbMATH.getUrlForIdentifier(java.lang.String)?query@117.15:117.20DECLARATIONE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javau u(2b
java.net.URLRETURN_TYPEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javas s(á
gorg.jabref.logic.importer.fetcher.ZbMATH.getUrlForIdentifier(java.lang.String)?uriBuilder@116.19:116.29VARIABLEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javat t("
type
URIBuilder"
isFinalfalse"†
declarationStringä<mark class="modifier"> </mark>URIBuilder <mark class="class-field">uriBuilder</mark> = new URIBuilder("https://zbmath.org/bibtexoutput/")*
uriBuilder2v
'org.apache.http.client.utils.URIBuilderTYPEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javat t(‚
borg.jabref.logic.importer.fetcher.ZbMATH.getUrlForIdentifier(java.lang.String)?query@117.15:117.20VARIABLEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javau u("
typeString"
isFinalfalse"|
declarationStringg<mark class="modifier"> </mark>String <mark class="class-field">query</mark> = "an:".concat(identifier)*query2_
java.lang.StringTYPEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javau u(2x
)java.lang.String.concat(java.lang.String)CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javau u(#2®
Yorg.jabref.logic.importer.fetcher.ZbMATH.getUrlForIdentifier(java.lang.String)!identifierCALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javau$ u(.‰
Yorg.jabref.logic.importer.fetcher.ZbMATH.getUrlForIdentifier(java.lang.String)!identifier	PARAMETERE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javas* s(4"
typeString"
isFinalfalse"&
declarationStringString identifier*
identifier2_
java.lang.StringTYPEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javas# s()«
4org.jabref.logic.importer.fetcher.ZbMATH.getParser()METHODE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java} }("
isFinalfalse"ó
declarationStringÅ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>Parser <mark class="method">getParser</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeParser*	getParser2è
@org.jabref.logic.importer.fetcher.ZbMATH?preferences@38.42:38.53CALLE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java~  ~(+2ë
>org.jabref.logic.importer.SearchBasedParserFetcher.getParser()OVERRIDEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java} }(2ç
:org.jabref.logic.importer.IdBasedParserFetcher.getParser()OVERRIDEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java} }(2ê
=org.jabref.logic.importer.EntryBasedParserFetcher.getParser()OVERRIDEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java} }(2v
 org.jabref.logic.importer.ParserRETURN_TYPEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java} }(Ÿ
Worg.jabref.logic.importer.fetcher.ZbMATH.doPostCleanup(org.jabref.model.entry.BibEntry)METHODG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÇ Ç("
isFinalfalse"≈
declarationStringØ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">doPostCleanup</mark>(BibEntry entry)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*doPostCleanup2£
Rorg.jabref.logic.cleanup.MoveFieldCleanup.cleanup(org.jabref.model.entry.BibEntry)CALLG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÉR É(Y2£
Rorg.jabref.logic.cleanup.MoveFieldCleanup.cleanup(org.jabref.model.entry.BibEntry)CALLG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÑG Ñ(N2®
Worg.jabref.logic.cleanup.FieldFormatterCleanup.cleanup(org.jabref.model.entry.BibEntry)CALLG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÖV Ö(]2®
Worg.jabref.logic.cleanup.FieldFormatterCleanup.cleanup(org.jabref.model.entry.BibEntry)CALLG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÜT Ü([2‘
Çorg.jabref.logic.cleanup.MoveFieldCleanup.MoveFieldCleanup(org.jabref.model.entry.field.Field, org.jabref.model.entry.field.Field)CALLG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÉ É(2ô
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALLG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÉ! É(-2‘
Çorg.jabref.logic.cleanup.MoveFieldCleanup.MoveFieldCleanup(org.jabref.model.entry.field.Field, org.jabref.model.entry.field.Field)CALLG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÑ Ñ(2ﬁ
åorg.jabref.logic.cleanup.FieldFormatterCleanup.FieldFormatterCleanup(org.jabref.model.entry.field.Field, org.jabref.logic.cleanup.Formatter)CALLG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÖ Ö(!2¶
Uorg.jabref.logic.formatter.bibtexfields.RemoveBracesFormatter.RemoveBracesFormatter()CALLG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÖ= Ö(R2ﬁ
åorg.jabref.logic.cleanup.FieldFormatterCleanup.FieldFormatterCleanup(org.jabref.model.entry.field.Field, org.jabref.logic.cleanup.Formatter)CALLG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÜ Ü(!2¶
Uorg.jabref.logic.formatter.bibtexfields.RemoveBracesFormatter.RemoveBracesFormatter()CALLG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÜ; Ü(P2Æ
]org.jabref.logic.importer.fetcher.ZbMATH.doPostCleanup(org.jabref.model.entry.BibEntry)!entryCALLG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÉZ É(_2Æ
]org.jabref.logic.importer.fetcher.ZbMATH.doPostCleanup(org.jabref.model.entry.BibEntry)!entryCALLG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÑO Ñ(T2Æ
]org.jabref.logic.importer.fetcher.ZbMATH.doPostCleanup(org.jabref.model.entry.BibEntry)!entryCALLG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÖ^ Ö(c2Æ
]org.jabref.logic.importer.fetcher.ZbMATH.doPostCleanup(org.jabref.model.entry.BibEntry)!entryCALLG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÜ\ Ü(a2∂
aorg.jabref.logic.importer.SearchBasedParserFetcher.doPostCleanup(org.jabref.model.entry.BibEntry)OVERRIDEG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÇ Ç(2≤
]org.jabref.logic.importer.IdBasedParserFetcher.doPostCleanup(org.jabref.model.entry.BibEntry)OVERRIDEG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÇ Ç(2µ
`org.jabref.logic.importer.EntryBasedParserFetcher.doPostCleanup(org.jabref.model.entry.BibEntry)OVERRIDEG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÇ Ç(2≥
]org.jabref.logic.importer.fetcher.ZbMATH.doPostCleanup(org.jabref.model.entry.BibEntry)!entry	PARAMETERG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÇ' Ç(,2\
voidRETURN_TYPEG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÇ Ç(ı
]org.jabref.logic.importer.fetcher.ZbMATH.doPostCleanup(org.jabref.model.entry.BibEntry)!entry	PARAMETERG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÇ' Ç(,"
typeBibEntry"
isFinalfalse"#
declarationStringBibEntry entry*entry2p
org.jabref.model.entry.BibEntryTYPEG
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.javaÇ Ç(&Ñ
@org.jabref.logic.importer.fetcher.ZbMATH?preferences@38.42:38.53VALUEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java&* &(5"
isFinaltrue"
typeImportFormatPreferences"§
declarationStringé<mark class="modifier">private </mark><mark class="modifier">final </mark>ImportFormatPreferences <mark class="class-field">preferences</mark>"
isStaticfalse"
accessprivate*preferences2f
ImportFormatPreferencesTYPEE
;src\main\java\org\jabref\logic\importer\fetcher\ZbMATH.java& &()