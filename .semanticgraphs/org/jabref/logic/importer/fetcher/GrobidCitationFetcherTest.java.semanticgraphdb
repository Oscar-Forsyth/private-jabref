
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java∆ 
;org.jabref.logic.importer.fetcher.GrobidCitationFetcherTestCLASSX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java (&",
package!org.jabref.logic.importer.fetcher"
isFinalfalse"
inner classfalse"

isAbstractfalse"©
declarationStringì<mark class="annotation">@FetcherTest</mark> <br><mark class="modifier">public </mark><mark class="modifier">class </mark>GrobidCitationFetcherTest"
accesspublic*GrobidCitationFetcherTest2 
aorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.provideExamplesForCorrectResultTest()DECLARATIONX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaV$ V(G2∫
Qorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.provideInvalidInput()DECLARATIONX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java_$ _(72è
•org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchCorrectResultTest(java.lang.String, org.jabref.model.entry.BibEntry, java.lang.String)DECLARATIONX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javah h(42”
jorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchCorrectlySplitsStringTest()DECLARATIONX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javan n(<2Œ
eorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchWithEmptyStringsTest()DECLARATIONX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javat t(72›
torg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchWithInvalidDataTest(java.lang.String)DECLARATIONX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java{ {(62›
rorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.performSearchThrowsExceptionInCaseOfConnectionIssues()DECLARATIONZ
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaÅ Å(D2»
_org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?importFormatPreferences@33.35:33.58DECLARATIONX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java!# !(:2¬
Yorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?grobidPreferences@34.29:34.46DECLARATIONX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java" "(.2∆
]org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?grobidCitationFetcher@38.33:38.54DECLARATIONX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java&! &(62π
Porg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example1@40.18:40.26DECLARATIONX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java( ((2√
Zorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example1AsBibEntry@41.20:41.38DECLARATIONX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java) )(&2π
Porg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example2@54.18:54.26DECLARATIONX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java6 6(2√
Zorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example2AsBibEntry@55.20:55.38DECLARATIONX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java7 7(&2π
Porg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example3@63.18:63.26DECLARATIONX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java? ?(2√
Zorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example3AsBibEntry@64.20:64.38DECLARATIONX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java@ @(&2π
Porg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example4@76.18:76.26DECLARATIONX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaL L(2√
Zorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example4AsBibEntry@77.20:77.38DECLARATIONX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaM M(&ˇ
aorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.provideExamplesForCorrectResultTest()METHODX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaV$ V(G"
isFinalfalse"π
declarationString£<mark class="modifier">public </mark><mark class="modifier">static </mark>Stream&lt;Arguments&gt; <mark class="method">provideExamplesForCorrectResultTest</mark>()"
isStatictrue"
accesspublic"

isAbstractfalse"
typeStream<Arguments>*#provideExamplesForCorrectResultTest2º
Zorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example1AsBibEntry@41.20:41.38CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaX) X(;2≤
Porg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example1@40.18:40.26CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaX= X(E2º
Zorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example2AsBibEntry@55.20:55.38CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaY) Y(;2≤
Porg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example2@54.18:54.26CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaY= Y(E2º
Zorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example3AsBibEntry@64.20:64.38CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaZ) Z(;2≤
Porg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example3@63.18:63.26CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaZ= Z(E2º
Zorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example4AsBibEntry@77.20:77.38CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java[) [(;2≤
Porg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example4@76.18:76.26CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java[= [(E2Ä
java.util.stream.StreamRETURN_TYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaV V(2ù
+org.junit.jupiter.params.provider.ArgumentsRETURN_TYPE_ARGUMENTX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaV V("ˇ
Qorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.provideInvalidInput()METHODX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java_$ _(7"
isFinalfalse"©
declarationStringì<mark class="modifier">public </mark><mark class="modifier">static </mark>Stream&lt;Arguments&gt; <mark class="method">provideInvalidInput</mark>()"
isStatictrue"
accesspublic"

isAbstractfalse"
typeStream<Arguments>*provideInvalidInput2Ä
java.util.stream.StreamRETURN_TYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java_ _(2ù
+org.junit.jupiter.params.provider.ArgumentsRETURN_TYPE_ARGUMENTX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java_ _("’
•org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchCorrectResultTest(java.lang.String, org.jabref.model.entry.BibEntry, java.lang.String)METHODX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javah h(4"
isFinalfalse"ë
declarationString˚ = "{0}") <br><mark class="annotation">@MethodSource("provideExamplesForCorrectResultTest")</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">grobidPerformSearchCorrectResultTest</mark>(String testName<mark class="modifier"><mark class="modifier">,</mark></mark> BibEntry expectedBibEntry<mark class="modifier"><mark class="modifier">,</mark></mark> String searchQuery)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*$grobidPerformSearchCorrectResultTest2π
Worg.jabref.logic.importer.fetcher.GrobidCitationFetcher.performSearch(java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javai7 i(D2v
java.util.List.of(E)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaj j(2ø
]org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?grobidCitationFetcher@38.33:38.54CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javai! i(62î
±org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchCorrectResultTest(java.lang.String, org.jabref.model.entry.BibEntry, java.lang.String)!searchQueryCALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaiE i(P2ô
∂org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchCorrectResultTest(java.lang.String, org.jabref.model.entry.BibEntry, java.lang.String)!expectedBibEntryCALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaj j(-2û
ªorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchCorrectResultTest(java.lang.String, org.jabref.model.entry.BibEntry, java.lang.String)?entries@105.23:105.30CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaj0 j(72ñ
Æorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchCorrectResultTest(java.lang.String, org.jabref.model.entry.BibEntry, java.lang.String)!testName	PARAMETERX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javah< h(D2û
∂org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchCorrectResultTest(java.lang.String, org.jabref.model.entry.BibEntry, java.lang.String)!expectedBibEntry	PARAMETERX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javahO h(_2ô
±org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchCorrectResultTest(java.lang.String, org.jabref.model.entry.BibEntry, java.lang.String)!searchQuery	PARAMETERX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javahh h(s2•
ªorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchCorrectResultTest(java.lang.String, org.jabref.model.entry.BibEntry, java.lang.String)?entries@105.23:105.30DECLARATIONX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javai i(2m
voidRETURN_TYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javah h(ã
ªorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchCorrectResultTest(java.lang.String, org.jabref.model.entry.BibEntry, java.lang.String)?entries@105.23:105.30VARIABLEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javai i("
typeList<BibEntry>"
isFinalfalse"ü
declarationStringâ<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">entries</mark> = grobidCitationFetcher.performSearch(searchQuery)*entries2p
java.util.ListTYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javai i(2ä
org.jabref.model.entry.BibEntryTYPE_ARGUMENTX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javai i(2π
Worg.jabref.logic.importer.fetcher.GrobidCitationFetcher.performSearch(java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javai7 i(D2ø
]org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?grobidCitationFetcher@38.33:38.54CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javai! i(62î
±org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchCorrectResultTest(java.lang.String, org.jabref.model.entry.BibEntry, java.lang.String)!searchQueryCALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaiE i(P‹
Æorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchCorrectResultTest(java.lang.String, org.jabref.model.entry.BibEntry, java.lang.String)!testName	PARAMETERX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javah< h(D"
typeString"
isFinalfalse"$
declarationStringString testName*testName2r
java.lang.StringTYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javah5 h(;à
∂org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchCorrectResultTest(java.lang.String, org.jabref.model.entry.BibEntry, java.lang.String)!expectedBibEntry	PARAMETERX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javahO h(_"
typeBibEntry"
isFinalfalse".
declarationStringBibEntry expectedBibEntry*expectedBibEntry2Å
org.jabref.model.entry.BibEntryTYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javahF h(NÂ
±org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchCorrectResultTest(java.lang.String, org.jabref.model.entry.BibEntry, java.lang.String)!searchQuery	PARAMETERX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javahh h(s"
typeString"
isFinalfalse"'
declarationStringString searchQuery*searchQuery2r
java.lang.StringTYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaha h(gí
jorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchCorrectlySplitsStringTest()METHODX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javan n(<"
isFinalfalse"¶
declarationStringê<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">grobidPerformSearchCorrectlySplitsStringTest</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*,grobidPerformSearchCorrectlySplitsStringTest2π
Worg.jabref.logic.importer.fetcher.GrobidCitationFetcher.performSearch(java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javao7 o(D2
java.util.List.of(E, E, E, E)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javap p(2ø
]org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?grobidCitationFetcher@38.33:38.54CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javao! o(62≤
Porg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example1@40.18:40.26CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaoE o(M2≤
Porg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example2@54.18:54.26CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaoY o(a2≤
Porg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example3@63.18:63.26CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaoq o(y2¥
Porg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example4@76.18:76.26CALLZ
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaoÖ o(ç2º
Zorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example1AsBibEntry@41.20:41.38CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javap p(/2º
Zorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example2AsBibEntry@55.20:55.38CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javap1 p(C2º
Zorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example3AsBibEntry@64.20:64.38CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javapE p(W2º
Zorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example4AsBibEntry@77.20:77.38CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javapY p(k2„
Äorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchCorrectlySplitsStringTest()?entries@111.23:111.30CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javapn p(u2Í
Äorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchCorrectlySplitsStringTest()?entries@111.23:111.30DECLARATIONX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javao o(2m
voidRETURN_TYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javan n(Ã
Äorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchCorrectlySplitsStringTest()?entries@111.23:111.30VARIABLEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javao o("
typeList<BibEntry>"
isFinalfalse"‹
declarationString∆<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">entries</mark> = grobidCitationFetcher.performSearch(example1 + "\n\n" + example2 + "\r\n\r\n" + example3 + "\r\r" + example4)*entries2p
java.util.ListTYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javao o(2ä
org.jabref.model.entry.BibEntryTYPE_ARGUMENTX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javao o(2π
Worg.jabref.logic.importer.fetcher.GrobidCitationFetcher.performSearch(java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javao7 o(D2ø
]org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?grobidCitationFetcher@38.33:38.54CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javao! o(62≤
Porg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example1@40.18:40.26CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaoE o(M2≤
Porg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example2@54.18:54.26CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaoY o(a2≤
Porg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example3@63.18:63.26CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaoq o(y2¥
Porg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example4@76.18:76.26CALLZ
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaoÖ o(ç™
eorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchWithEmptyStringsTest()METHODX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javat t(7"
isFinalfalse"°
declarationStringã<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">grobidPerformSearchWithEmptyStringsTest</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*'grobidPerformSearchWithEmptyStringsTest2π
Worg.jabref.logic.importer.fetcher.GrobidCitationFetcher.performSearch(java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javau7 u(D2É
!java.util.Collections.emptyList()CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javav! v(*2ø
]org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?grobidCitationFetcher@38.33:38.54CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javau! u(62›
{org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchWithEmptyStringsTest()?entries@117.23:117.30CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javav. v(52‰
{org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchWithEmptyStringsTest()?entries@117.23:117.30DECLARATIONX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javau u(2m
voidRETURN_TYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javat t(≤
{org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchWithEmptyStringsTest()?entries@117.23:117.30VARIABLEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javau u("
typeList<BibEntry>"
isFinalfalse"û
declarationStringà<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">entries</mark> = grobidCitationFetcher.performSearch("   \n   ")*entries2p
java.util.ListTYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javau u(2ä
org.jabref.model.entry.BibEntryTYPE_ARGUMENTX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javau u(2π
Worg.jabref.logic.importer.fetcher.GrobidCitationFetcher.performSearch(java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javau7 u(D2ø
]org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?grobidCitationFetcher@38.33:38.54CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javau! u(6·
torg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchWithInvalidDataTest(java.lang.String)METHODX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java{ {(6"
isFinalfalse"◊
declarationString¡ <br><mark class="annotation">@MethodSource("provideInvalidInput")</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">grobidPerformSearchWithInvalidDataTest</mark>(String invalidInput)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*&grobidPerformSearchWithInvalidDataTest2π
Worg.jabref.logic.importer.fetcher.GrobidCitationFetcher.performSearch(java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java|7 |(D2É
!java.util.Collections.emptyList()CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java}! }(*2ø
]org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?grobidCitationFetcher@38.33:38.54CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java|! |(62‰
Åorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchWithInvalidDataTest(java.lang.String)!invalidInputCALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java|E |(Q2Ì
äorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchWithInvalidDataTest(java.lang.String)?entries@124.23:124.30CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java}. }(52È
Åorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchWithInvalidDataTest(java.lang.String)!invalidInput	PARAMETERX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java{> {(J2Ù
äorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchWithInvalidDataTest(java.lang.String)?entries@124.23:124.30DECLARATIONX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java| |(2m
voidRETURN_TYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java{ {(´

äorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchWithInvalidDataTest(java.lang.String)?entries@124.23:124.30VARIABLEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java| |("
typeList<BibEntry>"
isFinalfalse"†
declarationStringä<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">entries</mark> = grobidCitationFetcher.performSearch(invalidInput)*entries2p
java.util.ListTYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java| |(2ä
org.jabref.model.entry.BibEntryTYPE_ARGUMENTX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java| |(2π
Worg.jabref.logic.importer.fetcher.GrobidCitationFetcher.performSearch(java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java|7 |(D2ø
]org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?grobidCitationFetcher@38.33:38.54CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java|! |(62‰
Åorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchWithInvalidDataTest(java.lang.String)!invalidInputCALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java|E |(Q∑
Åorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchWithInvalidDataTest(java.lang.String)!invalidInput	PARAMETERX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java{> {(J"
typeString"
isFinalfalse"(
declarationStringString invalidInput*invalidInput2r
java.lang.StringTYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java{7 {(=Å
rorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.performSearchThrowsExceptionInCaseOfConnectionIssues()METHODZ
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaÅ Å(D"
isFinalfalse"ı
declarationStringﬂ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">performSearchThrowsExceptionInCaseOfConnectionIssues</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException<mark class="modifier"><mark class="modifier">,</mark></mark> ParseException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*4performSearchThrowsExceptionInCaseOfConnectionIssues2ª
Worg.jabref.logic.importer.fetcher.GrobidCitationFetcher.performSearch(java.lang.String)CALLZ
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaá& á(32¨
Hjava.net.SocketTimeoutException.SocketTimeoutException(java.lang.String)CALLZ
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaÉY É(o2˜
íorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.performSearchThrowsExceptionInCaseOfConnectionIssues()?grobidServiceMock@130.22:130.39CALLZ
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaÉ É(2¡
]org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?grobidCitationFetcher@38.33:38.54CALLZ
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaÑ Ñ(2√
_org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?importFormatPreferences@33.35:33.58CALLZ
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaÑ: Ñ(Q2˜
íorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.performSearchThrowsExceptionInCaseOfConnectionIssues()?grobidServiceMock@130.22:130.39CALLZ
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaÑS Ñ(d2¡
]org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?grobidCitationFetcher@38.33:38.54CALLZ
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaá á(%2˛
íorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.performSearchThrowsExceptionInCaseOfConnectionIssues()?grobidServiceMock@130.22:130.39DECLARATIONZ
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaÇ Ç('2o
voidRETURN_TYPEZ
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaÅ Å(›
íorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.performSearchThrowsExceptionInCaseOfConnectionIssues()?grobidServiceMock@130.22:130.39VARIABLEZ
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaÇ Ç('"
typeGrobidService"
isFinalfalse"ê
declarationString{<mark class="modifier"> </mark>GrobidService <mark class="class-field">grobidServiceMock</mark> = mock(GrobidService.class)*grobidServiceMock2ê
,org.jabref.logic.importer.util.GrobidServiceTYPEZ
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaÇ Ç(©
_org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?importFormatPreferences@33.35:33.58VARIABLEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java!# !(:"
isFinalfalse"
typeImportFormatPreferences"Ì
declarationString◊<mark class="modifier"> </mark><mark class="modifier">static </mark>ImportFormatPreferences <mark class="class-field">importFormatPreferences</mark> = mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS);"
isStatictrue"
accesspackage_private*importFormatPreferences2y
ImportFormatPreferencesTYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java! !("∂
Yorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?grobidPreferences@34.29:34.46VARIABLEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java" "(."
isFinalfalse"
typeGrobidPreferences"°
declarationStringã<mark class="modifier"> </mark><mark class="modifier">static </mark>GrobidPreferences <mark class="class-field">grobidPreferences</mark> = new GrobidPreferences(true, <mark class="modifier">false</mark><mark class="modifier">,</mark> "http://grobid.jabref.org:8070");"
isStatictrue"
accesspackage_private*grobidPreferences2ï
3org.jabref.logic.importer.fetcher.GrobidPreferencesTYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java" "(2À
iorg.jabref.logic.importer.fetcher.GrobidPreferences.GrobidPreferences(boolean, boolean, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java"5 "(F»
]org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?grobidCitationFetcher@38.33:38.54VARIABLEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java&! &(6"
isFinalfalse"
typeGrobidCitationFetcher"Ô
declarationStringŸ<mark class="modifier"> </mark><mark class="modifier">static </mark>GrobidCitationFetcher <mark class="class-field">grobidCitationFetcher</mark> = new GrobidCitationFetcher(grobidPreferences, importFormatPreferences);"
isStatictrue"
accesspackage_private*grobidCitationFetcher2ô
7org.jabref.logic.importer.fetcher.GrobidCitationFetcherTYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java& &( 2ª
Yorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?grobidPreferences@34.29:34.46CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java&S &(d2¡
_org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?importFormatPreferences@33.35:33.58CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java&f &(}≠
Porg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example1@40.18:40.26VARIABLEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java( (("
isFinalfalse"
typeString"ß
declarationStringë<mark class="modifier"> </mark><mark class="modifier">static </mark>String <mark class="class-field">example1</mark> = "Derwing, T. M.<mark class="modifier">,</mark> Rossiter, M. J.<mark class="modifier">,</mark> & Munro, M. J. (2002). Teaching native speakers to listen to foreign-accented speech. Journal of Multilingual and Multicultural Development, 23(4)<mark class="modifier">,</mark> 245-259.";"
isStatictrue"
accesspackage_private*example12r
java.lang.StringTYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java( ((π
Zorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example1AsBibEntry@41.20:41.38VARIABLEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java) )(&"
isFinalfalse"
typeBibEntry"∆
declarationString∞<mark class="modifier"> </mark><mark class="modifier">static </mark>BibEntry <mark class="class-field">example1AsBibEntry</mark> = new BibEntry(StandardEntryType.Article).withCitationKey("-1").withField(StandardField.AUTHOR, "Derwing, Tracey and Rossiter, Marian and Munro, Murray").withField(StandardField.TITLE, "Teaching Native Speakers to Listen to Foreign-accented Speech").withField(StandardField.JOURNAL, "Journal of Multilingual and Multicultural Development").withField(StandardField.DOI, "10.1080/01434630208666468").withField(StandardField.DATE, "2002-09").withField(StandardField.MONTH, "9").withField(StandardField.YEAR, "2002").withField(StandardField.PAGES, "245-259").withField(StandardField.VOLUME, "23").withField(StandardField.PUBLISHER, "Informa UK Limited").withField(StandardField.NUMBER, "4");"
isStatictrue"
accesspackage_private*example1AsBibEntry2Å
org.jabref.model.entry.BibEntryTYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java) )(2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java4Q 4(Z2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java3Q 3(Z2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java2Q 2(Z2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java1Q 1(Z2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java0Q 0(Z2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java/Q /(Z2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java.Q .(Z2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java-Q -(Z2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java,Q ,(Z2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java+Q +(Z2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java*Q *(Z2£
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java)Q )(`2≤
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java)- )(5ª
Porg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example2@54.18:54.26VARIABLEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java6 6("
isFinalfalse"
typeString"µ
declarationStringü<mark class="modifier"> </mark><mark class="modifier">static </mark>String <mark class="class-field">example2</mark> = "Thomas, H. K. (2004). Training strategies for improving listeners' comprehension of foreign-accented speech (Doctoral dissertation). University of Colorado, Boulder.";"
isStatictrue"
accesspackage_private*example22r
java.lang.StringTYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java6 6(‰
Zorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example2AsBibEntry@55.20:55.38VARIABLEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java7 7(&"
isFinalfalse"
typeBibEntry"≈
declarationStringØ<mark class="modifier"> </mark><mark class="modifier">static </mark>BibEntry <mark class="class-field">example2AsBibEntry</mark> = new BibEntry(BibEntry.DEFAULT_TYPE).withCitationKey("-1").withField(StandardField.AUTHOR, "Thomas, H").withField(StandardField.TITLE, "Training strategies for improving listeners' comprehension of foreign-accented speech (Doctoral dissertation)").withField(StandardField.DATE, "2004").withField(StandardField.PUBLISHER, "University of Colorado").withField(StandardField.YEAR, "2004").withField(StandardField.ADDRESS, "Boulder");"
isStatictrue"
accesspackage_private*example2AsBibEntry2Å
org.jabref.model.entry.BibEntryTYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java7 7(2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java=M =(V2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java<M <(V2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java;M ;(V2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java:M :(V2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java9M 9(V2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java8M 8(V2£
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java7M 7(\2≤
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java7- 7(5‰
Porg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example3@63.18:63.26VARIABLEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java? ?("
isFinalfalse"
typeString"ﬁ
declarationString»<mark class="modifier"> </mark><mark class="modifier">static </mark>String <mark class="class-field">example3</mark> = "Turk, J.<mark class="modifier">,</mark> Graham, P.<mark class="modifier">,</mark> & Verhulst, F. (2007). Child and adolescent psychiatry : A developmental approach. Oxford, England: Oxford University Press.";"
isStatictrue"
accesspackage_private*example32r
java.lang.StringTYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java? ?(¥
Zorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example3AsBibEntry@64.20:64.38VARIABLEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java@ @(&"
isFinalfalse"
typeBibEntry"Ö
declarationStringÔ<mark class="modifier"> </mark><mark class="modifier">static </mark>BibEntry <mark class="class-field">example3AsBibEntry</mark> = new BibEntry(StandardEntryType.InBook).withCitationKey("-1").withField(StandardField.AUTHOR, "Turk, Jeremy and Graham, Philip and Verhulst, Frank").withField(StandardField.TITLE, "Developmental psychopathology").withField(StandardField.BOOKTITLE, "Child and Adolescent Psychiatry").withField(StandardField.PUBLISHER, "Oxford University Press").withField(StandardField.DATE, "2007-02").withField(StandardField.YEAR, "2007").withField(StandardField.MONTH, "2").withField(StandardField.PAGES, "191-264").withField(StandardField.DOI, "10.1093/med/9780199216697.003.0004").withField(StandardField.ADDRESS, "Oxford, England");"
isStatictrue"
accesspackage_private*example3AsBibEntry2Å
org.jabref.model.entry.BibEntryTYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java@ @(2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaJM J(V2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaIM I(V2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaHM H(V2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaGM G(V2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaFM F(V2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaEM E(V2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaDM D(V2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaCM C(V2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaBM B(V2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaAM A(V2£
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java@P @(_2≤
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.java@- @(5≠
Porg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example4@76.18:76.26VARIABLEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaL L("
isFinalfalse"
typeString"ß
declarationStringë<mark class="modifier"> </mark><mark class="modifier">static </mark>String <mark class="class-field">example4</mark> = "Carr, I.<mark class="modifier">,</mark> & Kidner, R. (2003). Statutes and conventions on international trade law (4th ed.). London, England: Cavendish.";"
isStatictrue"
accesspackage_private*example42r
java.lang.StringTYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaL L(°
Zorg.jabref.logic.importer.fetcher.GrobidCitationFetcherTest?example4AsBibEntry@77.20:77.38VARIABLEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaM M(&"
isFinalfalse"
typeBibEntry"æ
declarationString®<mark class="modifier"> </mark><mark class="modifier">static </mark>BibEntry <mark class="class-field">example4AsBibEntry</mark> = new BibEntry(StandardEntryType.InBook).withCitationKey("-1").withField(StandardField.AUTHOR, "Carr, I and Kidner, R").withField(StandardField.BOOKTITLE, "Statutes and conventions on international trade law").withField(StandardField.PUBLISHER, "Cavendish").withField(StandardField.DATE, "2003").withField(StandardField.YEAR, "2003").withField(StandardField.NUMBER, "4").withField(StandardField.ADDRESS, "London, England");"
isStatictrue"
accesspackage_private*example4AsBibEntry2Å
org.jabref.model.entry.BibEntryTYPEX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaM M(2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaTP T(Y2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaSP S(Y2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaRP R(Y2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaQP Q(Y2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaPP P(Y2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaOP O(Y2¡
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaNP N(Y2£
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaMP M(_2≤
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLX
Nsrc\test\java\org\jabref\logic\importer\fetcher\GrobidCitationFetcherTest.javaM- M(5