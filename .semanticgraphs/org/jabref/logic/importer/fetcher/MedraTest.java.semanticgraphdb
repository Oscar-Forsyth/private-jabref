
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaÜ
+org.jabref.logic.importer.fetcher.MedraTestCLASSH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java (",
package!org.jabref.logic.importer.fetcher"
isFinalfalse"
inner classfalse"

isAbstractfalse"ô
declarationStringÉ<mark class="annotation">@FetcherTest</mark> <br><mark class="modifier">public </mark><mark class="modifier">class </mark>MedraTest"
accesspublic*	MedraTest2ö
Aorg.jabref.logic.importer.fetcher.MedraTest.getDoiBibEntryPairs()DECLARATIONH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java% (82é
5org.jabref.logic.importer.fetcher.MedraTest.getName()DECLARATIONH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaJ J(2ú
Corg.jabref.logic.importer.fetcher.MedraTest.performSearchEmptyDOI()DECLARATIONH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaO O(%2ô
@org.jabref.logic.importer.fetcher.MedraTest.performNonExistent()DECLARATIONH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaT T("2›
Éorg.jabref.logic.importer.fetcher.MedraTest.doiBibEntryPairs(java.lang.String, java.util.Optional<org.jabref.model.entry.BibEntry>)DECLARATIONH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaZ Z( 2ò
?org.jabref.logic.importer.fetcher.MedraTest?fetcher@23.24:23.31DECLARATIONH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java (ü,
Aorg.jabref.logic.importer.fetcher.MedraTest.getDoiBibEntryPairs()METHODH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java% (8"
isFinalfalse"™
declarationStringî<mark class="modifier">private </mark><mark class="modifier">static </mark>Stream&lt;Arguments&gt; <mark class="method">getDoiBibEntryPairs</mark>()"
isStatictrue"
accessprivate"

isAbstractfalse"
typeStream<Arguments>*getDoiBibEntryPairs2j
java.util.Optional.of(T)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java! (#2±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java%) %(22±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java$) $(22±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java#) #(22±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java") "(22±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java!) !(22±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java )  (22±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java) (22±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java) (22j
java.util.Optional.of(T)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java)! )(#2±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java:) :(22±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java9) 9(22±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java8) 8(22±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java7) 7(22±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java6) 6(22±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java5) 5(22±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java4) 4(22±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java+) +(22j
java.util.Optional.of(T)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java<! <(#2±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaD) D(22±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaC) C(22±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaB) B(22±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaA) A(22±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java@) @(22±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java?) ?(22±
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java>) >(22¢
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java$ (,2¢
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java*$ *(,2¢
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java=$ =(,2p
java.util.stream.StreamRETURN_TYPEH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java (2ç
+org.junit.jupiter.params.provider.ArgumentsRETURN_TYPE_ARGUMENTH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java (#ï
5org.jabref.logic.importer.fetcher.MedraTest.getName()METHODH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaJ J("
isFinalfalse"≠
declarationStringó<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">getName</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*getName2É
1org.jabref.logic.importer.fetcher.Medra.getName()CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaK& K(-2ë
?org.jabref.logic.importer.fetcher.MedraTest?fetcher@23.24:23.31CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaK K(%2]
voidRETURN_TYPEH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaJ J(¢
Corg.jabref.logic.importer.fetcher.MedraTest.performSearchEmptyDOI()METHODH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaO O(%"
isFinalfalse"è
declarationString˘<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">performSearchEmptyDOI</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*performSearchEmptyDOI2l
java.util.Optional.empty()CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaP P(#2§
Rorg.jabref.logic.importer.IdBasedParserFetcher.performSearchById(java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaP/ P(@2ë
?org.jabref.logic.importer.fetcher.MedraTest?fetcher@23.24:23.31CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaP' P(.2]
voidRETURN_TYPEH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaO O(´
@org.jabref.logic.importer.fetcher.MedraTest.performNonExistent()METHODH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaT T(""
isFinalfalse"å
declarationStringˆ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">performNonExistent</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*performNonExistent2§
Rorg.jabref.logic.importer.IdBasedParserFetcher.performSearchById(java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaUA U(R2ë
?org.jabref.logic.importer.fetcher.MedraTest?fetcher@23.24:23.31CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaU9 U(@2]
voidRETURN_TYPEH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaT T(Ä
Éorg.jabref.logic.importer.fetcher.MedraTest.doiBibEntryPairs(java.lang.String, java.util.Optional<org.jabref.model.entry.BibEntry>)METHODH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaZ Z( "
isFinalfalse"û
declarationStringà <br><mark class="annotation">@MethodSource("getDoiBibEntryPairs")</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">doiBibEntryPairs</mark>(String identifier<mark class="modifier"><mark class="modifier">,</mark></mark> Optional&lt;BibEntry&gt; expected)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*doiBibEntryPairs2§
Rorg.jabref.logic.importer.IdBasedParserFetcher.performSearchById(java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java[2 [(C2ë
?org.jabref.logic.importer.fetcher.MedraTest?fetcher@23.24:23.31CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java[* [(12·
éorg.jabref.logic.importer.fetcher.MedraTest.doiBibEntryPairs(java.lang.String, java.util.Optional<org.jabref.model.entry.BibEntry>)!identifierCALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java[D [(N2ﬂ
åorg.jabref.logic.importer.fetcher.MedraTest.doiBibEntryPairs(java.lang.String, java.util.Optional<org.jabref.model.entry.BibEntry>)!expectedCALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java\ \(2Ô
úorg.jabref.logic.importer.fetcher.MedraTest.doiBibEntryPairs(java.lang.String, java.util.Optional<org.jabref.model.entry.BibEntry>)?fetchedEntry@91.27:91.39CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java\ \(+2Ê
éorg.jabref.logic.importer.fetcher.MedraTest.doiBibEntryPairs(java.lang.String, java.util.Optional<org.jabref.model.entry.BibEntry>)!identifier	PARAMETERH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaZ( Z(22‰
åorg.jabref.logic.importer.fetcher.MedraTest.doiBibEntryPairs(java.lang.String, java.util.Optional<org.jabref.model.entry.BibEntry>)!expected	PARAMETERH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaZG Z(O2ˆ
úorg.jabref.logic.importer.fetcher.MedraTest.doiBibEntryPairs(java.lang.String, java.util.Optional<org.jabref.model.entry.BibEntry>)?fetchedEntry@91.27:91.39DECLARATIONH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java[ [('2]
voidRETURN_TYPEH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaZ Z(–	
úorg.jabref.logic.importer.fetcher.MedraTest.doiBibEntryPairs(java.lang.String, java.util.Optional<org.jabref.model.entry.BibEntry>)?fetchedEntry@91.27:91.39VARIABLEH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java[ [('"
typeOptional<BibEntry>"
isFinalfalse"ù
declarationStringá<mark class="modifier"> </mark>Optional<BibEntry> <mark class="class-field">fetchedEntry</mark> = fetcher.performSearchById(identifier)*fetchedEntry2d
java.util.OptionalTYPEH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java[ [(2z
org.jabref.model.entry.BibEntryTYPE_ARGUMENTH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java[ [(2§
Rorg.jabref.logic.importer.IdBasedParserFetcher.performSearchById(java.lang.String)CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java[2 [(C2ë
?org.jabref.logic.importer.fetcher.MedraTest?fetcher@23.24:23.31CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java[* [(12·
éorg.jabref.logic.importer.fetcher.MedraTest.doiBibEntryPairs(java.lang.String, java.util.Optional<org.jabref.model.entry.BibEntry>)!identifierCALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java[D [(N†
éorg.jabref.logic.importer.fetcher.MedraTest.doiBibEntryPairs(java.lang.String, java.util.Optional<org.jabref.model.entry.BibEntry>)!identifier	PARAMETERH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaZ( Z(2"
typeString"
isFinalfalse"&
declarationStringString identifier*
identifier2b
java.lang.StringTYPEH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaZ! Z('∞
åorg.jabref.logic.importer.fetcher.MedraTest.doiBibEntryPairs(java.lang.String, java.util.Optional<org.jabref.model.entry.BibEntry>)!expected	PARAMETERH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaZG Z(O"
typeOptional<BibEntry>"
isFinalfalse"0
declarationStringOptional<BibEntry> expected*expected2d
java.util.OptionalTYPEH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaZ4 Z(<2z
org.jabref.model.entry.BibEntryTYPE_ARGUMENTH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.javaZ= Z(EÄ
?org.jabref.logic.importer.fetcher.MedraTest?fetcher@23.24:23.31VALUEH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java ("
isFinaltrue"
typeMedra"ù
declarationStringá<mark class="modifier">private </mark><mark class="modifier">final </mark>Medra <mark class="class-field">fetcher</mark> = new Medra();"
isStaticfalse"
accessprivate*fetcher2y
'org.jabref.logic.importer.fetcher.MedraTYPEH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java (2Å
/org.jabref.logic.importer.fetcher.Medra.Medra()CALLH
>src\test\java\org\jabref\logic\importer\fetcher\MedraTest.java& (+