
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÑ4
.org.jabref.logic.importer.fetcher.ArXivFetcherCLASSK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaG G(",
package!org.jabref.logic.importer.fetcher"
isFinalfalse"
inner classfalse"

isAbstractfalse"Ú
declarationString‹<mark class="modifier">public </mark><mark class="modifier">class </mark>ArXivFetcher<mark class="modifier"><br>implements </mark>FulltextFetcher, PagedSearchBasedFetcher, IdBasedFetcher, IdFetcher&lt;ArXivIdentifier&gt;"
accesspublic*ArXivFetcher2h
ArXivFetcherDECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaf f(2h
ArXivFetcherDECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javam m(2∏
\org.jabref.logic.importer.fetcher.ArXivFetcher.findFullText(org.jabref.model.entry.BibEntry)DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javat t(%2ö
>org.jabref.logic.importer.fetcher.ArXivFetcher.getTrustLevel()DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javay y(#2î
8org.jabref.logic.importer.fetcher.ArXivFetcher.getName()DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java~ ~(2ö
<org.jabref.logic.importer.fetcher.ArXivFetcher.getHelpPage()DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÉ É()2ø
aorg.jabref.logic.importer.fetcher.ArXivFetcher.adaptKeywordsFrom(org.jabref.model.entry.BibEntry)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå å("2Æ
Porg.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(java.lang.String)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaß ß()2Ω
_org.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(org.jabref.model.entry.BibEntry)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≥$ ≥(32œ
qorg.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(org.jabref.model.entry.identifier.ArXivIdentifier)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java« «()2™
Lorg.jabref.logic.importer.fetcher.ArXivFetcher.isManualDoi(java.lang.String)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaŒ Œ(&2∫
\org.jabref.logic.importer.fetcher.ArXivFetcher.getManualDoi(org.jabref.model.entry.BibEntry)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java€$ €(02É
§org.jabref.logic.importer.fetcher.ArXivFetcher.waitForBibEntryRetrieval(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂ& Â(>2Ú
ìorg.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘ ˘(22Ã
norg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(org.jabref.model.entry.BibEntry)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaè è(/2–
Òorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢ ¢(/2‚
Éorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java— —(,2∞
Rorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÎ Î(/2º
^org.jabref.logic.importer.fetcher.ArXivFetcher.findIdentifier(org.jabref.model.entry.BibEntry)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ% Ù(32†
Borg.jabref.logic.importer.fetcher.ArXivFetcher.getIdentifierName()DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘ ˘(#2ù
Aorg.jabref.logic.importer.fetcher.ArXivFetcher?LOGGER@73.32:73.38DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaI  I(&2°
Eorg.jabref.logic.importer.fetcher.ArXivFetcher?DOI_PREFIX@76.32:76.42DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaL  L(*2≤
Vorg.jabref.logic.importer.fetcher.ArXivFetcher?CHOSEN_AUTOMATIC_DOI_FIELDS@83.36:83.63DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaS$ S(?2Ø
Sorg.jabref.logic.importer.fetcher.ArXivFetcher?CHOSEN_MANUAL_DOI_FIELDS@92.36:92.60DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java\$ \(<2Ω
aorg.jabref.logic.importer.fetcher.ArXivFetcher?ARXIV_KEYWORDS_WITH_COMMA_REPLACEMENTS@94.45:94.83DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java^- ^(S2ú
@org.jabref.logic.importer.fetcher.ArXivFetcher?arXiv@98.24:98.29DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javab b(2°
Eorg.jabref.logic.importer.fetcher.ArXivFetcher?doiFetcher@99.29:99.39DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javac c('2∞
Torg.jabref.logic.importer.fetcher.ArXivFetcher?importFormatPreferences@100.42:100.65DECLARATIONK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javad* d(A2í
4org.jabref.logic.importer.fetcher.ArXivFetcher.ArXivDECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaà à(2Ä
)org.jabref.logic.importer.FulltextFetcherEXTENDK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaG% G(42à
1org.jabref.logic.importer.PagedSearchBasedFetcherEXTENDK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaG6 G(M2
(org.jabref.logic.importer.IdBasedFetcherEXTENDK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaGO G(]2z
#org.jabref.logic.importer.IdFetcherEXTENDK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaG_ G(h2ñ
1org.jabref.model.entry.identifier.ArXivIdentifierEXTEND_TYPE_ARGUMENTK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaGi G(xô
ArXivFetcherCONSTRUCTORK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaf f("ì
declarationString~<mark class="modifier">public </mark><mark class="method">ArXivFetcher</mark>(ImportFormatPreferences importFormatPreferences)*ArXivFetcher2ä
.org.jabref.logic.importer.fetcher.ArXivFetcherRETURN_TYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaf f(Ò
importFormatPreferences	PARAMETERK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaf0 f(G"
typeImportFormatPreferences"
isFinalfalse"D
declarationString/ImportFormatPreferences importFormatPreferences*importFormatPreferences2l
ImportFormatPreferencesTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaf f(/Œ
ArXivFetcherCONSTRUCTORK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javam m("Á
declarationString—<mark class="modifier">public </mark><mark class="method">ArXivFetcher</mark>(ImportFormatPreferences importFormatPreferences<mark class="modifier"><mark class="modifier">,</mark></mark> DoiFetcher doiFetcher)*ArXivFetcher2ï
@org.jabref.logic.importer.fetcher.ArXivFetcher?arXiv@98.24:98.29CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javan n(2ö
Eorg.jabref.logic.importer.fetcher.ArXivFetcher?doiFetcher@99.29:99.39CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javao o(2©
Torg.jabref.logic.importer.fetcher.ArXivFetcher?importFormatPreferences@100.42:100.65CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javap p($2ä
.org.jabref.logic.importer.fetcher.ArXivFetcherRETURN_TYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javam m(Ò
importFormatPreferences	PARAMETERK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javam0 m(G"
typeImportFormatPreferences"
isFinalfalse"D
declarationString/ImportFormatPreferences importFormatPreferences*importFormatPreferences2l
ImportFormatPreferencesTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javam m(/∆

doiFetcher	PARAMETERK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javamT m(^"
type
DoiFetcher"
isFinalfalse"*
declarationStringDoiFetcher doiFetcher*
doiFetcher2Å
,org.jabref.logic.importer.fetcher.DoiFetcherTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javamI m(Så
\org.jabref.logic.importer.fetcher.ArXivFetcher.findFullText(org.jabref.model.entry.BibEntry)METHODK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javat t(%"
isFinalfalse"Ñ
declarationStringÓ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>Optional&lt;URL&gt; <mark class="method">findFullText</mark>(BibEntry entry)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeOptional<URL>*findFullText2∑
borg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findFullText(org.jabref.model.entry.BibEntry)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javau u(!2ï
@org.jabref.logic.importer.fetcher.ArXivFetcher?arXiv@98.24:98.29CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javau u(2∑
borg.jabref.logic.importer.fetcher.ArXivFetcher.findFullText(org.jabref.model.entry.BibEntry)!entryCALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javau" u('2∞
Worg.jabref.logic.importer.FulltextFetcher.findFullText(org.jabref.model.entry.BibEntry)OVERRIDEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javat t(%2º
borg.jabref.logic.importer.fetcher.ArXivFetcher.findFullText(org.jabref.model.entry.BibEntry)!entry	PARAMETERK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javat/ t(42n
java.util.OptionalRETURN_TYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javat t(2q
java.net.URLRETURN_TYPE_ARGUMENTK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javat t(Ç
borg.jabref.logic.importer.fetcher.ArXivFetcher.findFullText(org.jabref.model.entry.BibEntry)!entry	PARAMETERK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javat/ t(4"
typeBibEntry"
isFinalfalse"#
declarationStringBibEntry entry*entry2t
org.jabref.model.entry.BibEntryTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javat& t(.˙
>org.jabref.logic.importer.fetcher.ArXivFetcher.getTrustLevel()METHODK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javay y(#"
isFinalfalse"ü
declarationStringâ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>TrustLevel <mark class="method">getTrustLevel</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
type
TrustLevel*getTrustLevel2ô
Dorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getTrustLevel()CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaz z("2ï
@org.jabref.logic.importer.fetcher.ArXivFetcher?arXiv@98.24:98.29CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaz z(2í
9org.jabref.logic.importer.FulltextFetcher.getTrustLevel()OVERRIDEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javay y(#2à
,org.jabref.logic.importer.fetcher.TrustLevelRETURN_TYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javay y(≈	
8org.jabref.logic.importer.fetcher.ArXivFetcher.getName()METHODK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java~ ~("
isFinalfalse"î
declarationString<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>String <mark class="method">getName</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*getName2ì
>org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getName()CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java (2ï
@org.jabref.logic.importer.fetcher.ArXivFetcher?arXiv@98.24:98.29CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java (2á
.org.jabref.logic.importer.WebFetcher.getName()OVERRIDEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java~ ~(2á
.org.jabref.logic.importer.WebFetcher.getName()OVERRIDEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java~ ~(2á
.org.jabref.logic.importer.WebFetcher.getName()OVERRIDEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java~ ~(2l
java.lang.StringRETURN_TYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java~ ~(ò
<org.jabref.logic.importer.fetcher.ArXivFetcher.getHelpPage()METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÉ É()"
isFinalfalse"´
declarationStringï<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>Optional&lt;HelpFile&gt; <mark class="method">getHelpPage</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeOptional<HelpFile>*getHelpPage2ô
Borg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getHelpPage()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÑ Ñ( 2ó
@org.jabref.logic.importer.fetcher.ArXivFetcher?arXiv@98.24:98.29CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÑ Ñ(2ç
2org.jabref.logic.importer.WebFetcher.getHelpPage()OVERRIDEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÉ É()2ç
2org.jabref.logic.importer.WebFetcher.getHelpPage()OVERRIDEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÉ É()2ç
2org.jabref.logic.importer.WebFetcher.getHelpPage()OVERRIDEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÉ É()2p
java.util.OptionalRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÉ É(2Ö
org.jabref.logic.help.HelpFileRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÉ É(Á&
aorg.jabref.logic.importer.fetcher.ArXivFetcher.adaptKeywordsFrom(org.jabref.model.entry.BibEntry)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå å(""
isFinalfalse"ü
declarationStringâ<mark class="modifier">private </mark><mark class="modifier">void</mark> <mark class="method">adaptKeywordsFrom</mark>(BibEntry bibEntry)"
isStaticfalse"
accessprivate"

isAbstractfalse"
typevoid*adaptKeywordsFrom2£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaç0 ç(82u
java.util.Optional.isPresent()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaé é(!2o
java.util.Map.entrySet()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaíZ í(b2o
java.util.Optional.of(T)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaì' ì()2ñ
?java.lang.String.replaceAll(java.lang.String, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaì< ì(F2o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaì6 ì(92s
java.util.Map.Entry.getKey()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaìM ì(S2u
java.util.Map.Entry.getValue()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaì] ì(e2o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaó  ó(#2µ
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaö ö(2¡
jorg.jabref.logic.importer.fetcher.ArXivFetcher.adaptKeywordsFrom(org.jabref.model.entry.BibEntry)!bibEntryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaç' ç(/2“
{org.jabref.logic.importer.fetcher.ArXivFetcher.adaptKeywordsFrom(org.jabref.model.entry.BibEntry)?allKeywords@141.25:141.36CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaé é(2∏
aorg.jabref.logic.importer.fetcher.ArXivFetcher?ARXIV_KEYWORDS_WITH_COMMA_REPLACEMENTS@94.45:94.83CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaí3 í(Y2“
{org.jabref.logic.importer.fetcher.ArXivFetcher.adaptKeywordsFrom(org.jabref.model.entry.BibEntry)?allKeywords@141.25:141.36CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaì ì(2“
{org.jabref.logic.importer.fetcher.ArXivFetcher.adaptKeywordsFrom(org.jabref.model.entry.BibEntry)?allKeywords@141.25:141.36CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaì* ì(52Ã
uorg.jabref.logic.importer.fetcher.ArXivFetcher.adaptKeywordsFrom(org.jabref.model.entry.BibEntry)?entry@146.43:146.48CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaìG ì(L2Ã
uorg.jabref.logic.importer.fetcher.ArXivFetcher.adaptKeywordsFrom(org.jabref.model.entry.BibEntry)?entry@146.43:146.48CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaìW ì(\2“
{org.jabref.logic.importer.fetcher.ArXivFetcher.adaptKeywordsFrom(org.jabref.model.entry.BibEntry)?allKeywords@141.25:141.36CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaó ó(2´
Torg.jabref.logic.importer.fetcher.ArXivFetcher?importFormatPreferences@100.42:100.65CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaô ô(+2¡
jorg.jabref.logic.importer.fetcher.ArXivFetcher.adaptKeywordsFrom(org.jabref.model.entry.BibEntry)!bibEntryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaö ö(2ÿ
Äorg.jabref.logic.importer.fetcher.ArXivFetcher.adaptKeywordsFrom(org.jabref.model.entry.BibEntry)?filteredKeywords@150.19:150.35CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaö6 ö(F2∆
jorg.jabref.logic.importer.fetcher.ArXivFetcher.adaptKeywordsFrom(org.jabref.model.entry.BibEntry)!bibEntry	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå, å(42Ÿ
{org.jabref.logic.importer.fetcher.ArXivFetcher.adaptKeywordsFrom(org.jabref.model.entry.BibEntry)?allKeywords@141.25:141.36DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaç ç($2”
uorg.jabref.logic.importer.fetcher.ArXivFetcher.adaptKeywordsFrom(org.jabref.model.entry.BibEntry)?entry@146.43:146.48DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaí+ í(02ﬂ
Äorg.jabref.logic.importer.fetcher.ArXivFetcher.adaptKeywordsFrom(org.jabref.model.entry.BibEntry)?filteredKeywords@150.19:150.35DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javañ ñ(#2b
voidRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå å(˜
{org.jabref.logic.importer.fetcher.ArXivFetcher.adaptKeywordsFrom(org.jabref.model.entry.BibEntry)?allKeywords@141.25:141.36VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaç ç($"
typeOptional<String>"
isFinalfalse"û
declarationStringà<mark class="modifier"> </mark>Optional<String> <mark class="class-field">allKeywords</mark> = bibEntry.getField(StandardField.KEYWORDS)*allKeywords2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaç ç(2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaç ç(2£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaç0 ç(82¡
jorg.jabref.logic.importer.fetcher.ArXivFetcher.adaptKeywordsFrom(org.jabref.model.entry.BibEntry)!bibEntryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaç' ç(/“
uorg.jabref.logic.importer.fetcher.ArXivFetcher.adaptKeywordsFrom(org.jabref.model.entry.BibEntry)?entry@146.43:146.48VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaí+ í(0"!
typeMap.Entry<String, String>"
isFinalfalse"t
declarationString_<mark class="modifier"> </mark>Map.Entry<String, String> <mark class="class-field">entry</mark>*entry2j
java.util.Map.EntryTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaí í(2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaí í(2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaí í(!î	
Äorg.jabref.logic.importer.fetcher.ArXivFetcher.adaptKeywordsFrom(org.jabref.model.entry.BibEntry)?filteredKeywords@150.19:150.35VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javañ ñ(#"
typeString"
isFinalfalse"§
declarationStringé<mark class="modifier"> </mark>String <mark class="class-field">filteredKeywords</mark> = KeywordList.merge(allKeywords.get()<mark class="modifier">,</mark> ""<mark class="modifier">,</mark> importFormatPreferences.bibEntryPreferences().getKeywordSeparator()).toString()*filteredKeywords2g
java.lang.StringTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javañ ñ(2o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaó  ó(#2“
{org.jabref.logic.importer.fetcher.ArXivFetcher.adaptKeywordsFrom(org.jabref.model.entry.BibEntry)?allKeywords@141.25:141.36CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaó ó(2´
Torg.jabref.logic.importer.fetcher.ArXivFetcher?importFormatPreferences@100.42:100.65CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaô ô(+î
jorg.jabref.logic.importer.fetcher.ArXivFetcher.adaptKeywordsFrom(org.jabref.model.entry.BibEntry)!bibEntry	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå, å(4"
typeBibEntry"
isFinalfalse"&
declarationStringBibEntry bibEntry*bibEntry2v
org.jabref.model.entry.BibEntryTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå# å(+¥
Porg.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(java.lang.String)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaß ß()"
isFinalfalse"£
declarationStringç<mark class="modifier">private </mark><mark class="modifier">static </mark>String <mark class="method">getAutomaticDoi</mark>(String arXivId)"
isStatictrue"
accessprivate"

isAbstractfalse"
typeString*getAutomaticDoi2ú
Eorg.jabref.logic.importer.fetcher.ArXivFetcher?DOI_PREFIX@76.32:76.42CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java® ®(2Ø
Xorg.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(java.lang.String)!arXivIdCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java® ®(#2¥
Xorg.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(java.lang.String)!arXivId	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaß1 ß(82n
java.lang.StringRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaß ß(Ì
Xorg.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(java.lang.String)!arXivId	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaß1 ß(8"
typeString"
isFinalfalse"#
declarationStringString arXivId*arXivId2g
java.lang.StringTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaß* ß(0†
_org.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(org.jabref.model.entry.BibEntry)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≥$ ≥(3"
isFinalfalse"ª
declarationString•<mark class="modifier">private </mark><mark class="modifier">static </mark>Optional&lt;String&gt; <mark class="method">getAutomaticDoi</mark>(BibEntry arXivBibEntry)"
isStatictrue"
accessprivate"

isAbstractfalse"
typeOptional<String>*getAutomaticDoi2£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂5 ∂(=2s
java.util.Optional.isEmpty()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∑ ∑(2q
java.util.Optional.empty()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaπ π(!2o
java.util.Optional.of(T)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaª ª(2ß
Porg.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaª, ª(;2o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaªH ª(K2ƒ
morg.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(org.jabref.model.entry.BibEntry)!arXivBibEntryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂' ∂(42–
yorg.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(org.jabref.model.entry.BibEntry)?entryEprint@182.25:182.36CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∑ ∑(2ò
Aorg.jabref.logic.importer.fetcher.ArXivFetcher?LOGGER@73.32:73.38CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∏ ∏(2–
yorg.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(org.jabref.model.entry.BibEntry)?entryEprint@182.25:182.36CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaª< ª(G2…
morg.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(org.jabref.model.entry.BibEntry)!arXivBibEntry	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≥= ≥(J2◊
yorg.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(org.jabref.model.entry.BibEntry)?entryEprint@182.25:182.36DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂ ∂($2p
java.util.OptionalRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≥ ≥(2w
java.lang.StringRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≥ ≥("˚
yorg.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(org.jabref.model.entry.BibEntry)?entryEprint@182.25:182.36VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂ ∂($"
typeOptional<String>"
isFinalfalse"°
declarationStringã<mark class="modifier"> </mark>Optional<String> <mark class="class-field">entryEprint</mark> = arXivBibEntry.getField(StandardField.EPRINT)*entryEprint2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂ ∂(2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂ ∂(2£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂5 ∂(=2ƒ
morg.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(org.jabref.model.entry.BibEntry)!arXivBibEntryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂' ∂(4°
morg.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(org.jabref.model.entry.BibEntry)!arXivBibEntry	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≥= ≥(J"
typeBibEntry"
isFinalfalse"+
declarationStringBibEntry arXivBibEntry*arXivBibEntry2v
org.jabref.model.entry.BibEntryTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≥4 ≥(<‘

qorg.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(org.jabref.model.entry.identifier.ArXivIdentifier)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java« «()"
isFinalfalse"¨
declarationStringñ<mark class="modifier">private </mark><mark class="modifier">static </mark>String <mark class="method">getAutomaticDoi</mark>(ArXivIdentifier arXivId)"
isStatictrue"
accessprivate"

isAbstractfalse"
typeString*getAutomaticDoi2ß
Porg.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java» »(2¶
Oorg.jabref.model.entry.identifier.ArXivIdentifier.getNormalizedWithoutVersion()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java»' »(B2–
yorg.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(org.jabref.model.entry.identifier.ArXivIdentifier)!arXivIdCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java» »(&2’
yorg.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(org.jabref.model.entry.identifier.ArXivIdentifier)!arXivId	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java«: «(A2n
java.lang.StringRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java« «(¬
yorg.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(org.jabref.model.entry.identifier.ArXivIdentifier)!arXivId	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java«: «(A"
typeArXivIdentifier"
isFinalfalse",
declarationStringArXivIdentifier arXivId*arXivId2à
1org.jabref.model.entry.identifier.ArXivIdentifierTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java«* «(9§
Lorg.jabref.logic.importer.fetcher.ArXivFetcher.isManualDoi(java.lang.String)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaŒ Œ(&"
isFinalfalse"∫
declarationString§<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">boolean</mark> <mark class="method">isManualDoi</mark>(String doi)"
isStatictrue"
accessprivate"

isAbstractfalse"
typeboolean*isManualDoi2à
1java.lang.String.contains(java.lang.CharSequence)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaœ" œ(*2u
java.lang.String.toLowerCase()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaœ œ(2u
java.lang.String.toLowerCase()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaœ6 œ(A2ß
Porg.jabref.logic.importer.fetcher.ArXivFetcher.isManualDoi(java.lang.String)!doiCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaœ œ(2ú
Eorg.jabref.logic.importer.fetcher.ArXivFetcher?DOI_PREFIX@76.32:76.42CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaœ+ œ(52¨
Porg.jabref.logic.importer.fetcher.ArXivFetcher.isManualDoi(java.lang.String)!doi	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaŒ. Œ(12e
booleanRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaŒ Œ(›
Porg.jabref.logic.importer.fetcher.ArXivFetcher.isManualDoi(java.lang.String)!doi	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaŒ. Œ(1"
typeString"
isFinalfalse"
declarationString
String doi*doi2g
java.lang.StringTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaŒ' Œ(-ƒ
\org.jabref.logic.importer.fetcher.ArXivFetcher.getManualDoi(org.jabref.model.entry.BibEntry)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java€$ €(0"
isFinalfalse"∏
declarationString¢<mark class="modifier">private </mark><mark class="modifier">static </mark>Optional&lt;String&gt; <mark class="method">getManualDoi</mark>(BibEntry arXivBibEntry)"
isStatictrue"
accessprivate"

isAbstractfalse"
typeOptional<String>*getManualDoi2ô
Bjava.util.Optional.filter(java.util.function.Predicate<? super T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‹9 ‹(?2£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‹ ‹(%2¡
jorg.jabref.logic.importer.fetcher.ArXivFetcher.getManualDoi(org.jabref.model.entry.BibEntry)!arXivBibEntryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‹ ‹(2£
Lorg.jabref.logic.importer.fetcher.ArXivFetcher.isManualDoi(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‹@ ‹(Y2∆
jorg.jabref.logic.importer.fetcher.ArXivFetcher.getManualDoi(org.jabref.model.entry.BibEntry)!arXivBibEntry	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java€: €(G2p
java.util.OptionalRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java€ €(2w
java.lang.StringRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java€ €("û
jorg.jabref.logic.importer.fetcher.ArXivFetcher.getManualDoi(org.jabref.model.entry.BibEntry)!arXivBibEntry	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java€: €(G"
typeBibEntry"
isFinalfalse"+
declarationStringBibEntry arXivBibEntry*arXivBibEntry2v
org.jabref.model.entry.BibEntryTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java€1 €(9≈
§org.jabref.logic.importer.fetcher.ArXivFetcher.waitForBibEntryRetrieval(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂ& Â(>"
isFinalfalse"ƒ
declarationStringÆ<mark class="modifier">private </mark><mark class="modifier">static </mark>Optional&lt;BibEntry&gt; <mark class="method">waitForBibEntryRetrieval</mark>(CompletableFuture&lt;Optional&lt;BibEntry&gt;&gt; bibEntryFuture)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStatictrue"
accessprivate"

isAbstractfalse"
typeOptional<BibEntry>*waitForBibEntryRetrieval2Ñ
-java.util.concurrent.CompletableFuture.join()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÁ" Á(&2u
java.lang.Throwable.getCause()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÈ È(2u
java.lang.Throwable.getCause()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÌ' Ì(/2ã
≥org.jabref.logic.importer.fetcher.ArXivFetcher.waitForBibEntryRetrieval(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>)!bibEntryFutureCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÁ Á(!2å
¥org.jabref.logic.importer.fetcher.ArXivFetcher.waitForBibEntryRetrieval(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>)?e@232.37:232.38CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÈ È(2ò
Aorg.jabref.logic.importer.fetcher.ArXivFetcher?LOGGER@73.32:73.38CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÍ Í(2å
¥org.jabref.logic.importer.fetcher.ArXivFetcher.waitForBibEntryRetrieval(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>)?e@232.37:232.38CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÍZ Í([2å
¥org.jabref.logic.importer.fetcher.ArXivFetcher.waitForBibEntryRetrieval(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>)?e@232.37:232.38CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÎ Î(2å
¥org.jabref.logic.importer.fetcher.ArXivFetcher.waitForBibEntryRetrieval(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>)?e@232.37:232.38CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÌ% Ì(&2ê
≥org.jabref.logic.importer.fetcher.ArXivFetcher.waitForBibEntryRetrieval(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>)!bibEntryFuture	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂe Â(s2ì
¥org.jabref.logic.importer.fetcher.ArXivFetcher.waitForBibEntryRetrieval(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>)?e@232.37:232.38DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaË% Ë(&2p
java.util.OptionalRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂ Â(2Ü
org.jabref.model.entry.BibEntryRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂ Â($†
≥org.jabref.logic.importer.fetcher.ArXivFetcher.waitForBibEntryRetrieval(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>)!bibEntryFuture	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂe Â(s"-
type%CompletableFuture<Optional<BibEntry>>"
isFinalfalse"I
declarationString4CompletableFuture<Optional<BibEntry>> bibEntryFuture*bibEntryFuture2}
&java.util.concurrent.CompletableFutureTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂ? Â(P2r
java.util.OptionalTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂQ Â(Y2
org.jabref.model.entry.BibEntryTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂZ Â(bÔ
¥org.jabref.logic.importer.fetcher.ArXivFetcher.waitForBibEntryRetrieval(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>)?e@232.37:232.38VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaË% Ë(&"
typeCompletionException"
isFinalfalse"*
declarationStringCompletionException e*e2
(java.util.concurrent.CompletionExceptionTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaË Ë($πB
ìorg.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘ ˘(2"
isFinalfalse"”
declarationStringΩ<mark class="modifier">private </mark><mark class="modifier">void</mark> <mark class="method">mergeArXivEntryWithFutureDoiEntry</mark>(BibEntry arXivEntry<mark class="modifier"><mark class="modifier">,</mark></mark> CompletableFuture&lt;Optional&lt;BibEntry&gt;&gt; bibEntryFuture<mark class="modifier"><mark class="modifier">,</mark></mark> Set&lt;Field&gt; priorityFields<mark class="modifier"><mark class="modifier">,</mark></mark> String id)"
isStaticfalse"
accessprivate"

isAbstractfalse"
typevoid*!mergeArXivEntryWithFutureDoiEntry2¸
§org.jabref.logic.importer.fetcher.ArXivFetcher.waitForBibEntryRetrieval(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¸ ¸(/2u
java.util.Optional.isPresent()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÇ Ç(2∏
aorg.jabref.logic.importer.fetcher.ArXivFetcher.adaptKeywordsFrom(org.jabref.model.entry.BibEntry)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÉ É(2o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÉ' É(*2‘
}org.jabref.model.entry.BibEntry.mergeWith(org.jabref.model.entry.BibEntry, java.util.Set<org.jabref.model.entry.field.Field>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÑ Ñ( 2o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÑ* Ñ(-2Ç
™org.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)?bibEntry@250.27:250.35CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¸ ¸(2˙
¢org.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)!bibEntryFutureCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¸0 ¸(>2ò
Aorg.jabref.logic.importer.fetcher.ArXivFetcher?LOGGER@73.32:73.38CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˛ ˛(2Ó
ñorg.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)!idCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˛[ ˛(]2˚
£org.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)?e@253.56:253.57CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˛_ ˛(`2Ç
™org.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)?bibEntry@250.27:250.35CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÇ Ç(2Ç
™org.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)?bibEntry@250.27:250.35CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÉ É(&2ˆ
ûorg.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)!arXivEntryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÑ Ñ(2Ç
™org.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)?bibEntry@250.27:250.35CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÑ! Ñ()2˙
¢org.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)!priorityFieldsCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÑ1 Ñ(?2ò
Aorg.jabref.logic.importer.fetcher.ArXivFetcher?LOGGER@73.32:73.38CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÜ Ü(2Ó
ñorg.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)!idCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÜp Ü(r2˚
ûorg.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)!arXivEntry	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘< ˘(F2ˇ
¢org.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)!bibEntryFuture	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘n ˘(|2Å
¢org.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)!priorityFields	PARAMETERO
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘â ˘(ó2ı
ñorg.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)!id	PARAMETERO
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘† ˘(¢2â
™org.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)?bibEntry@250.27:250.35DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˙ ˙(#2Ç
£org.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)?e@253.56:253.57DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˝8 ˝(92b
voidRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘ ˘(ú
™org.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)?bibEntry@250.27:250.35VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˙ ˙(#"
typeOptional<BibEntry>"
isFinalfalse"p
declarationString[<mark class="modifier"> </mark>Optional<BibEntry> <mark class="class-field">bibEntry</mark>*bibEntry2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˙ ˙(2
org.jabref.model.entry.BibEntryTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˙ ˙(Õ
ûorg.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)!arXivEntry	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘< ˘(F"
typeBibEntry"
isFinalfalse"(
declarationStringBibEntry arXivEntry*
arXivEntry2v
org.jabref.model.entry.BibEntryTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘3 ˘(;è
¢org.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)!bibEntryFuture	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘n ˘(|"-
type%CompletableFuture<Optional<BibEntry>>"
isFinalfalse"I
declarationString4CompletableFuture<Optional<BibEntry>> bibEntryFuture*bibEntryFuture2}
&java.util.concurrent.CompletableFutureTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘H ˘(Y2r
java.util.OptionalTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘Z ˘(b2
org.jabref.model.entry.BibEntryTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘c ˘(k’
¢org.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)!priorityFields	PARAMETERO
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘â ˘(ó"
type
Set<Field>"
isFinalfalse".
declarationStringSet<Field> priorityFields*priorityFields2e
java.util.SetTYPEN
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘~ ˘(Å2Ñ
"org.jabref.model.entry.field.FieldTYPE_ARGUMENTO
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘Ç ˘(á¶
ñorg.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)!id	PARAMETERO
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘† ˘(¢"
typeString"
isFinalfalse"
declarationString	String id*id2i
java.lang.StringTYPEO
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘ô ˘(ü≤
£org.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)?e@253.56:253.57VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˝8 ˝(9".
type&FetcherException | CompletionException"
isFinalfalse"=
declarationString(FetcherException | CompletionException e*e2¨
Uorg.jabref.logic.importer.FetcherException | java.util.concurrent.CompletionExceptionTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˝ ˝(7ÿ
norg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(org.jabref.model.entry.BibEntry)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaè è(/"
isFinalfalse"±
declarationStringõ<mark class="modifier">private </mark><mark class="modifier">void</mark> <mark class="method">inplaceAsyncInfuseArXivWithDoi</mark>(BibEntry arXivBibEntry)"
isStaticfalse"
accessprivate"

isAbstractfalse"
typevoid*inplaceAsyncInfuseArXivWithDoi2ê
9java.util.concurrent.CompletableFuture.completedFuture(U)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaê_ ê(n2o
java.util.Optional.of(T)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaêx ê(z2ƒ
mjava.util.Optional.flatMap(java.util.function.Function<? super T, ? extends java.util.Optional<? extends U>>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaëa ë(h2£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaëB ë(J2…
Òorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaî î(/2‘
|org.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(org.jabref.model.entry.BibEntry)!arXivBibEntryCALLN
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaê{ ê(à2”
|org.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(org.jabref.model.entry.BibEntry)!arXivBibEntryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaë4 ë(A2Ò
ôorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(org.jabref.model.entry.BibEntry)?arXivBibEntryCompletedFuture@272.46:272.74CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaî0 î(L2‰
åorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(org.jabref.model.entry.BibEntry)?arXivBibEntryId@273.34:273.49CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaîN î(]2ò
Aorg.jabref.logic.importer.fetcher.ArXivFetcher?LOGGER@73.32:73.38CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javañ ñ(2’
~org.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(org.jabref.model.entry.BibEntry)?e@277.34:277.35CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaóJ ó(K2†
Iorg.jabref.model.entry.identifier.ArXivIdentifier.parse(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaëi ë(2ÿ
|org.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(org.jabref.model.entry.BibEntry)!arXivBibEntry	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaè9 è(F2¯
ôorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(org.jabref.model.entry.BibEntry)?arXivBibEntryCompletedFuture@272.46:272.74DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaê. ê(J2Î
åorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(org.jabref.model.entry.BibEntry)?arXivBibEntryId@273.34:273.49DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaë" ë(12‹
~org.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(org.jabref.model.entry.BibEntry)?e@277.34:277.35DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaï" ï(#2b
voidRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaè è(˛

ôorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(org.jabref.model.entry.BibEntry)?arXivBibEntryCompletedFuture@272.46:272.74VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaê. ê(J"-
type%CompletableFuture<Optional<BibEntry>>"
isFinalfalse"ÿ
declarationString¬<mark class="modifier"> </mark>CompletableFuture<Optional<BibEntry>> <mark class="class-field">arXivBibEntryCompletedFuture</mark> = CompletableFuture.completedFuture(Optional.of(arXivBibEntry))*arXivBibEntryCompletedFuture2}
&java.util.concurrent.CompletableFutureTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaê ê(2r
java.util.OptionalTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaê ê("2
org.jabref.model.entry.BibEntryTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaê# ê(+2ê
9java.util.concurrent.CompletableFuture.completedFuture(U)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaê_ ê(n2o
java.util.Optional.of(T)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaêx ê(z2‘
|org.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(org.jabref.model.entry.BibEntry)!arXivBibEntryCALLN
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaê{ ê(à‰
åorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(org.jabref.model.entry.BibEntry)?arXivBibEntryId@273.34:273.49VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaë" ë(1"!
typeOptional<ArXivIdentifier>"
isFinalfalse"Œ
declarationString∏<mark class="modifier"> </mark>Optional<ArXivIdentifier> <mark class="class-field">arXivBibEntryId</mark> = arXivBibEntry.getField(StandardField.EPRINT).flatMap(ArXivIdentifier::parse)*arXivBibEntryId2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaë ë(2ë
1org.jabref.model.entry.identifier.ArXivIdentifierTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaë ë( 2ƒ
mjava.util.Optional.flatMap(java.util.function.Function<? super T, ? extends java.util.Optional<? extends U>>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaëa ë(h2£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaëB ë(J2”
|org.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(org.jabref.model.entry.BibEntry)!arXivBibEntryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaë4 ë(A2†
Iorg.jabref.model.entry.identifier.ArXivIdentifier.parse(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaëi ë(∞
|org.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(org.jabref.model.entry.BibEntry)!arXivBibEntry	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaè9 è(F"
typeBibEntry"
isFinalfalse"+
declarationStringBibEntry arXivBibEntry*arXivBibEntry2v
org.jabref.model.entry.BibEntryTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaè0 è(8µ
~org.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(org.jabref.model.entry.BibEntry)?e@277.34:277.35VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaï" ï(#"
typeFetcherException"
isFinalfalse"'
declarationStringFetcherException e*e2Å
*org.jabref.logic.importer.FetcherExceptionTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaï ï(!Ùê
Òorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢ ¢(/"
isFinalfalse"ô
declarationStringÉ<mark class="modifier">private </mark><mark class="modifier">void</mark> <mark class="method">inplaceAsyncInfuseArXivWithDoi</mark>(CompletableFuture&lt;Optional&lt;BibEntry&gt;&gt; arXivBibEntryFuture<mark class="modifier"><mark class="modifier">,</mark></mark> Optional&lt;ArXivIdentifier&gt; arXivId)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accessprivate"

isAbstractfalse"
typevoid*inplaceAsyncInfuseArXivWithDoi2u
java.util.Optional.isPresent()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≠ ≠(2o
java.util.Optional.of(T)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÆ$ Æ(&2»
qorg.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(org.jabref.model.entry.identifier.ArXivIdentifier)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÆ4 Æ(C2o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÆL Æ(O2o
java.util.Optional.of(T)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaØ2 Ø(42¨
Uorg.jabref.logic.importer.fetcher.DoiFetcher.asyncPerformSearchById(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaØ@ Ø(V2o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaØd Ø(g2¸
§org.jabref.logic.importer.fetcher.ArXivFetcher.waitForBibEntryRetrieval(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java±) ±(A2s
java.util.Optional.isEmpty()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≤ ≤(%2¸
§org.jabref.logic.importer.fetcher.ArXivFetcher.waitForBibEntryRetrieval(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∑) ∑(A2s
java.util.Optional.isEmpty()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∏ ∏(%2∂
_org.jabref.logic.importer.fetcher.ArXivFetcher.getAutomaticDoi(org.jabref.model.entry.BibEntry)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaº( º(72o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaºF º(I2¢
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaΩ6 Ω(92≥
\org.jabref.logic.importer.fetcher.ArXivFetcher.getManualDoi(org.jabref.model.entry.BibEntry)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¿! ¿(-2o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¿< ¿(?2¢
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¡\ ¡(_2õ
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java√# √(,2Î
ìorg.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaƒ ƒ(12o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaƒ@ ƒ(C2o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaƒy ƒ(|2õ
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≈  ≈()2Î
ìorg.jabref.logic.importer.fetcher.ArXivFetcher.mergeArXivEntryWithFutureDoiEntry(org.jabref.model.entry.BibEntry, java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Set<org.jabref.model.entry.field.Field>, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∆ ∆(12o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∆@ ∆(C2o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∆s ∆(v2—
˘org.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)!arXivIdCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≠ ≠(2‰
åorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?automaticDoi@295.25:295.37CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÆ Æ(2—
˘org.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)!arXivIdCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÆD Æ(K2Ú
öorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?automaticDoiBibEntryFuture@292.56:292.82CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaØ Ø(&2ú
Eorg.jabref.logic.importer.fetcher.ArXivFetcher?doiFetcher@99.29:99.39CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaØ5 Ø(?2‰
åorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?automaticDoi@295.25:295.37CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaØW Ø(c2Â
çorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?arXivBibEntry@293.27:293.40CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java± ±(2›
Öorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)!arXivBibEntryFutureCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java±B ±(U2Â
çorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?arXivBibEntry@293.27:293.40CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≤ ≤(2Â
çorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?arXivBibEntry@293.27:293.40CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∑ ∑(2›
Öorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)!arXivBibEntryFutureCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∑B ∑(U2Â
çorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?arXivBibEntry@293.27:293.40CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∏ ∏(2‰
åorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?automaticDoi@295.25:295.37CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaº º(2Â
çorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?arXivBibEntry@293.27:293.40CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaº8 º(E2Ú
öorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?automaticDoiBibEntryFuture@292.56:292.82CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaΩ Ω(&2‰
åorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?automaticDoi@295.25:295.37CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaΩ) Ω(52·
âorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?manualDoi@296.25:296.34CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¿ ¿(2Â
çorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?arXivBibEntry@293.27:293.40CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¿. ¿(;2·
âorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?manualDoi@296.25:296.34CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¡R ¡([2Ú
öorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?automaticDoiBibEntryFuture@292.56:292.82CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java√ √("2Â
çorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?arXivBibEntry@293.27:293.40CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaƒ2 ƒ(?2ﬁ
Üorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?future@323.45:323.51CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaƒG ƒ(M2≠
Vorg.jabref.logic.importer.fetcher.ArXivFetcher?CHOSEN_AUTOMATIC_DOI_FIELDS@83.36:83.63CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaƒO ƒ(j2‰
åorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?automaticDoi@295.25:295.37CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaƒl ƒ(x2Ô
óorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?manualDoiBibEntryFuture@321.56:321.79CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≈ ≈(2Â
çorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?arXivBibEntry@293.27:293.40CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∆2 ∆(?2ﬁ
Üorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?future@325.42:325.48CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∆G ∆(M2™
Sorg.jabref.logic.importer.fetcher.ArXivFetcher?CHOSEN_MANUAL_DOI_FIELDS@92.36:92.60CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∆O ∆(g2·
âorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?manualDoi@296.25:296.34CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∆i ∆(r2¥
]org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.asyncPerformSearchById(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaΩ: Ω(W2≠
Uorg.jabref.logic.importer.fetcher.DoiFetcher.asyncPerformSearchById(java.lang.String)CALLN
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¡` ¡(Ç2‚
Öorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)!arXivBibEntryFuture	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢V ¢(i2ÿ
˘org.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)!arXivId	PARAMETERO
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢Ö ¢(å2˘
öorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?automaticDoiBibEntryFuture@292.56:292.82DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java§8 §(R2Ï
çorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?arXivBibEntry@293.27:293.40DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java• •((2Î
åorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?automaticDoi@295.25:295.37DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaß ß(%2Ë
âorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?manualDoi@296.25:296.34DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java® ®("2ˆ
óorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?manualDoiBibEntryFuture@321.56:321.79DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¡8 ¡(O2Â
Üorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?future@323.45:323.51DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java√- √(32Â
Üorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?future@325.42:325.48DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≈* ≈(02b
voidRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢ ¢(È
öorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?automaticDoiBibEntryFuture@292.56:292.82VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java§8 §(R"7
type/Optional<CompletableFuture<Optional<BibEntry>>>"
isFinalfalse"†
declarationStringä<mark class="modifier"> </mark>Optional<CompletableFuture<Optional<BibEntry>>> <mark class="class-field">automaticDoiBibEntryFuture</mark>*automaticDoiBibEntryFuture2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java§ §(2Ü
&java.util.concurrent.CompletableFutureTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java§ §("2r
java.util.OptionalTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java§# §(+2
org.jabref.model.entry.BibEntryTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java§, §(4â
çorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?arXivBibEntry@293.27:293.40VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java• •(("
typeOptional<BibEntry>"
isFinalfalse"u
declarationString`<mark class="modifier"> </mark>Optional<BibEntry> <mark class="class-field">arXivBibEntry</mark>*arXivBibEntry2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java• •(2
org.jabref.model.entry.BibEntryTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java• •(Û
åorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?automaticDoi@295.25:295.37VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaß ß(%"
typeOptional<String>"
isFinalfalse"r
declarationString]<mark class="modifier"> </mark>Optional<String> <mark class="class-field">automaticDoi</mark>*automaticDoi2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaß ß(2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaß ß(Í
âorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?manualDoi@296.25:296.34VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java® ®(""
typeOptional<String>"
isFinalfalse"o
declarationStringZ<mark class="modifier"> </mark>Optional<String> <mark class="class-field">manualDoi</mark>*	manualDoi2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java® ®(2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java® ®(Õ
óorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?manualDoiBibEntryFuture@321.56:321.79VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¡8 ¡(O"7
type/Optional<CompletableFuture<Optional<BibEntry>>>"
isFinalfalse"—
declarationStringª<mark class="modifier"> </mark>Optional<CompletableFuture<Optional<BibEntry>>> <mark class="class-field">manualDoiBibEntryFuture</mark> = manualDoi.map(doiFetcher::asyncPerformSearchById)*manualDoiBibEntryFuture2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¡ ¡(2Ü
&java.util.concurrent.CompletableFutureTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¡ ¡("2r
java.util.OptionalTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¡# ¡(+2
org.jabref.model.entry.BibEntryTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¡, ¡(42¢
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¡\ ¡(_2·
âorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?manualDoi@296.25:296.34CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¡R ¡([2≠
Uorg.jabref.logic.importer.fetcher.DoiFetcher.asyncPerformSearchById(java.lang.String)CALLN
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¡` ¡(Ç¸
Öorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)!arXivBibEntryFuture	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢V ¢(i"-
type%CompletableFuture<Optional<BibEntry>>"
isFinalfalse"N
declarationString9CompletableFuture<Optional<BibEntry>> arXivBibEntryFuture*arXivBibEntryFuture2}
&java.util.concurrent.CompletableFutureTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢0 ¢(A2r
java.util.OptionalTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢B ¢(J2
org.jabref.model.entry.BibEntryTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢K ¢(SŒ
˘org.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)!arXivId	PARAMETERO
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢Ö ¢(å"!
typeOptional<ArXivIdentifier>"
isFinalfalse"6
declarationString!Optional<ArXivIdentifier> arXivId*arXivId2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢k ¢(s2í
1org.jabref.model.entry.identifier.ArXivIdentifierTYPE_ARGUMENTN
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢t ¢(É™
Üorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?future@323.45:323.51VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java√- √(3"
type"
isFinalfalse"
declarationString future*future2TYPE™
Üorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)?future@325.42:325.48VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≈* ≈(0"
type"
isFinalfalse"
declarationString future*future2TYPEïB
Éorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java— —(,"
isFinalfalse"Å
declarationStringÎ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>Page&lt;BibEntry&gt; <mark class="method">performSearchPaged</mark>(QueryNode luceneQuery<mark class="modifier"><mark class="modifier">,</mark></mark> <mark class="modifier">int</mark> pageNumber)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typePage<BibEntry>*performSearchPaged2·
âorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java”& ”(82ç
6java.util.concurrent.Executors.newFixedThreadPool(int)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÿ- ÿ(?2ñ
?org.jabref.logic.importer.PagedSearchBasedFetcher.getPageSize()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÿ@ ÿ(K2ß
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‹H ‹(K2t
java.util.Collection.stream()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java€H €(N2Ä
)org.jabref.model.paging.Page.getContent()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java⁄L ⁄(V2»
qjava.util.concurrent.CompletableFuture.supplyAsync(java.util.function.Supplier<U>, java.util.concurrent.Executor)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java›a ›(l2≈
norg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(org.jabref.model.entry.BibEntry)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬁX ﬁ(v2£
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂ' Â(.2ß
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‰' ‰(*2t
java.util.Collection.stream()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java„G „(M2{
$java.util.stream.Collectors.toList()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂ: Â(@2~
'org.jabref.model.paging.Page.getQuery()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÁ! Á()2É
,org.jabref.model.paging.Page.getPageNumber()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÁ4 Á(A2®
Qorg.jabref.model.paging.Page.Page(java.lang.String, int, java.util.Collection<T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÁ Á(2ó
@org.jabref.logic.importer.fetcher.ArXivFetcher?arXiv@98.24:98.29CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java”  ”(%2Á
èorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)!luceneQueryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java”9 ”(D2Ê
éorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)!pageNumberCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java”F ”(P2
òorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?result@339.23:339.29CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java’ ’(2
òorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?result@339.23:339.29CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java⁄E ⁄(K2Ú
öorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?bibEntry@348.76:348.84CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬁw ﬁ(2Ú
öorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?bibEntry@348.76:348.84CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬂZ ﬂ(b2Ú
öorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?executor@344.24:344.32CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‡R ‡(Z2¸
§org.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?futureSearchResult@346.48:346.66CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java„4 „(F2
òorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?result@339.23:339.29CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÁ Á( 2
òorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?result@339.23:339.29CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÁ- Á(32˛
¶org.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?modifiedSearchResult@355.29:355.49CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÁE Á(Y2ú
Eorg.jabref.logic.importer.fetcher.ArXivFetcher?doiFetcher@99.29:99.39CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‘ ‘(2Ñ
-java.util.concurrent.CompletableFuture.join()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‰+ ‰(B2‚
Üorg.jabref.logic.importer.PagedSearchBasedFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)OVERRIDEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java— —(,2Ï
èorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)!luceneQuery	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java—7 —(B2Î
éorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)!pageNumber	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java—H —(R2˜
òorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?result@339.23:339.29DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java” ”(2˘
öorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?executor@344.24:344.32DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÿ ÿ( 2É
§org.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?futureSearchResult@346.48:346.66DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java⁄0 ⁄(B2Ö
¶org.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?modifiedSearchResult@355.29:355.49DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java„ „(12˘
öorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?bibEntry@348.76:348.84DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‹L ‹(T2z
org.jabref.model.paging.PageRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java— —(2Ü
org.jabref.model.entry.BibEntryRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java— —(è
òorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?result@339.23:339.29VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java” ”("
typePage<BibEntry>"
isFinalfalse"ü
declarationStringâ<mark class="modifier"> </mark>Page<BibEntry> <mark class="class-field">result</mark> = arXiv.performSearchPaged(luceneQuery, pageNumber)*result2s
org.jabref.model.paging.PageTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java” ”(2
org.jabref.model.entry.BibEntryTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java” ”(2·
âorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java”& ”(82ó
@org.jabref.logic.importer.fetcher.ArXivFetcher?arXiv@98.24:98.29CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java”  ”(%2Á
èorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)!luceneQueryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java”9 ”(D2Ê
éorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)!pageNumberCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java”F ”(PÙ
öorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?executor@344.24:344.32VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÿ ÿ( "
typeExecutorService"
isFinalfalse"†
declarationStringä<mark class="modifier"> </mark>ExecutorService <mark class="class-field">executor</mark> = Executors.newFixedThreadPool(getPageSize() * 2)*executor2{
$java.util.concurrent.ExecutorServiceTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÿ ÿ(2ç
6java.util.concurrent.Executors.newFixedThreadPool(int)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÿ- ÿ(?2ñ
?org.jabref.logic.importer.PagedSearchBasedFetcher.getPageSize()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÿ@ ÿ(K’
§org.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?futureSearchResult@346.48:346.66VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java⁄0 ⁄(B"/
type'Collection<CompletableFuture<BibEntry>>"
isFinalfalse"É
declarationStringÌ<mark class="modifier"> </mark>Collection<CompletableFuture<BibEntry>> <mark class="class-field">futureSearchResult</mark> = result.getContent().stream().map(bibEntry -> CompletableFuture.supplyAsync(() -> {
    <mark class="modifier">this</mark>.inplaceAsyncInfuseArXivWithDoi(bibEntry);
    return bibEntry;
}<mark class="modifier">,</mark> executor)).toList()*futureSearchResult2k
java.util.CollectionTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java⁄ ⁄(2Ü
&java.util.concurrent.CompletableFutureTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java⁄ ⁄($2
org.jabref.model.entry.BibEntryTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java⁄% ⁄(-2w
 java.util.stream.Stream.toList()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java·H ·(N2ß
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‹H ‹(K2t
java.util.Collection.stream()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java€H €(N2Ä
)org.jabref.model.paging.Page.getContent()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java⁄L ⁄(V2»
qjava.util.concurrent.CompletableFuture.supplyAsync(java.util.function.Supplier<U>, java.util.concurrent.Executor)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java›a ›(l2≈
norg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(org.jabref.model.entry.BibEntry)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬁX ﬁ(v2
òorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?result@339.23:339.29CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java⁄E ⁄(K2Ú
öorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?bibEntry@348.76:348.84CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬁw ﬁ(2Ú
öorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?bibEntry@348.76:348.84CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬂZ ﬂ(b2Ú
öorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?executor@344.24:344.32CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‡R ‡(ZŸ
¶org.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?modifiedSearchResult@355.29:355.49VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java„ „(1"
typeCollection<BibEntry>"
isFinalfalse"◊
declarationString¡<mark class="modifier"> </mark>Collection<BibEntry> <mark class="class-field">modifiedSearchResult</mark> = futureSearchResult.stream().map(CompletableFuture::join).collect(Collectors.toList())*modifiedSearchResult2k
java.util.CollectionTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java„ „(2
org.jabref.model.entry.BibEntryTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java„ „(2£
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂ' Â(.2ß
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‰' ‰(*2t
java.util.Collection.stream()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java„G „(M2{
$java.util.stream.Collectors.toList()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂ: Â(@2¸
§org.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?futureSearchResult@346.48:346.66CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java„4 „(F2Ñ
-java.util.concurrent.CompletableFuture.join()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‰+ ‰(Bﬂ
èorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)!luceneQuery	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java—7 —(B"
type	QueryNode"
isFinalfalse"*
declarationStringQueryNode luceneQuery*luceneQuery2í
;org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java—- —(6µ
éorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)!pageNumber	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java—H —(R"
typeint"
isFinalfalse"A
declarationString,<mark class="modifier">int</mark> pageNumber*
pageNumber2Z
intTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java—D —(G¬
öorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?bibEntry@348.76:348.84VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‹L ‹(T"
type"
isFinalfalse"
declarationString	 bibEntry*bibEntry2TYPEË
Rorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÎ Î(/"
isFinalfalse"ñ
declarationStringÄ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>Optional&lt;BibEntry&gt; <mark class="method">performSearchById</mark>(String identifier)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeOptional<BibEntry>*performSearchById2¥
]org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.asyncPerformSearchById(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÏK Ï(a2…
Òorg.jabref.logic.importer.fetcher.ArXivFetcher.inplaceAsyncInfuseArXivWithDoi(java.util.concurrent.CompletableFuture<java.util.Optional<org.jabref.model.entry.BibEntry>>, java.util.Optional<org.jabref.model.entry.identifier.ArXivIdentifier>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÓ Ó(*2†
Iorg.jabref.model.entry.identifier.ArXivIdentifier.parse(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÓQ Ó(V2Ñ
-java.util.concurrent.CompletableFuture.join()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java$ ((2ó
@org.jabref.logic.importer.fetcher.ArXivFetcher?arXiv@98.24:98.29CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÏE Ï(J2¥
]org.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)!identifierCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÏb Ï(l2Ã
uorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)?arXivBibEntryPromise@364.46:364.66CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÓ+ Ó(?2¥
]org.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)!identifierCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÓW Ó(a2Ã
uorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)?arXivBibEntryPromise@364.46:364.66CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java (#2ú
Eorg.jabref.logic.importer.fetcher.ArXivFetcher?doiFetcher@99.29:99.39CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÌ Ì(2ß
Lorg.jabref.logic.importer.IdBasedFetcher.performSearchById(java.lang.String)OVERRIDEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÎ Î(/2π
]org.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)!identifier	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÎ7 Î(A2”
uorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)?arXivBibEntryPromise@364.46:364.66DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÏ. Ï(B2p
java.util.OptionalRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÎ Î(2Ü
org.jabref.model.entry.BibEntryRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÎ Î(·

uorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)?arXivBibEntryPromise@364.46:364.66VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÏ. Ï(B"-
type%CompletableFuture<Optional<BibEntry>>"
isFinalfalse"ª
declarationString•<mark class="modifier"> </mark>CompletableFuture<Optional<BibEntry>> <mark class="class-field">arXivBibEntryPromise</mark> = arXiv.asyncPerformSearchById(identifier)*arXivBibEntryPromise2}
&java.util.concurrent.CompletableFutureTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÏ Ï(2r
java.util.OptionalTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÏ Ï("2
org.jabref.model.entry.BibEntryTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÏ# Ï(+2¥
]org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.asyncPerformSearchById(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÏK Ï(a2ó
@org.jabref.logic.importer.fetcher.ArXivFetcher?arXiv@98.24:98.29CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÏE Ï(J2¥
]org.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)!identifierCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÏb Ï(l¯
]org.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)!identifier	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÎ7 Î(A"
typeString"
isFinalfalse"&
declarationStringString identifier*
identifier2g
java.lang.StringTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÎ0 Î(6∂
^org.jabref.logic.importer.fetcher.ArXivFetcher.findIdentifier(org.jabref.model.entry.BibEntry)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ% Ù(3"
isFinalfalse"ó
declarationStringÅ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>Optional&lt;ArXivIdentifier&gt; <mark class="method">findIdentifier</mark>(BibEntry entry)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"!
typeOptional<ArXivIdentifier>*findIdentifier2ª
dorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findIdentifier(org.jabref.model.entry.BibEntry)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaı ı(#2ó
@org.jabref.logic.importer.fetcher.ArXivFetcher?arXiv@98.24:98.29CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaı ı(2ª
dorg.jabref.logic.importer.fetcher.ArXivFetcher.findIdentifier(org.jabref.model.entry.BibEntry)!entryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaı$ ı()2¿
dorg.jabref.logic.importer.fetcher.ArXivFetcher.findIdentifier(org.jabref.model.entry.BibEntry)!entry	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ= Ù(B2p
java.util.OptionalRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ Ù(2ò
1org.jabref.model.entry.identifier.ArXivIdentifierRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ Ù(#à
dorg.jabref.logic.importer.fetcher.ArXivFetcher.findIdentifier(org.jabref.model.entry.BibEntry)!entry	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ= Ù(B"
typeBibEntry"
isFinalfalse"#
declarationStringBibEntry entry*entry2v
org.jabref.model.entry.BibEntryTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ4 Ù(<Ì
Borg.jabref.logic.importer.fetcher.ArXivFetcher.getIdentifierName()METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘ ˘(#"
isFinalfalse"ü
declarationStringâ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>String <mark class="method">getIdentifierName</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*getIdentifierName2ü
Horg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getIdentifierName()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˙ ˙(&2ó
@org.jabref.logic.importer.fetcher.ArXivFetcher?arXiv@98.24:98.29CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˙ ˙(2í
7org.jabref.logic.importer.IdFetcher.getIdentifierName()OVERRIDEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘ ˘(#2n
java.lang.StringRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘ ˘(±
Aorg.jabref.logic.importer.fetcher.ArXivFetcher?LOGGER@73.32:73.38VALUEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaI  I(&"
isFinaltrue"
typeLogger"‚
declarationStringÃ<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>Logger <mark class="class-field">LOGGER</mark> = LoggerFactory.getLogger(ArXivFetcher.class);"
isStatictrue"
accessprivate*LOGGER2e
org.slf4j.LoggerTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaI I(£
Eorg.jabref.logic.importer.fetcher.ArXivFetcher?DOI_PREFIX@76.32:76.42VALUEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaL  L(*"
isFinaltrue"
typeString"Ã
declarationString∂<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>String <mark class="class-field">DOI_PREFIX</mark> = "10.48550/arXiv.";"
isStatictrue"
accessprivate*
DOI_PREFIX2e
java.lang.StringTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaL L(Ó
Vorg.jabref.logic.importer.fetcher.ArXivFetcher?CHOSEN_AUTOMATIC_DOI_FIELDS@83.36:83.63VALUEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaS$ S(?"
isFinaltrue"
type
Set<Field>"Ñ
declarationStringÓ<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>Set<Field> <mark class="class-field">CHOSEN_AUTOMATIC_DOI_FIELDS</mark> = Set.of(StandardField.KEYWORDS, StandardField.AUTHOR);"
isStatictrue"
accessprivate*CHOSEN_AUTOMATIC_DOI_FIELDS2b
java.util.SetTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaS S(2Ä
"org.jabref.model.entry.field.FieldTYPE_ARGUMENTK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaS S("2k
java.util.Set.of(E, E)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaSF S(Hˇ
Sorg.jabref.logic.importer.fetcher.ArXivFetcher?CHOSEN_MANUAL_DOI_FIELDS@92.36:92.60VALUEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java\$ \(<"
isFinaltrue"
type
Set<Field>"ò
declarationStringÇ<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>Set<Field> <mark class="class-field">CHOSEN_MANUAL_DOI_FIELDS</mark> = Set.of(StandardField.DOI, StandardField.PUBLISHER, InternalField.KEY_FIELD);"
isStatictrue"
accessprivate*CHOSEN_MANUAL_DOI_FIELDS2b
java.util.SetTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java\ \(2Ä
"org.jabref.model.entry.field.FieldTYPE_ARGUMENTK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java\ \("2n
java.util.Set.of(E, E, E)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java\C \(Eµ
aorg.jabref.logic.importer.fetcher.ArXivFetcher?ARXIV_KEYWORDS_WITH_COMMA_REPLACEMENTS@94.45:94.83VALUEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java^- ^(S"
isFinaltrue"
typeMap<String, String>"£
declarationStringç<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>Map<String, String> <mark class="class-field">ARXIV_KEYWORDS_WITH_COMMA_REPLACEMENTS</mark> = Collections.unmodifiableMap(Map.of("Computational Engineering, Finance, and Science"<mark class="modifier">,</mark> "Computational Engineering / Finance / Science"<mark class="modifier">,</mark> "Distributed, Parallel, and Cluster Computing"<mark class="modifier">,</mark> "Distributed / Parallel / Cluster Computing"));"
isStatictrue"
accessprivate*&ARXIV_KEYWORDS_WITH_COMMA_REPLACEMENTS2b
java.util.MapTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java^ ^(2n
java.lang.StringTYPE_ARGUMENTK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java^ ^(#2n
java.lang.StringTYPE_ARGUMENTK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java^% ^(+2£
Njava.util.Collections.unmodifiableMap(java.util.Map<? extends K, ? extends V>)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java^b ^(q2q
java.util.Map.of(K, V, K, V)CALLK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java^v ^(x˝
@org.jabref.logic.importer.fetcher.ArXivFetcher?arXiv@98.24:98.29VALUEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javab b("
isFinaltrue"
typeArXiv"ã
declarationStringv<mark class="modifier">private </mark><mark class="modifier">final </mark>ArXiv <mark class="class-field">arXiv</mark>"
isStaticfalse"
accessprivate*arXiv2â
4org.jabref.logic.importer.fetcher.ArXivFetcher.ArXivTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javab b(è
Eorg.jabref.logic.importer.fetcher.ArXivFetcher?doiFetcher@99.29:99.39VALUEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javac c('"
isFinaltrue"
type
DoiFetcher"ñ
declarationStringÄ<mark class="modifier">private </mark><mark class="modifier">final </mark>DoiFetcher <mark class="class-field">doiFetcher</mark>"
isStaticfalse"
accessprivate*
doiFetcher2Å
,org.jabref.logic.importer.fetcher.DoiFetcherTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javac c(º
Torg.jabref.logic.importer.fetcher.ArXivFetcher?importFormatPreferences@100.42:100.65VALUEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javad* d(A"
isFinaltrue"
typeImportFormatPreferences"∞
declarationStringö<mark class="modifier">private </mark><mark class="modifier">final </mark>ImportFormatPreferences <mark class="class-field">importFormatPreferences</mark>"
isStaticfalse"
accessprivate*importFormatPreferences2l
ImportFormatPreferencesTYPEK
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javad d()Ó(
4org.jabref.logic.importer.fetcher.ArXivFetcher.ArXivCLASSM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaà à("9
package.org.jabref.logic.importer.fetcher.ArXivFetcher"
isFinalfalse"
inner classtrue"

isAbstractfalse"Ó
declarationStringÿ<mark class="modifier">protected </mark><mark class="modifier">class </mark>ArXiv<mark class="modifier"><br>implements </mark>FulltextFetcher, PagedSearchBasedFetcher, IdBasedFetcher, IdFetcher&lt;ArXivIdentifier&gt;"
access	protected*ArXiv2c
ArXivDECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaê ê(2¿
borg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findFullText(org.jabref.model.entry.BibEntry)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaï ï()2¢
Dorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getTrustLevel()DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java® ®('2≥
Uorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntry(java.lang.String)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¨% ¨(32∑
Yorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntryById(java.lang.String)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaµ% µ(72ƒ
forg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java√! √(12∫
\org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(java.lang.String, int)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java! (12˚
úorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ! Ù()2˙
õorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå å( 2µ
Worg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÆ! Æ(-2ú
>org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getName()DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∆ ∆(2†
Borg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getHelpPage()DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÀ" À(-2Ë
âorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java÷ ÷(02ñ
∑org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.filterYears(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‡ ‡(*2ª
]org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.asyncPerformSearchById(java.lang.String)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÈ8 È(N2∂
Xorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchById(java.lang.String)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ" Ù(32¬
dorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findIdentifier(org.jabref.model.entry.BibEntry)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˙) ˙(72¶
Horg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getIdentifierName()DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÉ É('2ß
Iorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv?LOGGER@394.36:394.42DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaä$ ä(*2®
Jorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv?API_URL@396.36:396.43DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå$ å(+2∏
Zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv?importFormatPreferences@398.46:398.69DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaé. é(E2Ç
)org.jabref.logic.importer.FulltextFetcherEXTENDM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaà% à(42ä
1org.jabref.logic.importer.PagedSearchBasedFetcherEXTENDM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaà6 à(M2Å
(org.jabref.logic.importer.IdBasedFetcherEXTENDM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaàO à(]2|
#org.jabref.logic.importer.IdFetcherEXTENDM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaà_ à(h2ò
1org.jabref.model.entry.identifier.ArXivIdentifierEXTEND_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaài à(x¬
ArXivCONSTRUCTORM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaê ê("å
declarationStringw<mark class="modifier">public </mark><mark class="method">ArXiv</mark>(ImportFormatPreferences importFormatPreferences)*ArXiv2±
Zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv?importFormatPreferences@398.46:398.69CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaë ë((2í
4org.jabref.logic.importer.fetcher.ArXivFetcher.ArXivRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaê ê(ı
importFormatPreferences	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaê- ê(D"
typeImportFormatPreferences"
isFinalfalse"D
declarationString/ImportFormatPreferences importFormatPreferences*importFormatPreferences2n
ImportFormatPreferencesTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaê ê(,è&
borg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findFullText(org.jabref.model.entry.BibEntry)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaï ï()"
isFinalfalse"Ñ
declarationStringÓ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>Optional&lt;URL&gt; <mark class="method">findFullText</mark>(BibEntry entry)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeOptional<URL>*findFullText2z
#java.util.Objects.requireNonNull(T)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javañ ñ("2z
#java.util.stream.Stream.findFirst()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaù? ù(H2ß
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaú? ú(B2û
Gjava.util.stream.Stream.filter(java.util.function.Predicate<? super T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaõ? õ(E2ß
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaö? ö(B2t
java.util.Collection.stream()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaô? ô(E2Ω
forg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaô' ô(72õ
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaû û( 2q
java.util.Optional.empty()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java§ §(!2ø
horg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findFullText(org.jabref.model.entry.BibEntry)!entryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javañ# ñ((2ø
horg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findFullText(org.jabref.model.entry.BibEntry)!entryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaô8 ô(=2Œ
worg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findFullText(org.jabref.model.entry.BibEntry)?pdfUrl@409.30:409.36CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaû û(2†
Iorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv?LOGGER@394.36:394.42CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaû( û(.2Œ
worg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findFullText(org.jabref.model.entry.BibEntry)?pdfUrl@409.30:409.36CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaü ü(2†
Iorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv?LOGGER@394.36:394.42CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java° °(2…
rorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findFullText(org.jabref.model.entry.BibEntry)?e@416.38:416.39CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java°8 °(92¢
Korg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.getPdfUrl()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaöC ö(X2u
java.util.Optional.isPresent()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaõF õ(Y2o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaúC ú(P2≤
Worg.jabref.logic.importer.FulltextFetcher.findFullText(org.jabref.model.entry.BibEntry)OVERRIDEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaï ï()2ƒ
horg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findFullText(org.jabref.model.entry.BibEntry)!entry	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaï3 ï(82’
worg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findFullText(org.jabref.model.entry.BibEntry)?pdfUrl@409.30:409.36DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaô ô($2“
torg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findFullText(org.jabref.model.entry.BibEntry)?url@414.33:414.36DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaû! û($2–
rorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findFullText(org.jabref.model.entry.BibEntry)?e@416.38:416.39DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java†& †('2p
java.util.OptionalRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaï ï(2s
java.net.URLRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaï ï(∏
worg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findFullText(org.jabref.model.entry.BibEntry)?pdfUrl@409.30:409.36VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaô ô($"
typeOptional<URL>"
isFinalfalse"„
declarationStringÕ<mark class="modifier"> </mark>Optional<URL> <mark class="class-field">pdfUrl</mark> = searchForEntries(entry).stream().map(ArXivEntry::getPdfUrl).filter(Optional::isPresent).map(Optional::get).findFirst()*pdfUrl2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaô ô(2l
java.net.URLTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaô ô(2z
#java.util.stream.Stream.findFirst()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaù? ù(H2ß
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaú? ú(B2û
Gjava.util.stream.Stream.filter(java.util.function.Predicate<? super T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaõ? õ(E2ß
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaö? ö(B2t
java.util.Collection.stream()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaô? ô(E2Ω
forg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaô' ô(72ø
horg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findFullText(org.jabref.model.entry.BibEntry)!entryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaô8 ô(=2¢
Korg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.getPdfUrl()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaöC ö(X2u
java.util.Optional.isPresent()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaõF õ(Y2o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaúC ú(På
horg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findFullText(org.jabref.model.entry.BibEntry)!entry	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaï3 ï(8"
typeBibEntry"
isFinalfalse"#
declarationStringBibEntry entry*entry2v
org.jabref.model.entry.BibEntryTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaï* ï(2ë
torg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findFullText(org.jabref.model.entry.BibEntry)?url@414.33:414.36VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaû! û($"
type"
isFinalfalse"
declarationString url*url2TYPE©
rorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findFullText(org.jabref.model.entry.BibEntry)?e@416.38:416.39VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java†& †('"
typeFetcherException"
isFinalfalse"'
declarationStringFetcherException e*e2Å
*org.jabref.logic.importer.FetcherExceptionTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java† †(%“
Dorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getTrustLevel()METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java® ®('"
isFinalfalse"ü
declarationStringâ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>TrustLevel <mark class="method">getTrustLevel</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
type
TrustLevel*getTrustLevel2î
9org.jabref.logic.importer.FulltextFetcher.getTrustLevel()OVERRIDEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java® ®('2ä
,org.jabref.logic.importer.fetcher.TrustLevelRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java® ®(”
Uorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntry(java.lang.String)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¨% ¨(3"
isFinalfalse"È
declarationString”<mark class="modifier">private </mark>Optional&lt;ArXivEntry&gt; <mark class="method">searchForEntry</mark>(String searchQuery)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accessprivate"

isAbstractfalse"
typeOptional<ArXivEntry>*searchForEntry2Ù
úorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≠' ≠(/2x
!java.util.Collections.emptyList()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≠I ≠(R2l
java.util.List.size()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÆ Æ(2q
java.util.Optional.empty()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java±  ±(%2∏
aorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntry(java.lang.String)!searchQueryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≠0 ≠(;2¬
korg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntry(java.lang.String)?entries@429.29:429.36CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÆ Æ(2¬
korg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntry(java.lang.String)?entries@429.29:429.36CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaØ# Ø(*2Ω
aorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntry(java.lang.String)!searchQuery	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¨; ¨(F2…
korg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntry(java.lang.String)?entries@429.29:429.36DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≠ ≠($2p
java.util.OptionalRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¨ ¨(2¶
?org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntryRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¨ ¨(#ˆ	
korg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntry(java.lang.String)?entries@429.29:429.36VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≠ ≠($"
typeList<ArXivEntry>"
isFinalfalse"√
declarationString≠<mark class="modifier"> </mark>List<ArXivEntry> <mark class="class-field">entries</mark> = queryApi(searchQuery, Collections.emptyList()<mark class="modifier">,</mark> 0, 1)*entries2e
java.util.ListTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≠ ≠(2ü
?org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntryTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≠ ≠(2Ù
úorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≠' ≠(/2x
!java.util.Collections.emptyList()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≠I ≠(R2∏
aorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntry(java.lang.String)!searchQueryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≠0 ≠(;˛
aorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntry(java.lang.String)!searchQuery	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¨; ¨(F"
typeString"
isFinalfalse"'
declarationStringString searchQuery*searchQuery2g
java.lang.StringTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¨4 ¨(:«
Yorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntryById(java.lang.String)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaµ% µ(7"
isFinalfalse"‰
declarationStringŒ<mark class="modifier">private </mark>Optional&lt;ArXivEntry&gt; <mark class="method">searchForEntryById</mark>(String id)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accessprivate"

isAbstractfalse"
typeOptional<ArXivEntry>*searchForEntryById2†
Iorg.jabref.model.entry.identifier.ArXivIdentifier.parse(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂C ∂(H2s
java.util.Optional.isEmpty()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∑ ∑("2q
java.util.Optional.empty()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∏  ∏(%2Ù
úorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaª' ª(/2}
&java.util.Collections.singletonList(T)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaª@ ª(M2o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaªY ª(\2o
java.util.List.isEmpty()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaº º( 2q
java.util.Optional.empty()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaø  ø(%2≥
\org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntryById(java.lang.String)!idCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂I ∂(K2…
rorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntryById(java.lang.String)?identifier@438.38:438.48CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∑ ∑(2…
rorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntryById(java.lang.String)?identifier@438.38:438.48CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaªN ª(X2∆
oorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntryById(java.lang.String)?entries@443.29:443.36CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaº º(2∆
oorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntryById(java.lang.String)?entries@443.29:443.36CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaΩ# Ω(*2∏
\org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntryById(java.lang.String)!id	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaµ? µ(A2–
rorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntryById(java.lang.String)?identifier@438.38:438.48DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂& ∂(02Õ
oorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntryById(java.lang.String)?entries@443.29:443.36DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaª ª($2p
java.util.OptionalRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaµ µ(2¶
?org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntryRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaµ µ(#ˇ
rorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntryById(java.lang.String)?identifier@438.38:438.48VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂& ∂(0"!
typeOptional<ArXivIdentifier>"
isFinalfalse"ñ
declarationStringÄ<mark class="modifier"> </mark>Optional<ArXivIdentifier> <mark class="class-field">identifier</mark> = ArXivIdentifier.parse(id)*
identifier2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂ ∂(2ë
1org.jabref.model.entry.identifier.ArXivIdentifierTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂ ∂($2†
Iorg.jabref.model.entry.identifier.ArXivIdentifier.parse(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂C ∂(H2≥
\org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntryById(java.lang.String)!idCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂I ∂(K™
oorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntryById(java.lang.String)?entries@443.29:443.36VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaª ª($"
typeList<ArXivEntry>"
isFinalfalse"Ï
declarationString÷<mark class="modifier"> </mark>List<ArXivEntry> <mark class="class-field">entries</mark> = queryApi(""<mark class="modifier">,</mark> Collections.singletonList(identifier.get())<mark class="modifier">,</mark> 0, 1)*entries2e
java.util.ListTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaª ª(2ü
?org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntryTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaª ª(2Ù
úorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaª' ª(/2}
&java.util.Collections.singletonList(T)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaª@ ª(M2o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaªY ª(\2…
rorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntryById(java.lang.String)?identifier@438.38:438.48CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaªN ª(XÁ
\org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntryById(java.lang.String)!id	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaµ? µ(A"
typeString"
isFinalfalse"
declarationString	String id*id2g
java.lang.StringTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaµ8 µ(>–r
forg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java√! √(1"
isFinalfalse"Î
declarationString’<mark class="modifier">private </mark>List&lt;ArXivEntry&gt; <mark class="method">searchForEntries</mark>(BibEntry originalEntry)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accessprivate"

isAbstractfalse"
typeList<ArXivEntry>*searchForEntries2~
'org.jabref.model.entry.BibEntry.clone()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≈< ≈(A2¶
Oorg.jabref.logic.cleanup.EprintCleanup.cleanup(org.jabref.model.entry.BibEntry)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java»  »('2£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java…0 …(82´
Torg.jabref.model.strings.StringUtil.isNotBlank(java.util.Optional<java.lang.String>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java   (%2ó
@org.jabref.model.util.OptionalUtil.toList(java.util.Optional<T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÕ( Õ(.2∞
Yorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntryById(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÕ/ Õ(A2o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÕM Õ(P2¢
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java◊/ ◊(22ƒ
mjava.util.Optional.flatMap(java.util.function.Function<? super T, ? extends java.util.Optional<? extends U>>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java÷/ ÷(62£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java’/ ’(72u
java.util.Optional.isPresent()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java⁄ ⁄(#2£
Lorg.jabref.logic.importer.fetcher.ArXivFetcher.isManualDoi(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java⁄6 ⁄(A2o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java⁄L ⁄(O2o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java€+ €(.2¢
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java›T ›(W2£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java›5 ›(=2¢
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬁR ﬁ(U2£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬁ4 ﬁ(<2†
Horg.jabref.model.strings.StringUtil.ignoreCurlyBracket(java.lang.String)CALLN
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬁr ﬁ(Ñ2¨
Uorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntry(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‚. ‚(<2u
java.util.Optional.isPresent()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java„ „($2o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÊ/ Ê(22ü
Horg.jabref.model.strings.StringUtil.ignoreCurlyBracket(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÁ/ Á(A2s
java.util.Optional.orElse(T)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÁf Á(l2£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÁH Á(P2≥
\org.jabref.logic.util.strings.StringSimilarity.isSimilar(java.lang.String, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaË Ë(#2ó
@org.jabref.model.util.OptionalUtil.toList(java.util.Optional<T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÈ( È(.2x
!java.util.Collections.emptyList()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÌ Ì((2ç
6org.jabref.logic.cleanup.EprintCleanup.EprintCleanup()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java» »(2ò
Aorg.jabref.logic.util.strings.StringSimilarity.StringSimilarity()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂ- Â(=2À
torg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)!originalEntryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≈. ≈(;2—
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?entry@453.27:453.32CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java»( »(-2—
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?entry@453.27:453.32CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java…* …(/2÷
org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?identifier@457.29:457.39CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java &  (02÷
org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?identifier@457.29:457.39CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÕB Õ(L2†
Iorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv?LOGGER@394.36:394.42CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaœ œ(2Õ
vorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?e@462.42:462.43CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaœC œ(D2—
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?entry@453.27:453.32CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java’) ’(.2’
~org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?doiString@469.29:469.38CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java⁄ ⁄(2’
~org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?doiString@469.29:469.38CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java⁄B ⁄(K2—
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?query@468.19:468.24CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java€ €(2’
~org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?doiString@469.29:469.38CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java€! €(*2—
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?entry@453.27:453.32CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java›/ ›(42“
{org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?author@477.88:477.94CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java›j ›(p2—
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?entry@453.27:453.32CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬁ. ﬁ(32”
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?title@478.86:478.91CALLO
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬁÖ ﬁ(ä2—
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?query@468.19:468.24CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬂ ﬂ(2ÿ
Äorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?authorQuery@477.33:477.44CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬂA ﬂ(L2÷
org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?titleQuery@478.33:478.43CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬂN ﬂ(X2—
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?query@468.19:468.24CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‚= ‚(B2÷
org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?arxivEntry@482.33:482.43CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java„ „(2÷
org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?arxivEntry@482.33:482.43CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÊ$ Ê(.2—
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?entry@453.27:453.32CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÁB Á(G2—
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?match@485.33:485.38CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaË Ë(2÷
org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?arxivTitle@486.23:486.33CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaË$ Ë(.2÷
org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?entryTitle@487.23:487.33CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaË0 Ë(:2÷
org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?arxivEntry@482.33:482.43CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÈ/ È(92™
Sorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?title@649.43:649.48CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÊ5 Ê(:2î
=org.jabref.model.entry.identifier.DOI.parse(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java÷7 ÷(A2å
5org.jabref.model.entry.identifier.DOI.getNormalized()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java◊3 ◊(E2–
torg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)!originalEntry	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java√; √(H2ÿ
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?entry@453.27:453.32DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≈ ≈( 2›
org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?identifier@457.29:457.39DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java… …('2ÿ
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?query@468.19:468.24DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‘ ‘(2‹
~org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?doiString@469.29:469.38DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java’ ’(&2ﬂ
Äorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?authorQuery@477.33:477.44DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java›! ›(,2›
org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?titleQuery@478.33:478.43DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬁ! ﬁ(+2›
org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?arxivEntry@482.33:482.43DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‚! ‚(+2ÿ
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?match@485.33:485.38DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂ! Â(&2›
org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?arxivTitle@486.23:486.33DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÊ Ê(!2›
org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?entryTitle@487.23:487.33DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÁ Á(!2‘
vorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?e@462.42:462.43DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaŒ* Œ(+2Ÿ
{org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?author@477.88:477.94DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java›X ›(^2ÿ
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?title@478.86:478.91DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬁV ﬁ([2l
java.util.ListRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java√ √(2¶
?org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntryRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java√ √(
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?entry@453.27:453.32VALUEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≈ ≈( "
typeBibEntry"
isFinaltrue"´
declarationStringï<mark class="modifier"> </mark><mark class="modifier">final </mark>BibEntry <mark class="class-field">entry</mark> = (BibEntry) originalEntry.clone()*entry2v
org.jabref.model.entry.BibEntryTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≈ ≈(2~
'org.jabref.model.entry.BibEntry.clone()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≈< ≈(A2À
torg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)!originalEntryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≈. ≈(;Ñ
org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?identifier@457.29:457.39VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java… …('"
typeOptional<String>"
isFinalfalse"ò
declarationStringÇ<mark class="modifier"> </mark>Optional<String> <mark class="class-field">identifier</mark> = entry.getField(StandardField.EPRINT)*
identifier2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java… …(2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java… …(2£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java…0 …(82—
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?entry@453.27:453.32CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java…* …(/ 
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?query@468.19:468.24VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‘ ‘("
typeString"
isFinalfalse"a
declarationStringL<mark class="modifier"> </mark>String <mark class="class-field">query</mark>*query2g
java.lang.StringTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‘ ‘(º
~org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?doiString@469.29:469.38VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java’ ’(&"
typeOptional<String>"
isFinalfalse"¿
declarationString™<mark class="modifier"> </mark>Optional<String> <mark class="class-field">doiString</mark> = entry.getField(StandardField.DOI).flatMap(DOI::parse).map(DOI::getNormalized)*	doiString2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java’ ’(2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java’ ’(2¢
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java◊/ ◊(22ƒ
mjava.util.Optional.flatMap(java.util.function.Function<? super T, ? extends java.util.Optional<? extends U>>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java÷/ ÷(62£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java’/ ’(72—
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?entry@453.27:453.32CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java’) ’(.2î
=org.jabref.model.entry.identifier.DOI.parse(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java÷7 ÷(A2å
5org.jabref.model.entry.identifier.DOI.getNormalized()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java◊3 ◊(E†
Äorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?authorQuery@477.33:477.44VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java›! ›(,"
typeOptional<String>"
isFinalfalse"∑
declarationString°<mark class="modifier"> </mark>Optional<String> <mark class="class-field">authorQuery</mark> = entry.getField(StandardField.AUTHOR).map(author -> "au:" + author)*authorQuery2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java› ›(2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java› ›(2¢
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java›T ›(W2£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java›5 ›(=2—
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?entry@453.27:453.32CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java›/ ›(42“
{org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?author@477.88:477.94CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java›j ›(p‹
org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?titleQuery@478.33:478.43VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬁ! ﬁ(+"
typeOptional<String>"
isFinalfalse"“
declarationStringº<mark class="modifier"> </mark>Optional<String> <mark class="class-field">titleQuery</mark> = entry.getField(StandardField.TITLE).map(title -> "ti:" + StringUtil.ignoreCurlyBracket(title))*
titleQuery2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬁ ﬁ(2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬁ ﬁ(2¢
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬁR ﬁ(U2£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬁ4 ﬁ(<2†
Horg.jabref.model.strings.StringUtil.ignoreCurlyBracket(java.lang.String)CALLN
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬁr ﬁ(Ñ2—
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?entry@453.27:453.32CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬁ. ﬁ(32”
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?title@478.86:478.91CALLO
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬁÖ ﬁ(äµ
org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?arxivEntry@482.33:482.43VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‚! ‚(+"
typeOptional<ArXivEntry>"
isFinalfalse"å
declarationStringw<mark class="modifier"> </mark>Optional<ArXivEntry> <mark class="class-field">arxivEntry</mark> = searchForEntry(query)*
arxivEntry2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‚ ‚(2ü
?org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntryTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‚ ‚(2¨
Uorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntry(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‚. ‚(<2—
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?query@468.19:468.24CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‚= ‚(B≤
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?match@485.33:485.38VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂ! Â(&"
typeStringSimilarity"
isFinalfalse"Ñ
declarationStringo<mark class="modifier"> </mark>StringSimilarity <mark class="class-field">match</mark> = new StringSimilarity()*match2Ö
.org.jabref.logic.util.strings.StringSimilarityTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂ Â( 2ò
Aorg.jabref.logic.util.strings.StringSimilarity.StringSimilarity()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂ- Â(=ı
org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?arxivTitle@486.23:486.33VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÊ Ê(!"
typeString"
isFinalfalse"ä
declarationStringu<mark class="modifier"> </mark>String <mark class="class-field">arxivTitle</mark> = arxivEntry.get().title.orElse("")*
arxivTitle2g
java.lang.StringTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÊ Ê(2o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÊ/ Ê(22÷
org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?arxivEntry@482.33:482.43CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÊ$ Ê(.2™
Sorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?title@649.43:649.48CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÊ5 Ê(:º	
org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?entryTitle@487.23:487.33VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÁ Á(!"
typeString"
isFinalfalse"∑
declarationString°<mark class="modifier"> </mark>String <mark class="class-field">entryTitle</mark> = StringUtil.ignoreCurlyBracket(entry.getField(StandardField.TITLE).orElse(""))*
entryTitle2g
java.lang.StringTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÁ Á(2ü
Horg.jabref.model.strings.StringUtil.ignoreCurlyBracket(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÁ/ Á(A2s
java.util.Optional.orElse(T)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÁf Á(l2£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÁH Á(P2—
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?entry@453.27:453.32CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÁB Á(G®
torg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)!originalEntry	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java√; √(H"
typeBibEntry"
isFinalfalse"+
declarationStringBibEntry originalEntry*originalEntry2v
org.jabref.model.entry.BibEntryTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java√2 √(:≠
vorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?e@462.42:462.43VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaŒ* Œ(+"
typeFetcherException"
isFinalfalse"'
declarationStringFetcherException e*e2Å
*org.jabref.logic.importer.FetcherExceptionTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaŒ Œ()û
{org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?author@477.88:477.94VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java›X ›(^"
type"
isFinalfalse"
declarationString author*author2TYPEõ
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)?title@478.86:478.91VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬁV ﬁ(["
type"
isFinalfalse"
declarationString title*title2TYPEÃ
\org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(java.lang.String, int)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java! (1"
isFinalfalse"—
declarationStringª<mark class="modifier">private </mark>List&lt;ArXivEntry&gt; <mark class="method">searchForEntries</mark>(String searchQuery<mark class="modifier"><mark class="modifier">,</mark></mark> <mark class="modifier">int</mark> pageNumber)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accessprivate"

isAbstractfalse"
typeList<ArXivEntry>*searchForEntries2Ù
úorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÒ Ò(2x
!java.util.Collections.emptyList()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÒ5 Ò(>2ñ
?org.jabref.logic.importer.PagedSearchBasedFetcher.getPageSize()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÒB Ò(M2ñ
?org.jabref.logic.importer.PagedSearchBasedFetcher.getPageSize()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÒ^ Ò(i2ø
horg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(java.lang.String, int)!searchQueryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÒ Ò('2æ
gorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(java.lang.String, int)!pageNumberCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÒR Ò(\2ƒ
horg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(java.lang.String, int)!searchQuery	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java9 (D2√
gorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(java.lang.String, int)!pageNumber	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaJ (T2l
java.util.ListRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java (2¶
?org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntryRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java (Ö
horg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(java.lang.String, int)!searchQuery	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java9 (D"
typeString"
isFinalfalse"'
declarationStringString searchQuery*searchQuery2g
java.lang.StringTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java2 (8ç
gorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(java.lang.String, int)!pageNumber	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaJ (T"
typeint"
isFinalfalse"A
declarationString,<mark class="modifier">int</mark> pageNumber*
pageNumber2Z
intTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaF (IÌ&
úorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ! Ù()"
isFinalfalse"ã
declarationStringı<mark class="modifier">private </mark>List&lt;ArXivEntry&gt; <mark class="method">queryApi</mark>(String searchQuery<mark class="modifier"><mark class="modifier">,</mark></mark> List&lt;ArXivIdentifier&gt; ids<mark class="modifier"><mark class="modifier">,</mark></mark> <mark class="modifier">int</mark> start<mark class="modifier"><mark class="modifier">,</mark></mark> <mark class="modifier">int</mark> maxResults)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accessprivate"

isAbstractfalse"
typeList<ArXivEntry>*queryApi2Û
õorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ ˆ(%2ß
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘$ ˘('2t
java.util.Collection.stream()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘ ˘(!2{
$java.util.stream.Collectors.toList()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘L ˘(R2Ä
®org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!searchQueryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ& ˆ(12¯
†org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!idsCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ3 ˆ(62˙
¢org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!startCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ8 ˆ(=2ˇ
ßorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!maxResultsCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ? ˆ(I2â
±org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?result@502.21:502.27CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˜0 ˜(62ä
≤org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?entries@503.23:503.30CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘ ˘(2Ö
®org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!searchQuery	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ1 Ù(<2˝
†org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!ids	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙT Ù(W2ˇ
¢org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!start	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ] Ù(b2Ñ
ßorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!maxResults	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙh Ù(r2ê
±org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?result@502.21:502.27DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ ˆ(2ë
≤org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?entries@503.23:503.30DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˜ ˜(2l
java.util.ListRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ Ù(2¶
?org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntryRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ Ù(Ø
±org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?result@502.21:502.27VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ ˆ("
typeDocument"
isFinalfalse"ì
declarationString~<mark class="modifier"> </mark>Document <mark class="class-field">result</mark> = callApi(searchQuery, ids, start, maxResults)*result2k
org.w3c.dom.DocumentTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ ˆ(2Û
õorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ ˆ(%2Ä
®org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!searchQueryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ& ˆ(12¯
†org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!idsCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ3 ˆ(62˙
¢org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!startCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ8 ˆ(=2ˇ
ßorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!maxResultsCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ? ˆ(Iƒ
≤org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?entries@503.23:503.30VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˜ ˜("
type
List<Node>"
isFinalfalse"ü
declarationStringâ<mark class="modifier"> </mark>List<Node> <mark class="class-field">entries</mark> = XMLUtil.asList(result.getElementsByTagName("entry"))*entries2e
java.util.ListTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˜ ˜(2p
org.w3c.dom.NodeTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˜ ˜(2â
±org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?result@502.21:502.27CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˜0 ˜(6∆
®org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!searchQuery	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ1 Ù(<"
typeString"
isFinalfalse"'
declarationStringString searchQuery*searchQuery2g
java.lang.StringTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ* Ù(0ﬁ
†org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!ids	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙT Ù(W"
typeList<ArXivIdentifier>"
isFinalfalse".
declarationStringList<ArXivIdentifier> ids*ids2e
java.util.ListTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ> Ù(B2ë
1org.jabref.model.entry.identifier.ArXivIdentifierTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙC Ù(Rø
¢org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!start	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ] Ù(b"
typeint"
isFinalfalse"<
declarationString'<mark class="modifier">int</mark> start*start2Z
intTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙY Ù(\Œ
ßorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.queryApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!maxResults	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙh Ù(r"
typeint"
isFinalfalse"A
declarationString,<mark class="modifier">int</mark> maxResults*
maxResults2Z
intTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙd Ù(gÿ]
õorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå å( "
isFinalfalse"¸
declarationStringÊ<mark class="modifier">private </mark>Document <mark class="method">callApi</mark>(String searchQuery<mark class="modifier"><mark class="modifier">,</mark></mark> List&lt;ArXivIdentifier&gt; ids<mark class="modifier"><mark class="modifier">,</mark></mark> <mark class="modifier">int</mark> start<mark class="modifier"><mark class="modifier">,</mark></mark> <mark class="modifier">int</mark> maxResults)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accessprivate"

isAbstractfalse"
typeDocument*callApi2ó
@org.jabref.model.strings.StringUtil.isNotBlank(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaî î()2ô
Borg.jabref.model.strings.StringUtil.stripAccents(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaïG ï(S2o
java.util.List.isEmpty()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaó ó( 2£
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaôM ô(T2ß
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaô) ô(,2t
java.util.Collection.stream()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaô  ô(&2í
;java.util.stream.Collectors.joining(java.lang.CharSequence)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaô` ô(g2t
java.lang.String.valueOf(int)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaõ8 õ(?2t
java.lang.String.valueOf(int)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaú> ú(E2ç
6javax.xml.parsers.DocumentBuilderFactory.newInstance()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaüH ü(S2î
=javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java†2 †(D2t
java.net.URL.openConnection()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢G ¢(U2É
,java.net.HttpURLConnection.getResponseCode()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java£ £(.2Æ
Worg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java• •(&2ì
<javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java•/ •(42Ç
+java.net.HttpURLConnection.getErrorStream()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java•@ •(N2ì
<javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaß# ß((2~
'java.net.URLConnection.getInputStream()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaß4 ß(B2§
Mjava.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaé é(22˛
¶org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!maxResultsCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaç ç(2°
Jorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv?API_URL@396.36:396.43CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaí7 í(>2ˇ
ßorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!searchQueryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaî* î(52å
¥org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?uriBuilder@530.27:530.37CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaï ï(2ˇ
ßorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!searchQueryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaïT ï(_2˜
üorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!idsCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaó ó(2å
¥org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?uriBuilder@530.27:530.37CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaò ò(2˜
üorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!idsCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaô ô(2å
¥org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?uriBuilder@530.27:530.37CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaõ õ(2˘
°org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!startCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaõ@ õ(E2å
¥org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?uriBuilder@530.27:530.37CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaú ú(2˛
¶org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!maxResultsCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaúF ú(P2å
¥org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?uriBuilder@530.27:530.37CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaù ù($2â
±org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?factory@543.39:543.46CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java†* †(12Ö
≠org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?url@541.20:541.23CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢C ¢(F2å
¥org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?connection@546.34:546.44CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java£ £(2â
±org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?builder@544.32:544.39CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java•' •(.2å
¥org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?connection@546.34:546.44CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java•5 •(?2â
±org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?builder@544.32:544.39CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaß ß("2å
¥org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?connection@546.34:546.44CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaß) ß(32ç
µorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?exception@553.100:553.109CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java™G ™(P2ò
Aorg.jabref.model.entry.identifier.ArXivIdentifier.getNormalized()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaô- ô(K2Ñ
ßorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!searchQuery	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå( å(32¸
üorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!ids	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaåK å(N2˛
°org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!start	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaåT å(Y2É
¶org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!maxResults	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå_ å(i2ì
¥org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?uriBuilder@530.27:530.37DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaí í(%2å
≠org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?url@541.20:541.23DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaù ù(2ê
±org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?factory@543.39:543.46DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaü' ü(.2ê
±org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?builder@544.32:544.39DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java†  †('2ì
¥org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?connection@546.34:546.44DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢" ¢(,2î
µorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?exception@553.100:553.109DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java©d ©(m2r
org.w3c.dom.DocumentRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå å(Ì
¥org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?uriBuilder@530.27:530.37VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaí í(%"
type
URIBuilder"
isFinalfalse"Ñ
declarationStringo<mark class="modifier"> </mark>URIBuilder <mark class="class-field">uriBuilder</mark> = new URIBuilder(API_URL)*
uriBuilder2~
'org.apache.http.client.utils.URIBuilderTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaí í(2°
Jorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv?API_URL@396.36:396.43CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaí7 í(>ú
≠org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?url@541.20:541.23VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaù ù("
typeURL"
isFinalfalse"y
declarationStringd<mark class="modifier"> </mark>URL <mark class="class-field">url</mark> = uriBuilder.build().toURL()*url2c
java.net.URLTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaù ù(2å
¥org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?uriBuilder@530.27:530.37CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaù ù($˜
±org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?factory@543.39:543.46VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaü' ü(."
typeDocumentBuilderFactory"
isFinalfalse"õ
declarationStringÖ<mark class="modifier"> </mark>DocumentBuilderFactory <mark class="class-field">factory</mark> = DocumentBuilderFactory.newInstance()*factory2
(javax.xml.parsers.DocumentBuilderFactoryTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaü ü(&2ç
6javax.xml.parsers.DocumentBuilderFactory.newInstance()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaüH ü(SÏ
±org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?builder@544.32:544.39VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java†  †('"
typeDocumentBuilder"
isFinalfalse"ã
declarationStringv<mark class="modifier"> </mark>DocumentBuilder <mark class="class-field">builder</mark> = factory.newDocumentBuilder()*builder2x
!javax.xml.parsers.DocumentBuilderTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java† †(2î
=javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java†2 †(D2â
±org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?factory@543.39:543.46CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java†* †(1⁄
¥org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?connection@546.34:546.44VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢" ¢(,"
typeHttpURLConnection"
isFinalfalse"ù
declarationStringá<mark class="modifier"> </mark>HttpURLConnection <mark class="class-field">connection</mark> = (HttpURLConnection) url.openConnection()*
connection2q
java.net.HttpURLConnectionTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢ ¢(!2t
java.net.URL.openConnection()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢G ¢(U2Ö
≠org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?url@541.20:541.23CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢C ¢(F≈
ßorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!searchQuery	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå( å(3"
typeString"
isFinalfalse"'
declarationStringString searchQuery*searchQuery2g
java.lang.StringTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå! å('›
üorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!ids	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaåK å(N"
typeList<ArXivIdentifier>"
isFinalfalse".
declarationStringList<ArXivIdentifier> ids*ids2e
java.util.ListTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå5 å(92ë
1org.jabref.model.entry.identifier.ArXivIdentifierTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå: å(Iæ
°org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!start	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaåT å(Y"
typeint"
isFinalfalse"<
declarationString'<mark class="modifier">int</mark> start*start2Z
intTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaåP å(SÕ
¶org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)!maxResults	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå_ å(i"
typeint"
isFinalfalse"A
declarationString,<mark class="modifier">int</mark> maxResults*
maxResults2Z
intTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå[ å(^Ã
µorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.callApi(java.lang.String, java.util.List<org.jabref.model.entry.identifier.ArXivIdentifier>, int, int)?exception@553.100:553.109VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java©d ©(m"V
typeNSAXException | ParserConfigurationException | IOException | URISyntaxException"
isFinalfalse"m
declarationStringXSAXException | ParserConfigurationException | IOException | URISyntaxException exception*	exception2‘
}org.xml.sax.SAXException | javax.xml.parsers.ParserConfigurationException | java.io.IOException | java.net.URISyntaxExceptionTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java© ©(c›'
Worg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÆ! Æ(-"
isFinalfalse"Ñ
declarationStringo<mark class="modifier">private </mark>FetcherException <mark class="method">getException</mark>(Document error)"
isStaticfalse"
accessprivate"

isAbstractfalse"
typeFetcherException*getException2l
java.util.List.size()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaπ π(2™
Sorg.jabref.logic.util.io.XMLUtil.getNodeContent(org.w3c.dom.Node, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaª. ª(<2s
java.util.Optional.orElse(T)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaºk º(q2¢
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaº% º((2Ñ
-java.lang.String.startsWith(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaº@ º(J2s
java.util.Optional.orElse(T)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaæR æ(X2™
Sorg.jabref.logic.util.io.XMLUtil.getNodeContent(org.w3c.dom.Node, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaæ2 æ(@2§
Morg.jabref.logic.importer.FetcherException.FetcherException(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaø ø(/2§
Morg.jabref.logic.importer.FetcherException.FetcherException(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¬ ¬('2¥
]org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)!errorCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaØ0 Ø(52ƒ
morg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?entries@559.23:559.30CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaπ π(2ƒ
morg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?entries@559.23:559.30CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∫ ∫(#2¡
jorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?node@570.21:570.25CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaª= ª(A2ø
horg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?id@571.33:571.35CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaº" º($2∆
oorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?idContent@572.41:572.50CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaº6 º(?2ƒ
morg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?isError@572.24:572.31CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaΩ Ω(2¡
jorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?node@570.21:570.25CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaæA æ(E2…
rorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?errorMessage@574.27:574.39CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaø0 ø(<2π
]org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)!error	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÆ7 Æ(<2À
morg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?entries@559.23:559.30DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaØ Ø(2»
jorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?node@570.21:570.25DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∫ ∫(2∆
horg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?id@571.33:571.35DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaª! ª(#2À
morg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?isError@572.24:572.31DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaº º(2–
rorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?errorMessage@574.27:574.39DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaæ æ('2Õ
oorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?idContent@572.41:572.50DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaº) º(22à
*org.jabref.logic.importer.FetcherExceptionRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÆ Æ( ®
morg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?entries@559.23:559.30VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaØ Ø("
type
List<Node>"
isFinalfalse"û
declarationStringà<mark class="modifier"> </mark>List<Node> <mark class="class-field">entries</mark> = XMLUtil.asList(error.getElementsByTagName("entry"))*entries2e
java.util.ListTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaØ Ø(2p
org.w3c.dom.NodeTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaØ Ø(2¥
]org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)!errorCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaØ0 Ø(5ê
jorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?node@570.21:570.25VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∫ ∫("
typeNode"
isFinalfalse"s
declarationString^<mark class="modifier"> </mark>Node <mark class="class-field">node</mark> = entries.getFirst()*node2g
org.w3c.dom.NodeTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∫ ∫(2ƒ
morg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?entries@559.23:559.30CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∫ ∫(#—
horg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?id@571.33:571.35VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaª! ª(#"
typeOptional<String>"
isFinalfalse"ç
declarationStringx<mark class="modifier"> </mark>Optional<String> <mark class="class-field">id</mark> = XMLUtil.getNodeContent(node, "id")*id2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaª ª(2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaª ª(2™
Sorg.jabref.logic.util.io.XMLUtil.getNodeContent(org.w3c.dom.Node, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaª. ª(<2¡
jorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?node@570.21:570.25CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaª= ª(AÈ

morg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?isError@572.24:572.31VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaº º("
typeBoolean"
isFinalfalse"‹
declarationString∆<mark class="modifier"> </mark>Boolean <mark class="class-field">isError</mark> = id.map(idContent -> idContent.startsWith("http://arxiv.org/api/errors")).orElse(<mark class="modifier">false</mark>)*isError2h
java.lang.BooleanTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaº º(2s
java.util.Optional.orElse(T)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaºk º(q2¢
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaº% º((2Ñ
-java.lang.String.startsWith(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaº@ º(J2ø
horg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?id@571.33:571.35CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaº" º($2∆
oorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?idContent@572.41:572.50CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaº6 º(?˙
rorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?errorMessage@574.27:574.39VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaæ æ('"
typeString"
isFinalfalse"´
declarationStringï<mark class="modifier"> </mark>String <mark class="class-field">errorMessage</mark> = XMLUtil.getNodeContent(node, "summary").orElse("Unknown error")*errorMessage2g
java.lang.StringTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaæ æ(2s
java.util.Optional.orElse(T)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaæR æ(X2™
Sorg.jabref.logic.util.io.XMLUtil.getNodeContent(org.w3c.dom.Node, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaæ2 æ(@2¡
jorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?node@570.21:570.25CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaæA æ(Eˆ
]org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)!error	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÆ7 Æ(<"
typeDocument"
isFinalfalse"#
declarationStringDocument error*error2k
org.w3c.dom.DocumentTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÆ. Æ(6ò
oorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getException(org.w3c.dom.Document)?idContent@572.41:572.50VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaº) º(2"
type"
isFinalfalse"
declarationString
 idContent*	idContent2TYPEß
>org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getName()METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∆ ∆("
isFinalfalse"î
declarationString<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>String <mark class="method">getName</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*getName2â
.org.jabref.logic.importer.WebFetcher.getName()OVERRIDEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∆ ∆(2â
.org.jabref.logic.importer.WebFetcher.getName()OVERRIDEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∆ ∆(2â
.org.jabref.logic.importer.WebFetcher.getName()OVERRIDEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∆ ∆(2n
java.lang.StringRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∆ ∆(Ÿ	
Borg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getHelpPage()METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÀ" À(-"
isFinalfalse"´
declarationStringï<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>Optional&lt;HelpFile&gt; <mark class="method">getHelpPage</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeOptional<HelpFile>*getHelpPage2o
java.util.Optional.of(T)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÃ Ã(2ç
2org.jabref.logic.importer.WebFetcher.getHelpPage()OVERRIDEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÀ" À(-2ç
2org.jabref.logic.importer.WebFetcher.getHelpPage()OVERRIDEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÀ" À(-2ç
2org.jabref.logic.importer.WebFetcher.getHelpPage()OVERRIDEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÀ" À(-2p
java.util.OptionalRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÀ À(2Ö
org.jabref.logic.help.HelpFileRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÀ À( ë2
âorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java÷ ÷(0"
isFinalfalse"Å
declarationStringÎ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>Page&lt;BibEntry&gt; <mark class="method">performSearchPaged</mark>(QueryNode luceneQuery<mark class="modifier"><mark class="modifier">,</mark></mark> <mark class="modifier">int</mark> pageNumber)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typePage<BibEntry>*performSearchPaged2ß
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java€ €(2t
java.util.Collection.stream()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java⁄ ⁄(2≥
\org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(java.lang.String, int)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaŸ* Ÿ(:2{
$java.util.stream.Collectors.toList()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‹( ‹(.2è
∑org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.filterYears(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java›< ›(G2≥
\org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer.ArXivQueryTransformer()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java◊4 ◊(I2®
Qorg.jabref.model.paging.Page.Page(java.lang.String, int, java.util.Collection<T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java› ›(2˚
£org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?transformer@599.34:599.45CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÿ& ÿ(12Ì
ïorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)!luceneQueryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÿG ÿ(R2Ä
®org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?transformedQuery@600.19:600.35CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaŸ; Ÿ(K2Ï
îorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)!pageNumberCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaŸM Ÿ(W2˙
¢org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?arXivEntry@603.25:603.35CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java€' €(12±
Zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv?importFormatPreferences@398.46:398.69CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java€= €(T2Ä
®org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?transformedQuery@600.19:600.35CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java› ›(.2Ï
îorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)!pageNumberCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java›0 ›(:2¸
§org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?searchResult@601.27:601.39CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java›H ›(T2˚
£org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?transformer@599.34:599.45CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java›V ›(a2‚
Üorg.jabref.logic.importer.PagedSearchBasedFetcher.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)OVERRIDEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java÷ ÷(02Ú
ïorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)!luceneQuery	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java÷; ÷(F2Ò
îorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)!pageNumber	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java÷L ÷(V2Ç
£org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?transformer@599.34:599.45DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java◊" ◊(-2á
®org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?transformedQuery@600.19:600.35DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÿ ÿ(#2É
§org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?searchResult@601.27:601.39DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaŸ Ÿ('2Å
¢org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?arXivEntry@603.25:603.35DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java€ €(#2z
org.jabref.model.paging.PageRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java÷ ÷(2Ü
org.jabref.model.entry.BibEntryRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java÷ ÷(®
£org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?transformer@599.34:599.45VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java◊" ◊(-"
typeArXivQueryTransformer"
isFinalfalse"î
declarationString<mark class="modifier"> </mark>ArXivQueryTransformer <mark class="class-field">transformer</mark> = new ArXivQueryTransformer()*transformer2õ
Dorg.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformerTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java◊ ◊(!2≥
\org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer.ArXivQueryTransformer()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java◊4 ◊(I∫
®org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?transformedQuery@600.19:600.35VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÿ ÿ(#"
typeString"
isFinalfalse"®
declarationStringí<mark class="modifier"> </mark>String <mark class="class-field">transformedQuery</mark> = transformer.transformLuceneQuery(luceneQuery).orElse("")*transformedQuery2g
java.lang.StringTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÿ ÿ(2˚
£org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?transformer@599.34:599.45CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÿ& ÿ(12Ì
ïorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)!luceneQueryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÿG ÿ(Rı
§org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?searchResult@601.27:601.39VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaŸ Ÿ('"
typeList<BibEntry>"
isFinalfalse"∂
declarationString†<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">searchResult</mark> = searchForEntries(transformedQuery, pageNumber).stream().map(arXivEntry -> arXivEntry.toBibEntry(importFormatPreferences.bibEntryPreferences().getKeywordSeparator())).collect(Collectors.toList())*searchResult2e
java.util.ListTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaŸ Ÿ(2
org.jabref.model.entry.BibEntryTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaŸ Ÿ(2£
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‹ ‹(2ß
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java€ €(2t
java.util.Collection.stream()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java⁄ ⁄(2≥
\org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(java.lang.String, int)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaŸ* Ÿ(:2{
$java.util.stream.Collectors.toList()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‹( ‹(.2Ä
®org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?transformedQuery@600.19:600.35CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaŸ; Ÿ(K2Ï
îorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)!pageNumberCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaŸM Ÿ(W2˙
¢org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?arXivEntry@603.25:603.35CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java€' €(12±
Zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv?importFormatPreferences@398.46:398.69CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java€= €(TÂ
ïorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)!luceneQuery	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java÷; ÷(F"
type	QueryNode"
isFinalfalse"*
declarationStringQueryNode luceneQuery*luceneQuery2í
;org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java÷1 ÷(:ª
îorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)!pageNumber	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java÷L ÷(V"
typeint"
isFinalfalse"A
declarationString,<mark class="modifier">int</mark> pageNumber*
pageNumber2Z
intTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java÷H ÷(KŒ
¢org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchPaged(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)?arXivEntry@603.25:603.35VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java€ €(#"
type"
isFinalfalse" 
declarationString arXivEntry*
arXivEntry2TYPEß6
∑org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.filterYears(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‡ ‡(*"
isFinalfalse"˙
declarationString‰<mark class="modifier">private </mark>List&lt;BibEntry&gt; <mark class="method">filterYears</mark>(List&lt;BibEntry&gt; searchResult<mark class="modifier"><mark class="modifier">,</mark></mark> ArXivQueryTransformer transformer)"
isStaticfalse"
accessprivate"

isAbstractfalse"
typeList<BibEntry>*filterYears2£
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÊ  Ê('2û
Gjava.util.stream.Stream.filter(java.util.function.Predicate<? super T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂ  Â(&2û
Gjava.util.stream.Stream.filter(java.util.function.Predicate<? super T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‰  ‰(&2û
Gjava.util.stream.Stream.filter(java.util.function.Predicate<? super T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‚  ‚(&2t
java.util.Collection.stream()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java·  ·(&2u
java.util.Optional.isPresent()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‚S ‚(\2£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‚6 ‚(>2É
,java.lang.Integer.parseInt(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‰_ ‰(g2}
$java.lang.String.substring(int, int)CALLO
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‰ë ‰(ö2q
java.util.Optional.get()CALLO
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‰ã ‰(é2£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‰n ‰(v2É
,java.lang.Integer.parseInt(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂa Â(i2}
$java.lang.String.substring(int, int)CALLO
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂì Â(ú2q
java.util.Optional.get()CALLO
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂç Â(ê2£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂp Â(x2{
$java.util.stream.Collectors.toList()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÊ3 Ê(92ú
ƒorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.filterYears(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer)!searchResultCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java· ·(2£
Àorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.filterYears(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer)?entry@610.39:610.44CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‚0 ‚(52õ
√org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.filterYears(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer)!transformerCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‰0 ‰(;2£
Àorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.filterYears(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer)?entry@612.39:612.44CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‰h ‰(m2ù
√org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.filterYears(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer)!transformerCALLO
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‰• ‰(∞2õ
√org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.filterYears(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer)!transformerCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂ0 Â(;2£
Àorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.filterYears(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer)?entry@613.39:613.44CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂj Â(o2ù
√org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.filterYears(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer)!transformerCALLO
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂß Â(≤2°
ƒorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.filterYears(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer)!searchResult	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‡: ‡(F2†
√org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.filterYears(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer)!transformer	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‡^ ‡(i2™
Àorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.filterYears(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer)?entry@610.39:610.44DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‚' ‚(,2™
Àorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.filterYears(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer)?entry@612.39:612.44DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‰' ‰(,2™
Àorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.filterYears(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer)?entry@613.39:613.44DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂ' Â(,2l
java.util.ListRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‡ ‡(2Ü
org.jabref.model.entry.BibEntryRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‡ ‡(Û
ƒorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.filterYears(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer)!searchResult	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‡: ‡(F"
typeList<BibEntry>"
isFinalfalse"0
declarationStringList<BibEntry> searchResult*searchResult2e
java.util.ListTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‡+ ‡(/2
org.jabref.model.entry.BibEntryTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‡0 ‡(8¥
√org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.filterYears(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer)!transformer	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‡^ ‡(i"
typeArXivQueryTransformer"
isFinalfalse"6
declarationString!ArXivQueryTransformer transformer*transformer2õ
Dorg.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformerTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‡H ‡(]Ì
Àorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.filterYears(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer)?entry@610.39:610.44VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‚' ‚(,"
type"
isFinalfalse"
declarationString entry*entry2TYPEÌ
Àorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.filterYears(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer)?entry@612.39:612.44VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‰' ‰(,"
type"
isFinalfalse"
declarationString entry*entry2TYPEÌ
Àorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.filterYears(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer)?entry@613.39:613.44VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÂ' Â(,"
type"
isFinalfalse"
declarationString entry*entry2TYPEç
]org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.asyncPerformSearchById(java.lang.String)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÈ8 È(N"
isFinalfalse"å
declarationStringˆ<mark class="modifier">protected </mark>CompletableFuture&lt;Optional&lt;BibEntry&gt;&gt; <mark class="method">asyncPerformSearchById</mark>(String identifier)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>CompletionException"
isStaticfalse"
access	protected"

isAbstractfalse"-
type%CompletableFuture<Optional<BibEntry>>*asyncPerformSearchById2©
Rjava.util.concurrent.CompletableFuture.supplyAsync(java.util.function.Supplier<U>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÍ% Í(02Ø
Xorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchById(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÏ Ï(,2®
Qjava.util.concurrent.CompletionException.CompletionException(java.lang.Throwable)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÓ Ó(12ø
horg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.asyncPerformSearchById(java.lang.String)!identifierCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÏ- Ï(72ƒ
morg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.asyncPerformSearchById(java.lang.String)?e@621.42:621.43CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÓ2 Ó(32ƒ
horg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.asyncPerformSearchById(java.lang.String)!identifier	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÈV È(`2À
morg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.asyncPerformSearchById(java.lang.String)?e@621.42:621.43DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÌ* Ì(+2Ñ
&java.util.concurrent.CompletableFutureRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÈ È(#2y
java.util.OptionalRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÈ$ È(,2Ü
org.jabref.model.entry.BibEntryRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÈ- È(5É
horg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.asyncPerformSearchById(java.lang.String)!identifier	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÈV È(`"
typeString"
isFinalfalse"&
declarationStringString identifier*
identifier2g
java.lang.StringTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÈO È(U§
morg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.asyncPerformSearchById(java.lang.String)?e@621.42:621.43VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÌ* Ì(+"
typeFetcherException"
isFinalfalse"'
declarationStringFetcherException e*e2Å
*org.jabref.logic.importer.FetcherExceptionTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÌ Ì()í
Xorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchById(java.lang.String)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ" Ù(3"
isFinalfalse"ñ
declarationStringÄ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>Optional&lt;BibEntry&gt; <mark class="method">performSearchById</mark>(String identifier)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeOptional<BibEntry>*performSearchById2¢
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ ˆ(2∞
Yorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntryById(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaı ı(%2∫
corg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchById(java.lang.String)!identifierCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaı& ı(02»
qorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchById(java.lang.String)?arXivEntry@630.25:630.35CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ' ˆ(12±
Zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv?importFormatPreferences@398.46:398.69CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ= ˆ(T2ß
Lorg.jabref.logic.importer.IdBasedFetcher.performSearchById(java.lang.String)OVERRIDEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ" Ù(32ø
corg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchById(java.lang.String)!identifier	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ; Ù(E2œ
qorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchById(java.lang.String)?arXivEntry@630.25:630.35DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ ˆ(#2p
java.util.OptionalRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ Ù(2Ü
org.jabref.model.entry.BibEntryRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ Ù( ˛
corg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchById(java.lang.String)!identifier	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ; Ù(E"
typeString"
isFinalfalse"&
declarationStringString identifier*
identifier2g
java.lang.StringTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÙ4 Ù(:ú
qorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.performSearchById(java.lang.String)?arXivEntry@630.25:630.35VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ ˆ(#"
type"
isFinalfalse" 
declarationString arXivEntry*
arXivEntry2TYPE†
dorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findIdentifier(org.jabref.model.entry.BibEntry)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˙) ˙(7"
isFinalfalse"ó
declarationStringÅ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>Optional&lt;ArXivIdentifier&gt; <mark class="method">findIdentifier</mark>(BibEntry entry)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"!
typeOptional<ArXivIdentifier>*findIdentifier2z
#java.util.stream.Stream.findFirst()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˇ+ ˇ(42ß
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˛+ ˛(.2û
Gjava.util.stream.Stream.filter(java.util.function.Predicate<? super T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˝+ ˝(12ß
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¸+ ¸(.2t
java.util.Collection.stream()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˚+ ˚(12Ω
forg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.searchForEntries(org.jabref.model.entry.BibEntry)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˚ ˚(#2¡
jorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findIdentifier(org.jabref.model.entry.BibEntry)!entryCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˚$ ˚()2û
Gorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.getId()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¸/ ¸(@2u
java.util.Optional.isPresent()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˝2 ˝(E2o
java.util.Optional.get()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˛/ ˛(<2∆
jorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findIdentifier(org.jabref.model.entry.BibEntry)!entry	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˙A ˙(F2p
java.util.OptionalRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˙ ˙(2ò
1org.jabref.model.entry.identifier.ArXivIdentifierRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˙ ˙('é
jorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.findIdentifier(org.jabref.model.entry.BibEntry)!entry	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˙A ˙(F"
typeBibEntry"
isFinalfalse"#
declarationStringBibEntry entry*entry2v
org.jabref.model.entry.BibEntryTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˙8 ˙(@∑
Horg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.getIdentifierName()METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÉ É('"
isFinalfalse"ü
declarationStringâ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>String <mark class="method">getIdentifierName</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*getIdentifierName2í
7org.jabref.logic.importer.IdFetcher.getIdentifierName()OVERRIDEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÉ É('2n
java.lang.StringRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÉ É(√
Iorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv?LOGGER@394.36:394.42VALUEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaä$ ä(*"
isFinaltrue"
typeLogger"Ë
declarationString“<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>Logger <mark class="class-field">LOGGER</mark> = LoggerFactory.getLogger(ArXivFetcher.ArXiv.class);"
isStatictrue"
accessprivate*LOGGER2g
org.slf4j.LoggerTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaä ä(#π
Jorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv?API_URL@396.36:396.43VALUEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå$ å(+"
isFinaltrue"
typeString"‹
declarationString∆<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>String <mark class="class-field">API_URL</mark> = "https://export.arxiv.org/api/query";"
isStatictrue"
accessprivate*API_URL2g
java.lang.StringTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå å(#∆
Zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv?importFormatPreferences@398.46:398.69VALUEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaé. é(E"
isFinaltrue"
typeImportFormatPreferences"∞
declarationStringö<mark class="modifier">private </mark><mark class="modifier">final </mark>ImportFormatPreferences <mark class="class-field">importFormatPreferences</mark>"
isStaticfalse"
accessprivate*importFormatPreferences2n
ImportFormatPreferencesTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaé é(-–
?org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntryCLASSM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaá á('"?
package4org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv"
isFinalfalse"
inner classfalse"

isAbstractfalse"i
declarationStringT<mark class="modifier">private </mark><mark class="modifier">class </mark>ArXivEntry"
accessprivate*
ArXivEntry2∫
\org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaî î(2¡
corg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.correctLineBreaks(java.lang.String)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaœ! œ(22©
Korg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.getPdfUrl()DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÿ! ÿ(*2´
Morg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.getIdString()DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬂ$ ﬂ(/2•
Gorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.getId()DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java„- „(22ß
Iorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.getDate()DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÍ$ Í(+2Ω
_org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaı ı(&2±
Sorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?title@649.43:649.48DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaâ+ â(02ª
]org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?urlAbstractPage@650.43:650.58DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaä+ ä(:2π
[org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?publishedDate@651.43:651.56DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaã+ ã(82∏
Zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?abstractText@652.43:652.55DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå+ å(72∑
Yorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?authorNames@653.39:653.50DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaç' ç(22∂
Xorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?categories@654.39:654.49DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaé' é(12≤
Torg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?pdfUrl@655.40:655.46DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaè( è(.2Ø
Qorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?doi@656.43:656.46DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaê+ ê(.2¿
borg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?journalReferenceText@657.43:657.63DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaë+ ë(?2ª
]org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?primaryCategory@658.43:658.58DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaí+ í(:Òn
\org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)CONSTRUCTORM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaî î("k
declarationStringV<mark class="modifier">public </mark><mark class="method">ArXivEntry</mark>(Node item)*
ArXivEntry2¢
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaô> ô(A2™
Sorg.jabref.logic.util.io.XMLUtil.getNodeContent(org.w3c.dom.Node, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaô  ô(.2™
Sorg.jabref.logic.util.io.XMLUtil.getNodeContent(org.w3c.dom.Node, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaú* ú(82™
Sorg.jabref.logic.util.io.XMLUtil.getNodeContent(org.w3c.dom.Node, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaü( ü(62¢
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java£' £(*2¢
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢G ¢(J2™
Sorg.jabref.logic.util.io.XMLUtil.getNodeContent(org.w3c.dom.Node, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢' ¢(52™
Sorg.jabref.logic.util.io.XMLUtil.getNodesByName(org.w3c.dom.Node, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaß/ ß(=2¢
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java®] ®(`2™
Sorg.jabref.logic.util.io.XMLUtil.getNodeContent(org.w3c.dom.Node, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java®: ®(H2õ
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java© ©((2™
Sorg.jabref.logic.util.io.XMLUtil.getNodesByName(org.w3c.dom.Node, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÆ1 Æ(?2Ø
Xorg.jabref.logic.util.io.XMLUtil.getAttributeContent(org.w3c.dom.Node, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaØ8 Ø(K2õ
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∞ ∞(&2q
java.util.Optional.empty()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¥6 ¥(;2™
Sorg.jabref.logic.util.io.XMLUtil.getNodesByName(org.w3c.dom.Node, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaµ- µ(;2Ø
Xorg.jabref.logic.util.io.XMLUtil.getAttributeContent(org.w3c.dom.Node, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂9 ∂(L2Ç
+java.util.Optional.equals(java.lang.Object)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∑" ∑((2o
java.util.Optional.of(T)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∑2 ∑(42¢
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∏U ∏(X2Ø
Xorg.jabref.logic.util.io.XMLUtil.getAttributeContent(org.w3c.dom.Node, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∏/ ∏(B2™
Sorg.jabref.logic.util.io.XMLUtil.getNodeContent(org.w3c.dom.Node, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaƒ ƒ(,2™
Sorg.jabref.logic.util.io.XMLUtil.getNodeContent(org.w3c.dom.Node, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java«/ «(=2ƒ
mjava.util.Optional.flatMap(java.util.function.Function<? super T, ? extends java.util.Optional<? extends U>>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÃ* Ã(12£
Lorg.jabref.logic.util.io.XMLUtil.getNode(org.w3c.dom.Node, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÀ* À(12Ø
Xorg.jabref.logic.util.io.XMLUtil.getAttributeContent(org.w3c.dom.Node, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÃB Ã(U2v
java.util.ArrayList.ArrayList()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¶" ¶(-2v
java.util.ArrayList.ArrayList()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≠! ≠(,2y
"java.net.URL.URL(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∫+ ∫(.2™
Sorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?title@649.43:649.48CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaô ô(2∏
aorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)!itemCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaô/ ô(32¥
]org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?urlAbstractPage@650.43:650.58CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaú ú(2∏
aorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)!itemCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaú9 ú(=2≤
[org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?publishedDate@651.43:651.56CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaü ü(2∏
aorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)!itemCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaü7 ü(;2±
Zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?abstractText@652.43:652.55CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢ ¢(2∏
aorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)!itemCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢6 ¢(:2∞
Yorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?authorNames@653.39:653.50CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¶ ¶(2∏
aorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)!itemCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaß> ß(B2Ã
uorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?authorNode@679.26:679.36CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java®I ®(S2Ã
uorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?authorName@680.37:680.47CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java© ©(2Ø
Xorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?categories@654.39:654.49CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java≠ ≠(2∏
aorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)!itemCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÆ@ Æ(D2Œ
worg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?categoryNode@686.26:686.38CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaØL Ø(X2 
sorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?category@687.37:687.45CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∞ ∞(2∏
aorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)!itemCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaµ< µ(@2 
sorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?linkNode@693.26:693.34CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂M ∂(U2À
torg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?linkTitle@694.37:694.46CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∑ ∑(!2Œ
worg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?pdfUrlParsed@692.30:692.42CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∏ ∏($2 
sorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?linkNode@693.26:693.34CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∏C ∏(K2≈
norg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?url@696.89:696.92CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∫/ ∫(22´
Torg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?pdfUrl@655.40:655.46CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¡ ¡(2Œ
worg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?pdfUrlParsed@692.30:692.42CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¡ ¡(%2®
Qorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?doi@656.43:656.46CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaƒ ƒ(2∏
aorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)!itemCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaƒ- ƒ(12π
borg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?journalReferenceText@657.43:657.63CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java« «($2∏
aorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)!itemCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java«> «(B2¥
]org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?primaryCategory@658.43:658.58CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÀ À(2∏
aorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)!itemCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÀ2 À(62∆
oorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?node@716.50:716.54CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÃV Ã(Z2∫
corg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.correctLineBreaks(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaôB ô(_2∫
corg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.correctLineBreaks(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¢K ¢(h2n
java.lang.String.trim()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java£+ £(72n
java.lang.String.trim()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java®a ®(m2l
java.util.List.add(E)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java©) ©(92l
java.util.List.add(E)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∞' ∞(62Ω
aorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)!item	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaî# î('2”
uorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?authorNode@679.26:679.36DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaß ß($2”
uorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?authorName@680.37:680.47DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java®% ®(/2’
worg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?categoryNode@686.26:686.38DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÆ Æ(&2—
sorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?category@687.37:687.45DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaØ% Ø(-2’
worg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?pdfUrlParsed@692.30:692.42DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¥ ¥(*2—
sorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?linkNode@693.26:693.34DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaµ µ("2“
torg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?linkTitle@694.37:694.46DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂% ∂(.2Ã
norg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?url@696.89:696.92DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∏Y ∏(\2 
lorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?e@699.59:699.60DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaª; ª(<2Õ
oorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?node@716.50:716.54DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÃ2 Ã(62ù
?org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntryRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaî î(À
uorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?authorNode@679.26:679.36VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaß ß($"
typeNode"
isFinalfalse"d
declarationStringO<mark class="modifier"> </mark>Node <mark class="class-field">authorNode</mark>*
authorNode2g
org.w3c.dom.NodeTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaß ß(©

uorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?authorName@680.37:680.47VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java®% ®(/"
typeOptional<String>"
isFinalfalse"∞
declarationStringö<mark class="modifier"> </mark>Optional<String> <mark class="class-field">authorName</mark> = XMLUtil.getNodeContent(authorNode, "name").map(String::trim)*
authorName2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java® ®(2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java® ®(#2¢
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java®] ®(`2™
Sorg.jabref.logic.util.io.XMLUtil.getNodeContent(org.w3c.dom.Node, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java®: ®(H2Ã
uorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?authorNode@679.26:679.36CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java®I ®(S2n
java.lang.String.trim()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java®a ®(m—
worg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?categoryNode@686.26:686.38VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÆ Æ(&"
typeNode"
isFinalfalse"f
declarationStringQ<mark class="modifier"> </mark>Node <mark class="class-field">categoryNode</mark>*categoryNode2g
org.w3c.dom.NodeTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÆ Æ(ä
sorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?category@687.37:687.45VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaØ% Ø(-"
typeOptional<String>"
isFinalfalse"£
declarationStringç<mark class="modifier"> </mark>Optional<String> <mark class="class-field">category</mark> = XMLUtil.getAttributeContent(categoryNode, "term")*category2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaØ Ø(2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaØ Ø(#2Ø
Xorg.jabref.logic.util.io.XMLUtil.getAttributeContent(org.w3c.dom.Node, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaØ8 Ø(K2Œ
worg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?categoryNode@686.26:686.38CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaØL Ø(X⁄
worg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?pdfUrlParsed@692.30:692.42VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¥ ¥(*"
typeOptional<URL>"
isFinalfalse"Ç
declarationStringm<mark class="modifier"> </mark>Optional<URL> <mark class="class-field">pdfUrlParsed</mark> = Optional.empty()*pdfUrlParsed2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¥ ¥(2l
java.net.URLTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¥ ¥(2q
java.util.Optional.empty()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¥6 ¥(;≈
sorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?linkNode@693.26:693.34VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaµ µ(""
typeNode"
isFinalfalse"b
declarationStringM<mark class="modifier"> </mark>Node <mark class="class-field">linkNode</mark>*linkNode2g
org.w3c.dom.NodeTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaµ µ(Ü
torg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?linkTitle@694.37:694.46VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂% ∂(."
typeOptional<String>"
isFinalfalse"°
declarationStringã<mark class="modifier"> </mark>Optional<String> <mark class="class-field">linkTitle</mark> = XMLUtil.getAttributeContent(linkNode, "title")*	linkTitle2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂ ∂(2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂ ∂(#2Ø
Xorg.jabref.logic.util.io.XMLUtil.getAttributeContent(org.w3c.dom.Node, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂9 ∂(L2 
sorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?linkNode@693.26:693.34CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∂M ∂(UÏ
aorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)!item	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaî# î('"
typeNode"
isFinalfalse"
declarationString	Node item*item2g
org.w3c.dom.NodeTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaî î("ã
norg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?url@696.89:696.92VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java∏Y ∏(\"
type"
isFinalfalse"
declarationString url*url2TYPE†
lorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?e@699.59:699.60VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaª; ª(<"
typeMalformedURLException"
isFinalfalse",
declarationStringMalformedURLException e*e2u
java.net.MalformedURLExceptionTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaª% ª(:é
oorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.ArXivEntry(org.w3c.dom.Node)?node@716.50:716.54VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÃ2 Ã(6"
type"
isFinalfalse"
declarationString node*node2TYPEÒ
corg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.correctLineBreaks(java.lang.String)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaœ! œ(2"
isFinalfalse"û
declarationStringà<mark class="modifier">public </mark><mark class="modifier">static </mark>String <mark class="method">correctLineBreaks</mark>(String s)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeString*correctLineBreaks2ñ
?java.lang.String.replaceAll(java.lang.String, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java–" –(,2ñ
?java.lang.String.replaceAll(java.lang.String, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java—  —(*2ñ
?java.lang.String.replaceAll(java.lang.String, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java“7 “(A2ñ
?java.lang.String.replaceAll(java.lang.String, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java“ “((2º
eorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.correctLineBreaks(java.lang.String)!sCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java–  –(!2œ
xorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.correctLineBreaks(java.lang.String)?result@720.23:720.29CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java— —(2œ
xorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.correctLineBreaks(java.lang.String)?result@720.23:720.29CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java— —(2œ
xorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.correctLineBreaks(java.lang.String)?result@720.23:720.29CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java“ “(2¡
eorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.correctLineBreaks(java.lang.String)!s	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaœ: œ(;2÷
xorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.correctLineBreaks(java.lang.String)?result@720.23:720.29DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java– –(2n
java.lang.StringRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaœ œ( Ë
xorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.correctLineBreaks(java.lang.String)?result@720.23:720.29VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java– –("
typeString"
isFinalfalse"ß
declarationStringë<mark class="modifier"> </mark>String <mark class="class-field">result</mark> = s.replaceAll("\\n(?!\\s*\\n)"<mark class="modifier">,</mark> " ")*result2g
java.lang.StringTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java– –(2ñ
?java.lang.String.replaceAll(java.lang.String, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java–" –(,2º
eorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.correctLineBreaks(java.lang.String)!sCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java–  –(!Ó
eorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.correctLineBreaks(java.lang.String)!s	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaœ: œ(;"
typeString"
isFinalfalse"
declarationStringString s*s2g
java.lang.StringTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaœ3 œ(9û
Korg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.getPdfUrl()METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÿ! ÿ(*"
isFinalfalse"u
declarationString`<mark class="modifier">public </mark>Optional&lt;URL&gt; <mark class="method">getPdfUrl</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeOptional<URL>*	getPdfUrl2´
Torg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?pdfUrl@655.40:655.46CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaŸ Ÿ(2p
java.util.OptionalRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÿ ÿ(2s
java.net.URLRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÿ ÿ(Ô
Morg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.getIdString()METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬂ$ ﬂ(/"
isFinalfalse"z
declarationStringe<mark class="modifier">public </mark>Optional&lt;String&gt; <mark class="method">getIdString</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeOptional<String>*getIdString2¢
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‡G ‡(J2ƒ
mjava.util.Optional.flatMap(java.util.function.Function<? super T, ? extends java.util.Optional<? extends U>>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‡' ‡(.2¥
]org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?urlAbstractPage@650.43:650.58CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‡ ‡(&2†
Iorg.jabref.model.entry.identifier.ArXivIdentifier.parse(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‡/ ‡(E2¶
Oorg.jabref.model.entry.identifier.ArXivIdentifier.getNormalizedWithoutVersion()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‡K ‡(w2p
java.util.OptionalRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬂ ﬂ(2w
java.lang.StringRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaﬂ ﬂ("≥	
Gorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.getId()METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java„- „(2"
isFinalfalse"}
declarationStringh<mark class="modifier">public </mark>Optional&lt;ArXivIdentifier&gt; <mark class="method">getId</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"!
typeOptional<ArXivIdentifier>*getId2ƒ
mjava.util.Optional.flatMap(java.util.function.Function<? super T, ? extends java.util.Optional<? extends U>>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‰% ‰(,2§
Morg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.getIdString()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‰ ‰("2†
Iorg.jabref.model.entry.identifier.ArXivIdentifier.parse(java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java‰- ‰(C2p
java.util.OptionalRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java„ „(2ò
1org.jabref.model.entry.identifier.ArXivIdentifierRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java„ „(+Ê
Iorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.getDate()METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÍ$ Í(+"
isFinalfalse"v
declarationStringa<mark class="modifier">public </mark>Optional&lt;String&gt; <mark class="method">getDate</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeOptional<String>*getDate2¢
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÏ% Ï((2p
java.lang.String.length()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÌ Ì(#2{
$java.lang.String.substring(int, int)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java$ (-2≤
[org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?publishedDate@651.43:651.56CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÏ Ï($2≥
\org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.getDate()?date@748.41:748.45CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÌ Ì(2≥
\org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.getDate()?date@748.41:748.45CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java (#2∫
\org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.getDate()?date@748.41:748.45DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÏ) Ï(-2p
java.util.OptionalRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÍ Í(2w
java.lang.StringRETURN_TYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÍ Í("˚
\org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.getDate()?date@748.41:748.45VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÏ) Ï(-"
type"
isFinalfalse"
declarationString date*date2TYPE…c
_org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)METHODM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaı ı(&"
isFinalfalse"Ö
declarationStringp<mark class="modifier">public </mark>BibEntry <mark class="method">toBibEntry</mark>(Character keywordDelimiter)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeBibEntry*
toBibEntry2µ
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˜ ˜(!2µ
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¯ ¯(!2∫
cjava.lang.String.join(java.lang.CharSequence, java.lang.Iterable<? extends java.lang.CharSequence>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¯? ¯(C2ø
horg.jabref.model.entry.BibEntry.addKeywords(java.util.Collection<java.lang.String>, java.lang.Character)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘ ˘($2õ
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˙ ˙('2§
Morg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.getIdString()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˙ ˙(2µ
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˙7 ˙(?2õ
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˚ ˚(2µ
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˚9 ˚(A2õ
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¸ ¸(2µ
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¸5 ¸(=2õ
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˝ ˝(&2µ
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˝C ˝(K2õ
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˛ ˛(#2†
Iorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.getDate()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˛ ˛(2µ
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˛5 ˛(=2õ
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˇ  ˇ()2µ
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˇ? ˇ(G2õ
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÄ% Ä(.2µ
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÄC Ä(K2õ
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÅ Å(%2¢
Korg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.getPdfUrl()CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÅ Å(2≤
[org.jabref.model.entry.BibEntry.setFiles(java.util.List<org.jabref.model.entry.LinkedFile>)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÅ6 Å(>2}
&java.util.Collections.singletonList(T)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÅK Å(X2ß
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ( ˆ(02£
Lorg.jabref.model.entry.LinkedFile.LinkedFile(java.net.URL, java.lang.String)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÅ] Å(g2Õ
vorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?bibEntry@758.25:758.33CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˜ ˜(2Õ
vorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?bibEntry@758.25:758.33CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¯ ¯(2∞
Yorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?authorNames@653.39:653.50CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¯M ¯(X2Õ
vorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?bibEntry@758.25:758.33CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘ ˘(2Ø
Xorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?categories@654.39:654.49CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘% ˘(/2«
porg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)!keywordDelimiterCALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˘1 ˘(A2Õ
vorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?bibEntry@758.25:758.33CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˙. ˙(62«
porg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?id@762.40:762.42CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˙V ˙(X2™
Sorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?title@649.43:649.48CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˚ ˚(2Õ
vorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?bibEntry@758.25:758.33CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˚0 ˚(82—
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?titleContent@763.32:763.44CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˚W ˚(c2®
Qorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?doi@656.43:656.46CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¸ ¸(2Õ
vorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?bibEntry@758.25:758.33CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¸, ¸(42œ
xorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?doiContent@764.30:764.40CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¸Q ¸([2±
Zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?abstractText@652.43:652.55CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˝ ˝(2Õ
vorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?bibEntry@758.25:758.33CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˝: ˝(B2‘
}org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?abstractContent@765.39:765.54CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˝d ˝(s2Õ
vorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?bibEntry@758.25:758.33CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˛, ˛(42…
rorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?date@766.36:766.40CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˛R ˛(V2¥
]org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?primaryCategory@658.43:658.58CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˇ ˇ(2Õ
vorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?bibEntry@758.25:758.33CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˇ6 ˇ(>2Õ
vorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?category@767.42:767.50CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˇc ˇ(k2π
borg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?journalReferenceText@657.43:657.63CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÄ Ä($2Õ
vorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?bibEntry@758.25:758.33CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÄ: Ä(B2Ã
uorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?journal@768.47:768.54CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÄc Ä(j2Õ
vorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?bibEntry@758.25:758.33CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÅ- Å(52»
qorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?url@769.38:769.41CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÅh Å(k2Õ
vorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?bibEntry@758.25:758.33CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÇ Ç(2Ã
porg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)!keywordDelimiter	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaı1 ı(A2‘
vorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?bibEntry@758.25:758.33DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ ˆ(!2Œ
porg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?id@762.40:762.42DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˙( ˙(*2ÿ
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?titleContent@763.32:763.44DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˚  ˚(,2÷
xorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?doiContent@764.30:764.40DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¸ ¸((2€
}org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?abstractContent@765.39:765.54DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˝' ˝(62–
rorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?date@766.36:766.40DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˛$ ˛((2‘
vorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?category@767.42:767.50DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˇ* ˇ(22”
uorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?journal@768.47:768.54DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÄ/ Ä(62œ
qorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?url@769.38:769.41DECLARATIONM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÅ& Å()2}
org.jabref.model.entry.BibEntryRETURN_TYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaı ı(¥
vorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?bibEntry@758.25:758.33VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ ˆ(!"
typeBibEntry"
isFinalfalse"ê
declarationString{<mark class="modifier"> </mark>BibEntry <mark class="class-field">bibEntry</mark> = new BibEntry(StandardEntryType.Article)*bibEntry2v
org.jabref.model.entry.BibEntryTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ ˆ(2ß
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˆ( ˆ(0†
porg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)!keywordDelimiter	PARAMETERM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaı1 ı(A"
type	Character"
isFinalfalse"/
declarationStringCharacter keywordDelimiter*keywordDelimiter2j
java.lang.CharacterTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaı' ı(0ã
porg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?id@762.40:762.42VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˙( ˙(*"
type"
isFinalfalse"
declarationString id*id2TYPE©
zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?titleContent@763.32:763.44VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˚  ˚(,"
type"
isFinalfalse""
declarationString titleContent*titleContent2TYPE£
xorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?doiContent@764.30:764.40VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java¸ ¸(("
type"
isFinalfalse" 
declarationString doiContent*
doiContent2TYPE≤
}org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?abstractContent@765.39:765.54VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˝' ˝(6"
type"
isFinalfalse"%
declarationString abstractContent*abstractContent2TYPEë
rorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?date@766.36:766.40VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.java˛$ ˛(("
type"
isFinalfalse"
declarationString date*date2TYPEù
vorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?category@767.42:767.50VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaˇ* ˇ(2"
type"
isFinalfalse"
declarationString	 category*category2TYPEö
uorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?journal@768.47:768.54VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÄ/ Ä(6"
type"
isFinalfalse"
declarationString journal*journal2TYPEé
qorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry.toBibEntry(java.lang.Character)?url@769.38:769.41VARIABLEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaÅ& Å()"
type"
isFinalfalse"
declarationString url*url2TYPE˙
Sorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?title@649.43:649.48VALUEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaâ+ â(0"
isFinaltrue"
typeOptional<String>"ó
declarationStringÅ<mark class="modifier">private </mark><mark class="modifier">final </mark>Optional<String> <mark class="class-field">title</mark>"
isStaticfalse"
accessprivate*title2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaâ â("2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaâ# â()ò
]org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?urlAbstractPage@650.43:650.58VALUEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaä+ ä(:"
isFinaltrue"
typeOptional<String>"°
declarationStringã<mark class="modifier">private </mark><mark class="modifier">final </mark>Optional<String> <mark class="class-field">urlAbstractPage</mark>"
isStaticfalse"
accessprivate*urlAbstractPage2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaä ä("2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaä# ä()í
[org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?publishedDate@651.43:651.56VALUEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaã+ ã(8"
isFinaltrue"
typeOptional<String>"ü
declarationStringâ<mark class="modifier">private </mark><mark class="modifier">final </mark>Optional<String> <mark class="class-field">publishedDate</mark>"
isStaticfalse"
accessprivate*publishedDate2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaã ã("2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaã# ã()è
Zorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?abstractText@652.43:652.55VALUEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå+ å(7"
isFinaltrue"
typeOptional<String>"û
declarationStringà<mark class="modifier">private </mark><mark class="modifier">final </mark>Optional<String> <mark class="class-field">abstractText</mark>"
isStaticfalse"
accessprivate*abstractText2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå å("2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaå# å()Ä
Yorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?authorNames@653.39:653.50VALUEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaç' ç(2"
isFinaltrue"
typeList<String>"ô
declarationStringÉ<mark class="modifier">private </mark><mark class="modifier">final </mark>List<String> <mark class="class-field">authorNames</mark>"
isStaticfalse"
accessprivate*authorNames2e
java.util.ListTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaç ç(2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaç ç(%˝
Xorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?categories@654.39:654.49VALUEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaé' é(1"
isFinaltrue"
typeList<String>"ò
declarationStringÇ<mark class="modifier">private </mark><mark class="modifier">final </mark>List<String> <mark class="class-field">categories</mark>"
isStaticfalse"
accessprivate*
categories2e
java.util.ListTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaé é(2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaé é(%Ú
Torg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?pdfUrl@655.40:655.46VALUEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaè( è(."
isFinaltrue"
typeOptional<URL>"î
declarationString<mark class="modifier">private </mark><mark class="modifier">final </mark>Optional<URL> <mark class="class-field">pdfUrl</mark>"
isStaticfalse"
accessprivate*pdfUrl2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaè è("2l
java.net.URLTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaè# è(&Û
Qorg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?doi@656.43:656.46VALUEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaê+ ê(."
isFinaltrue"
typeOptional<String>"î
declarationString<mark class="modifier">private </mark><mark class="modifier">final </mark>Optional<String> <mark class="class-field">doi</mark>"
isStaticfalse"
accessprivate*doi2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaê ê("2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaê# ê()ß
borg.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?journalReferenceText@657.43:657.63VALUEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaë+ ë(?"
isFinaltrue"
typeOptional<String>"¶
declarationStringê<mark class="modifier">private </mark><mark class="modifier">final </mark>Optional<String> <mark class="class-field">journalReferenceText</mark>"
isStaticfalse"
accessprivate*journalReferenceText2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaë ë("2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaë# ë()ò
]org.jabref.logic.importer.fetcher.ArXivFetcher.ArXiv.ArXivEntry?primaryCategory@658.43:658.58VALUEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaí+ í(:"
isFinaltrue"
typeOptional<String>"°
declarationStringã<mark class="modifier">private </mark><mark class="modifier">final </mark>Optional<String> <mark class="class-field">primaryCategory</mark>"
isStaticfalse"
accessprivate*primaryCategory2i
java.util.OptionalTYPEM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaí í("2p
java.lang.StringTYPE_ARGUMENTM
Asrc\main\java\org\jabref\logic\importer\fetcher\ArXivFetcher.javaí# í()