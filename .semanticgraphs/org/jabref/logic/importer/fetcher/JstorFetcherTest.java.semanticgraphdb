
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaÜ
2org.jabref.logic.importer.fetcher.JstorFetcherTestCLASSO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java (",
package!org.jabref.logic.importer.fetcher"
isFinalfalse"
inner classfalse"

isAbstractfalse"∆
declarationString∞<mark class="annotation">@FetcherTest</mark> <br><mark class="annotation">@DisabledOnCIServer("CI server is blocked by JSTOR")</mark> <br><mark class="modifier">public </mark><mark class="modifier">class </mark>JstorFetcherTest<mark class="modifier"><br>implements </mark>SearchBasedFetcherCapabilityTest"
accesspublic*JstorFetcherTest2¢
Borg.jabref.logic.importer.fetcher.JstorFetcherTest.searchByTitle()DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java;	 ;(2ü
?org.jabref.logic.importer.fetcher.JstorFetcherTest.searchById()DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaA	 A(2ß
Gorg.jabref.logic.importer.fetcher.JstorFetcherTest.searchByUrlUsingId()DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaI	 I(2ù
=org.jabref.logic.importer.fetcher.JstorFetcherTest.fetchPDF()DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaO	 O(2ü
?org.jabref.logic.importer.fetcher.JstorFetcherTest.getFetcher()DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaU U((2£
Corg.jabref.logic.importer.fetcher.JstorFetcherTest.getTestAuthors()DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaZ Z(&2£
Corg.jabref.logic.importer.fetcher.JstorFetcherTest.getTestJournal()DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java_ _( 2¨
Lorg.jabref.logic.importer.fetcher.JstorFetcherTest.supportsYearRangeSearch()DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaf f('2™
Jorg.jabref.logic.importer.fetcher.JstorFetcherTest.supportsJournalSearch()DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javak k(%2ß
Gorg.jabref.logic.importer.fetcher.JstorFetcherTest.supportsYearSearch()DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javap p("2¶
Forg.jabref.logic.importer.fetcher.JstorFetcherTest?fetcher@28.31:28.38DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java (&2ß
Gorg.jabref.logic.importer.fetcher.JstorFetcherTest?bibEntry@30.27:30.35DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java (#2ß
Gorg.jabref.logic.importer.fetcher.JstorFetcherTest?doiEntry@44.27:44.35DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java, ,(#2ù
Borg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTestEXTENDO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java) (IÀ
Borg.jabref.logic.importer.fetcher.JstorFetcherTest.searchByTitle()METHODO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java;	 ;("
isFinalfalse"˙
declarationString‰<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchByTitle</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*searchByTitle2•
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java<) <(62
&java.util.Collections.singletonList(T)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java=! =(.2ü
Forg.jabref.logic.importer.fetcher.JstorFetcherTest?fetcher@28.31:28.38CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java<! <((2†
Gorg.jabref.logic.importer.fetcher.JstorFetcherTest?bibEntry@30.27:30.35CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java=/ =(72Ø
Vorg.jabref.logic.importer.fetcher.JstorFetcherTest.searchByTitle()?entries@60.23:60.30CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java=: =(A2∂
Vorg.jabref.logic.importer.fetcher.JstorFetcherTest.searchByTitle()?entries@60.23:60.30DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java< <(2d
voidRETURN_TYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java; ;(ä
Vorg.jabref.logic.importer.fetcher.JstorFetcherTest.searchByTitle()?entries@60.23:60.30VARIABLEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java< <("
typeList<BibEntry>"
isFinalfalse"Í
declarationString‘<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">entries</mark> = fetcher.performSearch("title: \"Test Anxiety Analysis of Chinese College Students in Computer-based Spoken English Test\"")*entries2g
java.util.ListTYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java< <(2Å
org.jabref.model.entry.BibEntryTYPE_ARGUMENTO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java< <(2•
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java<) <(62ü
Forg.jabref.logic.importer.fetcher.JstorFetcherTest?fetcher@28.31:28.38CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java<! <((ã
?org.jabref.logic.importer.fetcher.JstorFetcherTest.searchById()METHODO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaA	 A("
isFinalfalse"˜
declarationString·<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchById</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*
searchById2´
Rorg.jabref.logic.importer.IdBasedParserFetcher.performSearchById(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaB, B(=2ù
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaD D(2ß
Norg.jabref.model.entry.BibEntry.clearField(org.jabref.model.entry.field.Field)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaD( D(22q
java.util.Optional.of(T)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaE E( 2ü
Forg.jabref.logic.importer.fetcher.JstorFetcherTest?fetcher@28.31:28.38CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaB$ B(+2´
Rorg.jabref.logic.importer.fetcher.JstorFetcherTest.searchById()?actual@66.27:66.33CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaD D(2™
Qorg.jabref.logic.importer.fetcher.JstorFetcherTest.searchById()?entry@68.25:68.30CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaD" D('2†
Gorg.jabref.logic.importer.fetcher.JstorFetcherTest?bibEntry@30.27:30.35CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaE! E()2´
Rorg.jabref.logic.importer.fetcher.JstorFetcherTest.searchById()?actual@66.27:66.33CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaE, E(22≤
Rorg.jabref.logic.importer.fetcher.JstorFetcherTest.searchById()?actual@66.27:66.33DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaB B(!2±
Qorg.jabref.logic.importer.fetcher.JstorFetcherTest.searchById()?entry@68.25:68.30DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaD D(2d
voidRETURN_TYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaA A(¿
Rorg.jabref.logic.importer.fetcher.JstorFetcherTest.searchById()?actual@66.27:66.33VARIABLEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaB B(!"
typeOptional<BibEntry>"
isFinalfalse"ó
declarationStringÅ<mark class="modifier"> </mark>Optional<BibEntry> <mark class="class-field">actual</mark> = fetcher.performSearchById("90002164")*actual2k
java.util.OptionalTYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaB B(2Å
org.jabref.model.entry.BibEntryTYPE_ARGUMENTO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaB B(2´
Rorg.jabref.logic.importer.IdBasedParserFetcher.performSearchById(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaB, B(=2ü
Forg.jabref.logic.importer.fetcher.JstorFetcherTest?fetcher@28.31:28.38CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaB$ B(+Ù
Qorg.jabref.logic.importer.fetcher.JstorFetcherTest.searchById()?entry@68.25:68.30VARIABLEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaD D("
type"
isFinalfalse"
declarationString entry*entry2TYPE“
Gorg.jabref.logic.importer.fetcher.JstorFetcherTest.searchByUrlUsingId()METHODO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaI	 I("
isFinalfalse"ˇ
declarationStringÈ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchByUrlUsingId</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*searchByUrlUsingId2∑
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaJ J(2ó
>java.time.LocalDate.format(java.time.format.DateTimeFormatter)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaJA J(G2r
java.time.LocalDate.now()CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaJ; J(>2q
java.util.Optional.of(T)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaK K( 2´
Rorg.jabref.logic.importer.IdBasedParserFetcher.performSearchById(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaK4 K(E2†
Gorg.jabref.logic.importer.fetcher.JstorFetcherTest?doiEntry@44.27:44.35CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaJ J(2†
Gorg.jabref.logic.importer.fetcher.JstorFetcherTest?doiEntry@44.27:44.35CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaK! K()2ü
Forg.jabref.logic.importer.fetcher.JstorFetcherTest?fetcher@28.31:28.38CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaK, K(32d
voidRETURN_TYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaI I(©
=org.jabref.logic.importer.fetcher.JstorFetcherTest.fetchPDF()METHODO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaO	 O("
isFinalfalse"ı
declarationStringﬂ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">fetchPDF</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*fetchPDF2µ
\org.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaP$ P(02q
java.util.Optional.of(T)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaQ Q( 2{
"java.net.URL.URL(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaQ% Q((2ü
Forg.jabref.logic.importer.fetcher.JstorFetcherTest?fetcher@28.31:28.38CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaP P(#2†
Gorg.jabref.logic.importer.fetcher.JstorFetcherTest?bibEntry@30.27:30.35CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaP1 P(92¶
Morg.jabref.logic.importer.fetcher.JstorFetcherTest.fetchPDF()?url@80.22:80.25CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaQ\ Q(_2≠
Morg.jabref.logic.importer.fetcher.JstorFetcherTest.fetchPDF()?url@80.22:80.25DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaP P(2d
voidRETURN_TYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaO O(º
Morg.jabref.logic.importer.fetcher.JstorFetcherTest.fetchPDF()?url@80.22:80.25VARIABLEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaP P("
typeOptional<URL>"
isFinalfalse"á
declarationStringr<mark class="modifier"> </mark>Optional<URL> <mark class="class-field">url</mark> = fetcher.findFullText(bibEntry)*url2k
java.util.OptionalTYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaP P(2n
java.net.URLTYPE_ARGUMENTO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaP P(2µ
\org.jabref.logic.importer.fetcher.JstorFetcher.findFullText(org.jabref.model.entry.BibEntry)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaP$ P(02ü
Forg.jabref.logic.importer.fetcher.JstorFetcherTest?fetcher@28.31:28.38CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaP P(#2†
Gorg.jabref.logic.importer.fetcher.JstorFetcherTest?bibEntry@30.27:30.35CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaP1 P(9ï
?org.jabref.logic.importer.fetcher.JstorFetcherTest.getFetcher()METHODO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaU U(("
isFinalfalse"§
declarationStringé<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>SearchBasedFetcher <mark class="method">getFetcher</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeSearchBasedFetcher*
getFetcher2ü
Forg.jabref.logic.importer.fetcher.JstorFetcherTest?fetcher@28.31:28.38CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaV V(2¨
Oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getFetcher()OVERRIDEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaU U((2å
,org.jabref.logic.importer.SearchBasedFetcherRETURN_TYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaU U(À
Corg.jabref.logic.importer.fetcher.JstorFetcherTest.getTestAuthors()METHODO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaZ Z(&"
isFinalfalse"®
declarationStringí<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>List&lt;String&gt; <mark class="method">getTestAuthors</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeList<String>*getTestAuthors2p
java.util.List.of(E, E)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java[ [(2∞
Sorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getTestAuthors()OVERRIDEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaZ Z(&2n
java.util.ListRETURN_TYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaZ Z(2y
java.lang.StringRETURN_TYPE_ARGUMENTO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaZ Z(Œ
Corg.jabref.logic.importer.fetcher.JstorFetcherTest.getTestJournal()METHODO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java_ _( "
isFinalfalse"ú
declarationStringÜ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>String <mark class="method">getTestJournal</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*getTestJournal2∞
Sorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getTestJournal()OVERRIDEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java_ _( 2p
java.lang.StringRETURN_TYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java_ _(ˇ
Lorg.jabref.logic.importer.fetcher.JstorFetcherTest.supportsYearRangeSearch()METHODO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaf f('"
isFinalfalse"¿
declarationString™ does not support search only based on year") <br><mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">supportsYearRangeSearch</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*supportsYearRangeSearch2π
\org.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearRangeSearch()OVERRIDEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaf f('2d
voidRETURN_TYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javaf f(Ù
Jorg.jabref.logic.importer.fetcher.JstorFetcherTest.supportsJournalSearch()METHODO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javak k(%"
isFinalfalse"ª
declarationString• does not provide articles with journals") <br><mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">supportsJournalSearch</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*supportsJournalSearch2∑
Zorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsJournalSearch()OVERRIDEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javak k(%2d
voidRETURN_TYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javak k(Î
Gorg.jabref.logic.importer.fetcher.JstorFetcherTest.supportsYearSearch()METHODO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javap p(""
isFinalfalse"ª
declarationString• does not support search only based on year") <br><mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">supportsYearSearch</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*supportsYearSearch2¥
Worg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearSearch()OVERRIDEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javap p("2d
voidRETURN_TYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.javap p(Ì
Forg.jabref.logic.importer.fetcher.JstorFetcherTest?fetcher@28.31:28.38VALUEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java (&"
isFinaltrue"
typeJstorFetcher"Í
declarationString‘<mark class="modifier">private </mark><mark class="modifier">final </mark>JstorFetcher <mark class="class-field">fetcher</mark> = new JstorFetcher(mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS));"
isStaticfalse"
accessprivate*fetcher2á
.org.jabref.logic.importer.fetcher.JstorFetcherTYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java (˝$
Gorg.jabref.logic.importer.fetcher.JstorFetcherTest?bibEntry@30.27:30.35VALUEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java (#"
isFinaltrue"
typeBibEntry"∫
declarationString§<mark class="modifier">private </mark><mark class="modifier">final </mark>BibEntry <mark class="class-field">bibEntry</mark> = new BibEntry(StandardEntryType.Article).withCitationKey("10.2307/90002164").withField(StandardField.AUTHOR, "Yang Yanxia").withField(StandardField.TITLE, "Test Anxiety Analysis of Chinese College Students in Computer-based Spoken English Test").withField(StandardField.ISSN, "11763647, 14364522").withField(StandardField.JOURNAL, "Journal of Educational Technology & Society").withField(StandardField.ABSTRACT, "ABSTRACT Test anxiety was a commonly known or assumed factor that could greatly influence performance of test takers. With the employment of designed questionnaires and computer-based spoken English test, <mark class="modifier">this</mark> paper explored test anxiety manifestation of Chinese college students from both macro and micro aspects, and found out that the major anxiety in computer-based spoken English test was spoken English test anxiety, which consisted of test anxiety and communication apprehension. Regard to proximal test anxiety, the causes listed in proper order as low spoken English abilities, lack of speaking techniques, anxiety from the evaluative process and inadaptability with computer-based spoken English test format. As to distal anxiety causes, attitude toward learning spoken English and self-evaluation of speaking abilities were significantly negatively correlated with test anxiety. Besides, as test anxiety significantly associated often with test performance, a look at pedagogical implications has been discussed in <mark class="modifier">this</mark> paper.").withField(StandardField.PUBLISHER, "International Forum of Educational Technology & Society").withField(StandardField.NUMBER, "2").withField(StandardField.PAGES, "63--73").withField(StandardField.VOLUME, "20").withField(StandardField.URL, "http://www.jstor.org/stable/90002164").withField(StandardField.YEAR, "2017");"
isStaticfalse"
accessprivate*bibEntry2x
org.jabref.model.entry.BibEntryTYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java (2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java* *(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java) )(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java( ((2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java' '(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java& &(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java% %(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java$ $(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java# #(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java" "(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java! !(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java   (2ö
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java (2©
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java* (2‡$
Gorg.jabref.logic.importer.fetcher.JstorFetcherTest?doiEntry@44.27:44.35VALUEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java, ,(#"
isFinaltrue"
typeBibEntry"ù
declarationStringá<mark class="modifier">private </mark><mark class="modifier">final </mark>BibEntry <mark class="class-field">doiEntry</mark> = new BibEntry(StandardEntryType.Article).withCitationKey("10.1086/501484").withField(StandardField.AUTHOR, "Johnmarshall Reeve").withField(StandardField.TITLE, "Teachers as Facilitators: What Autonomy‚ÄêSupportive Teachers Do and Why Their Students Benefit").withField(StandardField.ISSN, "00135984, 15548279").withField(StandardField.JOURNAL, "The Elementary School Journal").withField(StandardField.ABSTRACT, "Abstract Students are sometimes proactive and engaged in classroom learning activities, but they are also sometimes only reactive and passive. Recognizing <mark class="modifier">this</mark><mark class="modifier">,</mark> in <mark class="modifier">this</mark> article I argue that students‚Äô classroom engagement depends, in part, on the supportive quality of the classroom climate in which they learn. According to the dialectical framework within self‚Äêdetermination theory, students possess inner motivational resources that classroom conditions can support or frustrate. When teachers find ways to nurture these inner resources, they adopt an autonomy‚Äêsupportive motivating style. After articulating what autonomy‚Äêsupportive teachers say and do during instruction, I discuss 3 points: teachers can learn how to be more autonomy supportive toward students; teachers most engage students when they offer high levels of both autonomy support and structure; and an autonomy‚Äêsupportive motivating style is an important element to a high‚Äêquality teacher‚Äêstudent relationship.").withField(StandardField.PUBLISHER, "The University of Chicago Press").withField(StandardField.NUMBER, "3").withField(StandardField.PAGES, "225--236").withField(StandardField.VOLUME, "106").withField(StandardField.URL, "http://www.jstor.org/stable/10.1086/501484").withField(StandardField.YEAR, "2006");"
isStaticfalse"
accessprivate*doiEntry2x
org.jabref.model.entry.BibEntryTYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java, ,(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java8 8(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java7 7(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java6 6(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java5 5(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java4 4(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java3 3(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java2 2(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java1 1(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java0 0(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java/ /(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java. .(2ö
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java- -(2©
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\JstorFetcherTest.java,* ,(2