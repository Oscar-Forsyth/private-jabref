
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaãU
2org.jabref.logic.importer.fetcher.ArXivFetcherTestCLASSO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java+ +(",
package!org.jabref.logic.importer.fetcher"
isFinalfalse"
inner classfalse"

isAbstractfalse"ˇ
declarationStringÈ<mark class="annotation">@FetcherTest</mark> <br><mark class="modifier"> </mark><mark class="modifier">class </mark>ArXivFetcherTest<mark class="modifier"><br>implements </mark>SearchBasedFetcherCapabilityTest, PagedSearchFetcherTest"
accesspackage_private*ArXivFetcherTest2ö
:org.jabref.logic.importer.fetcher.ArXivFetcherTest.setUp()DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java6 6(2û
>org.jabref.logic.importer.fetcher.ArXivFetcherTest.eachSetUp()DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaF	 F(2°
?org.jabref.logic.importer.fetcher.ArXivFetcherTest.getFetcher()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javañ ñ((2™
Horg.jabref.logic.importer.fetcher.ArXivFetcherTest.getInputTestAuthors()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaö ö(+2•
Corg.jabref.logic.importer.fetcher.ArXivFetcherTest.getTestAuthors()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java† †(&2•
Corg.jabref.logic.importer.fetcher.ArXivFetcherTest.getTestJournal()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¶ ¶( 2¶
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest.getPagedFetcher()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java´# ´(22´
Iorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsAuthorSearch()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java± ±($2æ
\org.jabref.logic.importer.fetcher.ArXivFetcherTest.noSupportsAuthorSearchWithLastFirstName()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¬ ¬(72ƒ
borg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextForEmptyEntryResultsEmptyOptional()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÕ	 Õ(62∑
Uorg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextRejectsNullParameter()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java“	 “()2®
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextByDOI()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java◊	 ◊(2´
Iorg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextByEprint()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaﬂ	 ﬂ(2µ
Sorg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextByEprintWithPrefix()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÂ	 Â('2π
Worg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextByEprintWithUnknownDOI()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÎ	 Î(+2™
Horg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextByTitle()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÛ	 Û(2∫
Xorg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextByTitleWithCurlyBracket()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˙	 ˙(,2 
horg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextByTitleWithColonAndJournalWithoutEprint()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÅ	 Å(<2∆
dorg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextByTitleWithColonAndUrlWithoutEprint()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaâ	 â(82π
Worg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextByTitleAndPartOfAuthor()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaë	 ë(+2…
gorg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextByTitleWithCurlyBracketAndPartOfAuthor()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaô	 ô(;2≤
Porg.jabref.logic.importer.fetcher.ArXivFetcherTest.notFindFullTextByUnknownDOI()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java°	 °($2±
Oorg.jabref.logic.importer.fetcher.ArXivFetcherTest.notFindFullTextByUnknownId()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaß	 ß(#2Ω
[org.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextByDOINotAvailableInCatalog()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≠	 ≠(/2≥
Qorg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextEntityWithoutDoi()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaµ	 µ(%2≠
Korg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextTrustLevel()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∫	 ∫(2Ø
Morg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEntryByPartOfTitle()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaø	 ø(!2æ
\org.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEntryByPartOfTitleWithAcuteAccent()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≈	 ≈(02©
Gorg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEntryByOldId()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÀ	 À(2ª
Yorg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEntryByIdWith4DigitsAndVersion()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÊ	 Ê(-2±
Oorg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEntryByIdWith4Digits()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÎ	 Î(#2∫
Xorg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEntryByIdWith4DigitsAndPrefix()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java	 (,2«
eorg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEntryByIdWith4DigitsAndPrefixAndNotTrimmed()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaı	 ı(92±
Oorg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEntryByIdWith5Digits()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˙	 ˙(#2∏
Vorg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchWithMalformedIdReturnsEmpty()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÅ	 Å(*2¥
Rorg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchIdentifierForSlicePaper()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÜ	 Ü(&2§
Borg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEmptyId()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaç	 ç(2®
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchWithHttpUrl()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaí	 í(2©
Gorg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchWithHttpsUrl()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaó	 ó(2≥
Qorg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchWithHttpsUrlNotTrimmed()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaú	 ú(%2©
Gorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsYearSearch()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java£ £("2Æ
Lorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsYearRangeSearch()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java© ©('2´
Iorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsPhraseSearch()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java± ±($2∫
Xorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsPhraseSearchAndMatchesExact()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaΩ Ω(32Ø
Morg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsBooleanANDSearch()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java’ ’((2ƒ
borg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePureArxivEntryWhenAllDOIFetchingFails()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÛ Û(=2»
forg.jabref.logic.importer.fetcher.ArXivFetcherTest.canReplicateArXivOnlySearchByPassingNullParameter()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaä ä(A2◊
uorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromUserAssignedDOI()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaù ù(P2ÿ
vorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromArXivAssignedDOI()DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∑ ∑(Q2∂
Vorg.jabref.logic.importer.fetcher.ArXivFetcherTest?importFormatPreferences@44.43:44.66DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java,+ ,(B2¶
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java. .( 2§
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java/ /(2∞
Porg.jabref.logic.importer.fetcher.ArXivFetcherTest?sliceTheoremPaper@48.21:48.38DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java0 0(&2∞
Porg.jabref.logic.importer.fetcher.ArXivFetcherTest?mainOriginalPaper@50.21:50.38DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java2 2(&2Æ
Norg.jabref.logic.importer.fetcher.ArXivFetcherTest?mainResultPaper@51.21:51.36DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java3 3($2ù
Borg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTestEXTENDO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java+" +(B2ì
8org.jabref.logic.importer.fetcher.PagedSearchFetcherTestEXTENDO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java+D +(ZÕ	
:org.jabref.logic.importer.fetcher.ArXivFetcherTest.setUp()METHODO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java6 6("
isFinalfalse"œ
declarationStringπ<mark class="annotation">@BeforeAll</mark> <br><mark class="modifier"> </mark><mark class="modifier">static </mark><mark class="modifier">void</mark> <mark class="method">setUp</mark>()"
isStatictrue"
accesspackage_private"

isAbstractfalse"
typevoid*setUp2
&java.util.List.of(E, E, E, E, E, E, E)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java;7 ;(92Ø
Vorg.jabref.logic.importer.fetcher.ArXivFetcherTest?importFormatPreferences@44.43:44.66CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java7 7(2Ø
Vorg.jabref.logic.importer.fetcher.ArXivFetcherTest?importFormatPreferences@44.43:44.66CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java8 8($2Ø
Vorg.jabref.logic.importer.fetcher.ArXivFetcherTest?importFormatPreferences@44.43:44.66CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java: :($2d
voidRETURN_TYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java6 6(Üj
>org.jabref.logic.importer.fetcher.ArXivFetcherTest.eachSetUp()METHODO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaF	 F("
isFinalfalse"Ø
declarationStringô<mark class="annotation">@BeforeEach</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">eachSetUp</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*	eachSetUp2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaU U(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaT T(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaS S(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaR R(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaQ Q(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaP P(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaO O(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaN N(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaM M(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javak k(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaj j(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javai i(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javah h(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javag g(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaf f(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javae e(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java` `(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java_ _(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java^ ^(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java] ](2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java\ \(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java[ [(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaZ Z(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÇ Ç(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÅ Å(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÄ Ä(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java (2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java~ ~(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java} }(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java| |(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java{ {(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaz z(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javay y(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javax x(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaw w(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javav v(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javau u(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javat t(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javas s(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javar r(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaq q(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javap p(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaí í(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaë ë(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaê ê(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaè è(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaé é(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaç ç(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaå å(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaã ã(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaä ä(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaâ â(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaà à(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaá á(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÜ Ü(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÖ Ö(2É
*org.jabref.model.entry.BibEntry.BibEntry()CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaH H(2©
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaK  K((2©
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaW W(&2°
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javae e(+2©
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javao% o(-2£
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÇ Ç(+2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÑ  Ñ((2£
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaí í(+2ü
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaG G(2Ø
Vorg.jabref.logic.importer.fetcher.ArXivFetcherTest?importFormatPreferences@44.43:44.66CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaG# G(:2ù
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaH H(2©
Porg.jabref.logic.importer.fetcher.ArXivFetcherTest?mainOriginalPaper@50.21:50.38CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaK K(2ß
Norg.jabref.logic.importer.fetcher.ArXivFetcherTest?mainResultPaper@51.21:51.36CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaW W(2´
Porg.jabref.logic.importer.fetcher.ArXivFetcherTest?sliceTheoremPaper@48.21:48.38CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÑ Ñ(2∫
Zorg.jabref.logic.importer.fetcher.ArXivFetcherTest.eachSetUp()?completePaper@111.17:111.30DECLARATIONO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javao o(2d
voidRETURN_TYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaF F(≈6
Zorg.jabref.logic.importer.fetcher.ArXivFetcherTest.eachSetUp()?completePaper@111.17:111.30VARIABLEO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javao o("
typeBibEntry"
isFinalfalse"•
declarationStringè<mark class="modifier"> </mark>BibEntry <mark class="class-field">completePaper</mark> = new BibEntry(StandardEntryType.Article).withField(StandardField.AUTHOR, "B√ºscher, Tobias and Diez, Angel L. and Gompper, Gerhard and Elgeti, Jens").withField(StandardField.TITLE, "Instability and fingering of interfaces in growing tissue").withField(StandardField.DATE, "2020-03-10").withField(StandardField.YEAR, "2020").withField(StandardField.MONTH, "aug").withField(StandardField.NUMBER, "8").withField(StandardField.VOLUME, "22").withField(StandardField.PAGES, "083005").withField(StandardField.PUBLISHER, "{IOP} Publishing").withField(StandardField.JOURNAL, "New Journal of Physics").withField(StandardField.ABSTRACT, "Interfaces in tissues are ubiquitous, both between tissue and environment as well as between populations of different cell types. The propagation of an interface can be driven mechanically. % e.g. by a difference in the respective homeostatic stress of the different cell types. Computer simulations of growing tissues are employed to study the stability of the interface between two tissues on a substrate. From a mechanical perspective, the dynamics and stability of <mark class="modifier">this</mark> system is controlled mainly by four parameters of the respective tissues: (i) the homeostatic stress (ii) cell motility (iii) tissue viscosity and (iv) substrate friction. For propagation driven by a difference in homeostatic stress, the interface is stable for tissue-specific substrate friction even for very large differences of homeostatic stress; however, it becomes unstable above a critical stress difference when the tissue with the larger homeostatic stress has a higher viscosity. A small difference in directed bulk motility between the two tissues suffices to result in propagation with a stable interface, even for otherwise identical tissues. Larger differences in motility force, however, result in a finite-wavelength instability of the interface. Interestingly, the instability is apparently bound by nonlinear effects and the amplitude of the interface undulations only grows to a finite value in time.").withField(StandardField.DOI, "10.1088/1367-2630/ab9e88").withField(StandardField.EPRINT, "2003.04601").withField(StandardField.FILE, ":http\\://arxiv.org/pdf/2003.04601v1:PDF").withField(StandardField.EPRINTTYPE, "arXiv").withField(StandardField.EPRINTCLASS, "q-bio.TO").withField(StandardField.KEYWORDS, "Tissues and Organs (q-bio.TO)<mark class="modifier">,</mark> FOS: Biological sciences").withField(InternalField.KEY_FIELD, "B_scher_2020").withField(new UnknownField("copyright")<mark class="modifier">,</mark> "arXiv.org perpetual, non-exclusive license")*completePaper2x
org.jabref.model.entry.BibEntryTYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javao o(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÇ Ç(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÅ Å(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÄ Ä(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java (2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java~ ~(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java} }(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java| |(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java{ {(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaz z(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javay y(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javax x(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaw w(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javav v(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javau u(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javat t(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javas s(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javar r(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaq q(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javap p(2©
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javao% o(-2£
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÇ Ç(+ù
?org.jabref.logic.importer.fetcher.ArXivFetcherTest.getFetcher()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javañ ñ(("
isFinalfalse"§
declarationStringé<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>SearchBasedFetcher <mark class="method">getFetcher</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeSearchBasedFetcher*
getFetcher2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaó ó(2Æ
Oorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getFetcher()OVERRIDEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javañ ñ((2é
,org.jabref.logic.importer.SearchBasedFetcherRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javañ ñ(§
Horg.jabref.logic.importer.fetcher.ArXivFetcherTest.getInputTestAuthors()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaö ö(+"
isFinalfalse"~
declarationStringi<mark class="modifier">public </mark>List&lt;String&gt; <mark class="method">getInputTestAuthors</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeList<String>*getInputTestAuthors2ß
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaúO ú(V2´
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaú= ú(@2w
java.util.Arrays.stream(T[])CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaõ õ(2É
(java.lang.String.split(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaú/ ú(42s
java.util.Optional.get()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaõN õ(Q2ß
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaõ/ õ(72
$java.util.stream.Collectors.toList()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaúb ú(h2´
Porg.jabref.logic.importer.fetcher.ArXivFetcherTest?mainOriginalPaper@50.21:50.38CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaõ õ(.2r
java.lang.String.trim()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaúA ú(M2p
java.util.ListRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaö ö(2{
java.lang.StringRETURN_TYPE_ARGUMENTQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaö ö(¯
Corg.jabref.logic.importer.fetcher.ArXivFetcherTest.getTestAuthors()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java† †(&"
isFinalfalse"®
declarationStringí<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>List&lt;String&gt; <mark class="method">getTestAuthors</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeList<String>*getTestAuthors2ß
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¢M ¢(T2´
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¢; ¢(>2w
java.util.Arrays.stream(T[])CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java° °(2É
(java.lang.String.split(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¢- ¢(22s
java.util.Optional.get()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java°L °(O2ß
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java°- °(52
$java.util.stream.Collectors.toList()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¢` ¢(f2©
Norg.jabref.logic.importer.fetcher.ArXivFetcherTest?mainResultPaper@51.21:51.36CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java° °(,2r
java.lang.String.trim()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¢? ¢(K2≤
Sorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getTestAuthors()OVERRIDEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java† †(&2p
java.util.ListRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java† †(2{
java.lang.StringRETURN_TYPE_ARGUMENTQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java† †(‘
Corg.jabref.logic.importer.fetcher.ArXivFetcherTest.getTestJournal()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¶ ¶( "
isFinalfalse"ú
declarationStringÜ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>String <mark class="method">getTestJournal</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*getTestJournal2≤
Sorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getTestJournal()OVERRIDEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¶ ¶( 2r
java.lang.StringRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¶ ¶(∂
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest.getPagedFetcher()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java´# ´(2"
isFinalfalse"Æ
declarationStringò<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>PagedSearchBasedFetcher <mark class="method">getPagedFetcher</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typePagedSearchBasedFetcher*getPagedFetcher2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¨ ¨(2©
Jorg.jabref.logic.importer.fetcher.PagedSearchFetcherTest.getPagedFetcher()OVERRIDEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java´# ´(22ì
1org.jabref.logic.importer.PagedSearchBasedFetcherRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java´ ´("¸-
Iorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsAuthorSearch()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java± ±($"
isFinalfalse"ó
declarationStringÅ <br><mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">supportsAuthorSearch</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*supportsAuthorSearch2ù
Bjava.lang.Iterable.forEach(java.util.function.Consumer<? super T>)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≥ ≥(%2£
Horg.jabref.logic.importer.fetcher.ArXivFetcherTest.getInputTestAuthors()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≥ ≥(2ß
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaµ- µ(:2ö
?org.jabref.logic.importer.fetcher.ArXivFetcherTest.getFetcher()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaµ  µ(*2|
!java.util.StringJoiner.toString()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaµH µ(P2«
lorg.jabref.logic.importer.ImportCleanup.doPostCleanup(java.util.Collection<org.jabref.model.entry.BibEntry>)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∂8 ∂(E2∑
\org.jabref.logic.importer.ImportCleanup.targeting(org.jabref.model.database.BibDatabaseMode)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∂ ∂(2s
java.util.List.isEmpty()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∏ ∏("2ù
Bjava.lang.Iterable.forEach(java.util.function.Consumer<? super T>)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaπ π(2w
java.util.Optional.orElse(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∫D ∫(J2ß
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∫% ∫(-2ù
Bjava.lang.Iterable.forEach(java.util.function.Consumer<? super T>)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaΩ Ω($2û
Corg.jabref.logic.importer.fetcher.ArXivFetcherTest.getTestAuthors()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaΩ Ω(2å
1java.lang.String.contains(java.lang.CharSequence)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaΩT Ω(\2£
Hjava.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaΩl Ω(s2∆
kjava.util.StringJoiner.StringJoiner(java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≤( ≤(42ø
dorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsAuthorSearch()?queryBuilder@178.21:178.33CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaµ; µ(G2π
^org.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsAuthorSearch()?result@181.23:181.29CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∂F ∂(L2π
^org.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsAuthorSearch()?result@181.23:181.29CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∏ ∏(2π
^org.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsAuthorSearch()?result@181.23:181.29CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaπ π(2ª
`org.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsAuthorSearch()?bibEntry@185.23:185.31CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∫ ∫($2π
^org.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsAuthorSearch()?author@186.19:186.25CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaΩM Ω(S2¡
forg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsAuthorSearch()?expectedAuthor@189.37:189.51CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaΩ] Ω(k2ç
2java.util.StringJoiner.add(java.lang.CharSequence)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≥& ≥(72∏
Yorg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()OVERRIDEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java± ±($2∆
dorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsAuthorSearch()?queryBuilder@178.21:178.33DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≤ ≤(!2¿
^org.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsAuthorSearch()?result@181.23:181.29DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaµ µ(2¿
^org.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsAuthorSearch()?author@186.19:186.25DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∫ ∫(2¬
`org.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsAuthorSearch()?bibEntry@185.23:185.31DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaπ π(2»
forg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsAuthorSearch()?expectedAuthor@189.37:189.51DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaΩ% Ω(32f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java± ±(ù
dorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsAuthorSearch()?queryBuilder@178.21:178.33VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≤ ≤(!"
typeStringJoiner"
isFinalfalse"Â
declarationStringœ<mark class="modifier"> </mark>StringJoiner <mark class="class-field">queryBuilder</mark> = new StringJoiner("\" AND author:\""<mark class="modifier">,</mark> "author:\""<mark class="modifier">,</mark> "\"")*queryBuilder2q
java.util.StringJoinerTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≤ ≤(2∆
kjava.util.StringJoiner.StringJoiner(java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≤( ≤(4ã

^org.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsAuthorSearch()?result@181.23:181.29VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaµ µ("
typeList<BibEntry>"
isFinalfalse"°
declarationStringã<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">result</mark> = getFetcher().performSearch(queryBuilder.toString())*result2i
java.util.ListTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaµ µ(2É
org.jabref.model.entry.BibEntryTYPE_ARGUMENTQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaµ µ(2ß
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaµ- µ(:2ö
?org.jabref.logic.importer.fetcher.ArXivFetcherTest.getFetcher()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaµ  µ(*2|
!java.util.StringJoiner.toString()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaµH µ(P2ø
dorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsAuthorSearch()?queryBuilder@178.21:178.33CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaµ; µ(G–
^org.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsAuthorSearch()?author@186.19:186.25VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∫ ∫("
typeString"
isFinalfalse"ò
declarationStringÇ<mark class="modifier"> </mark>String <mark class="class-field">author</mark> = bibEntry.getField(StandardField.AUTHOR).orElse("")*author2k
java.lang.StringTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∫ ∫(2w
java.util.Optional.orElse(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∫D ∫(J2ß
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∫% ∫(-2ª
`org.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsAuthorSearch()?bibEntry@185.23:185.31CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∫ ∫($ã
`org.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsAuthorSearch()?bibEntry@185.23:185.31VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaπ π("
type"
isFinalfalse"
declarationString	 bibEntry*bibEntry2TYPEù
forg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsAuthorSearch()?expectedAuthor@189.37:189.51VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaΩ% Ω(3"
type"
isFinalfalse"$
declarationString expectedAuthor*expectedAuthor2TYPE¿
\org.jabref.logic.importer.fetcher.ArXivFetcherTest.noSupportsAuthorSearchWithLastFirstName()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¬ ¬(7"
isFinalfalse"°
declarationStringã<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">noSupportsAuthorSearchWithLastFirstName</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*'noSupportsAuthorSearchWithLastFirstName2ù
Bjava.lang.Iterable.forEach(java.util.function.Consumer<? super T>)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaƒ ƒ( 2û
Corg.jabref.logic.importer.fetcher.ArXivFetcherTest.getTestAuthors()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaƒ ƒ(2ß
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∆- ∆(:2ö
?org.jabref.logic.importer.fetcher.ArXivFetcherTest.getFetcher()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∆  ∆(*2|
!java.util.StringJoiner.toString()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∆H ∆(P2«
lorg.jabref.logic.importer.ImportCleanup.doPostCleanup(java.util.Collection<org.jabref.model.entry.BibEntry>)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java«8 «(E2∑
\org.jabref.logic.importer.ImportCleanup.targeting(org.jabref.model.database.BibDatabaseMode)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java« «(2n
java.util.List.of()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java… …(2∆
kjava.util.StringJoiner.StringJoiner(java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java√( √(42“
worg.jabref.logic.importer.fetcher.ArXivFetcherTest.noSupportsAuthorSearchWithLastFirstName()?queryBuilder@195.21:195.33CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∆; ∆(G2Ã
qorg.jabref.logic.importer.fetcher.ArXivFetcherTest.noSupportsAuthorSearchWithLastFirstName()?result@198.23:198.29CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java«F «(L2Ã
qorg.jabref.logic.importer.fetcher.ArXivFetcherTest.noSupportsAuthorSearchWithLastFirstName()?result@198.23:198.29CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java…  …(&2ç
2java.util.StringJoiner.add(java.lang.CharSequence)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaƒ! ƒ(22Ÿ
worg.jabref.logic.importer.fetcher.ArXivFetcherTest.noSupportsAuthorSearchWithLastFirstName()?queryBuilder@195.21:195.33DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java√ √(!2”
qorg.jabref.logic.importer.fetcher.ArXivFetcherTest.noSupportsAuthorSearchWithLastFirstName()?result@198.23:198.29DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∆ ∆(2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¬ ¬(∞
worg.jabref.logic.importer.fetcher.ArXivFetcherTest.noSupportsAuthorSearchWithLastFirstName()?queryBuilder@195.21:195.33VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java√ √(!"
typeStringJoiner"
isFinalfalse"Â
declarationStringœ<mark class="modifier"> </mark>StringJoiner <mark class="class-field">queryBuilder</mark> = new StringJoiner("\" AND author:\""<mark class="modifier">,</mark> "author:\""<mark class="modifier">,</mark> "\"")*queryBuilder2q
java.util.StringJoinerTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java√ √(2∆
kjava.util.StringJoiner.StringJoiner(java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java√( √(4±

qorg.jabref.logic.importer.fetcher.ArXivFetcherTest.noSupportsAuthorSearchWithLastFirstName()?result@198.23:198.29VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∆ ∆("
typeList<BibEntry>"
isFinalfalse"°
declarationStringã<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">result</mark> = getFetcher().performSearch(queryBuilder.toString())*result2i
java.util.ListTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∆ ∆(2É
org.jabref.model.entry.BibEntryTYPE_ARGUMENTQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∆ ∆(2ß
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∆- ∆(:2ö
?org.jabref.logic.importer.fetcher.ArXivFetcherTest.getFetcher()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∆  ∆(*2|
!java.util.StringJoiner.toString()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∆H ∆(P2“
worg.jabref.logic.importer.fetcher.ArXivFetcherTest.noSupportsAuthorSearchWithLastFirstName()?queryBuilder@195.21:195.33CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∆; ∆(Gœ

borg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextForEmptyEntryResultsEmptyOptional()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÕ	 Õ(6"
isFinalfalse"ú
declarationStringÜ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findFullTextForEmptyEntryResultsEmptyOptional</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*-findFullTextForEmptyEntryResultsEmptyOptional2u
java.util.Optional.empty()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŒ Œ(#2∑
\org.jabref.logic.importer.fetcher.ArXivFetcher.findFullText(org.jabref.model.entry.BibEntry)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŒ/ Œ(;2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŒ' Œ(.2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŒ< Œ(A2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÕ Õ(¿
Uorg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextRejectsNullParameter()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java“	 “()"
isFinalfalse"¿
declarationString™<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findFullTextRejectsNullParameter</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid* findFullTextRejectsNullParameter2∑
\org.jabref.logic.importer.fetcher.ArXivFetcher.findFullText(org.jabref.model.entry.BibEntry)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java”? ”(K2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java”7 ”(>2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java“ “(¥
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextByDOI()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java◊	 ◊("
isFinalfalse"Ä
declarationStringÍ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findFullTextByDOI</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*findFullTextByDOI2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÿ ÿ(2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŸ Ÿ(2s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java€ €( 2∑
\org.jabref.logic.importer.fetcher.ArXivFetcher.findFullText(org.jabref.model.entry.BibEntry)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java€^ €(j2}
"java.net.URL.URL(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java€% €((2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÿ ÿ(2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŸ Ÿ(2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java€V €(]2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java€k €(p2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java◊ ◊(ﬂ
Iorg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextByEprint()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaﬂ	 ﬂ("
isFinalfalse"É
declarationStringÌ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findFullTextByEprint</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*findFullTextByEprint2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java‡ ‡(2s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java· ·( 2∑
\org.jabref.logic.importer.fetcher.ArXivFetcher.findFullText(org.jabref.model.entry.BibEntry)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java·X ·(d2}
"java.net.URL.URL(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java·% ·((2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java‡ ‡(2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java·P ·(W2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java·e ·(j2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaﬂ ﬂ(˝
Sorg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextByEprintWithPrefix()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÂ	 Â('"
isFinalfalse"ç
declarationString˜<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findFullTextByEprintWithPrefix</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*findFullTextByEprintWithPrefix2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÊ Ê(2s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÁ Á( 2∑
\org.jabref.logic.importer.fetcher.ArXivFetcher.findFullText(org.jabref.model.entry.BibEntry)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÁX Á(d2}
"java.net.URL.URL(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÁ% Á((2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÊ Ê(2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÁP Á(W2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÁe Á(j2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÂ Â(Á
Worg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextByEprintWithUnknownDOI()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÎ	 Î(+"
isFinalfalse"ë
declarationString˚<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findFullTextByEprintWithUnknownDOI</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*"findFullTextByEprintWithUnknownDOI2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÏ Ï(2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÌ Ì(2s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÔ Ô( 2∑
\org.jabref.logic.importer.fetcher.ArXivFetcher.findFullText(org.jabref.model.entry.BibEntry)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÔX Ô(d2}
"java.net.URL.URL(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÔ% Ô((2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÏ Ï(2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÌ Ì(2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÔP Ô(W2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÔe Ô(j2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÎ Î(‹
Horg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextByTitle()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÛ	 Û("
isFinalfalse"Ç
declarationStringÏ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findFullTextByTitle</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*findFullTextByTitle2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÙ Ù(2s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaˆ ˆ( 2∑
\org.jabref.logic.importer.fetcher.ArXivFetcher.findFullText(org.jabref.model.entry.BibEntry)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaˆ^ ˆ(j2}
"java.net.URL.URL(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaˆ% ˆ((2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÙ Ù(2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaˆV ˆ(]2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaˆk ˆ(p2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÛ Û(å
Xorg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextByTitleWithCurlyBracket()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˙	 ˙(,"
isFinalfalse"í
declarationString¸<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findFullTextByTitleWithCurlyBracket</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*#findFullTextByTitleWithCurlyBracket2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˚ ˚(2s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˝ ˝( 2∑
\org.jabref.logic.importer.fetcher.ArXivFetcher.findFullText(org.jabref.model.entry.BibEntry)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˝X ˝(d2}
"java.net.URL.URL(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˝% ˝((2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˚ ˚(2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˝P ˝(W2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˝e ˝(j2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˙ ˙(ö
horg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextByTitleWithColonAndJournalWithoutEprint()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÅ	 Å(<"
isFinalfalse"¢
declarationStringå<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findFullTextByTitleWithColonAndJournalWithoutEprint</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*3findFullTextByTitleWithColonAndJournalWithoutEprint2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÇ Ç(2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÉ É(2s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÖ Ö( 2∑
\org.jabref.logic.importer.fetcher.ArXivFetcher.findFullText(org.jabref.model.entry.BibEntry)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÖX Ö(d2}
"java.net.URL.URL(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÖ% Ö((2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÇ Ç(2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÉ É(2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÖP Ö(W2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÖe Ö(j2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÅ Å(é
dorg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextByTitleWithColonAndUrlWithoutEprint()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaâ	 â(8"
isFinalfalse"û
declarationStringà<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findFullTextByTitleWithColonAndUrlWithoutEprint</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*/findFullTextByTitleWithColonAndUrlWithoutEprint2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaä ä(2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaã ã(2s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaç ç( 2∑
\org.jabref.logic.importer.fetcher.ArXivFetcher.findFullText(org.jabref.model.entry.BibEntry)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaçX ç(d2}
"java.net.URL.URL(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaç% ç((2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaä ä(2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaã ã(2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaçP ç(W2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaçe ç(j2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaâ â(Á
Worg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextByTitleAndPartOfAuthor()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaë	 ë(+"
isFinalfalse"ë
declarationString˚<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findFullTextByTitleAndPartOfAuthor</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*"findFullTextByTitleAndPartOfAuthor2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaí í(2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaì ì(2s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaï ï( 2∑
\org.jabref.logic.importer.fetcher.ArXivFetcher.findFullText(org.jabref.model.entry.BibEntry)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaï^ ï(j2}
"java.net.URL.URL(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaï% ï((2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaí í(2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaì ì(2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaïV ï(]2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaïk ï(p2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaë ë(ó
gorg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextByTitleWithCurlyBracketAndPartOfAuthor()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaô	 ô(;"
isFinalfalse"°
declarationStringã<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findFullTextByTitleWithCurlyBracketAndPartOfAuthor</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*2findFullTextByTitleWithCurlyBracketAndPartOfAuthor2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaö ö(2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaõ õ(2s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaù ù( 2∑
\org.jabref.logic.importer.fetcher.ArXivFetcher.findFullText(org.jabref.model.entry.BibEntry)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaùX ù(d2}
"java.net.URL.URL(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaù% ù((2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaö ö(2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaõ õ(2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaùP ù(W2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaùe ù(j2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaô ô(˜
Porg.jabref.logic.importer.fetcher.ArXivFetcherTest.notFindFullTextByUnknownDOI()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java°	 °($"
isFinalfalse"ä
declarationStringÙ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">notFindFullTextByUnknownDOI</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*notFindFullTextByUnknownDOI2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¢ ¢(2u
java.util.Optional.empty()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java£ £(#2∑
\org.jabref.logic.importer.fetcher.ArXivFetcher.findFullText(org.jabref.model.entry.BibEntry)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java£/ £(;2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¢ ¢(2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java£' £(.2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java£< £(A2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java° °(Ù
Oorg.jabref.logic.importer.fetcher.ArXivFetcherTest.notFindFullTextByUnknownId()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaß	 ß(#"
isFinalfalse"â
declarationStringÛ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">notFindFullTextByUnknownId</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*notFindFullTextByUnknownId2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java® ®(2u
java.util.Optional.empty()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java© ©(#2∑
\org.jabref.logic.importer.fetcher.ArXivFetcher.findFullText(org.jabref.model.entry.BibEntry)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java©/ ©(;2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java® ®(2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java©' ©(.2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java©< ©(A2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaß ß(ˆ
[org.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextByDOINotAvailableInCatalog()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≠	 ≠(/"
isFinalfalse"ï
declarationStringˇ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findFullTextByDOINotAvailableInCatalog</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*&findFullTextByDOINotAvailableInCatalog2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÆ Æ(2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaØ Ø(2u
java.util.Optional.empty()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java± ±(#2∑
\org.jabref.logic.importer.fetcher.ArXivFetcher.findFullText(org.jabref.model.entry.BibEntry)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java±/ ±(;2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÆ Æ(2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaØ Ø(2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java±' ±(.2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java±< ±(A2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≠ ≠(ú

Qorg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextEntityWithoutDoi()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaµ	 µ(%"
isFinalfalse"ã
declarationStringı<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findFullTextEntityWithoutDoi</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*findFullTextEntityWithoutDoi2u
java.util.Optional.empty()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∂ ∂(#2∑
\org.jabref.logic.importer.fetcher.ArXivFetcher.findFullText(org.jabref.model.entry.BibEntry)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∂/ ∂(;2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∂' ∂(.2ü
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∂< ∂(A2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaµ µ(Ñ
Korg.jabref.logic.importer.fetcher.ArXivFetcherTest.findFullTextTrustLevel()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∫	 ∫("
isFinalfalse"∂
declarationString†<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findFullTextTrustLevel</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*findFullTextTrustLevel2ô
>org.jabref.logic.importer.fetcher.ArXivFetcher.getTrustLevel()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaª2 ª(?2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaª* ª(12f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∫ ∫(ï

Morg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEntryByPartOfTitle()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaø	 ø(!"
isFinalfalse"Ö
declarationStringÔ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchEntryByPartOfTitle</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*searchEntryByPartOfTitle2Å
&java.util.Collections.singletonList(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¿! ¿(.2ß
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¡ ¡(%2©
Norg.jabref.logic.importer.fetcher.ArXivFetcherTest?mainResultPaper@51.21:51.36CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¿/ ¿(>2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¡ ¡(2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaø ø(ƒ

\org.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEntryByPartOfTitleWithAcuteAccent()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≈	 ≈(0"
isFinalfalse"î
declarationString˛<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchEntryByPartOfTitleWithAcuteAccent</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*'searchEntryByPartOfTitleWithAcuteAccent2Å
&java.util.Collections.singletonList(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∆! ∆(.2ß
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java« «(%2´
Porg.jabref.logic.importer.fetcher.ArXivFetcherTest?sliceTheoremPaper@48.21:48.38CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∆/ ∆(@2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java« «(2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≈ ≈(Â+
Gorg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEntryByOldId()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÀ	 À("
isFinalfalse"ˇ
declarationStringÈ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchEntryByOldId</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*searchEntryByOldId2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java‡ ‡(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaﬂ ﬂ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaﬁ ﬁ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java› ›(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java‹ ‹(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java€ €(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java⁄ ⁄(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŸ Ÿ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÿ ÿ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java◊ ◊(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java÷ ÷(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java’ ’(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java‘ ‘(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java” ”(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java“ “(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java— —(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java– –(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaœ œ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŒ Œ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÕ Õ(2s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java‚ ‚( 2≠
Rorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java‚4 ‚(E2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÃ  Ã((2£
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java‡ ‡(+2π
^org.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEntryByOldId()?expected@332.17:332.25CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java‚! ‚()2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java‚, ‚(32¿
^org.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEntryByOldId()?expected@332.17:332.25DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÃ Ã(2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÀ À(º3
^org.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEntryByOldId()?expected@332.17:332.25VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÃ Ã("
typeBibEntry"
isFinalfalse"∫
declarationString§<mark class="modifier"> </mark>BibEntry <mark class="class-field">expected</mark> = new BibEntry(StandardEntryType.Article).withField(StandardField.AUTHOR, "{H1 Collaboration}").withField(StandardField.TITLE, "Multi-Electron Production at High Transverse Momenta in ep Collisions at HERA").withField(StandardField.NUMBER, "1").withField(StandardField.VOLUME, "31").withField(StandardField.PAGES, "17--29").withField(StandardField.DATE, "2003-07-07").withField(StandardField.YEAR, "2003").withField(StandardField.MONTH, "#oct#").withField(StandardField.ISSN, "1434-6052").withField(StandardField.ABSTRACT, "Multi-electron production is studied at high electron transverse momentum in positron- and electron-proton collisions using the H1 detector at HERA. The data correspond to an integrated luminosity of 115 pb-1. Di-electron and tri-electron event yields are measured. Cross sections are derived in a restricted phase space region dominated by photon-photon collisions. In general good agreement is found with the Standard Model predictions. However, for electron pair invariant masses above 100 GeV, three di-electron events and three tri-electron events are observed, compared to Standard Model expectations of 0.30 \\pm 0.04 and 0.23 \\pm 0.04, respectively.").withField(StandardField.PUBLISHER, "Springer Science and Business Media LLC").withField(StandardField.EPRINT, "hep-ex/0307015").withField(StandardField.FILE, ":http\\://arxiv.org/pdf/hep-ex/0307015v1:PDF").withField(StandardField.EPRINTTYPE, "arXiv").withField(StandardField.EPRINTCLASS, "hep-ex").withField(StandardField.KEYWORDS, "High Energy Physics - Experiment (hep-ex)<mark class="modifier">,</mark> FOS: Physical sciences").withField(StandardField.DOI, "10.1140/epjc/s2003-01326-x").withField(StandardField.JOURNAL, "Eur.Phys.J.C31:17-29,2003").withField(InternalField.KEY_FIELD, "2003").withField(new UnknownField("copyright")<mark class="modifier">,</mark> "Assumed arXiv.org perpetual, non-exclusive license to distribute <mark class="modifier">this</mark> article for submissions made before January 2004")*expected2z
org.jabref.model.entry.BibEntryTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÃ Ã(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java‡ ‡(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaﬂ ﬂ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaﬁ ﬁ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java› ›(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java‹ ‹(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java€ €(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java⁄ ⁄(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŸ Ÿ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÿ ÿ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java◊ ◊(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java÷ ÷(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java’ ’(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java‘ ‘(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java” ”(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java“ “(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java— —(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java– –(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaœ œ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŒ Œ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÕ Õ(2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÃ  Ã((2£
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java‡ ‡(+≤

Yorg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEntryByIdWith4DigitsAndVersion()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÊ	 Ê(-"
isFinalfalse"ë
declarationString˚<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchEntryByIdWith4DigitsAndVersion</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*$searchEntryByIdWith4DigitsAndVersion2s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÁ Á( 2≠
Rorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÁ= Á(N2´
Porg.jabref.logic.importer.fetcher.ArXivFetcherTest?sliceTheoremPaper@48.21:48.38CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÁ! Á(22°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÁ5 Á(<2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÊ Ê(î

Oorg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEntryByIdWith4Digits()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÎ	 Î(#"
isFinalfalse"á
declarationStringÒ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchEntryByIdWith4Digits</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*searchEntryByIdWith4Digits2s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÏ Ï( 2≠
Rorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÏ= Ï(N2´
Porg.jabref.logic.importer.fetcher.ArXivFetcherTest?sliceTheoremPaper@48.21:48.38CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÏ! Ï(22°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÏ5 Ï(<2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÎ Î(Ø

Xorg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEntryByIdWith4DigitsAndPrefix()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java	 (,"
isFinalfalse"ê
declarationString˙<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchEntryByIdWith4DigitsAndPrefix</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*#searchEntryByIdWith4DigitsAndPrefix2s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÒ Ò( 2≠
Rorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÒ= Ò(N2´
Porg.jabref.logic.importer.fetcher.ArXivFetcherTest?sliceTheoremPaper@48.21:48.38CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÒ! Ò(22°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÒ5 Ò(<2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java (÷

eorg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEntryByIdWith4DigitsAndPrefixAndNotTrimmed()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaı	 ı(9"
isFinalfalse"ù
declarationStringá<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchEntryByIdWith4DigitsAndPrefixAndNotTrimmed</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*0searchEntryByIdWith4DigitsAndPrefixAndNotTrimmed2s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaˆ ˆ( 2≠
Rorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaˆ= ˆ(N2´
Porg.jabref.logic.importer.fetcher.ArXivFetcherTest?sliceTheoremPaper@48.21:48.38CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaˆ! ˆ(22°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaˆ5 ˆ(<2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaı ı(‰
Oorg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEntryByIdWith5Digits()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˙	 ˙(#"
isFinalfalse"á
declarationStringÒ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchEntryByIdWith5Digits</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*searchEntryByIdWith5Digits2s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˚ ˚( 2»
mjava.util.Optional.flatMap(java.util.function.Function<? super T, ? extends java.util.Optional<? extends U>>)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˝8 ˝(?2≠
Rorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˝ ˝()2ß
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˝O ˝(W2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˝ ˝(2æ
corg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEntryByIdWith5Digits()?entry@381.64:381.69CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˝I ˝(N2≈
corg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEntryByIdWith5Digits()?entry@381.64:381.69DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˝@ ˝(E2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˙ ˙(à
corg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEntryByIdWith5Digits()?entry@381.64:381.69VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˝@ ˝(E"
type"
isFinalfalse"
declarationString entry*entry2TYPE˝
Vorg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchWithMalformedIdReturnsEmpty()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÅ	 Å(*"
isFinalfalse"é
declarationString¯<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchWithMalformedIdReturnsEmpty</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*!searchWithMalformedIdReturnsEmpty2u
java.util.Optional.empty()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÇ Ç(#2≠
Rorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÇ/ Ç(@2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÇ' Ç(.2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÅ Å(µ
Rorg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchIdentifierForSlicePaper()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÜ	 Ü(&"
isFinalfalse"ä
declarationStringÙ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchIdentifierForSlicePaper</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*searchIdentifierForSlicePaper2©
Norg.jabref.model.entry.BibEntry.clearField(org.jabref.model.entry.field.Field)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaá á($2§
Iorg.jabref.model.entry.identifier.ArXivIdentifier.parse(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaâ% â(*2π
^org.jabref.logic.importer.fetcher.ArXivFetcher.findIdentifier(org.jabref.model.entry.BibEntry)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaâA â(O2´
Porg.jabref.logic.importer.fetcher.ArXivFetcherTest?sliceTheoremPaper@48.21:48.38CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaá á(2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaâ9 â(@2´
Porg.jabref.logic.importer.fetcher.ArXivFetcherTest?sliceTheoremPaper@48.21:48.38CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaâP â(a2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÜ Ü(¡
Borg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchEmptyId()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaç	 ç("
isFinalfalse"˙
declarationString‰<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchEmptyId</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*searchEmptyId2u
java.util.Optional.empty()CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaé é(#2≠
Rorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaé/ é(@2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaé' é(.2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaç ç(˘	
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchWithHttpUrl()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaí	 í("
isFinalfalse"˛
declarationStringË<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchWithHttpUrl</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*searchWithHttpUrl2s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaì ì( 2≠
Rorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaì= ì(N2´
Porg.jabref.logic.importer.fetcher.ArXivFetcherTest?sliceTheoremPaper@48.21:48.38CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaì! ì(22°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaì5 ì(<2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaí í(¸	
Gorg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchWithHttpsUrl()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaó	 ó("
isFinalfalse"ˇ
declarationStringÈ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchWithHttpsUrl</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*searchWithHttpsUrl2s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaò ò( 2≠
Rorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaò= ò(N2´
Porg.jabref.logic.importer.fetcher.ArXivFetcherTest?sliceTheoremPaper@48.21:48.38CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaò! ò(22°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaò5 ò(<2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaó ó(ö

Qorg.jabref.logic.importer.fetcher.ArXivFetcherTest.searchWithHttpsUrlNotTrimmed()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaú	 ú(%"
isFinalfalse"â
declarationStringÛ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">searchWithHttpsUrlNotTrimmed</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*searchWithHttpsUrlNotTrimmed2s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaù ù( 2≠
Rorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaù= ù(N2´
Porg.jabref.logic.importer.fetcher.ArXivFetcherTest?sliceTheoremPaper@48.21:48.38CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaù! ù(22°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaù5 ù(<2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaú ú(ƒ
Gorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsYearSearch()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java£ £(""
isFinalfalse"é
declarationString¯ <br><mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">supportsYearSearch</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*supportsYearSearch2∂
Worg.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearSearch()OVERRIDEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java£ £("2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java£ £(ÿ
Lorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsYearRangeSearch()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java© ©('"
isFinalfalse"ì
declarationString˝ <br><mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">supportsYearRangeSearch</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*supportsYearRangeSearch2ª
\org.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearRangeSearch()OVERRIDEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java© ©('2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java© ©(í
Iorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsPhraseSearch()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java± ±($"
isFinalfalse"á
declarationStringÒ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">supportsPhraseSearch</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*supportsPhraseSearch2ß
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≤8 ≤(E2ß
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≥; ≥(H2ß
Ljava.util.List.containsAll(java.util.Collection<? extends java.lang.Object>)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaµ- µ(82°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≤0 ≤(72°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≥3 ≥(:2Ã
qorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsPhraseSearch()?resultWithOutPhraseSearch@435.23:435.48CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaµ µ(,2…
norg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsPhraseSearch()?resultWithPhraseSearch@434.23:434.45CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaµ9 µ(O2–
norg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsPhraseSearch()?resultWithPhraseSearch@434.23:434.45DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≤ ≤(-2”
qorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsPhraseSearch()?resultWithOutPhraseSearch@435.23:435.48DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≥ ≥(02f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java± ±(â
norg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsPhraseSearch()?resultWithPhraseSearch@434.23:434.45VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≤ ≤(-"
typeList<BibEntry>"
isFinalfalse"∏
declarationString¢<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">resultWithPhraseSearch</mark> = fetcher.performSearch("title:\"Taxonomy of Distributed\"")*resultWithPhraseSearch2i
java.util.ListTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≤ ≤(2É
org.jabref.model.entry.BibEntryTYPE_ARGUMENTQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≤ ≤(2ß
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≤8 ≤(E2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≤0 ≤(7¢
qorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsPhraseSearch()?resultWithOutPhraseSearch@435.23:435.48VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≥ ≥(0"
typeList<BibEntry>"
isFinalfalse"À
declarationStringµ<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">resultWithOutPhraseSearch</mark> = fetcher.performSearch("title:Taxonomy AND title:of AND title:Distributed")*resultWithOutPhraseSearch2i
java.util.ListTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≥ ≥(2É
org.jabref.model.entry.BibEntryTYPE_ARGUMENTQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≥ ≥(2ß
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≥; ≥(H2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≥3 ≥(:è'
Xorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsPhraseSearchAndMatchesExact()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaΩ Ω(3"
isFinalfalse"ñ
declarationStringÄ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">supportsPhraseSearchAndMatchesExact</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*#supportsPhraseSearchAndMatchesExact2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÃ Ã(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÀ À(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java   (2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java… …(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java» »(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java« «(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∆ ∆(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≈ ≈(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaƒ ƒ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java√ √(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¬ ¬(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¡ ¡(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¿ ¿(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaø ø(2ß
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŒ8 Œ(E2Å
&java.util.Collections.singletonList(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java—! —(.2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaæ  æ((2£
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÃ Ã(+2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŒ0 Œ(72 
oorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsPhraseSearchAndMatchesExact()?expected@446.17:446.25CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java—/ —(72ÿ
}org.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsPhraseSearchAndMatchesExact()?resultWithPhraseSearch@462.23:462.45CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java—: —(P2—
oorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsPhraseSearchAndMatchesExact()?expected@446.17:446.25DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaæ æ(2ﬂ
}org.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsPhraseSearchAndMatchesExact()?resultWithPhraseSearch@462.23:462.45DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŒ Œ(-2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaΩ Ω(≠.
oorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsPhraseSearchAndMatchesExact()?expected@446.17:446.25VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaæ æ("
typeBibEntry"
isFinalfalse"à
declarationStringÚ<mark class="modifier"> </mark>BibEntry <mark class="class-field">expected</mark> = new BibEntry(StandardEntryType.Article).withField(StandardField.AUTHOR, "Rafrastara, Fauzi Adi and Deyu, Qi").withField(StandardField.TITLE, "A Survey and Taxonomy of Distributed Data Mining Research Studies: A Systematic Literature Review").withField(StandardField.DATE, "2020-09-14").withField(StandardField.YEAR, "2020").withField(StandardField.PUBLISHER, "arXiv").withField(StandardField.ABSTRACT, "Context: Data Mining (DM) method has been evolving year by year and as of today there is also the enhancement of DM technique that can be run several times faster than the traditional one, called Distributed Data Mining (DDM). It is not a new field in data processing actually, but in the recent years many researchers have been paying more attention on <mark class="modifier">this</mark> area. Problems: The number of publication regarding DDM in high reputation journals and conferences has increased significantly. It makes difficult for researchers to gain a comprehensive view of DDM that require further research. Solution: We conducted a systematic literature review to map the previous research in DDM field. Our objective is to provide the motivation for new research by identifying the gap in DDM field as well as the hot area itself. Result: Our analysis came up with some conclusions by answering 7 research questions proposed in <mark class="modifier">this</mark> literature review. In addition, the taxonomy of DDM research area is presented in <mark class="modifier">this</mark> paper. Finally, <mark class="modifier">this</mark> systematic literature review provides the statistic of development of DDM since 2000 to 2015, in which <mark class="modifier">this</mark> will help the future researchers to have a comprehensive overview of current situation of DDM.").withField(StandardField.EPRINT, "2009.10618").withField(StandardField.DOI, "10.48550/ARXIV.2009.10618").withField(StandardField.FILE, ":http\\://arxiv.org/pdf/2009.10618v1:PDF").withField(StandardField.EPRINTTYPE, "arXiv").withField(StandardField.EPRINTCLASS, "cs.DC").withField(StandardField.KEYWORDS, "Distributed / Parallel / Cluster Computing (cs.DC)<mark class="modifier">,</mark> Machine Learning (cs.LG)<mark class="modifier">,</mark> FOS: Computer and information sciences").withField(InternalField.KEY_FIELD, "https://doi.org/10.48550/arxiv.2009.10618").withField(new UnknownField("copyright")<mark class="modifier">,</mark> "arXiv.org perpetual, non-exclusive license")*expected2z
org.jabref.model.entry.BibEntryTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaæ æ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÃ Ã(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÀ À(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java   (2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java… …(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java» »(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java« «(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∆ ∆(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≈ ≈(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaƒ ƒ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java√ √(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¬ ¬(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¡ ¡(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¿ ¿(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaø ø(2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaæ  æ((2£
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÃ Ã(+ò
}org.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsPhraseSearchAndMatchesExact()?resultWithPhraseSearch@462.23:462.45VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŒ Œ(-"
typeList<BibEntry>"
isFinalfalse"∏
declarationString¢<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">resultWithPhraseSearch</mark> = fetcher.performSearch("title:\"Taxonomy of Distributed\"")*resultWithPhraseSearch2i
java.util.ListTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŒ Œ(2É
org.jabref.model.entry.BibEntryTYPE_ARGUMENTQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŒ Œ(2ß
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŒ8 Œ(E2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŒ0 Œ(7ê/
Morg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsBooleanANDSearch()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java’ ’(("
isFinalfalse"ã
declarationStringı<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">supportsBooleanANDSearch</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*supportsBooleanANDSearch2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÍ Í(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÈ È(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaË Ë(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÁ Á(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÊ Ê(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÂ Â(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java‰ ‰(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java„ „(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java‚ ‚(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java· ·(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java‡ ‡(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaﬂ ﬂ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaﬁ ﬁ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java› ›(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java‹ ‹(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java€ €(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java⁄ ⁄(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŸ Ÿ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÿ ÿ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java◊ ◊(2ß
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÏ( Ï(52Å
&java.util.Collections.singletonList(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÔ! Ô(.2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java÷  ÷((2£
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÍ Í(+2°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÏ  Ï('2ø
dorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsBooleanANDSearch()?expected@470.17:470.25CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÔ/ Ô(72Ω
borg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsBooleanANDSearch()?result@492.23:492.29CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÔ: Ô(@2∆
dorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsBooleanANDSearch()?expected@470.17:470.25DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java÷ ÷(2ƒ
borg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsBooleanANDSearch()?result@492.23:492.29DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÏ Ï(2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java’ ’(”8
dorg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsBooleanANDSearch()?expected@470.17:470.25VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java÷ ÷("
typeBibEntry"
isFinalfalse"À
declarationStringµ<mark class="modifier"> </mark>BibEntry <mark class="class-field">expected</mark> = new BibEntry(StandardEntryType.Article).withField(StandardField.AUTHOR, "B√ºscher, Tobias and Diez, Angel L. and Gompper, Gerhard and Elgeti, Jens").withField(StandardField.TITLE, "Instability and fingering of interfaces in growing tissue").withField(StandardField.DATE, "2020-03-10").withField(StandardField.YEAR, "2020").withField(StandardField.MONTH, "#aug#").withField(StandardField.NUMBER, "8").withField(StandardField.VOLUME, "22").withField(StandardField.ISSN, "1367-2630").withField(StandardField.PAGES, "083005").withField(StandardField.PUBLISHER, "IOP Publishing").withField(StandardField.JOURNAL, "New Journal of Physics").withField(StandardField.ABSTRACT, "Interfaces in tissues are ubiquitous, both between tissue and environment as well as between populations of different cell types. The propagation of an interface can be driven mechanically. % e.g. by a difference in the respective homeostatic stress of the different cell types. Computer simulations of growing tissues are employed to study the stability of the interface between two tissues on a substrate. From a mechanical perspective, the dynamics and stability of <mark class="modifier">this</mark> system is controlled mainly by four parameters of the respective tissues: (i) the homeostatic stress (ii) cell motility (iii) tissue viscosity and (iv) substrate friction. For propagation driven by a difference in homeostatic stress, the interface is stable for tissue-specific substrate friction even for very large differences of homeostatic stress; however, it becomes unstable above a critical stress difference when the tissue with the larger homeostatic stress has a higher viscosity. A small difference in directed bulk motility between the two tissues suffices to result in propagation with a stable interface, even for otherwise identical tissues. Larger differences in motility force, however, result in a finite-wavelength instability of the interface. Interestingly, the instability is apparently bound by nonlinear effects and the amplitude of the interface undulations only grows to a finite value in time.").withField(StandardField.DOI, "10.1088/1367-2630/ab9e88").withField(StandardField.EPRINT, "2003.04601").withField(StandardField.FILE, ":http\\://arxiv.org/pdf/2003.04601v1:PDF").withField(StandardField.EPRINTTYPE, "arXiv").withField(StandardField.EPRINTCLASS, "q-bio.TO").withField(StandardField.KEYWORDS, "Tissues and Organs (q-bio.TO)<mark class="modifier">,</mark> FOS: Biological sciences").withField(InternalField.KEY_FIELD, "B_scher_2020").withField(new UnknownField("copyright")<mark class="modifier">,</mark> "arXiv.org perpetual, non-exclusive license")*expected2z
org.jabref.model.entry.BibEntryTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java÷ ÷(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÍ Í(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÈ È(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaË Ë(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÁ Á(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÊ Ê(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÂ Â(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java‰ ‰(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java„ „(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java‚ ‚(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java· ·(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java‡ ‡(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaﬂ ﬂ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaﬁ ﬁ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java› ›(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java‹ ‹(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java€ €(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java⁄ ⁄(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŸ Ÿ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÿ ÿ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java◊ ◊(2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java÷  ÷((2£
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÍ Í(+å
borg.jabref.logic.importer.fetcher.ArXivFetcherTest.supportsBooleanANDSearch()?result@492.23:492.29VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÏ Ï("
typeList<BibEntry>"
isFinalfalse"◊
declarationString¡<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">result</mark> = fetcher.performSearch("author:\"Tobias B√ºscher\" AND title:\"Instability and fingering of interfaces\"")*result2i
java.util.ListTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÏ Ï(2É
org.jabref.model.entry.BibEntryTYPE_ARGUMENTQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÏ Ï(2ß
Lorg.jabref.logic.importer.SearchBasedFetcher.performSearch(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÏ( Ï(52°
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÏ  Ï('˘/
borg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePureArxivEntryWhenAllDOIFetchingFails()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÛ Û(="
isFinalfalse"ß
declarationStringë<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">retrievePureArxivEntryWhenAllDOIFetchingFails</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*-retrievePureArxivEntryWhenAllDOIFetchingFails2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaˇ ˇ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˛ ˛(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˝ ˝(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¸ ¸(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˚ ˚(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˙ ˙(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˘ ˘(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¯ ¯(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˜ ˜(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaˆ ˆ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaı ı(2´
Porg.jabref.logic.importer.fetcher.DoiFetcher.performSearchById(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÇ  Ç(12´
Porg.jabref.logic.importer.fetcher.DoiFetcher.performSearchById(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÉ  É(12s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÜ Ü( 2≠
Rorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÜA Ü(R2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÙ  Ù((2®
Morg.jabref.logic.importer.FetcherException.FetcherException(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÇ\ Ç(l2®
Morg.jabref.logic.importer.FetcherException.FetcherException(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÉ^ É(n2±
Vorg.jabref.logic.importer.fetcher.ArXivFetcherTest?importFormatPreferences@44.43:44.66CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÅC Å(Z2ﬂ
Éorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePureArxivEntryWhenAllDOIFetchingFails()?modifiedDoiFetcher@513.19:513.37CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÇ Ç(2ﬂ
Éorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePureArxivEntryWhenAllDOIFetchingFails()?modifiedDoiFetcher@513.19:513.37CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÉ É(2±
Vorg.jabref.logic.importer.fetcher.ArXivFetcherTest?importFormatPreferences@44.43:44.66CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÖI Ö(`2ﬂ
Éorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePureArxivEntryWhenAllDOIFetchingFails()?modifiedDoiFetcher@513.19:513.37CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÖb Ö(t2‘
yorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePureArxivEntryWhenAllDOIFetchingFails()?expected@500.17:500.25CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÜ! Ü()2·
Öorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePureArxivEntryWhenAllDOIFetchingFails()?modifiedArXivFetcher@517.21:517.41CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÜ, Ü(@2€
yorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePureArxivEntryWhenAllDOIFetchingFails()?expected@500.17:500.25DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÙ Ù(2Ê
Éorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePureArxivEntryWhenAllDOIFetchingFails()?modifiedDoiFetcher@513.19:513.37DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÅ Å(%2Ë
Öorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePureArxivEntryWhenAllDOIFetchingFails()?modifiedArXivFetcher@517.21:517.41DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÖ Ö()2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÛ Û(Ó(
yorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePureArxivEntryWhenAllDOIFetchingFails()?expected@500.17:500.25VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÙ Ù("
typeBibEntry"
isFinalfalse"ú
declarationStringÜ<mark class="modifier"> </mark>BibEntry <mark class="class-field">expected</mark> = new BibEntry(StandardEntryType.Article).withField(StandardField.AUTHOR, "Hai Zheng and Po-Yi Ho and Meiling Jiang and Bin Tang and Weirong Liu and Dengjin Li and Xuefeng Yu and Nancy E. Kleckner and Ariel Amir and Chenli Liu").withField(StandardField.TITLE, "Interrogating the Escherichia coli cell cycle by cell dimension perturbations").withField(StandardField.DATE, "2017-01-03").withField(StandardField.JOURNAL, "PNAS December 27, 2016 vol. 113 no. 52 15000-15005").withField(StandardField.ABSTRACT, "Bacteria tightly regulate and coordinate the various events in their cell cycles to duplicate themselves accurately and to control their cell sizes. Growth of Escherichia coli, in particular, follows a relation known as Schaechter 's growth law. This law says that the average cell volume scales exponentially with growth rate, with a scaling exponent equal to the time from initiation of a round of DNA replication to the cell division at which the corresponding sister chromosomes segregate. Here, we sought to test the robustness of the growth law to systematic perturbations in cell dimensions achieved by varying the expression levels of mreB and ftsZ. We found that decreasing the mreB level resulted in increased cell width, with little change in cell length, whereas decreasing the ftsZ level resulted in increased cell length. Furthermore, the time from replication termination to cell division increased with the perturbed dimension in both cases. Moreover, the growth law remained valid over a range of growth conditions and dimension perturbations. The growth law can be quantitatively interpreted as a consequence of a tight coupling of cell division to replication initiation. Thus, its robustness to perturbations in cell dimensions strongly supports models in which the timing of replication initiation governs that of cell division, and cell volume is the key phenomenological variable governing the timing of replication initiation. These conclusions are discussed in the context of our recently proposed adder-per-origin model, in which cells add a constant volume per origin between initiations and divide a constant time after initiation.").withField(StandardField.DOI, "10.1073/pnas.1617932114").withField(StandardField.EPRINT, "1701.00587").withField(StandardField.FILE, ":http\\://arxiv.org/pdf/1701.00587v1:PDF").withField(StandardField.EPRINTTYPE, "arXiv").withField(StandardField.EPRINTCLASS, "q-bio.CB").withField(StandardField.KEYWORDS, "q-bio.CB")*expected2z
org.jabref.model.entry.BibEntryTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÙ Ù(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaˇ ˇ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˛ ˛(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˝ ˝(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¸ ¸(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˚ ˚(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˙ ˙(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˘ ˘(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¯ ¯(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java˜ ˜(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaˆ ˆ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaı ı(2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÙ  Ù((à
Éorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePureArxivEntryWhenAllDOIFetchingFails()?modifiedDoiFetcher@513.19:513.37VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÅ Å(%"
type
DoiFetcher"
isFinalfalse"™
declarationStringî<mark class="modifier"> </mark>DoiFetcher <mark class="class-field">modifiedDoiFetcher</mark> = Mockito.spy(new DoiFetcher(importFormatPreferences))*modifiedDoiFetcher2á
,org.jabref.logic.importer.fetcher.DoiFetcherTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÅ Å(2±
Vorg.jabref.logic.importer.fetcher.ArXivFetcherTest?importFormatPreferences@44.43:44.66CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÅC Å(Zå
Öorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePureArxivEntryWhenAllDOIFetchingFails()?modifiedArXivFetcher@517.21:517.41VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÖ Ö()"
typeArXivFetcher"
isFinalfalse"ƒ
declarationStringÆ<mark class="modifier"> </mark>ArXivFetcher <mark class="class-field">modifiedArXivFetcher</mark> = Mockito.spy(new ArXivFetcher(importFormatPreferences, modifiedDoiFetcher))*modifiedArXivFetcher2â
.org.jabref.logic.importer.fetcher.ArXivFetcherTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÖ Ö(2±
Vorg.jabref.logic.importer.fetcher.ArXivFetcherTest?importFormatPreferences@44.43:44.66CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÖI Ö(`2ﬂ
Éorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePureArxivEntryWhenAllDOIFetchingFails()?modifiedDoiFetcher@513.19:513.37CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÖb Ö(t†"
forg.jabref.logic.importer.fetcher.ArXivFetcherTest.canReplicateArXivOnlySearchByPassingNullParameter()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaä ä(A"
isFinalfalse"´
declarationStringï<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">canReplicateArXivOnlySearchByPassingNullParameter</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*1canReplicateArXivOnlySearchByPassingNullParameter2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javañ ñ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaï ï(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaî î(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaì ì(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaí í(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaë ë(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaê ê(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaè è(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaé é(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaç ç(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaå å(2s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaô ô( 2≠
Rorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaôA ô(R2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaã  ã((2±
Vorg.jabref.logic.importer.fetcher.ArXivFetcherTest?importFormatPreferences@44.43:44.66CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaò= ò(T2ÿ
}org.jabref.logic.importer.fetcher.ArXivFetcherTest.canReplicateArXivOnlySearchByPassingNullParameter()?expected@523.17:523.25CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaô! ô()2Â
âorg.jabref.logic.importer.fetcher.ArXivFetcherTest.canReplicateArXivOnlySearchByPassingNullParameter()?modifiedArXivFetcher@536.21:536.41CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaô, ô(@2ﬂ
}org.jabref.logic.importer.fetcher.ArXivFetcherTest.canReplicateArXivOnlySearchByPassingNullParameter()?expected@523.17:523.25DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaã ã(2Ï
âorg.jabref.logic.importer.fetcher.ArXivFetcherTest.canReplicateArXivOnlySearchByPassingNullParameter()?modifiedArXivFetcher@536.21:536.41DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaò ò()2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaä ä(Ú(
}org.jabref.logic.importer.fetcher.ArXivFetcherTest.canReplicateArXivOnlySearchByPassingNullParameter()?expected@523.17:523.25VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaã ã("
typeBibEntry"
isFinalfalse"ú
declarationStringÜ<mark class="modifier"> </mark>BibEntry <mark class="class-field">expected</mark> = new BibEntry(StandardEntryType.Article).withField(StandardField.AUTHOR, "Hai Zheng and Po-Yi Ho and Meiling Jiang and Bin Tang and Weirong Liu and Dengjin Li and Xuefeng Yu and Nancy E. Kleckner and Ariel Amir and Chenli Liu").withField(StandardField.TITLE, "Interrogating the Escherichia coli cell cycle by cell dimension perturbations").withField(StandardField.DATE, "2017-01-03").withField(StandardField.JOURNAL, "PNAS December 27, 2016 vol. 113 no. 52 15000-15005").withField(StandardField.ABSTRACT, "Bacteria tightly regulate and coordinate the various events in their cell cycles to duplicate themselves accurately and to control their cell sizes. Growth of Escherichia coli, in particular, follows a relation known as Schaechter 's growth law. This law says that the average cell volume scales exponentially with growth rate, with a scaling exponent equal to the time from initiation of a round of DNA replication to the cell division at which the corresponding sister chromosomes segregate. Here, we sought to test the robustness of the growth law to systematic perturbations in cell dimensions achieved by varying the expression levels of mreB and ftsZ. We found that decreasing the mreB level resulted in increased cell width, with little change in cell length, whereas decreasing the ftsZ level resulted in increased cell length. Furthermore, the time from replication termination to cell division increased with the perturbed dimension in both cases. Moreover, the growth law remained valid over a range of growth conditions and dimension perturbations. The growth law can be quantitatively interpreted as a consequence of a tight coupling of cell division to replication initiation. Thus, its robustness to perturbations in cell dimensions strongly supports models in which the timing of replication initiation governs that of cell division, and cell volume is the key phenomenological variable governing the timing of replication initiation. These conclusions are discussed in the context of our recently proposed adder-per-origin model, in which cells add a constant volume per origin between initiations and divide a constant time after initiation.").withField(StandardField.DOI, "10.1073/pnas.1617932114").withField(StandardField.EPRINT, "1701.00587").withField(StandardField.FILE, ":http\\://arxiv.org/pdf/1701.00587v1:PDF").withField(StandardField.EPRINTTYPE, "arXiv").withField(StandardField.EPRINTCLASS, "q-bio.CB").withField(StandardField.KEYWORDS, "q-bio.CB")*expected2z
org.jabref.model.entry.BibEntryTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaã ã(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javañ ñ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaï ï(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaî î(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaì ì(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaí í(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaë ë(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaê ê(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaè è(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaé é(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaç ç(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaå å(2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaã  ã((±
âorg.jabref.logic.importer.fetcher.ArXivFetcherTest.canReplicateArXivOnlySearchByPassingNullParameter()?modifiedArXivFetcher@536.21:536.41VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaò ò()"
typeArXivFetcher"
isFinalfalse"«
declarationString±<mark class="modifier"> </mark>ArXivFetcher <mark class="class-field">modifiedArXivFetcher</mark> = new ArXivFetcher(importFormatPreferences, <mark class="modifier">null</mark>)*modifiedArXivFetcher2â
.org.jabref.logic.importer.fetcher.ArXivFetcherTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaò ò(2±
Vorg.jabref.logic.importer.fetcher.ArXivFetcherTest?importFormatPreferences@44.43:44.66CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaò= ò(Tò4
uorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromUserAssignedDOI()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaù ù(P"
isFinalfalse"∫
declarationString§<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">retrievePartialResultWhenCannotGetInformationFromUserAssignedDOI</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*@retrievePartialResultWhenCannotGetInformationFromUserAssignedDOI2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≠ ≠(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¨ ¨(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java´ ´(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java™ ™(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java© ©(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java® ®(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaß ß(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¶ ¶(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java• •(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java§ §(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java£ £(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¢ ¢(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java° °(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java† †(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaü ü(2´
Porg.jabref.logic.importer.fetcher.DoiFetcher.performSearchById(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∞  ∞(12s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≥ ≥( 2≠
Rorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≥A ≥(R2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaû  û((2£
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java™ ™(+2®
Morg.jabref.logic.importer.FetcherException.FetcherException(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∞\ ∞(l2±
Vorg.jabref.logic.importer.fetcher.ArXivFetcherTest?importFormatPreferences@44.43:44.66CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaØC Ø(Z2Ú
ñorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromUserAssignedDOI()?modifiedDoiFetcher@559.19:559.37CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∞ ∞(2±
Vorg.jabref.logic.importer.fetcher.ArXivFetcherTest?importFormatPreferences@44.43:44.66CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≤I ≤(`2Ú
ñorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromUserAssignedDOI()?modifiedDoiFetcher@559.19:559.37CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≤b ≤(t2Ë
åorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromUserAssignedDOI()?expected@542.17:542.25CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≥! ≥()2Ù
òorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromUserAssignedDOI()?modifiedArXivFetcher@562.21:562.41CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≥, ≥(@2Ô
åorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromUserAssignedDOI()?expected@542.17:542.25DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaû û(2˘
ñorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromUserAssignedDOI()?modifiedDoiFetcher@559.19:559.37DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaØ Ø(%2˚
òorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromUserAssignedDOI()?modifiedArXivFetcher@562.21:562.41DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≤ ≤()2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaù ù(Ö3
åorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromUserAssignedDOI()?expected@542.17:542.25VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaû û("
typeBibEntry"
isFinalfalse"Ö
declarationStringÔ<mark class="modifier"> </mark>BibEntry <mark class="class-field">expected</mark> = new BibEntry(StandardEntryType.Article).withField(StandardField.AUTHOR, "Zheng, Hai and Ho, Po-Yi and Jiang, Meiling and Tang, Bin and Liu, Weirong and Li, Dengjin and Yu, Xuefeng and Kleckner, Nancy E. and Amir, Ariel and Liu, Chenli").withField(StandardField.TITLE, "Interrogating the Escherichia coli cell cycle by cell dimension perturbations").withField(StandardField.DATE, "2017-01-03").withField(StandardField.JOURNAL, "PNAS December 27, 2016 vol. 113 no. 52 15000-15005").withField(StandardField.ABSTRACT, "Bacteria tightly regulate and coordinate the various events in their cell cycles to duplicate themselves accurately and to control their cell sizes. Growth of Escherichia coli, in particular, follows a relation known as Schaechter 's growth law. This law says that the average cell volume scales exponentially with growth rate, with a scaling exponent equal to the time from initiation of a round of DNA replication to the cell division at which the corresponding sister chromosomes segregate. Here, we sought to test the robustness of the growth law to systematic perturbations in cell dimensions achieved by varying the expression levels of mreB and ftsZ. We found that decreasing the mreB level resulted in increased cell width, with little change in cell length, whereas decreasing the ftsZ level resulted in increased cell length. Furthermore, the time from replication termination to cell division increased with the perturbed dimension in both cases. Moreover, the growth law remained valid over a range of growth conditions and dimension perturbations. The growth law can be quantitatively interpreted as a consequence of a tight coupling of cell division to replication initiation. Thus, its robustness to perturbations in cell dimensions strongly supports models in which the timing of replication initiation governs that of cell division, and cell volume is the key phenomenological variable governing the timing of replication initiation. These conclusions are discussed in the context of our recently proposed adder-per-origin model, in which cells add a constant volume per origin between initiations and divide a constant time after initiation.").withField(StandardField.DOI, "10.1073/pnas.1617932114").withField(StandardField.EPRINT, "1701.00587").withField(StandardField.FILE, ":http\\://arxiv.org/pdf/1701.00587v1:PDF").withField(StandardField.EPRINTTYPE, "arXiv").withField(StandardField.EPRINTCLASS, "q-bio.CB").withField(StandardField.KEYWORDS, "Cell Behavior (q-bio.CB)<mark class="modifier">,</mark> FOS: Biological sciences").withField(new UnknownField("copyright")<mark class="modifier">,</mark> "arXiv.org perpetual, non-exclusive license").withField(InternalField.KEY_FIELD, "https://doi.org/10.48550/arxiv.1701.00587").withField(StandardField.YEAR, "2017").withField(StandardField.PUBLISHER, "arXiv")*expected2z
org.jabref.model.entry.BibEntryTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaû û(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≠ ≠(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¨ ¨(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java´ ´(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java™ ™(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java© ©(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java® ®(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaß ß(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¶ ¶(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java• •(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java§ §(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java£ £(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¢ ¢(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java° °(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java† †(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaü ü(2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaû  û((2£
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java™ ™(+õ
ñorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromUserAssignedDOI()?modifiedDoiFetcher@559.19:559.37VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaØ Ø(%"
type
DoiFetcher"
isFinalfalse"™
declarationStringî<mark class="modifier"> </mark>DoiFetcher <mark class="class-field">modifiedDoiFetcher</mark> = Mockito.spy(new DoiFetcher(importFormatPreferences))*modifiedDoiFetcher2á
,org.jabref.logic.importer.fetcher.DoiFetcherTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaØ Ø(2±
Vorg.jabref.logic.importer.fetcher.ArXivFetcherTest?importFormatPreferences@44.43:44.66CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaØC Ø(Z≤
òorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromUserAssignedDOI()?modifiedArXivFetcher@562.21:562.41VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≤ ≤()"
typeArXivFetcher"
isFinalfalse"ƒ
declarationStringÆ<mark class="modifier"> </mark>ArXivFetcher <mark class="class-field">modifiedArXivFetcher</mark> = Mockito.spy(new ArXivFetcher(importFormatPreferences, modifiedDoiFetcher))*modifiedArXivFetcher2â
.org.jabref.logic.importer.fetcher.ArXivFetcherTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≤ ≤(2±
Vorg.jabref.logic.importer.fetcher.ArXivFetcherTest?importFormatPreferences@44.43:44.66CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≤I ≤(`2Ú
ñorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromUserAssignedDOI()?modifiedDoiFetcher@559.19:559.37CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≤b ≤(t8
vorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromArXivAssignedDOI()METHODQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∑ ∑(Q"
isFinalfalse"ª
declarationString•<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">retrievePartialResultWhenCannotGetInformationFromArXivAssignedDOI</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*AretrievePartialResultWhenCannotGetInformationFromArXivAssignedDOI2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÀ À(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java   (2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java… …(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java» »(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java« «(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∆ ∆(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≈ ≈(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaƒ ƒ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java√ √(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¬ ¬(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¡ ¡(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¿ ¿(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaø ø(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaæ æ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaΩ Ω(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaº º(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaª ª(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∫ ∫(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaπ π(2´
Porg.jabref.logic.importer.fetcher.DoiFetcher.performSearchById(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŒ  Œ(12s
java.util.Optional.of(T)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java— —( 2≠
Rorg.jabref.logic.importer.fetcher.ArXivFetcher.performSearchById(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java—A —(R2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∏  ∏((2®
Morg.jabref.logic.importer.FetcherException.FetcherException(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŒ^ Œ(n2±
Vorg.jabref.logic.importer.fetcher.ArXivFetcherTest?importFormatPreferences@44.43:44.66CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÕC Õ(Z2Û
óorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromArXivAssignedDOI()?modifiedDoiFetcher@589.19:589.37CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaŒ Œ(2±
Vorg.jabref.logic.importer.fetcher.ArXivFetcherTest?importFormatPreferences@44.43:44.66CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java–I –(`2Û
óorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromArXivAssignedDOI()?modifiedDoiFetcher@589.19:589.37CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java–b –(t2È
çorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromArXivAssignedDOI()?expected@568.17:568.25CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java—! —()2ı
ôorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromArXivAssignedDOI()?modifiedArXivFetcher@592.21:592.41CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java—, —(@2
çorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromArXivAssignedDOI()?expected@568.17:568.25DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∏ ∏(2˙
óorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromArXivAssignedDOI()?modifiedDoiFetcher@589.19:589.37DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÕ Õ(%2¸
ôorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromArXivAssignedDOI()?modifiedArXivFetcher@592.21:592.41DECLARATIONQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java– –()2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∑ ∑(Á7
çorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromArXivAssignedDOI()?expected@568.17:568.25VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∏ ∏("
typeBibEntry"
isFinalfalse"ò
declarationStringÇ<mark class="modifier"> </mark>BibEntry <mark class="class-field">expected</mark> = new BibEntry(StandardEntryType.Article).withField(StandardField.AUTHOR, "Hai Zheng and Po-Yi Ho and Meiling Jiang and Bin Tang and Weirong Liu and Dengjin Li and Xuefeng Yu and Nancy E. Kleckner and Ariel Amir and Chenli Liu").withField(StandardField.TITLE, "Interrogating the Escherichia coli cell cycle by cell dimension perturbations").withField(StandardField.DATE, "2017-01-03").withField(StandardField.JOURNAL, "PNAS December 27, 2016 vol. 113 no. 52 15000-15005").withField(StandardField.ABSTRACT, "Bacteria tightly regulate and coordinate the various events in their cell cycles to duplicate themselves accurately and to control their cell sizes. Growth of Escherichia coli, in particular, follows a relation known as Schaechter 's growth law. This law says that the average cell volume scales exponentially with growth rate, with a scaling exponent equal to the time from initiation of a round of DNA replication to the cell division at which the corresponding sister chromosomes segregate. Here, we sought to test the robustness of the growth law to systematic perturbations in cell dimensions achieved by varying the expression levels of mreB and ftsZ. We found that decreasing the mreB level resulted in increased cell width, with little change in cell length, whereas decreasing the ftsZ level resulted in increased cell length. Furthermore, the time from replication termination to cell division increased with the perturbed dimension in both cases. Moreover, the growth law remained valid over a range of growth conditions and dimension perturbations. The growth law can be quantitatively interpreted as a consequence of a tight coupling of cell division to replication initiation. Thus, its robustness to perturbations in cell dimensions strongly supports models in which the timing of replication initiation governs that of cell division, and cell volume is the key phenomenological variable governing the timing of replication initiation. These conclusions are discussed in the context of our recently proposed adder-per-origin model, in which cells add a constant volume per origin between initiations and divide a constant time after initiation.").withField(StandardField.DOI, "10.1073/pnas.1617932114").withField(StandardField.ISSN, "1091-6490").withField(StandardField.EPRINT, "1701.00587").withField(StandardField.FILE, ":http\\://arxiv.org/pdf/1701.00587v1:PDF").withField(StandardField.EPRINTTYPE, "arXiv").withField(StandardField.EPRINTCLASS, "q-bio.CB").withField(StandardField.KEYWORDS, "q-bio.CB").withField(StandardField.MONTH, "#dec#").withField(StandardField.YEAR, "2016").withField(StandardField.VOLUME, "113").withField(InternalField.KEY_FIELD, "Zheng_2016").withField(StandardField.PUBLISHER, "Proceedings of the National Academy of Sciences").withField(StandardField.PAGES, "15000--15005").withField(StandardField.NUMBER, "52")*expected2z
org.jabref.model.entry.BibEntryTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∏ ∏(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÀ À(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java   (2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java… …(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java» »(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java« «(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∆ ∆(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java≈ ≈(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaƒ ƒ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java√ √(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¬ ¬(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¡ ¡(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java¿ ¿(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaø ø(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaæ æ(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaΩ Ω(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaº º(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaª ª(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∫ ∫(2∫
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaπ π(2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java∏  ∏((ú
óorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromArXivAssignedDOI()?modifiedDoiFetcher@589.19:589.37VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÕ Õ(%"
type
DoiFetcher"
isFinalfalse"™
declarationStringî<mark class="modifier"> </mark>DoiFetcher <mark class="class-field">modifiedDoiFetcher</mark> = Mockito.spy(new DoiFetcher(importFormatPreferences))*modifiedDoiFetcher2á
,org.jabref.logic.importer.fetcher.DoiFetcherTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÕ Õ(2±
Vorg.jabref.logic.importer.fetcher.ArXivFetcherTest?importFormatPreferences@44.43:44.66CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.javaÕC Õ(Z¥
ôorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromArXivAssignedDOI()?modifiedArXivFetcher@592.21:592.41VARIABLEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java– –()"
typeArXivFetcher"
isFinalfalse"ƒ
declarationStringÆ<mark class="modifier"> </mark>ArXivFetcher <mark class="class-field">modifiedArXivFetcher</mark> = Mockito.spy(new ArXivFetcher(importFormatPreferences, modifiedDoiFetcher))*modifiedArXivFetcher2â
.org.jabref.logic.importer.fetcher.ArXivFetcherTYPEQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java– –(2±
Vorg.jabref.logic.importer.fetcher.ArXivFetcherTest?importFormatPreferences@44.43:44.66CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java–I –(`2Û
óorg.jabref.logic.importer.fetcher.ArXivFetcherTest.retrievePartialResultWhenCannotGetInformationFromArXivAssignedDOI()?modifiedDoiFetcher@589.19:589.37CALLQ
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java–b –(t 
Vorg.jabref.logic.importer.fetcher.ArXivFetcherTest?importFormatPreferences@44.43:44.66VARIABLEO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java,+ ,(B"
isFinalfalse"
typeImportFormatPreferences"±
declarationStringõ<mark class="modifier">private </mark><mark class="modifier">static </mark>ImportFormatPreferences <mark class="class-field">importFormatPreferences</mark>"
isStatictrue"
accessprivate*importFormatPreferences2p
ImportFormatPreferencesTYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java, ,(*ˆ
Forg.jabref.logic.importer.fetcher.ArXivFetcherTest?fetcher@46.25:46.32VARIABLEO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java. .( "
isFinalfalse"
typeArXivFetcher"p
declarationString[<mark class="modifier">private </mark>ArXivFetcher <mark class="class-field">fetcher</mark>"
isStaticfalse"
accessprivate*fetcher2á
.org.jabref.logic.importer.fetcher.ArXivFetcherTYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java. .(ÿ
Dorg.jabref.logic.importer.fetcher.ArXivFetcherTest?entry@47.21:47.26VARIABLEO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java/ /("
isFinalfalse"
typeBibEntry"j
declarationStringU<mark class="modifier">private </mark>BibEntry <mark class="class-field">entry</mark>"
isStaticfalse"
accessprivate*entry2x
org.jabref.model.entry.BibEntryTYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java/ /(¸
Porg.jabref.logic.importer.fetcher.ArXivFetcherTest?sliceTheoremPaper@48.21:48.38VARIABLEO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java0 0(&"
isFinalfalse"
typeBibEntry"v
declarationStringa<mark class="modifier">private </mark>BibEntry <mark class="class-field">sliceTheoremPaper</mark>"
isStaticfalse"
accessprivate*sliceTheoremPaper2x
org.jabref.model.entry.BibEntryTYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java0 0(¸
Porg.jabref.logic.importer.fetcher.ArXivFetcherTest?mainOriginalPaper@50.21:50.38VARIABLEO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java2 2(&"
isFinalfalse"
typeBibEntry"v
declarationStringa<mark class="modifier">private </mark>BibEntry <mark class="class-field">mainOriginalPaper</mark>"
isStaticfalse"
accessprivate*mainOriginalPaper2x
org.jabref.model.entry.BibEntryTYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java2 2(ˆ
Norg.jabref.logic.importer.fetcher.ArXivFetcherTest?mainResultPaper@51.21:51.36VARIABLEO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java3 3($"
isFinalfalse"
typeBibEntry"t
declarationString_<mark class="modifier">private </mark>BibEntry <mark class="class-field">mainResultPaper</mark>"
isStaticfalse"
accessprivate*mainResultPaper2x
org.jabref.model.entry.BibEntryTYPEO
Esrc\test\java\org\jabref\logic\importer\fetcher\ArXivFetcherTest.java3 3(