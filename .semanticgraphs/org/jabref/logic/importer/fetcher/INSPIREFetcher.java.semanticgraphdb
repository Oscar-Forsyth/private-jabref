
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaˇ
0org.jabref.logic.importer.fetcher.INSPIREFetcherCLASSM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java$ $(",
package!org.jabref.logic.importer.fetcher"
isFinalfalse"
inner classfalse"

isAbstractfalse"≈
declarationStringØ<mark class="modifier">public </mark><mark class="modifier">class </mark>INSPIREFetcher<mark class="modifier"><br>implements </mark>SearchBasedParserFetcher, EntryBasedFetcher"
accesspublic*INSPIREFetcher2l
INSPIREFetcherDECLARATIONM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java, ,(2ò
:org.jabref.logic.importer.fetcher.INSPIREFetcher.getName()DECLARATIONM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java1 1(2ú
>org.jabref.logic.importer.fetcher.INSPIREFetcher.getHelpPage()DECLARATIONM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java6 6()2⁄
|org.jabref.logic.importer.fetcher.INSPIREFetcher.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)DECLARATIONM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java; ;(2´
Morg.jabref.logic.importer.fetcher.INSPIREFetcher.getUrlDownload(java.net.URL)DECLARATIONM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaB B(%2Ω
_org.jabref.logic.importer.fetcher.INSPIREFetcher.doPostCleanup(org.jabref.model.entry.BibEntry)DECLARATIONM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaI I(2ö
<org.jabref.logic.importer.fetcher.INSPIREFetcher.getParser()DECLARATIONM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaT T(2Ω
_org.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)DECLARATIONM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaY Y('2ß
Iorg.jabref.logic.importer.fetcher.INSPIREFetcher?INSPIRE_HOST@38.32:38.44DECLARATIONM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java&  &(,2´
Morg.jabref.logic.importer.fetcher.INSPIREFetcher?INSPIRE_DOI_HOST@39.32:39.48DECLARATIONM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java'  '(02≠
Oorg.jabref.logic.importer.fetcher.INSPIREFetcher?INSPIRE_ARXIV_HOST@40.32:40.50DECLARATIONM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java(  ((22≤
Torg.jabref.logic.importer.fetcher.INSPIREFetcher?importFormatPreferences@42.42:42.65DECLARATIONM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java** *(A2ã
2org.jabref.logic.importer.SearchBasedParserFetcherEXTENDM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java$' $(?2Ñ
+org.jabref.logic.importer.EntryBasedFetcherEXTENDM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java$A $(R«
INSPIREFetcherCONSTRUCTORM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java, ,("â
declarationStringt<mark class="modifier">public </mark><mark class="method">INSPIREFetcher</mark>(ImportFormatPreferences preferences)*INSPIREFetcher2´
Torg.jabref.logic.importer.fetcher.INSPIREFetcher?importFormatPreferences@42.42:42.65CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java- -($2é
0org.jabref.logic.importer.fetcher.INSPIREFetcherRETURN_TYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java, ,(—
preferences	PARAMETERM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java,2 ,(="
typeImportFormatPreferences"
isFinalfalse"8
declarationString#ImportFormatPreferences preferences*preferences2n
ImportFormatPreferencesTYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java, ,(1ó
:org.jabref.logic.importer.fetcher.INSPIREFetcher.getName()METHODM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java1 1("
isFinalfalse"î
declarationString<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>String <mark class="method">getName</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*getName2â
.org.jabref.logic.importer.WebFetcher.getName()OVERRIDEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java1 1(2â
.org.jabref.logic.importer.WebFetcher.getName()OVERRIDEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java1 1(2n
java.lang.StringRETURN_TYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java1 1(≈
>org.jabref.logic.importer.fetcher.INSPIREFetcher.getHelpPage()METHODM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java6 6()"
isFinalfalse"´
declarationStringï<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>Optional&lt;HelpFile&gt; <mark class="method">getHelpPage</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeOptional<HelpFile>*getHelpPage2o
java.util.Optional.of(T)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java7 7(2ç
2org.jabref.logic.importer.WebFetcher.getHelpPage()OVERRIDEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java6 6()2ç
2org.jabref.logic.importer.WebFetcher.getHelpPage()OVERRIDEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java6 6()2p
java.util.OptionalRETURN_TYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java6 6(2Ö
org.jabref.logic.help.HelpFileRETURN_TYPE_ARGUMENTM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java6 6(≥
|org.jabref.logic.importer.fetcher.INSPIREFetcher.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)METHODM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java; ;("
isFinalfalse"•
declarationStringè<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>URL <mark class="method">getURLForQuery</mark>(QueryNode luceneQuery)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>URISyntaxException<mark class="modifier"><mark class="modifier">,</mark></mark> MalformedURLException<mark class="modifier"><mark class="modifier">,</mark></mark> FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeURL*getURLForQuery2√
lorg.jabref.logic.importer.fetcher.transformers.DefaultLuceneQueryTransformer.DefaultLuceneQueryTransformer()CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java=) =(F2†
Iorg.jabref.logic.importer.fetcher.INSPIREFetcher?INSPIRE_HOST@38.32:38.44CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java</ <(;2Î
ìorg.jabref.logic.importer.fetcher.INSPIREFetcher.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)?uriBuilder@60.19:60.29CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java= =(2‡
àorg.jabref.logic.importer.fetcher.INSPIREFetcher.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)!luceneQueryCALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java=^ =(i2Î
ìorg.jabref.logic.importer.fetcher.INSPIREFetcher.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)?uriBuilder@60.19:60.29CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java> >(2Ÿ
~org.jabref.logic.importer.SearchBasedParserFetcher.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)OVERRIDEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java; ;(2Â
àorg.jabref.logic.importer.fetcher.INSPIREFetcher.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)!luceneQuery	PARAMETERM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java;( ;(32Ú
ìorg.jabref.logic.importer.fetcher.INSPIREFetcher.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)?uriBuilder@60.19:60.29DECLARATIONM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java< <(2j
java.net.URLRETURN_TYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java; ;(–
ìorg.jabref.logic.importer.fetcher.INSPIREFetcher.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)?uriBuilder@60.19:60.29VARIABLEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java< <("
type
URIBuilder"
isFinalfalse"â
declarationStringt<mark class="modifier"> </mark>URIBuilder <mark class="class-field">uriBuilder</mark> = new URIBuilder(INSPIRE_HOST)*
uriBuilder2~
'org.apache.http.client.utils.URIBuilderTYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java< <(2†
Iorg.jabref.logic.importer.fetcher.INSPIREFetcher?INSPIRE_HOST@38.32:38.44CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java</ <(;ÿ
àorg.jabref.logic.importer.fetcher.INSPIREFetcher.getURLForQuery(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)!luceneQuery	PARAMETERM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java;( ;(3"
type	QueryNode"
isFinalfalse"*
declarationStringQueryNode luceneQuery*luceneQuery2í
;org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeTYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java; ;('“
Morg.jabref.logic.importer.fetcher.INSPIREFetcher.getUrlDownload(java.net.URL)METHODM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaB B(%"
isFinalfalse"®
declarationStringí<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>URLDownload <mark class="method">getUrlDownload</mark>(URL url)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeURLDownload*getUrlDownload2•
Norg.jabref.logic.net.URLDownload.addHeader(java.lang.String, java.lang.String)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaD D(2ë
:org.jabref.logic.net.URLDownload.URLDownload(java.net.URL)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaC# C(.2®
Qorg.jabref.logic.importer.fetcher.INSPIREFetcher.getUrlDownload(java.net.URL)!urlCALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaC/ C(22π
borg.jabref.logic.importer.fetcher.INSPIREFetcher.getUrlDownload(java.net.URL)?download@67.20:67.28CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaD D(2π
borg.jabref.logic.importer.fetcher.INSPIREFetcher.getUrlDownload(java.net.URL)?download@67.20:67.28CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaE E(2ú
Aorg.jabref.logic.importer.WebFetcher.getUrlDownload(java.net.URL)OVERRIDEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaB B(%2ú
Aorg.jabref.logic.importer.WebFetcher.getUrlDownload(java.net.URL)OVERRIDEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaB B(%2≠
Qorg.jabref.logic.importer.fetcher.INSPIREFetcher.getUrlDownload(java.net.URL)!url	PARAMETERM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaB* B(-2¿
borg.jabref.logic.importer.fetcher.INSPIREFetcher.getUrlDownload(java.net.URL)?download@67.20:67.28DECLARATIONM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaC C(2~
 org.jabref.logic.net.URLDownloadRETURN_TYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaB B(©
borg.jabref.logic.importer.fetcher.INSPIREFetcher.getUrlDownload(java.net.URL)?download@67.20:67.28VARIABLEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaC C("
typeURLDownload"
isFinalfalse"Ä
declarationStringk<mark class="modifier"> </mark>URLDownload <mark class="class-field">download</mark> = new URLDownload(url)*download2w
 org.jabref.logic.net.URLDownloadTYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaC C(2ë
:org.jabref.logic.net.URLDownload.URLDownload(java.net.URL)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaC# C(.2®
Qorg.jabref.logic.importer.fetcher.INSPIREFetcher.getUrlDownload(java.net.URL)!urlCALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaC/ C(2‘
Qorg.jabref.logic.importer.fetcher.INSPIREFetcher.getUrlDownload(java.net.URL)!url	PARAMETERM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaB* B(-"
typeURL"
isFinalfalse"
declarationStringURL url*url2c
java.net.URLTYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaB& B()Ò
_org.jabref.logic.importer.fetcher.INSPIREFetcher.doPostCleanup(org.jabref.model.entry.BibEntry)METHODM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaI I("
isFinalfalse"≈
declarationStringØ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">doPostCleanup</mark>(BibEntry entry)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*doPostCleanup2Æ
Worg.jabref.logic.cleanup.FieldFormatterCleanup.cleanup(org.jabref.model.entry.BibEntry)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaKZ K(a2Æ
Worg.jabref.logic.cleanup.FieldFormatterCleanup.cleanup(org.jabref.model.entry.BibEntry)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaNT N([2Æ
Worg.jabref.logic.cleanup.FieldFormatterCleanup.cleanup(org.jabref.model.entry.BibEntry)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaPV P(]2‰
åorg.jabref.logic.cleanup.FieldFormatterCleanup.FieldFormatterCleanup(org.jabref.model.entry.field.Field, org.jabref.logic.cleanup.Formatter)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaK K(!2ü
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaK& K(22û
Gorg.jabref.logic.formatter.bibtexfields.ClearFormatter.ClearFormatter()CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaKH K(V2‰
åorg.jabref.logic.cleanup.FieldFormatterCleanup.FieldFormatterCleanup(org.jabref.model.entry.field.Field, org.jabref.logic.cleanup.Formatter)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaN N(!2¨
Uorg.jabref.logic.formatter.bibtexfields.RemoveBracesFormatter.RemoveBracesFormatter()CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaN; N(P2‰
åorg.jabref.logic.cleanup.FieldFormatterCleanup.FieldFormatterCleanup(org.jabref.model.entry.field.Field, org.jabref.logic.cleanup.Formatter)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaP P(!2ß
Porg.jabref.logic.layout.format.LatexToUnicodeFormatter.LatexToUnicodeFormatter()CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaP; P(R2º
eorg.jabref.logic.importer.fetcher.INSPIREFetcher.doPostCleanup(org.jabref.model.entry.BibEntry)!entryCALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaKb K(g2º
eorg.jabref.logic.importer.fetcher.INSPIREFetcher.doPostCleanup(org.jabref.model.entry.BibEntry)!entryCALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaN\ N(a2º
eorg.jabref.logic.importer.fetcher.INSPIREFetcher.doPostCleanup(org.jabref.model.entry.BibEntry)!entryCALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaP^ P(c2º
aorg.jabref.logic.importer.SearchBasedParserFetcher.doPostCleanup(org.jabref.model.entry.BibEntry)OVERRIDEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaI I(2¡
eorg.jabref.logic.importer.fetcher.INSPIREFetcher.doPostCleanup(org.jabref.model.entry.BibEntry)!entry	PARAMETERM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaI' I(,2b
voidRETURN_TYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaI I(â
eorg.jabref.logic.importer.fetcher.INSPIREFetcher.doPostCleanup(org.jabref.model.entry.BibEntry)!entry	PARAMETERM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaI' I(,"
typeBibEntry"
isFinalfalse"#
declarationStringBibEntry entry*entry2v
org.jabref.model.entry.BibEntryTYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaI I(&‡
<org.jabref.logic.importer.fetcher.INSPIREFetcher.getParser()METHODM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaT T("
isFinalfalse"ó
declarationStringÅ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>Parser <mark class="method">getParser</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeParser*	getParser2´
Torg.jabref.logic.importer.fetcher.INSPIREFetcher?importFormatPreferences@42.42:42.65CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaU  U(72ô
>org.jabref.logic.importer.SearchBasedParserFetcher.getParser()OVERRIDEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaT T(2~
 org.jabref.logic.importer.ParserRETURN_TYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaT T(ŸH
_org.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)METHODM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaY Y('"
isFinalfalse"ã
declarationStringı<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>List&lt;BibEntry&gt; <mark class="method">performSearch</mark>(BibEntry entry)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>FetcherException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeList<BibEntry>*performSearch2£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java[% [(-2™
Sorg.jabref.model.entry.BibEntry.getFieldOrAlias(org.jabref.model.entry.field.Field)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java\/ \(>2£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java]( ](02u
java.util.Optional.isPresent()CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java`2 `(;2ô
Bjava.util.Optional.filter(java.util.function.Predicate<? super T>)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java` `( 2u
java.util.Optional.isPresent()CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java`H `(Q2o
java.util.Optional.get()CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaa. a(12u
java.util.Optional.isPresent()CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javab b( 2o
java.util.Optional.get()CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javac) c(,2§
Morg.jabref.logic.importer.fetcher.INSPIREFetcher.getUrlDownload(java.net.URL)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javai# i(12k
java.net.URI.toURL()CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javai? i(D2ô
Borg.jabref.logic.importer.Parser.parseEntries(java.io.InputStream)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaj" j(.2ì
<org.jabref.logic.importer.fetcher.INSPIREFetcher.getParser()CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaj j(2á
0org.jabref.logic.net.URLDownload.asInputStream()CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaj8 j(E2ô
Bjava.lang.Iterable.forEach(java.util.function.Consumer<? super T>)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javak k(2v
java.util.ArrayList.ArrayList()CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaZ% Z(02y
"java.net.URI.URI(java.lang.String)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javai6 i(92π
borg.jabref.logic.importer.FetcherException.FetcherException(java.lang.String, java.lang.Throwable)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javan n(&2º
eorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)!entryCALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java[ [($2º
eorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)!entryCALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java\) \(.2º
eorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)!entryCALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java]" ]('2–
yorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?archiveprefix@92.25:92.38CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java` `(2…
rorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?eprint@93.25:93.31CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java`A `(G2∆
oorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?url@94.15:94.18CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaa a(2¶
Oorg.jabref.logic.importer.fetcher.INSPIREFetcher?INSPIRE_ARXIV_HOST@40.32:40.50CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaa a($2…
rorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?eprint@93.25:93.31CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaa' a(-2∆
oorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?doi@91.25:91.28CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javab b(2∆
oorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?url@94.15:94.18CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javac c(2§
Morg.jabref.logic.importer.fetcher.INSPIREFetcher?INSPIRE_DOI_HOST@39.32:39.48CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javac c("2∆
oorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?doi@91.25:91.28CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javac% c((2 
sorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?results@90.23:90.30CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javae e(2∆
oorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?url@94.15:94.18CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javai: i(=2 
sorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?results@90.23:90.30CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaj j(2Õ
vorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?download@105.24:105.32CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaj/ j(72 
sorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?results@90.23:90.30CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javak k(2 
sorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?results@90.23:90.30CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javal l(2∆
oorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?e@109.67:109.68CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javanI n(J2Ä
)java.lang.String.equals(java.lang.Object)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java`! `(02∂
_org.jabref.logic.importer.fetcher.INSPIREFetcher.doPostCleanup(org.jabref.model.entry.BibEntry)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javak k(/2µ
Zorg.jabref.logic.importer.EntryBasedFetcher.performSearch(org.jabref.model.entry.BibEntry)OVERRIDEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaY Y('2¡
eorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)!entry	PARAMETERM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaY1 Y(62—
sorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?results@90.23:90.30DECLARATIONM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaZ Z(2Õ
oorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?doi@91.25:91.28DECLARATIONM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java[ [(2◊
yorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?archiveprefix@92.25:92.38DECLARATIONM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java\ \(&2–
rorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?eprint@93.25:93.31DECLARATIONM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java] ](2Õ
oorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?url@94.15:94.18DECLARATIONM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java^ ^(2‘
vorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?download@105.24:105.32DECLARATIONM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javai i( 2Õ
oorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?e@109.67:109.68DECLARATIONM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javamC m(D2l
java.util.ListRETURN_TYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaY Y(2Ü
org.jabref.model.entry.BibEntryRETURN_TYPE_ARGUMENTM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaY Y(‚
sorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?results@90.23:90.30VARIABLEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaZ Z("
typeList<BibEntry>"
isFinalfalse"
declarationStringj<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">results</mark> = new ArrayList<>()*results2e
java.util.ListTYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaZ Z(2
org.jabref.model.entry.BibEntryTYPE_ARGUMENTM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaZ Z(2v
java.util.ArrayList.ArrayList()CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaZ% Z(0Õ
oorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?doi@91.25:91.28VARIABLEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java[ [("
typeOptional<String>"
isFinalfalse"ç
declarationStringx<mark class="modifier"> </mark>Optional<String> <mark class="class-field">doi</mark> = entry.getField(StandardField.DOI)*doi2i
java.util.OptionalTYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java[ [(2p
java.lang.StringTYPE_ARGUMENTM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java[ [(2£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java[% [(-2º
eorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)!entryCALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java[ [($Ñ
yorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?archiveprefix@92.25:92.38VARIABLEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java\ \(&"
typeOptional<String>"
isFinalfalse"©
declarationStringì<mark class="modifier"> </mark>Optional<String> <mark class="class-field">archiveprefix</mark> = entry.getFieldOrAlias(StandardField.ARCHIVEPREFIX)*archiveprefix2i
java.util.OptionalTYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java\ \(2p
java.lang.StringTYPE_ARGUMENTM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java\ \(2™
Sorg.jabref.model.entry.BibEntry.getFieldOrAlias(org.jabref.model.entry.field.Field)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java\/ \(>2º
eorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)!entryCALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java\) \(.Ÿ
rorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?eprint@93.25:93.31VARIABLEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java] ]("
typeOptional<String>"
isFinalfalse"ì
declarationString~<mark class="modifier"> </mark>Optional<String> <mark class="class-field">eprint</mark> = entry.getField(StandardField.EPRINT)*eprint2i
java.util.OptionalTYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java] ](2p
java.lang.StringTYPE_ARGUMENTM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java] ](2£
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java]( ](02º
eorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)!entryCALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java]" ]('ª
oorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?url@94.15:94.18VARIABLEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java^ ^("
typeString"
isFinalfalse"_
declarationStringJ<mark class="modifier"> </mark>String <mark class="class-field">url</mark>*url2g
java.lang.StringTYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java^ ^(Ê
vorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?download@105.24:105.32VARIABLEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javai i( "
typeURLDownload"
isFinalfalse"ê
declarationString{<mark class="modifier"> </mark>URLDownload <mark class="class-field">download</mark> = getUrlDownload(new URI(url).toURL())*download2w
 org.jabref.logic.net.URLDownloadTYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javai i(2§
Morg.jabref.logic.importer.fetcher.INSPIREFetcher.getUrlDownload(java.net.URL)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javai# i(12k
java.net.URI.toURL()CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javai? i(D2y
"java.net.URI.URI(java.lang.String)CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javai6 i(92∆
oorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?url@94.15:94.18CALLM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javai: i(=â
eorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)!entry	PARAMETERM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaY1 Y(6"
typeBibEntry"
isFinalfalse"#
declarationStringBibEntry entry*entry2v
org.jabref.model.entry.BibEntryTYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javaY( Y(0ö
oorg.jabref.logic.importer.fetcher.INSPIREFetcher.performSearch(org.jabref.model.entry.BibEntry)?e@109.67:109.68VARIABLEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javamC m(D"9
type1IOException | ParseException | URISyntaxException"
isFinalfalse"H
declarationString3IOException | ParseException | URISyntaxException e*e2≥
\java.io.IOException | org.jabref.logic.importer.ParseException | java.net.URISyntaxExceptionTYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.javam m(B∆
Iorg.jabref.logic.importer.fetcher.INSPIREFetcher?INSPIRE_HOST@38.32:38.44VALUEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java&  &(,"
isFinaltrue"
typeString"Â
declarationStringœ<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>String <mark class="class-field">INSPIRE_HOST</mark> = "https://inspirehep.net/api/literature/";"
isStatictrue"
accessprivate*INSPIRE_HOST2g
java.lang.StringTYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java& &(À
Morg.jabref.logic.importer.fetcher.INSPIREFetcher?INSPIRE_DOI_HOST@39.32:39.48VALUEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java'  '(0"
isFinaltrue"
typeString"‚
declarationStringÃ<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>String <mark class="class-field">INSPIRE_DOI_HOST</mark> = "https://inspirehep.net/api/doi/";"
isStatictrue"
accessprivate*INSPIRE_DOI_HOST2g
java.lang.StringTYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java' '(”
Oorg.jabref.logic.importer.fetcher.INSPIREFetcher?INSPIRE_ARXIV_HOST@40.32:40.50VALUEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java(  ((2"
isFinaltrue"
typeString"Ê
declarationString–<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>String <mark class="class-field">INSPIRE_ARXIV_HOST</mark> = "https://inspirehep.net/api/arxiv/";"
isStatictrue"
accessprivate*INSPIRE_ARXIV_HOST2g
java.lang.StringTYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java( ((¿
Torg.jabref.logic.importer.fetcher.INSPIREFetcher?importFormatPreferences@42.42:42.65VALUEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java** *(A"
isFinaltrue"
typeImportFormatPreferences"∞
declarationStringö<mark class="modifier">private </mark><mark class="modifier">final </mark>ImportFormatPreferences <mark class="class-field">importFormatPreferences</mark>"
isStaticfalse"
accessprivate*importFormatPreferences2n
ImportFormatPreferencesTYPEM
Csrc\main\java\org\jabref\logic\importer\fetcher\INSPIREFetcher.java* *()