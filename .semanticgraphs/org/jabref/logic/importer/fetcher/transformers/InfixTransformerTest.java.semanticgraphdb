
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaÑ
Corg.jabref.logic.importer.fetcher.transformers.InfixTransformerTestCLASS`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java (*"9
package.org.jabref.logic.importer.fetcher.transformers"
isFinalfalse"
inner classfalse"

isAbstracttrue"ö
declarationStringÑ<mark class="modifier">public </mark><mark class="modifier">abstract </mark><mark class="modifier">class </mark>InfixTransformerTest"
accesspublic*InfixTransformerTest2≈
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java ('2∆
Uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getAuthorPrefix()DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java ($2…
Xorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getUnFieldedPrefix()DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java ('2«
Vorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getJournalPrefix()DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java (%2≈
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTitlePrefix()DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java! !(#2œ
^org.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertAuthorFieldPrefix()DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java& &((2—
`org.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertUnFieldedTermPrefix()DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java/ /(*2Ÿ
horg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertExplicitUnFieldedTermPrefix()DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java8 8(22–
_org.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertJournalFieldPrefix()DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaA A()2«
Vorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertYearField()DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaJ J()2Ã
[org.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertYearRangeField()DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaM M(.2‚
qorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertMultipleValuesWithTheSameFieldPrefix()DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaP P(;2Œ
]org.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.groupedOperationsPrefix()DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaY Y('2»
Worg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.notOperatorPrefix()DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javab b(!2π
Eorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.TTYPE_PARAMETER`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java+ (,†
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()METHOD`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java ('"
isFinalfalse"Ä
declarationStringÍ<mark class="modifier">protected </mark><mark class="modifier">abstract </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends AbstractQueryTransformer</mark></mark>&gt; T <mark class="method">getTransformer</mark>()"
isStaticfalse"
access	protected"

isAbstracttrue"	
typeT*getTransformer2r
TRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java (ó
Uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getAuthorPrefix()METHOD`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java ($"
isFinalfalse"ﬂ
declarationString…<mark class="modifier">protected </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends AbstractQueryTransformer</mark></mark>&gt; String <mark class="method">getAuthorPrefix</mark>()"
isStaticfalse"
access	protected"

isAbstractfalse"
typeString*getAuthorPrefix2Å
java.lang.StringRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java (†
Xorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getUnFieldedPrefix()METHOD`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java ('"
isFinalfalse"‚
declarationStringÃ<mark class="modifier">protected </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends AbstractQueryTransformer</mark></mark>&gt; String <mark class="method">getUnFieldedPrefix</mark>()"
isStaticfalse"
access	protected"

isAbstractfalse"
typeString*getUnFieldedPrefix2Å
java.lang.StringRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java (ö
Vorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getJournalPrefix()METHOD`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java (%"
isFinalfalse"‡
declarationString <mark class="modifier">protected </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends AbstractQueryTransformer</mark></mark>&gt; String <mark class="method">getJournalPrefix</mark>()"
isStaticfalse"
access	protected"

isAbstractfalse"
typeString*getJournalPrefix2Å
java.lang.StringRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java (î
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTitlePrefix()METHOD`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java! !(#"
isFinalfalse"ﬁ
declarationString»<mark class="modifier">protected </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends AbstractQueryTransformer</mark></mark>&gt; String <mark class="method">getTitlePrefix</mark>()"
isStaticfalse"
access	protected"

isAbstractfalse"
typeString*getTitlePrefix2Å
java.lang.StringRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java! !(Ê
^org.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertAuthorFieldPrefix()METHOD`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java& &(("
isFinalfalse"¯
declarationString‚<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends AbstractQueryTransformer</mark></mark>&gt; <mark class="modifier">void</mark> <mark class="method">convertAuthorFieldPrefix</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*convertAuthorFieldPrefix2æ
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java)' )(52Ç
java.util.Optional.of(T)CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java*- *(/2ø
Uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getAuthorPrefix()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java*0 *(?2‡
vorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertAuthorFieldPrefix()?queryString@39.15:39.26CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java(A ((L2‡
vorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertAuthorFieldPrefix()?luceneQuery@40.18:40.29CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java)M )(X2›
sorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertAuthorFieldPrefix()?expected@42.25:42.33CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java+ +(2‡
vorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertAuthorFieldPrefix()?searchQuery@41.25:41.36CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java+ +(*2Á
vorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertAuthorFieldPrefix()?queryString@39.15:39.26DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java' '(2Á
vorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertAuthorFieldPrefix()?luceneQuery@40.18:40.29DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java( ((2Á
vorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertAuthorFieldPrefix()?searchQuery@41.25:41.36DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java) )($2‰
sorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertAuthorFieldPrefix()?expected@42.25:42.33DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java* *(!2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java& &(ô
vorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertAuthorFieldPrefix()?queryString@39.15:39.26VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java' '("
typeString"
isFinalfalse"á
declarationStringr<mark class="modifier"> </mark>String <mark class="class-field">queryString</mark> = "author:\"Igor Steinmacher\""*queryString2z
java.lang.StringTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java' '(Î
vorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertAuthorFieldPrefix()?luceneQuery@40.18:40.29VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java( (("
type	QueryNode"
isFinalfalse"«
declarationString±<mark class="modifier"> </mark>QueryNode <mark class="class-field">luceneQuery</mark> = new StandardSyntaxParser().parse(queryString, AbstractQueryTransformer.NO_EXPLICIT_FIELD)*luceneQuery2•
;org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java( ((2‡
vorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertAuthorFieldPrefix()?queryString@39.15:39.26CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java(A ((LÔ
vorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertAuthorFieldPrefix()?searchQuery@41.25:41.36VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java) )($"
typeOptional<String>"
isFinalfalse"ß
declarationStringë<mark class="modifier"> </mark>Optional<String> <mark class="class-field">searchQuery</mark> = getTransformer().transformLuceneQuery(luceneQuery)*searchQuery2|
java.util.OptionalTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java) )(2É
java.lang.StringTYPE_ARGUMENT`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java) )(2æ
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java)' )(52‡
vorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertAuthorFieldPrefix()?luceneQuery@40.18:40.29CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java)M )(Xé
sorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertAuthorFieldPrefix()?expected@42.25:42.33VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java* *(!"
typeOptional<String>"
isFinalfalse"©
declarationStringì<mark class="modifier"> </mark>Optional<String> <mark class="class-field">expected</mark> = Optional.of(getAuthorPrefix() + "\"Igor Steinmacher\"")*expected2|
java.util.OptionalTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java* *(2É
java.lang.StringTYPE_ARGUMENT`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java* *(2Ç
java.util.Optional.of(T)CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java*- *(/2ø
Uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getAuthorPrefix()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java*0 *(?‰
`org.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertUnFieldedTermPrefix()METHOD`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java/ /(*"
isFinalfalse"˙
declarationString‰<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends AbstractQueryTransformer</mark></mark>&gt; <mark class="modifier">void</mark> <mark class="method">convertUnFieldedTermPrefix</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*convertUnFieldedTermPrefix2æ
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java2' 2(52Ç
java.util.Optional.of(T)CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java3- 3(/2¬
Xorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getUnFieldedPrefix()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java30 3(B2‚
xorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertUnFieldedTermPrefix()?queryString@48.15:48.26CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java1A 1(L2‚
xorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertUnFieldedTermPrefix()?luceneQuery@49.18:49.29CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java2M 2(X2‚
xorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertUnFieldedTermPrefix()?queryString@48.15:48.26CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java3G 3(R2ﬂ
uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertUnFieldedTermPrefix()?expected@51.25:51.33CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java4 4(2‚
xorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertUnFieldedTermPrefix()?searchQuery@50.25:50.36CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java4 4(*2È
xorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertUnFieldedTermPrefix()?queryString@48.15:48.26DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java0 0(2È
xorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertUnFieldedTermPrefix()?luceneQuery@49.18:49.29DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java1 1(2È
xorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertUnFieldedTermPrefix()?searchQuery@50.25:50.36DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java2 2($2Ê
uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertUnFieldedTermPrefix()?expected@51.25:51.33DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java3 3(!2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java/ /(∞
xorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertUnFieldedTermPrefix()?queryString@48.15:48.26VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java0 0("
typeString"
isFinalfalse"ú
declarationStringÜ<mark class="modifier"> </mark>String <mark class="class-field">queryString</mark> = "\"<mark class="modifier">default</mark> value\""*queryString2z
java.lang.StringTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java0 0(Ô
xorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertUnFieldedTermPrefix()?luceneQuery@49.18:49.29VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java1 1("
type	QueryNode"
isFinalfalse"«
declarationString±<mark class="modifier"> </mark>QueryNode <mark class="class-field">luceneQuery</mark> = new StandardSyntaxParser().parse(queryString, AbstractQueryTransformer.NO_EXPLICIT_FIELD)*luceneQuery2•
;org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java1 1(2‚
xorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertUnFieldedTermPrefix()?queryString@48.15:48.26CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java1A 1(LÛ
xorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertUnFieldedTermPrefix()?searchQuery@50.25:50.36VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java2 2($"
typeOptional<String>"
isFinalfalse"ß
declarationStringë<mark class="modifier"> </mark>Optional<String> <mark class="class-field">searchQuery</mark> = getTransformer().transformLuceneQuery(luceneQuery)*searchQuery2|
java.util.OptionalTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java2 2(2É
java.lang.StringTYPE_ARGUMENT`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java2 2(2æ
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java2' 2(52‚
xorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertUnFieldedTermPrefix()?luceneQuery@49.18:49.29CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java2M 2(X	
uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertUnFieldedTermPrefix()?expected@51.25:51.33VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java3 3(!"
typeOptional<String>"
isFinalfalse"°
declarationStringã<mark class="modifier"> </mark>Optional<String> <mark class="class-field">expected</mark> = Optional.of(getUnFieldedPrefix() + queryString)*expected2|
java.util.OptionalTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java3 3(2É
java.lang.StringTYPE_ARGUMENT`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java3 3(2Ç
java.util.Optional.of(T)CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java3- 3(/2¬
Xorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getUnFieldedPrefix()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java30 3(B2‚
xorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertUnFieldedTermPrefix()?queryString@48.15:48.26CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java3G 3(R›
horg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertExplicitUnFieldedTermPrefix()METHOD`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java8 8(2"
isFinalfalse"Ç
declarationStringÏ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends AbstractQueryTransformer</mark></mark>&gt; <mark class="modifier">void</mark> <mark class="method">convertExplicitUnFieldedTermPrefix</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*"convertExplicitUnFieldedTermPrefix2æ
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java;' ;(52Ç
java.util.Optional.of(T)CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java<- <(/2¬
Xorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getUnFieldedPrefix()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java<0 <(B2Î
Äorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertExplicitUnFieldedTermPrefix()?queryString@57.15:57.26CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java:A :(L2Î
Äorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertExplicitUnFieldedTermPrefix()?luceneQuery@58.18:58.29CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java;M ;(X2Á
}org.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertExplicitUnFieldedTermPrefix()?expected@60.25:60.33CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java= =(2Î
Äorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertExplicitUnFieldedTermPrefix()?searchQuery@59.25:59.36CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java= =(*2Ú
Äorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertExplicitUnFieldedTermPrefix()?queryString@57.15:57.26DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java9 9(2Ú
Äorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertExplicitUnFieldedTermPrefix()?luceneQuery@58.18:58.29DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java: :(2Ú
Äorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertExplicitUnFieldedTermPrefix()?searchQuery@59.25:59.36DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java; ;($2Ó
}org.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertExplicitUnFieldedTermPrefix()?expected@60.25:60.33DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java< <(!2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java8 8(ﬂ
Äorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertExplicitUnFieldedTermPrefix()?queryString@57.15:57.26VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java9 9("
typeString"
isFinalfalse"¬
declarationString¨<mark class="modifier"> </mark>String <mark class="class-field">queryString</mark> = "<mark class="modifier">default</mark>:\"<mark class="modifier">default</mark> value\""*queryString2z
java.lang.StringTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java9 9(Å
Äorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertExplicitUnFieldedTermPrefix()?luceneQuery@58.18:58.29VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java: :("
type	QueryNode"
isFinalfalse"«
declarationString±<mark class="modifier"> </mark>QueryNode <mark class="class-field">luceneQuery</mark> = new StandardSyntaxParser().parse(queryString, AbstractQueryTransformer.NO_EXPLICIT_FIELD)*luceneQuery2•
;org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java: :(2Î
Äorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertExplicitUnFieldedTermPrefix()?queryString@57.15:57.26CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java:A :(LÖ	
Äorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertExplicitUnFieldedTermPrefix()?searchQuery@59.25:59.36VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java; ;($"
typeOptional<String>"
isFinalfalse"ß
declarationStringë<mark class="modifier"> </mark>Optional<String> <mark class="class-field">searchQuery</mark> = getTransformer().transformLuceneQuery(luceneQuery)*searchQuery2|
java.util.OptionalTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java; ;(2É
java.lang.StringTYPE_ARGUMENT`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java; ;(2æ
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java;' ;(52Î
Äorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertExplicitUnFieldedTermPrefix()?luceneQuery@58.18:58.29CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java;M ;(Xπ
}org.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertExplicitUnFieldedTermPrefix()?expected@60.25:60.33VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java< <(!"
typeOptional<String>"
isFinalfalse"«
declarationString±<mark class="modifier"> </mark>Optional<String> <mark class="class-field">expected</mark> = Optional.of(getUnFieldedPrefix() + "\"<mark class="modifier">default</mark> value\"")*expected2|
java.util.OptionalTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java< <(2É
java.lang.StringTYPE_ARGUMENT`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java< <(2Ç
java.util.Optional.of(T)CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java<- <(/2¬
Xorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getUnFieldedPrefix()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java<0 <(BÚ
_org.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertJournalFieldPrefix()METHOD`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaA A()"
isFinalfalse"˘
declarationString„<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends AbstractQueryTransformer</mark></mark>&gt; <mark class="modifier">void</mark> <mark class="method">convertJournalFieldPrefix</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*convertJournalFieldPrefix2æ
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaD' D(52Ç
java.util.Optional.of(T)CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaE- E(/2¿
Vorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getJournalPrefix()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaE0 E(@2·
worg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertJournalFieldPrefix()?queryString@66.15:66.26CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaCA C(L2·
worg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertJournalFieldPrefix()?luceneQuery@67.18:67.29CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaDM D(X2ﬁ
torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertJournalFieldPrefix()?expected@69.25:69.33CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaF F(2·
worg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertJournalFieldPrefix()?searchQuery@68.25:68.36CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaF F(*2Ë
worg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertJournalFieldPrefix()?queryString@66.15:66.26DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaB B(2Ë
worg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertJournalFieldPrefix()?luceneQuery@67.18:67.29DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaC C(2Ë
worg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertJournalFieldPrefix()?searchQuery@68.25:68.36DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaD D($2Â
torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertJournalFieldPrefix()?expected@69.25:69.33DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaE E(!2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaA A(å
worg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertJournalFieldPrefix()?queryString@66.15:66.26VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaB B("
typeString"
isFinalfalse"z
declarationStringe<mark class="modifier"> </mark>String <mark class="class-field">queryString</mark> = "journal:Nature"*queryString2z
java.lang.StringTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaB B(Ì
worg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertJournalFieldPrefix()?luceneQuery@67.18:67.29VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaC C("
type	QueryNode"
isFinalfalse"«
declarationString±<mark class="modifier"> </mark>QueryNode <mark class="class-field">luceneQuery</mark> = new StandardSyntaxParser().parse(queryString, AbstractQueryTransformer.NO_EXPLICIT_FIELD)*luceneQuery2•
;org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaC C(2·
worg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertJournalFieldPrefix()?queryString@66.15:66.26CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaCA C(LÒ
worg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertJournalFieldPrefix()?searchQuery@68.25:68.36VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaD D($"
typeOptional<String>"
isFinalfalse"ß
declarationStringë<mark class="modifier"> </mark>Optional<String> <mark class="class-field">searchQuery</mark> = getTransformer().transformLuceneQuery(luceneQuery)*searchQuery2|
java.util.OptionalTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaD D(2É
java.lang.StringTYPE_ARGUMENT`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaD D(2æ
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaD' D(52·
worg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertJournalFieldPrefix()?luceneQuery@67.18:67.29CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaDM D(XÉ
torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertJournalFieldPrefix()?expected@69.25:69.33VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaE E(!"
typeOptional<String>"
isFinalfalse"ú
declarationStringÜ<mark class="modifier"> </mark>Optional<String> <mark class="class-field">expected</mark> = Optional.of(getJournalPrefix() + "Nature")*expected2|
java.util.OptionalTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaE E(2É
java.lang.StringTYPE_ARGUMENT`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaE E(2Ç
java.util.Optional.of(T)CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaE- E(/2¿
Vorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getJournalPrefix()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaE0 E(@æ
Vorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertYearField()METHOD`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaJ J()"
isFinalfalse"ó
declarationStringÅ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">abstract </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends AbstractQueryTransformer</mark></mark>&gt; <mark class="modifier">void</mark> <mark class="method">convertYearField</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstracttrue"
typevoid*convertYearField2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaJ J(Õ
[org.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertYearRangeField()METHOD`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaM M(."
isFinalfalse"ú
declarationStringÜ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">abstract </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends AbstractQueryTransformer</mark></mark>&gt; <mark class="modifier">void</mark> <mark class="method">convertYearRangeField</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstracttrue"
typevoid*convertYearRangeField2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaM M(ø
qorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertMultipleValuesWithTheSameFieldPrefix()METHOD`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaP P(;"
isFinalfalse"ã
declarationStringı<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends AbstractQueryTransformer</mark></mark>&gt; <mark class="modifier">void</mark> <mark class="method">convertMultipleValuesWithTheSameFieldPrefix</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*+convertMultipleValuesWithTheSameFieldPrefix2æ
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaS' S(52ø
Uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getAuthorPrefix()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaT0 T(?2æ
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaT] T(k2¡
Uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getAuthorPrefix()CALLb
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaTà T(ó2Ù
âorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertMultipleValuesWithTheSameFieldPrefix()?queryString@81.15:81.26CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaRA R(L2Ù
âorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertMultipleValuesWithTheSameFieldPrefix()?luceneQuery@82.18:82.29CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaSM S(X2Ò
Üorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertMultipleValuesWithTheSameFieldPrefix()?expected@84.25:84.33CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaU U(2Ù
âorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertMultipleValuesWithTheSameFieldPrefix()?searchQuery@83.25:83.36CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaU U(*2˚
âorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertMultipleValuesWithTheSameFieldPrefix()?queryString@81.15:81.26DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaQ Q(2˚
âorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertMultipleValuesWithTheSameFieldPrefix()?luceneQuery@82.18:82.29DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaR R(2˚
âorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertMultipleValuesWithTheSameFieldPrefix()?searchQuery@83.25:83.36DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaS S($2¯
Üorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertMultipleValuesWithTheSameFieldPrefix()?expected@84.25:84.33DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaT T(!2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaP P( 
âorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertMultipleValuesWithTheSameFieldPrefix()?queryString@81.15:81.26VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaQ Q("
typeString"
isFinalfalse"§
declarationStringé<mark class="modifier"> </mark>String <mark class="class-field">queryString</mark> = "author:\"Igor Steinmacher\" author:\"Christoph Treude\""*queryString2z
java.lang.StringTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaQ Q(ì
âorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertMultipleValuesWithTheSameFieldPrefix()?luceneQuery@82.18:82.29VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaR R("
type	QueryNode"
isFinalfalse"«
declarationString±<mark class="modifier"> </mark>QueryNode <mark class="class-field">luceneQuery</mark> = new StandardSyntaxParser().parse(queryString, AbstractQueryTransformer.NO_EXPLICIT_FIELD)*luceneQuery2•
;org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaR R(2Ù
âorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertMultipleValuesWithTheSameFieldPrefix()?queryString@81.15:81.26CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaRA R(Ló	
âorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertMultipleValuesWithTheSameFieldPrefix()?searchQuery@83.25:83.36VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaS S($"
typeOptional<String>"
isFinalfalse"ß
declarationStringë<mark class="modifier"> </mark>Optional<String> <mark class="class-field">searchQuery</mark> = getTransformer().transformLuceneQuery(luceneQuery)*searchQuery2|
java.util.OptionalTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaS S(2É
java.lang.StringTYPE_ARGUMENT`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaS S(2æ
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaS' S(52Ù
âorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertMultipleValuesWithTheSameFieldPrefix()?luceneQuery@82.18:82.29CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaSM S(X˙

Üorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertMultipleValuesWithTheSameFieldPrefix()?expected@84.25:84.33VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaT T(!"
typeOptional<String>"
isFinalfalse"Å
declarationStringÎ<mark class="modifier"> </mark>Optional<String> <mark class="class-field">expected</mark> = Optional.of(getAuthorPrefix() + "\"Igor Steinmacher\"" + getTransformer().getLogicalAndOperator() + getAuthorPrefix() + "\"Christoph Treude\"")*expected2|
java.util.OptionalTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaT T(2É
java.lang.StringTYPE_ARGUMENT`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaT T(2ø
Uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getAuthorPrefix()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaT0 T(?2æ
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaT] T(k2¡
Uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getAuthorPrefix()CALLb
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaTà T(óË 
]org.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.groupedOperationsPrefix()METHOD`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaY Y('"
isFinalfalse"˜
declarationString·<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends AbstractQueryTransformer</mark></mark>&gt; <mark class="modifier">void</mark> <mark class="method">groupedOperationsPrefix</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*groupedOperationsPrefix2æ
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java\' \(52ø
Uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getAuthorPrefix()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java]6 ](E2æ
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java]c ](q2¡
Uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getAuthorPrefix()CALLb
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java]ì ](¢2¿
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALLb
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java]¿ ](Œ2¡
Uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getAuthorPrefix()CALLb
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java]Î ](˙2¿
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALLb
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java]õ ](©2¿
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTitlePrefix()CALLb
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java]∆ ](‘2ﬂ
uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.groupedOperationsPrefix()?queryString@90.15:90.26CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java[A [(L2ﬂ
uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.groupedOperationsPrefix()?luceneQuery@91.18:91.29CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java\M \(X2‹
rorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.groupedOperationsPrefix()?expected@93.25:93.33CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java^ ^(2ﬂ
uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.groupedOperationsPrefix()?searchQuery@92.25:92.36CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java^ ^(*2Ê
uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.groupedOperationsPrefix()?queryString@90.15:90.26DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaZ Z(2Ê
uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.groupedOperationsPrefix()?luceneQuery@91.18:91.29DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java[ [(2Ê
uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.groupedOperationsPrefix()?searchQuery@92.25:92.36DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java\ \($2„
rorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.groupedOperationsPrefix()?expected@93.25:93.33DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java] ](!2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaY Y(Í
uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.groupedOperationsPrefix()?queryString@90.15:90.26VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaZ Z("
typeString"
isFinalfalse"Ÿ
declarationString√<mark class="modifier"> </mark>String <mark class="class-field">queryString</mark> = "(author:\"Igor Steinmacher\" OR author:\"Christoph Treude\" AND author:\"Christoph Freunde\") AND title:test"*queryString2z
java.lang.StringTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaZ Z(È
uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.groupedOperationsPrefix()?luceneQuery@91.18:91.29VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java[ [("
type	QueryNode"
isFinalfalse"«
declarationString±<mark class="modifier"> </mark>QueryNode <mark class="class-field">luceneQuery</mark> = new StandardSyntaxParser().parse(queryString, AbstractQueryTransformer.NO_EXPLICIT_FIELD)*luceneQuery2•
;org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java[ [(2ﬂ
uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.groupedOperationsPrefix()?queryString@90.15:90.26CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java[A [(LÌ
uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.groupedOperationsPrefix()?searchQuery@92.25:92.36VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java\ \($"
typeOptional<String>"
isFinalfalse"ß
declarationStringë<mark class="modifier"> </mark>Optional<String> <mark class="class-field">searchQuery</mark> = getTransformer().transformLuceneQuery(luceneQuery)*searchQuery2|
java.util.OptionalTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java\ \(2É
java.lang.StringTYPE_ARGUMENT`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java\ \(2æ
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java\' \(52ﬂ
uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.groupedOperationsPrefix()?luceneQuery@91.18:91.29CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java\M \(Xü
rorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.groupedOperationsPrefix()?expected@93.25:93.33VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java] ](!"
typeOptional<String>"
isFinalfalse"Æ
declarationStringò<mark class="modifier"> </mark>Optional<String> <mark class="class-field">expected</mark> = Optional.of("(" + getAuthorPrefix() + "\"Igor Steinmacher\"" + getTransformer().getLogicalOrOperator() + "(" + getAuthorPrefix() + "\"Christoph Treude\"" + getTransformer().getLogicalAndOperator() + getAuthorPrefix() + "\"Christoph Freunde\"))" + getTransformer().getLogicalAndOperator() + getTitlePrefix() + "test")*expected2|
java.util.OptionalTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java] ](2É
java.lang.StringTYPE_ARGUMENT`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java] ](2ø
Uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getAuthorPrefix()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java]6 ](E2æ
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java]c ](q2¡
Uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getAuthorPrefix()CALLb
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java]ì ](¢2¿
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALLb
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java]¿ ](Œ2¡
Uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getAuthorPrefix()CALLb
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java]Î ](˙2¿
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALLb
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java]õ ](©2¿
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTitlePrefix()CALLb
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java]∆ ](‘Ë
Worg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.notOperatorPrefix()METHOD`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javab b(!"
isFinalfalse"Ò
declarationString€<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark>&lt;<mark class="modifier"><mark class="type-parameter">T extends AbstractQueryTransformer</mark></mark>&gt; <mark class="modifier">void</mark> <mark class="method">notOperatorPrefix</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*notOperatorPrefix2æ
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javae' e(52æ
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaf0 f(>2ø
Uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getAuthorPrefix()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javafa f(p2¿
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALLb
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javafé f(ú2¡
Uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getAuthorPrefix()CALLb
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaf∏ f(«2Ÿ
oorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.notOperatorPrefix()?queryString@99.15:99.26CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javadA d(L2€
qorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.notOperatorPrefix()?luceneQuery@100.18:100.29CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaeM e(X2ÿ
norg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.notOperatorPrefix()?expected@102.25:102.33CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javag g(2€
qorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.notOperatorPrefix()?searchQuery@101.25:101.36CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javag g(*2‡
oorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.notOperatorPrefix()?queryString@99.15:99.26DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javac c(2‚
qorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.notOperatorPrefix()?luceneQuery@100.18:100.29DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javad d(2‚
qorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.notOperatorPrefix()?searchQuery@101.25:101.36DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javae e($2ﬂ
norg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.notOperatorPrefix()?expected@102.25:102.33DECLARATION`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaf f(!2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javab b(µ
oorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.notOperatorPrefix()?queryString@99.15:99.26VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javac c("
typeString"
isFinalfalse"™
declarationStringî<mark class="modifier"> </mark>String <mark class="class-field">queryString</mark> = "!(author:\"Igor Steinmacher\" OR author:\"Christoph Treude\")"*queryString2z
java.lang.StringTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javac c(ﬂ
qorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.notOperatorPrefix()?luceneQuery@100.18:100.29VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javad d("
type	QueryNode"
isFinalfalse"«
declarationString±<mark class="modifier"> </mark>QueryNode <mark class="class-field">luceneQuery</mark> = new StandardSyntaxParser().parse(queryString, AbstractQueryTransformer.NO_EXPLICIT_FIELD)*luceneQuery2•
;org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javad d(2Ÿ
oorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.notOperatorPrefix()?queryString@99.15:99.26CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javadA d(LÂ
qorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.notOperatorPrefix()?searchQuery@101.25:101.36VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javae e($"
typeOptional<String>"
isFinalfalse"ß
declarationStringë<mark class="modifier"> </mark>Optional<String> <mark class="class-field">searchQuery</mark> = getTransformer().transformLuceneQuery(luceneQuery)*searchQuery2|
java.util.OptionalTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javae e(2É
java.lang.StringTYPE_ARGUMENT`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javae e(2æ
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javae' e(52€
qorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.notOperatorPrefix()?luceneQuery@100.18:100.29CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaeM e(X’
norg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.notOperatorPrefix()?expected@102.25:102.33VARIABLE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaf f(!"
typeOptional<String>"
isFinalfalse"≤
declarationStringú<mark class="modifier"> </mark>Optional<String> <mark class="class-field">expected</mark> = Optional.of(getTransformer().getLogicalNotOperator() + "(" + getAuthorPrefix() + "\"Igor Steinmacher\"" + getTransformer().getLogicalOrOperator() + getAuthorPrefix() + "\"Christoph Treude\")")*expected2|
java.util.OptionalTYPE`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaf f(2É
java.lang.StringTYPE_ARGUMENT`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaf f(2æ
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaf0 f(>2ø
Uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getAuthorPrefix()CALL`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javafa f(p2¿
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTransformer()CALLb
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javafé f(ú2¡
Uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getAuthorPrefix()CALLb
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.javaf∏ f(«º
Eorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.TTYPE_PARAMETER`
Vsrc\test\java\org\jabref\logic\importer\fetcher\transformers\InfixTransformerTest.java+ (,*T