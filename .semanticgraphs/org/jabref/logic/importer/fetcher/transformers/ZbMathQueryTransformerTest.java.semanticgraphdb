
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.javaé
Iorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTestCLASSf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java	 	( "9
package.org.jabref.logic.importer.fetcher.transformers"
isFinalfalse"
inner classfalse"

isAbstractfalse"∆
declarationString∞<mark class="modifier"> </mark><mark class="modifier">class </mark>ZbMathQueryTransformerTest<mark class="modifier"> extends </mark>InfixTransformerTest<ZbMathQueryTransformer>"
accesspackage_private*ZbMathQueryTransformerTest2—
Zorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.getTransformer()DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java" (02“
[org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.getAuthorPrefix()DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java (!2’
^org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.getUnFieldedPrefix()DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java ($2”
\org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.getJournalPrefix()DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java ("2—
Zorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.getTitlePrefix()DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java   ( 2”
\org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearField()DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java% %( 2ÿ
aorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearRangeField()DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java. .(%2µ
Corg.jabref.logic.importer.fetcher.transformers.InfixTransformerTestEXTENDf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java	) 	(=2≈
Eorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerEXTEND_TYPE_ARGUMENTf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java	> 	(Tá
Zorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.getTransformer()METHODf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java" (0"
isFinalfalse"¨
declarationStringñ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>ZbMathQueryTransformer <mark class="method">getTransformer</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeZbMathQueryTransformer*getTransformer2Œ
^org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformer.ZbMathQueryTransformer()CALLf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java ()2º
Eorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerRETURN_TYPEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java (!∞
[org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.getAuthorPrefix()METHODf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java (!"
isFinalfalse"ù
declarationStringá<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>String <mark class="method">getAuthorPrefix</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*getAuthorPrefix2…
Uorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getAuthorPrefix()OVERRIDEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java (!2á
java.lang.StringRETURN_TYPEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java (º
^org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.getUnFieldedPrefix()METHODf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java ($"
isFinalfalse"†
declarationStringä<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>String <mark class="method">getUnFieldedPrefix</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*getUnFieldedPrefix2Ã
Xorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getUnFieldedPrefix()OVERRIDEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java ($2á
java.lang.StringRETURN_TYPEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java (¥
\org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.getJournalPrefix()METHODf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java (""
isFinalfalse"û
declarationStringà<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>String <mark class="method">getJournalPrefix</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*getJournalPrefix2 
Vorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getJournalPrefix()OVERRIDEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java ("2á
java.lang.StringRETURN_TYPEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java (¨
Zorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.getTitlePrefix()METHODf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java   ( "
isFinalfalse"ú
declarationStringÜ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>String <mark class="method">getTitlePrefix</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*getTitlePrefix2»
Torg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.getTitlePrefix()OVERRIDEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java   ( 2á
java.lang.StringRETURN_TYPEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java   (¥
\org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearField()METHODf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java% %( "
isFinalfalse"á
declarationStringÒ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">convertYearField</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*convertYearField2 
Zorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.getTransformer()CALLf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java(' ((52à
java.util.Optional.of(T)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java)- )(/2‰
torg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearField()?queryString@38.15:38.26CALLf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java'A '(L2‰
torg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearField()?luceneQuery@39.18:39.29CALLf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java(M ((X2·
qorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearField()?expected@41.25:41.33CALLf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java* *(2‰
torg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearField()?searchQuery@40.25:40.36CALLf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java* *(*2 
Vorg.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertYearField()OVERRIDEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java% %( 2Î
torg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearField()?queryString@38.15:38.26DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java& &(2Î
torg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearField()?luceneQuery@39.18:39.29DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java' '(2Î
torg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearField()?searchQuery@40.25:40.36DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java( (($2Ë
qorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearField()?expected@41.25:41.33DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java) )(!2{
voidRETURN_TYPEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java% %(ë
torg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearField()?queryString@38.15:38.26VARIABLEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java& &("
typeString"
isFinalfalse"u
declarationString`<mark class="modifier"> </mark>String <mark class="class-field">queryString</mark> = "year:2015"*queryString2Ä
java.lang.StringTYPEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java& &(˘
torg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearField()?luceneQuery@39.18:39.29VARIABLEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java' '("
type	QueryNode"
isFinalfalse"«
declarationString±<mark class="modifier"> </mark>QueryNode <mark class="class-field">luceneQuery</mark> = new StandardSyntaxParser().parse(queryString, AbstractQueryTransformer.NO_EXPLICIT_FIELD)*luceneQuery2´
;org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeTYPEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java' '(2‰
torg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearField()?queryString@38.15:38.26CALLf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java'A '(Lê	
torg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearField()?searchQuery@40.25:40.36VARIABLEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java( (($"
typeOptional<String>"
isFinalfalse"ß
declarationStringë<mark class="modifier"> </mark>Optional<String> <mark class="class-field">searchQuery</mark> = getTransformer().transformLuceneQuery(luceneQuery)*searchQuery2Ç
java.util.OptionalTYPEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java( ((2â
java.lang.StringTYPE_ARGUMENTf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java( ((2 
Zorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.getTransformer()CALLf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java(' ((52‰
torg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearField()?luceneQuery@39.18:39.29CALLf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java(M ((X¡
qorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearField()?expected@41.25:41.33VARIABLEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java) )(!"
typeOptional<String>"
isFinalfalse"á
declarationStringr<mark class="modifier"> </mark>Optional<String> <mark class="class-field">expected</mark> = Optional.of("py:2015")*expected2Ç
java.util.OptionalTYPEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java) )(2â
java.lang.StringTYPE_ARGUMENTf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java) )(2à
java.util.Optional.of(T)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java)- )(/
aorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearRangeField()METHODf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java. .(%"
isFinalfalse"å
declarationStringˆ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">convertYearRangeField</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*convertYearRangeField2 
Zorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.getTransformer()CALLf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java1' 1(52à
java.util.Optional.of(T)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java2- 2(/2È
yorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearRangeField()?queryString@47.15:47.26CALLf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java0A 0(L2È
yorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearRangeField()?luceneQuery@48.18:48.29CALLf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java1M 1(X2Ê
vorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearRangeField()?expected@50.25:50.33CALLf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java3 3(2È
yorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearRangeField()?searchQuery@49.25:49.36CALLf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java3 3(*2œ
[org.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertYearRangeField()OVERRIDEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java. .(%2
yorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearRangeField()?queryString@47.15:47.26DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java/ /(2
yorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearRangeField()?luceneQuery@48.18:48.29DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java0 0(2
yorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearRangeField()?searchQuery@49.25:49.36DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java1 1($2Ì
vorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearRangeField()?expected@50.25:50.33DECLARATIONf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java2 2(!2{
voidRETURN_TYPEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java. .(¢
yorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearRangeField()?queryString@47.15:47.26VARIABLEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java/ /("
typeString"
isFinalfalse"Ä
declarationStringk<mark class="modifier"> </mark>String <mark class="class-field">queryString</mark> = "year-range:2012-2015"*queryString2Ä
java.lang.StringTYPEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java/ /(É
yorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearRangeField()?luceneQuery@48.18:48.29VARIABLEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java0 0("
type	QueryNode"
isFinalfalse"«
declarationString±<mark class="modifier"> </mark>QueryNode <mark class="class-field">luceneQuery</mark> = new StandardSyntaxParser().parse(queryString, AbstractQueryTransformer.NO_EXPLICIT_FIELD)*luceneQuery2´
;org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeTYPEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java0 0(2È
yorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearRangeField()?queryString@47.15:47.26CALLf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java0A 0(Lö	
yorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearRangeField()?searchQuery@49.25:49.36VARIABLEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java1 1($"
typeOptional<String>"
isFinalfalse"ß
declarationStringë<mark class="modifier"> </mark>Optional<String> <mark class="class-field">searchQuery</mark> = getTransformer().transformLuceneQuery(luceneQuery)*searchQuery2Ç
java.util.OptionalTYPEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java1 1(2â
java.lang.StringTYPE_ARGUMENTf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java1 1(2 
Zorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.getTransformer()CALLf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java1' 1(52È
yorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearRangeField()?luceneQuery@48.18:48.29CALLf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java1M 1(XÀ
vorg.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearRangeField()?expected@50.25:50.33VARIABLEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java2 2(!"
typeOptional<String>"
isFinalfalse"å
declarationStringw<mark class="modifier"> </mark>Optional<String> <mark class="class-field">expected</mark> = Optional.of("py:2012-2015")*expected2Ç
java.util.OptionalTYPEf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java2 2(2â
java.lang.StringTYPE_ARGUMENTf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java2 2(2à
java.util.Optional.of(T)CALLf
\src\test\java\org\jabref\logic\importer\fetcher\transformers\ZbMathQueryTransformerTest.java2- 2(/