
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaæ
*org.jabref.logic.importer.ParserResultTestCLASSG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java ("$
packageorg.jabref.logic.importer"
isFinalfalse"
inner classfalse"

isAbstractfalse"h
declarationStringS<mark class="modifier"> </mark><mark class="modifier">class </mark>ParserResultTest"
accesspackage_private*ParserResultTest2ù
Eorg.jabref.logic.importer.ParserResultTest.isEmptyForNewParseResult()DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java	 (!2©
Qorg.jabref.logic.importer.ParserResultTest.isNotEmptyForBibDatabaseWithOneEntry()DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java	 (-2£
Korg.jabref.logic.importer.ParserResultTest.warningsAddedMatchErrorMessage()DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java$ $(.2°
Iorg.jabref.logic.importer.ParserResultTest.hasEmptyMessageForNoWarnings()DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java, ,(,2°
Iorg.jabref.logic.importer.ParserResultTest.doesNotHaveDuplicateWarnings()DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java2 2(,2√
korg.jabref.logic.importer.ParserResultTest.warningAddedForWhitespaceInCitationKeyImport(java.nio.file.Path)DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java: :(<2≈
morg.jabref.logic.importer.ParserResultTest.warningAddedForMissingCommaInCitationKeyImport(java.nio.file.Path)DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaM M(>2¬
jorg.jabref.logic.importer.ParserResultTest.warningAddedForCorruptedCitationKeyInImport(java.nio.file.Path)DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java` `(;2∏
`org.jabref.logic.importer.ParserResultTest.skipsImportEntryForImproperSyntax(java.nio.file.Path)DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javas s(1ò	
Eorg.jabref.logic.importer.ParserResultTest.isEmptyForNewParseResult()METHODG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java	 (!"
isFinalfalse"∏
declarationString¢<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">isEmptyForNewParseResult</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*isEmptyForNewParseResult2Å
0org.jabref.logic.importer.ParserResult.isEmpty()CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java ( 2Ü
5org.jabref.logic.importer.ParserResult.ParserResult()CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java! (-2®
Worg.jabref.logic.importer.ParserResultTest.isEmptyForNewParseResult()?empty@23.21:23.26CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java (2Ø
Worg.jabref.logic.importer.ParserResultTest.isEmptyForNewParseResult()?empty@23.21:23.26DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java (2\
voidRETURN_TYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java (€
Worg.jabref.logic.importer.ParserResultTest.isEmptyForNewParseResult()?empty@23.21:23.26VARIABLEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java ("
typeParserResult"
isFinalfalse"|
declarationStringg<mark class="modifier"> </mark>ParserResult <mark class="class-field">empty</mark> = new ParserResult()*empty2w
&org.jabref.logic.importer.ParserResultTYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java (2Ü
5org.jabref.logic.importer.ParserResult.ParserResult()CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java! (-ù
Qorg.jabref.logic.importer.ParserResultTest.isNotEmptyForBibDatabaseWithOneEntry()METHODG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java	 (-"
isFinalfalse"ƒ
declarationStringÆ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">isNotEmptyForBibDatabaseWithOneEntry</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*$isNotEmptyForBibDatabaseWithOneEntry2e
java.util.List.of(E)CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java7 (92Å
0org.jabref.logic.importer.ParserResult.isEmpty()CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java !  ((2{
*org.jabref.model.entry.BibEntry.BibEntry()CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java  ((2≥
borg.jabref.model.database.BibDatabase.BibDatabase(java.util.List<org.jabref.model.entry.BibEntry>)CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java& (12´
Zorg.jabref.logic.importer.ParserResult.ParserResult(org.jabref.model.database.BibDatabase)CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java( (42∑
forg.jabref.logic.importer.ParserResultTest.isNotEmptyForBibDatabaseWithOneEntry()?bibEntry@29.17:29.25CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java: (B2∫
iorg.jabref.logic.importer.ParserResultTest.isNotEmptyForBibDatabaseWithOneEntry()?bibDatabase@30.20:30.31CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java5 (@2ª
jorg.jabref.logic.importer.ParserResultTest.isNotEmptyForBibDatabaseWithOneEntry()?parserResult@31.21:31.33CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java   ( 2æ
forg.jabref.logic.importer.ParserResultTest.isNotEmptyForBibDatabaseWithOneEntry()?bibEntry@29.17:29.25DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java (2¡
iorg.jabref.logic.importer.ParserResultTest.isNotEmptyForBibDatabaseWithOneEntry()?bibDatabase@30.20:30.31DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java (2¬
jorg.jabref.logic.importer.ParserResultTest.isNotEmptyForBibDatabaseWithOneEntry()?parserResult@31.21:31.33DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java (!2\
voidRETURN_TYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java (—
forg.jabref.logic.importer.ParserResultTest.isNotEmptyForBibDatabaseWithOneEntry()?bibEntry@29.17:29.25VARIABLEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java ("
typeBibEntry"
isFinalfalse"w
declarationStringb<mark class="modifier"> </mark>BibEntry <mark class="class-field">bibEntry</mark> = new BibEntry()*bibEntry2p
org.jabref.model.entry.BibEntryTYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java (2{
*org.jabref.model.entry.BibEntry.BibEntry()CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java  ((’
iorg.jabref.logic.importer.ParserResultTest.isNotEmptyForBibDatabaseWithOneEntry()?bibDatabase@30.20:30.31VARIABLEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java ("
typeBibDatabase"
isFinalfalse"ë
declarationString|<mark class="modifier"> </mark>BibDatabase <mark class="class-field">bibDatabase</mark> = new BibDatabase(List.of(bibEntry))*bibDatabase2v
%org.jabref.model.database.BibDatabaseTYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java (2e
java.util.List.of(E)CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java7 (92≥
borg.jabref.model.database.BibDatabase.BibDatabase(java.util.List<org.jabref.model.entry.BibEntry>)CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java& (12∑
forg.jabref.logic.importer.ParserResultTest.isNotEmptyForBibDatabaseWithOneEntry()?bibEntry@29.17:29.25CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java: (BÍ
jorg.jabref.logic.importer.ParserResultTest.isNotEmptyForBibDatabaseWithOneEntry()?parserResult@31.21:31.33VARIABLEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java (!"
typeParserResult"
isFinalfalse"é
declarationStringy<mark class="modifier"> </mark>ParserResult <mark class="class-field">parserResult</mark> = new ParserResult(bibDatabase)*parserResult2w
&org.jabref.logic.importer.ParserResultTYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java (2´
Zorg.jabref.logic.importer.ParserResult.ParserResult(org.jabref.model.database.BibDatabase)CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java( (42∫
iorg.jabref.logic.importer.ParserResultTest.isNotEmptyForBibDatabaseWithOneEntry()?bibDatabase@30.20:30.31CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java5 (@Á
Korg.jabref.logic.importer.ParserResultTest.warningsAddedMatchErrorMessage()METHODG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java$ $(."
isFinalfalse"ƒ
declarationStringÆ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">warningsAddedMatchErrorMessage</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*warningsAddedMatchErrorMessage2î
Corg.jabref.logic.importer.ParserResult.addWarning(java.lang.String)CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java& &(2î
Corg.jabref.logic.importer.ParserResult.addWarning(java.lang.String)CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java' '(2â
8org.jabref.logic.importer.ParserResult.getErrorMessage()CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java(< ((K2Ü
5org.jabref.logic.importer.ParserResult.ParserResult()CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java%( %(42µ
dorg.jabref.logic.importer.ParserResultTest.warningsAddedMatchErrorMessage()?parserResult@37.21:37.33CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java& &(2µ
dorg.jabref.logic.importer.ParserResultTest.warningsAddedMatchErrorMessage()?parserResult@37.21:37.33CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java' '(2µ
dorg.jabref.logic.importer.ParserResultTest.warningsAddedMatchErrorMessage()?parserResult@37.21:37.33CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java(/ ((;2º
dorg.jabref.logic.importer.ParserResultTest.warningsAddedMatchErrorMessage()?parserResult@37.21:37.33DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java% %(!2\
voidRETURN_TYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java$ $(˜
dorg.jabref.logic.importer.ParserResultTest.warningsAddedMatchErrorMessage()?parserResult@37.21:37.33VARIABLEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java% %(!"
typeParserResult"
isFinalfalse"É
declarationStringn<mark class="modifier"> </mark>ParserResult <mark class="class-field">parserResult</mark> = new ParserResult()*parserResult2w
&org.jabref.logic.importer.ParserResultTYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java% %(2Ü
5org.jabref.logic.importer.ParserResult.ParserResult()CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java%( %(4ø	
Iorg.jabref.logic.importer.ParserResultTest.hasEmptyMessageForNoWarnings()METHODG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java, ,(,"
isFinalfalse"¬
declarationString¨<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">hasEmptyMessageForNoWarnings</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*hasEmptyMessageForNoWarnings2â
8org.jabref.logic.importer.ParserResult.getErrorMessage()CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java.& .(52Ü
5org.jabref.logic.importer.ParserResult.ParserResult()CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java-( -(42≥
borg.jabref.logic.importer.ParserResultTest.hasEmptyMessageForNoWarnings()?parserResult@45.21:45.33CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java. .(%2∫
borg.jabref.logic.importer.ParserResultTest.hasEmptyMessageForNoWarnings()?parserResult@45.21:45.33DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java- -(!2\
voidRETURN_TYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java, ,(ı
borg.jabref.logic.importer.ParserResultTest.hasEmptyMessageForNoWarnings()?parserResult@45.21:45.33VARIABLEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java- -(!"
typeParserResult"
isFinalfalse"É
declarationStringn<mark class="modifier"> </mark>ParserResult <mark class="class-field">parserResult</mark> = new ParserResult()*parserResult2w
&org.jabref.logic.importer.ParserResultTYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java- -(2Ü
5org.jabref.logic.importer.ParserResult.ParserResult()CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java-( -(4Ÿ
Iorg.jabref.logic.importer.ParserResultTest.doesNotHaveDuplicateWarnings()METHODG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java2 2(,"
isFinalfalse"¬
declarationString¨<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">doesNotHaveDuplicateWarnings</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*doesNotHaveDuplicateWarnings2î
Corg.jabref.logic.importer.ParserResult.addWarning(java.lang.String)CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java4 4(2î
Corg.jabref.logic.importer.ParserResult.addWarning(java.lang.String)CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java5 5(2â
8org.jabref.logic.importer.ParserResult.getErrorMessage()CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java67 6(F2Ü
5org.jabref.logic.importer.ParserResult.ParserResult()CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java3( 3(42≥
borg.jabref.logic.importer.ParserResultTest.doesNotHaveDuplicateWarnings()?parserResult@51.21:51.33CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java4 4(2≥
borg.jabref.logic.importer.ParserResultTest.doesNotHaveDuplicateWarnings()?parserResult@51.21:51.33CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java5 5(2≥
borg.jabref.logic.importer.ParserResultTest.doesNotHaveDuplicateWarnings()?parserResult@51.21:51.33CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java6* 6(62∫
borg.jabref.logic.importer.ParserResultTest.doesNotHaveDuplicateWarnings()?parserResult@51.21:51.33DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java3 3(!2\
voidRETURN_TYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java2 2(ı
borg.jabref.logic.importer.ParserResultTest.doesNotHaveDuplicateWarnings()?parserResult@51.21:51.33VARIABLEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java3 3(!"
typeParserResult"
isFinalfalse"É
declarationStringn<mark class="modifier"> </mark>ParserResult <mark class="class-field">parserResult</mark> = new ParserResult()*parserResult2w
&org.jabref.logic.importer.ParserResultTYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java3 3(2Ü
5org.jabref.logic.importer.ParserResult.ParserResult()CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java3( 3(4ë
korg.jabref.logic.importer.ParserResultTest.warningAddedForWhitespaceInCitationKeyImport(java.nio.file.Path)METHODG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java: :(<"
isFinalfalse"∞
declarationStringö <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">warningAddedForWhitespaceInCitationKeyImport</mark>(<mark class="annotation">@TempDir</mark> Path tmpDir)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*,warningAddedForWhitespaceInCitationKeyImport2}
,java.nio.file.Path.resolve(java.lang.String)CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaF F(&2£
Rjava.nio.file.Files.write(java.nio.file.Path, byte[], java.nio.file.OpenOption...)CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaG G(2l
java.lang.String.getBytes()CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaG* G(22Ç
1org.jabref.logic.importer.ParserResult.warnings()CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaIc I(k2ò
Eorg.jabref.model.util.DummyFileUpdateMonitor.DummyFileUpdateMonitor()CALLI
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaHç H(£2√
rorg.jabref.logic.importer.ParserResultTest.warningAddedForWhitespaceInCitationKeyImport(java.nio.file.Path)!tmpDirCALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaF F(2“
Äorg.jabref.logic.importer.ParserResultTest.warningAddedForWhitespaceInCitationKeyImport(java.nio.file.Path)?tempFile@70.13:70.21CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaG G(2’
Éorg.jabref.logic.importer.ParserResultTest.warningAddedForWhitespaceInCitationKeyImport(java.nio.file.Path)?bibtexEntry@60.15:60.26CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaG G()2“
Äorg.jabref.logic.importer.ParserResultTest.warningAddedForWhitespaceInCitationKeyImport(java.nio.file.Path)?tempFile@70.13:70.21CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaH> H(F2÷
Ñorg.jabref.logic.importer.ParserResultTest.warningAddedForWhitespaceInCitationKeyImport(java.nio.file.Path)?parserResult@72.21:72.33CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaIV I(b2»
rorg.jabref.logic.importer.ParserResultTest.warningAddedForWhitespaceInCitationKeyImport(java.nio.file.Path)!tmpDir	PARAMETERG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java:K :(Q2‹
Éorg.jabref.logic.importer.ParserResultTest.warningAddedForWhitespaceInCitationKeyImport(java.nio.file.Path)?bibtexEntry@60.15:60.26DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java< <(2Ÿ
Äorg.jabref.logic.importer.ParserResultTest.warningAddedForWhitespaceInCitationKeyImport(java.nio.file.Path)?tempFile@70.13:70.21DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaF F(2›
Ñorg.jabref.logic.importer.ParserResultTest.warningAddedForWhitespaceInCitationKeyImport(java.nio.file.Path)?parserResult@72.21:72.33DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaH H(!2\
voidRETURN_TYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java: :(Ö
Éorg.jabref.logic.importer.ParserResultTest.warningAddedForWhitespaceInCitationKeyImport(java.nio.file.Path)?bibtexEntry@60.15:60.26VARIABLEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java< <("
typeString"
isFinalfalse"ó
declarationStringÅ<mark class="modifier"> </mark>String <mark class="class-field">bibtexEntry</mark> = """
    @article{ myArticle <mark class="modifier">,</mark>
      author    = "Author Name"<mark class="modifier">,</mark>
      title     = "Title of the Article"<mark class="modifier">,</mark>
      journal   = "Journal Name"<mark class="modifier">,</mark>
      year      = "2024"<mark class="modifier">,</mark>
      pages     = "1-10"<mark class="modifier">,</mark>
      publisher = "Publisher Name"
    }
    """*bibtexEntry2a
java.lang.StringTYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java< <(µ
Äorg.jabref.logic.importer.ParserResultTest.warningAddedForWhitespaceInCitationKeyImport(java.nio.file.Path)?tempFile@70.13:70.21VARIABLEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaF F("
typePath"
isFinalfalse"à
declarationStrings<mark class="modifier"> </mark>Path <mark class="class-field">tempFile</mark> = tmpDir.resolve("invalidBibTex.bib")*tempFile2c
java.nio.file.PathTYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaF F(2}
,java.nio.file.Path.resolve(java.lang.String)CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaF F(&2√
rorg.jabref.logic.importer.ParserResultTest.warningAddedForWhitespaceInCitationKeyImport(java.nio.file.Path)!tmpDirCALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaF F(é
Ñorg.jabref.logic.importer.ParserResultTest.warningAddedForWhitespaceInCitationKeyImport(java.nio.file.Path)?parserResult@72.21:72.33VARIABLEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaH H(!"
typeParserResult"
isFinalfalse"í
declarationString¸<mark class="modifier"> </mark>ParserResult <mark class="class-field">parserResult</mark> = OpenDatabase.loadDatabase(tempFile, mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS)<mark class="modifier">,</mark> new DummyFileUpdateMonitor())*parserResult2w
&org.jabref.logic.importer.ParserResultTYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaH H(2ò
Eorg.jabref.model.util.DummyFileUpdateMonitor.DummyFileUpdateMonitor()CALLI
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaHç H(£2“
Äorg.jabref.logic.importer.ParserResultTest.warningAddedForWhitespaceInCitationKeyImport(java.nio.file.Path)?tempFile@70.13:70.21CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaH> H(F†
rorg.jabref.logic.importer.ParserResultTest.warningAddedForWhitespaceInCitationKeyImport(java.nio.file.Path)!tmpDir	PARAMETERG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java:K :(Q"
typePath"
isFinalfalse"I
declarationString4<mark class="annotation">@TempDir</mark> Path tmpDir*tmpDir2c
java.nio.file.PathTYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java:F :(J©
morg.jabref.logic.importer.ParserResultTest.warningAddedForMissingCommaInCitationKeyImport(java.nio.file.Path)METHODG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaM M(>"
isFinalfalse"≤
declarationStringú <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">warningAddedForMissingCommaInCitationKeyImport</mark>(<mark class="annotation">@TempDir</mark> Path tmpDir)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*.warningAddedForMissingCommaInCitationKeyImport2}
,java.nio.file.Path.resolve(java.lang.String)CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaY Y(&2£
Rjava.nio.file.Files.write(java.nio.file.Path, byte[], java.nio.file.OpenOption...)CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaZ Z(2l
java.lang.String.getBytes()CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaZ* Z(22Ç
1org.jabref.logic.importer.ParserResult.warnings()CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java\\ \(d2ò
Eorg.jabref.model.util.DummyFileUpdateMonitor.DummyFileUpdateMonitor()CALLI
=src\test\java\org\jabref\logic\importer\ParserResultTest.java[ç [(£2≈
torg.jabref.logic.importer.ParserResultTest.warningAddedForMissingCommaInCitationKeyImport(java.nio.file.Path)!tmpDirCALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaY Y(2‘
Çorg.jabref.logic.importer.ParserResultTest.warningAddedForMissingCommaInCitationKeyImport(java.nio.file.Path)?tempFile@89.13:89.21CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaZ Z(2◊
Öorg.jabref.logic.importer.ParserResultTest.warningAddedForMissingCommaInCitationKeyImport(java.nio.file.Path)?bibtexEntry@79.15:79.26CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaZ Z()2‘
Çorg.jabref.logic.importer.ParserResultTest.warningAddedForMissingCommaInCitationKeyImport(java.nio.file.Path)?tempFile@89.13:89.21CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java[> [(F2ÿ
Üorg.jabref.logic.importer.ParserResultTest.warningAddedForMissingCommaInCitationKeyImport(java.nio.file.Path)?parserResult@91.21:91.33CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java\O \([2 
torg.jabref.logic.importer.ParserResultTest.warningAddedForMissingCommaInCitationKeyImport(java.nio.file.Path)!tmpDir	PARAMETERG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaMM M(S2ﬁ
Öorg.jabref.logic.importer.ParserResultTest.warningAddedForMissingCommaInCitationKeyImport(java.nio.file.Path)?bibtexEntry@79.15:79.26DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaO O(2€
Çorg.jabref.logic.importer.ParserResultTest.warningAddedForMissingCommaInCitationKeyImport(java.nio.file.Path)?tempFile@89.13:89.21DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaY Y(2ﬂ
Üorg.jabref.logic.importer.ParserResultTest.warningAddedForMissingCommaInCitationKeyImport(java.nio.file.Path)?parserResult@91.21:91.33DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java[ [(!2\
voidRETURN_TYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaM M(Ô
Öorg.jabref.logic.importer.ParserResultTest.warningAddedForMissingCommaInCitationKeyImport(java.nio.file.Path)?bibtexEntry@79.15:79.26VARIABLEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaO O("
typeString"
isFinalfalse"ˇ
declarationStringÈ<mark class="modifier"> </mark>String <mark class="class-field">bibtexEntry</mark> = """
    @article{myArticle\s
       author    = "Author Name"<mark class="modifier">,</mark>
       title     = "Title of the Article"<mark class="modifier">,</mark>
       journal   = "Journal Name"<mark class="modifier">,</mark>
       year      = "2024"<mark class="modifier">,</mark>
       pages     = "1-10"<mark class="modifier">,</mark>
       publisher = "Publisher Name"
     }
    """*bibtexEntry2a
java.lang.StringTYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaO O(π
Çorg.jabref.logic.importer.ParserResultTest.warningAddedForMissingCommaInCitationKeyImport(java.nio.file.Path)?tempFile@89.13:89.21VARIABLEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaY Y("
typePath"
isFinalfalse"à
declarationStrings<mark class="modifier"> </mark>Path <mark class="class-field">tempFile</mark> = tmpDir.resolve("invalidBibTex.bib")*tempFile2c
java.nio.file.PathTYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaY Y(2}
,java.nio.file.Path.resolve(java.lang.String)CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaY Y(&2≈
torg.jabref.logic.importer.ParserResultTest.warningAddedForMissingCommaInCitationKeyImport(java.nio.file.Path)!tmpDirCALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaY Y(í
Üorg.jabref.logic.importer.ParserResultTest.warningAddedForMissingCommaInCitationKeyImport(java.nio.file.Path)?parserResult@91.21:91.33VARIABLEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java[ [(!"
typeParserResult"
isFinalfalse"í
declarationString¸<mark class="modifier"> </mark>ParserResult <mark class="class-field">parserResult</mark> = OpenDatabase.loadDatabase(tempFile, mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS)<mark class="modifier">,</mark> new DummyFileUpdateMonitor())*parserResult2w
&org.jabref.logic.importer.ParserResultTYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java[ [(2ò
Eorg.jabref.model.util.DummyFileUpdateMonitor.DummyFileUpdateMonitor()CALLI
=src\test\java\org\jabref\logic\importer\ParserResultTest.java[ç [(£2‘
Çorg.jabref.logic.importer.ParserResultTest.warningAddedForMissingCommaInCitationKeyImport(java.nio.file.Path)?tempFile@89.13:89.21CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java[> [(F¢
torg.jabref.logic.importer.ParserResultTest.warningAddedForMissingCommaInCitationKeyImport(java.nio.file.Path)!tmpDir	PARAMETERG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaMM M(S"
typePath"
isFinalfalse"I
declarationString4<mark class="annotation">@TempDir</mark> Path tmpDir*tmpDir2c
java.nio.file.PathTYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaMH M(Lè
jorg.jabref.logic.importer.ParserResultTest.warningAddedForCorruptedCitationKeyInImport(java.nio.file.Path)METHODG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java` `(;"
isFinalfalse"Ø
declarationStringô <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">warningAddedForCorruptedCitationKeyInImport</mark>(<mark class="annotation">@TempDir</mark> Path tmpDir)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*+warningAddedForCorruptedCitationKeyInImport2}
,java.nio.file.Path.resolve(java.lang.String)CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javal l(&2£
Rjava.nio.file.Files.write(java.nio.file.Path, byte[], java.nio.file.OpenOption...)CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javam m(2l
java.lang.String.getBytes()CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javam* m(22Ç
1org.jabref.logic.importer.ParserResult.warnings()CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaoL o(T2ò
Eorg.jabref.model.util.DummyFileUpdateMonitor.DummyFileUpdateMonitor()CALLI
=src\test\java\org\jabref\logic\importer\ParserResultTest.javanç n(£2¬
qorg.jabref.logic.importer.ParserResultTest.warningAddedForCorruptedCitationKeyInImport(java.nio.file.Path)!tmpDirCALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javal l(2”
Åorg.jabref.logic.importer.ParserResultTest.warningAddedForCorruptedCitationKeyInImport(java.nio.file.Path)?tempFile@108.13:108.21CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javam m(2‘
Çorg.jabref.logic.importer.ParserResultTest.warningAddedForCorruptedCitationKeyInImport(java.nio.file.Path)?bibtexEntry@97.15:97.26CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javam m()2”
Åorg.jabref.logic.importer.ParserResultTest.warningAddedForCorruptedCitationKeyInImport(java.nio.file.Path)?tempFile@108.13:108.21CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javan> n(F2◊
Öorg.jabref.logic.importer.ParserResultTest.warningAddedForCorruptedCitationKeyInImport(java.nio.file.Path)?parserResult@110.21:110.33CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javao? o(K2«
qorg.jabref.logic.importer.ParserResultTest.warningAddedForCorruptedCitationKeyInImport(java.nio.file.Path)!tmpDir	PARAMETERG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java`J `(P2€
Çorg.jabref.logic.importer.ParserResultTest.warningAddedForCorruptedCitationKeyInImport(java.nio.file.Path)?bibtexEntry@97.15:97.26DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaa a(2⁄
Åorg.jabref.logic.importer.ParserResultTest.warningAddedForCorruptedCitationKeyInImport(java.nio.file.Path)?tempFile@108.13:108.21DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javal l(2ﬁ
Öorg.jabref.logic.importer.ParserResultTest.warningAddedForCorruptedCitationKeyInImport(java.nio.file.Path)?parserResult@110.21:110.33DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javan n(!2\
voidRETURN_TYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java` `(Í
Çorg.jabref.logic.importer.ParserResultTest.warningAddedForCorruptedCitationKeyInImport(java.nio.file.Path)?bibtexEntry@97.15:97.26VARIABLEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaa a("
typeString"
isFinalfalse"˝
declarationStringÁ<mark class="modifier"> </mark>String <mark class="class-field">bibtexEntry</mark> = """
    @article{myArticle
       author    = "Author Name"<mark class="modifier">,</mark>
       title     = "Title of the Article"<mark class="modifier">,</mark>
       journal   = "Journal Name"<mark class="modifier">,</mark>
       year      = "2024"<mark class="modifier">,</mark>
       pages     = "1-10"<mark class="modifier">,</mark>
       publisher = "Publisher Name"
     }
    """*bibtexEntry2a
java.lang.StringTYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaa a(µ
Åorg.jabref.logic.importer.ParserResultTest.warningAddedForCorruptedCitationKeyInImport(java.nio.file.Path)?tempFile@108.13:108.21VARIABLEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javal l("
typePath"
isFinalfalse"à
declarationStrings<mark class="modifier"> </mark>Path <mark class="class-field">tempFile</mark> = tmpDir.resolve("invalidBibTex.bib")*tempFile2c
java.nio.file.PathTYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javal l(2}
,java.nio.file.Path.resolve(java.lang.String)CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javal l(&2¬
qorg.jabref.logic.importer.ParserResultTest.warningAddedForCorruptedCitationKeyInImport(java.nio.file.Path)!tmpDirCALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javal l(ê
Öorg.jabref.logic.importer.ParserResultTest.warningAddedForCorruptedCitationKeyInImport(java.nio.file.Path)?parserResult@110.21:110.33VARIABLEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javan n(!"
typeParserResult"
isFinalfalse"í
declarationString¸<mark class="modifier"> </mark>ParserResult <mark class="class-field">parserResult</mark> = OpenDatabase.loadDatabase(tempFile, mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS)<mark class="modifier">,</mark> new DummyFileUpdateMonitor())*parserResult2w
&org.jabref.logic.importer.ParserResultTYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javan n(2ò
Eorg.jabref.model.util.DummyFileUpdateMonitor.DummyFileUpdateMonitor()CALLI
=src\test\java\org\jabref\logic\importer\ParserResultTest.javanç n(£2”
Åorg.jabref.logic.importer.ParserResultTest.warningAddedForCorruptedCitationKeyInImport(java.nio.file.Path)?tempFile@108.13:108.21CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javan> n(Fü
qorg.jabref.logic.importer.ParserResultTest.warningAddedForCorruptedCitationKeyInImport(java.nio.file.Path)!tmpDir	PARAMETERG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java`J `(P"
typePath"
isFinalfalse"I
declarationString4<mark class="annotation">@TempDir</mark> Path tmpDir*tmpDir2c
java.nio.file.PathTYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java`E `(I±
`org.jabref.logic.importer.ParserResultTest.skipsImportEntryForImproperSyntax(java.nio.file.Path)METHODG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javas s(1"
isFinalfalse"•
declarationStringè <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">skipsImportEntryForImproperSyntax</mark>(<mark class="annotation">@TempDir</mark> Path tmpDir)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*!skipsImportEntryForImproperSyntax2}
,java.nio.file.Path.resolve(java.lang.String)CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java (&2•
Rjava.nio.file.Files.write(java.nio.file.Path, byte[], java.nio.file.OpenOption...)CALLI
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaÄ Ä(2n
java.lang.String.getBytes()CALLI
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaÄ* Ä(22Ö
2org.jabref.model.database.BibDatabase.hasEntries()CALLI
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaÇ/ Ç(92á
4org.jabref.logic.importer.ParserResult.getDatabase()CALLI
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaÇ! Ç(,2ö
Eorg.jabref.model.util.DummyFileUpdateMonitor.DummyFileUpdateMonitor()CALLK
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaÅç Å(£2∏
gorg.jabref.logic.importer.ParserResultTest.skipsImportEntryForImproperSyntax(java.nio.file.Path)!tmpDirCALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java (2 
worg.jabref.logic.importer.ParserResultTest.skipsImportEntryForImproperSyntax(java.nio.file.Path)?tempFile@127.13:127.21CALLI
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaÄ Ä(2Õ
zorg.jabref.logic.importer.ParserResultTest.skipsImportEntryForImproperSyntax(java.nio.file.Path)?bibtexEntry@117.15:117.26CALLI
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaÄ Ä()2 
worg.jabref.logic.importer.ParserResultTest.skipsImportEntryForImproperSyntax(java.nio.file.Path)?tempFile@127.13:127.21CALLI
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaÅ> Å(F2Œ
{org.jabref.logic.importer.ParserResultTest.skipsImportEntryForImproperSyntax(java.nio.file.Path)?parserResult@129.21:129.33CALLI
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaÇ Ç( 2Ω
gorg.jabref.logic.importer.ParserResultTest.skipsImportEntryForImproperSyntax(java.nio.file.Path)!tmpDir	PARAMETERG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javas@ s(F2“
zorg.jabref.logic.importer.ParserResultTest.skipsImportEntryForImproperSyntax(java.nio.file.Path)?bibtexEntry@117.15:117.26DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javau u(2œ
worg.jabref.logic.importer.ParserResultTest.skipsImportEntryForImproperSyntax(java.nio.file.Path)?tempFile@127.13:127.21DECLARATIONG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java (2’
{org.jabref.logic.importer.ParserResultTest.skipsImportEntryForImproperSyntax(java.nio.file.Path)?parserResult@129.21:129.33DECLARATIONI
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaÅ Å(!2\
voidRETURN_TYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javas s(Å
zorg.jabref.logic.importer.ParserResultTest.skipsImportEntryForImproperSyntax(java.nio.file.Path)?bibtexEntry@117.15:117.26VARIABLEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javau u("
typeString"
isFinalfalse"ù
declarationStringá<mark class="modifier"> </mark>String <mark class="class-field">bibtexEntry</mark> = """
    @article{myArticle,
       author    =<mark class="modifier">,</mark> "Author Name"<mark class="modifier">,</mark>
       title     = "Title of the Article"<mark class="modifier">,</mark>
       journal   = "Journal Name"<mark class="modifier">,</mark>
       year      = "2024"<mark class="modifier">,</mark>
       pages     = "1-10"<mark class="modifier">,</mark>
       publisher = "Publisher Name"
     }
    """*bibtexEntry2a
java.lang.StringTYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javau u(†
worg.jabref.logic.importer.ParserResultTest.skipsImportEntryForImproperSyntax(java.nio.file.Path)?tempFile@127.13:127.21VARIABLEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java ("
typePath"
isFinalfalse"à
declarationStrings<mark class="modifier"> </mark>Path <mark class="class-field">tempFile</mark> = tmpDir.resolve("invalidBibTex.bib")*tempFile2c
java.nio.file.PathTYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java (2}
,java.nio.file.Path.resolve(java.lang.String)CALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java (&2∏
gorg.jabref.logic.importer.ParserResultTest.skipsImportEntryForImproperSyntax(java.nio.file.Path)!tmpDirCALLG
=src\test\java\org\jabref\logic\importer\ParserResultTest.java (Ç
{org.jabref.logic.importer.ParserResultTest.skipsImportEntryForImproperSyntax(java.nio.file.Path)?parserResult@129.21:129.33VARIABLEI
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaÅ Å(!"
typeParserResult"
isFinalfalse"í
declarationString¸<mark class="modifier"> </mark>ParserResult <mark class="class-field">parserResult</mark> = OpenDatabase.loadDatabase(tempFile, mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS)<mark class="modifier">,</mark> new DummyFileUpdateMonitor())*parserResult2y
&org.jabref.logic.importer.ParserResultTYPEI
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaÅ Å(2ö
Eorg.jabref.model.util.DummyFileUpdateMonitor.DummyFileUpdateMonitor()CALLK
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaÅç Å(£2 
worg.jabref.logic.importer.ParserResultTest.skipsImportEntryForImproperSyntax(java.nio.file.Path)?tempFile@127.13:127.21CALLI
=src\test\java\org\jabref\logic\importer\ParserResultTest.javaÅ> Å(Fï
gorg.jabref.logic.importer.ParserResultTest.skipsImportEntryForImproperSyntax(java.nio.file.Path)!tmpDir	PARAMETERG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javas@ s(F"
typePath"
isFinalfalse"I
declarationString4<mark class="annotation">@TempDir</mark> Path tmpDir*tmpDir2c
java.nio.file.PathTYPEG
=src\test\java\org\jabref\logic\importer\ParserResultTest.javas; s(?