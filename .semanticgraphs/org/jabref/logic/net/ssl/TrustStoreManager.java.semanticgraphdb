
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java›
*org.jabref.logic.net.ssl.TrustStoreManagerCLASSG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java ("#
packageorg.jabref.logic.net.ssl"
isFinalfalse"
inner classfalse"

isAbstractfalse"o
declarationStringZ<mark class="modifier">public </mark><mark class="modifier">class </mark>TrustStoreManager"
accesspublic*TrustStoreManager2®
Porg.jabref.logic.net.ssl.TrustStoreManager.TrustStoreManager(java.nio.file.Path)DECLARATIONG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java' '(2∑
_org.jabref.logic.net.ssl.TrustStoreManager.addCertificate(java.lang.String, java.nio.file.Path)DECLARATIONG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java2 2(2¶
Norg.jabref.logic.net.ssl.TrustStoreManager.deleteCertificate(java.lang.String)DECLARATIONG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java> >(!2¶
Norg.jabref.logic.net.ssl.TrustStoreManager.certificateExists(java.lang.String)DECLARATIONG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaG G($2å
4org.jabref.logic.net.ssl.TrustStoreManager.aliases()DECLARATIONG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaQ Q(2è
7org.jabref.logic.net.ssl.TrustStoreManager.certsCount()DECLARATIONG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaZ Z(2ä
2org.jabref.logic.net.ssl.TrustStoreManager.flush()DECLARATIONG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javac c(2®
Porg.jabref.logic.net.ssl.TrustStoreManager.isCustomCertificate(java.lang.String)DECLARATIONG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javan n('2ú
Dorg.jabref.logic.net.ssl.TrustStoreManager.clearCustomCertificates()DECLARATIONG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javau u('2ö
Borg.jabref.logic.net.ssl.TrustStoreManager.getCustomCertificates()DECLARATIONG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaz  z(52•
Korg.jabref.logic.net.ssl.TrustStoreManager.getCertificate(java.lang.String)DECLARATIONI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÉ É()2∑
]org.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)DECLARATIONI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaí í(52¨
Rorg.jabref.logic.net.ssl.TrustStoreManager.configureTrustStore(java.nio.file.Path)DECLARATIONI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java® ®(+2ô
?org.jabref.logic.net.ssl.TrustStoreManager.getJreTrustManager()DECLARATIONI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java±$ ±(62Æ
Torg.jabref.logic.net.ssl.TrustStoreManager.getJabRefTrustManager(java.nio.file.Path)DECLARATIONI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaµ$ µ(92¥
Zorg.jabref.logic.net.ssl.TrustStoreManager.findDefaultTrustManager(java.security.KeyStore)DECLARATIONI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java¿$ ¿(;2ﬁ
Éorg.jabref.logic.net.ssl.TrustStoreManager.createMergedTrustManager(javax.net.ssl.X509TrustManager, javax.net.ssl.X509TrustManager)DECLARATIONI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÕ$ Õ(<2∫
`org.jabref.logic.net.ssl.TrustStoreManager.setSystemTrustManager(javax.net.ssl.X509TrustManager)DECLARATIONI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÍ Í(-2ï
=org.jabref.logic.net.ssl.TrustStoreManager?LOGGER@32.32:32.38DECLARATIONG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java    (&2ù
Eorg.jabref.logic.net.ssl.TrustStoreManager?STORE_PASSWORD@33.32:33.46DECLARATIONG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java!  !(.2ò
@org.jabref.logic.net.ssl.TrustStoreManager?storePath@35.23:35.32DECLARATIONG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java# #( 2î
<org.jabref.logic.net.ssl.TrustStoreManager?store@37.21:37.26DECLARATIONG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java% %(å
Porg.jabref.logic.net.ssl.TrustStoreManager.TrustStoreManager(java.nio.file.Path)CONSTRUCTORG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java' '("w
declarationStringb<mark class="modifier">public </mark><mark class="method">TrustStoreManager</mark>(Path storePath)*TrustStoreManager2Æ
]org.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java) )(&2Ö
4java.security.KeyStore.getInstance(java.lang.String)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java+ +((2x
'java.security.KeyStore.getDefaultType()CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java+2 +(@2â
8java.security.KeyStore.load(java.io.InputStream, char[])CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java, ,(2l
java.nio.file.Path.toFile()CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java,5 ,(;2o
java.lang.String.toCharArray()CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java,O ,(Z2t
#java.nio.file.Path.toAbsolutePath()CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java.N .(\2Ü
5java.io.FileInputStream.FileInputStream(java.io.File)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java, ,(*2´
Zorg.jabref.logic.net.ssl.TrustStoreManager.TrustStoreManager(java.nio.file.Path)!storePathCALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java( (("2´
Zorg.jabref.logic.net.ssl.TrustStoreManager.TrustStoreManager(java.nio.file.Path)!storePathCALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java)' )(02ç
<org.jabref.logic.net.ssl.TrustStoreManager?store@37.21:37.26CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java+ +(2ç
<org.jabref.logic.net.ssl.TrustStoreManager?store@37.21:37.26CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java, ,(2´
Zorg.jabref.logic.net.ssl.TrustStoreManager.TrustStoreManager(java.nio.file.Path)!storePathCALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java,+ ,(42ñ
Eorg.jabref.logic.net.ssl.TrustStoreManager?STORE_PASSWORD@33.32:33.46CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java,@ ,(N2é
=org.jabref.logic.net.ssl.TrustStoreManager?LOGGER@32.32:32.38CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java. .(2´
Zorg.jabref.logic.net.ssl.TrustStoreManager.TrustStoreManager(java.nio.file.Path)!storePathCALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java.D .(M2∞
_org.jabref.logic.net.ssl.TrustStoreManager.TrustStoreManager(java.nio.file.Path)?e@45.99:45.100CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java.` .(a2ë
@org.jabref.logic.net.ssl.TrustStoreManager?storePath@35.23:35.32CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java( ((2∞
Zorg.jabref.logic.net.ssl.TrustStoreManager.TrustStoreManager(java.nio.file.Path)!storePath	PARAMETERG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java'" '(+2∑
_org.jabref.logic.net.ssl.TrustStoreManager.TrustStoreManager(java.nio.file.Path)?e@45.99:45.100DECLARATIONG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java-c -(d2Ç
*org.jabref.logic.net.ssl.TrustStoreManagerRETURN_TYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java' '(Â
Zorg.jabref.logic.net.ssl.TrustStoreManager.TrustStoreManager(java.nio.file.Path)!storePath	PARAMETERG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java'" '(+"
typePath"
isFinalfalse"#
declarationStringPath storePath*	storePath2c
java.nio.file.PathTYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java' '(!Î
_org.jabref.logic.net.ssl.TrustStoreManager.TrustStoreManager(java.nio.file.Path)?e@45.99:45.100VARIABLEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java-c -(d"Y
typeQCertificateException | IOException | NoSuchAlgorithmException | KeyStoreException"
isFinalfalse"h
declarationStringSCertificateException | IOException | NoSuchAlgorithmException | KeyStoreException e*e2⁄
àjava.security.cert.CertificateException | java.io.IOException | java.security.NoSuchAlgorithmException | java.security.KeyStoreExceptionTYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java- -(b°
_org.jabref.logic.net.ssl.TrustStoreManager.addCertificate(java.lang.String, java.nio.file.Path)METHODG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java2 2("
isFinalfalse"·
declarationStringÀ<mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">addCertificate</mark>(String alias<mark class="modifier"><mark class="modifier">,</mark></mark> Path certPath)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*addCertificate2t
#java.util.Objects.requireNonNull(T)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java3 3(2t
#java.util.Objects.requireNonNull(T)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java4 4(2î
Cjava.security.cert.CertificateFactory.getInstance(java.lang.String)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java7G 7(R2≠
\java.security.KeyStore.setCertificateEntry(java.lang.String, java.security.cert.Certificate)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java8 8(%2ü
Njava.security.cert.CertificateFactory.generateCertificate(java.io.InputStream)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java8@ 8(S2l
java.nio.file.Path.toFile()CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java8q 8(w2Ü
5java.io.FileInputStream.FileInputStream(java.io.File)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java8X 8(g2∂
eorg.jabref.logic.net.ssl.TrustStoreManager.addCertificate(java.lang.String, java.nio.file.Path)!aliasCALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java3 3($2π
horg.jabref.logic.net.ssl.TrustStoreManager.addCertificate(java.lang.String, java.nio.file.Path)!certPathCALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java4 4('2ç
<org.jabref.logic.net.ssl.TrustStoreManager?store@37.21:37.26CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java8 8(2∂
eorg.jabref.logic.net.ssl.TrustStoreManager.addCertificate(java.lang.String, java.nio.file.Path)!aliasCALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java8& 8(+2œ
~org.jabref.logic.net.ssl.TrustStoreManager.addCertificate(java.lang.String, java.nio.file.Path)?certificateFactory@55.31:55.49CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java8- 8(?2π
horg.jabref.logic.net.ssl.TrustStoreManager.addCertificate(java.lang.String, java.nio.file.Path)!certPathCALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java8h 8(p2é
=org.jabref.logic.net.ssl.TrustStoreManager?LOGGER@32.32:32.38CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java: :(2∂
eorg.jabref.logic.net.ssl.TrustStoreManager.addCertificate(java.lang.String, java.nio.file.Path)!aliasCALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java:V :([2æ
morg.jabref.logic.net.ssl.TrustStoreManager.addCertificate(java.lang.String, java.nio.file.Path)?e@57.72:57.73CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java:] :(^2ª
eorg.jabref.logic.net.ssl.TrustStoreManager.addCertificate(java.lang.String, java.nio.file.Path)!alias	PARAMETERG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java2& 2(+2æ
horg.jabref.logic.net.ssl.TrustStoreManager.addCertificate(java.lang.String, java.nio.file.Path)!certPath	PARAMETERG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java22 2(:2÷
~org.jabref.logic.net.ssl.TrustStoreManager.addCertificate(java.lang.String, java.nio.file.Path)?certificateFactory@55.31:55.49DECLARATIONG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java7 7(12≈
morg.jabref.logic.net.ssl.TrustStoreManager.addCertificate(java.lang.String, java.nio.file.Path)?e@57.72:57.73DECLARATIONG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java9H 9(I2\
voidRETURN_TYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java2 2(À
~org.jabref.logic.net.ssl.TrustStoreManager.addCertificate(java.lang.String, java.nio.file.Path)?certificateFactory@55.31:55.49VARIABLEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java7 7(1"
typeCertificateFactory"
isFinalfalse"§
declarationStringé<mark class="modifier"> </mark>CertificateFactory <mark class="class-field">certificateFactory</mark> = CertificateFactory.getInstance("X509")*certificateFactory2v
%java.security.cert.CertificateFactoryTYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java7 7(2î
Cjava.security.cert.CertificateFactory.getInstance(java.lang.String)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java7G 7(RÍ
eorg.jabref.logic.net.ssl.TrustStoreManager.addCertificate(java.lang.String, java.nio.file.Path)!alias	PARAMETERG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java2& 2(+"
typeString"
isFinalfalse"!
declarationStringString alias*alias2a
java.lang.StringTYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java2 2(%Ò
horg.jabref.logic.net.ssl.TrustStoreManager.addCertificate(java.lang.String, java.nio.file.Path)!certPath	PARAMETERG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java22 2(:"
typePath"
isFinalfalse""
declarationStringPath certPath*certPath2c
java.nio.file.PathTYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java2- 2(1ô
morg.jabref.logic.net.ssl.TrustStoreManager.addCertificate(java.lang.String, java.nio.file.Path)?e@57.72:57.73VARIABLEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java9H 9(I">
type6KeyStoreException | CertificateException | IOException"
isFinalfalse"M
declarationString8KeyStoreException | CertificateException | IOException e*e2∞
_java.security.KeyStoreException | java.security.cert.CertificateException | java.io.IOExceptionTYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java9 9(G≥
Norg.jabref.logic.net.ssl.TrustStoreManager.deleteCertificate(java.lang.String)METHODG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java> >(!"
isFinalfalse"ô
declarationStringÉ<mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">deleteCertificate</mark>(String alias)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*deleteCertificate2t
#java.util.Objects.requireNonNull(T)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java? ?(2Ö
4java.security.KeyStore.deleteEntry(java.lang.String)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaA A(2•
Torg.jabref.logic.net.ssl.TrustStoreManager.deleteCertificate(java.lang.String)!aliasCALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java? ?($2ç
<org.jabref.logic.net.ssl.TrustStoreManager?store@37.21:37.26CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaA A(2•
Torg.jabref.logic.net.ssl.TrustStoreManager.deleteCertificate(java.lang.String)!aliasCALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaA A(#2é
=org.jabref.logic.net.ssl.TrustStoreManager?LOGGER@32.32:32.38CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaC C(2•
Torg.jabref.logic.net.ssl.TrustStoreManager.deleteCertificate(java.lang.String)!aliasCALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaCQ C(V2≠
\org.jabref.logic.net.ssl.TrustStoreManager.deleteCertificate(java.lang.String)?e@66.35:66.36CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaCX C(Y2™
Torg.jabref.logic.net.ssl.TrustStoreManager.deleteCertificate(java.lang.String)!alias	PARAMETERG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java>) >(.2¥
\org.jabref.logic.net.ssl.TrustStoreManager.deleteCertificate(java.lang.String)?e@66.35:66.36DECLARATIONG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaB# B($2\
voidRETURN_TYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java> >(Ÿ
Torg.jabref.logic.net.ssl.TrustStoreManager.deleteCertificate(java.lang.String)!alias	PARAMETERG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java>) >(."
typeString"
isFinalfalse"!
declarationStringString alias*alias2a
java.lang.StringTYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java>" >((˝
\org.jabref.logic.net.ssl.TrustStoreManager.deleteCertificate(java.lang.String)?e@66.35:66.36VARIABLEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaB# B($"
typeKeyStoreException"
isFinalfalse"(
declarationStringKeyStoreException e*e2p
java.security.KeyStoreExceptionTYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaB B("√
Norg.jabref.logic.net.ssl.TrustStoreManager.certificateExists(java.lang.String)METHODG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaG G($"
isFinalfalse"ú
declarationStringÜ<mark class="modifier">public </mark><mark class="modifier">boolean</mark> <mark class="method">certificateExists</mark>(String alias)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeboolean*certificateExists2t
#java.util.Objects.requireNonNull(T)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaH H(2å
;java.security.KeyStore.isCertificateEntry(java.lang.String)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaJ J(+2•
Torg.jabref.logic.net.ssl.TrustStoreManager.certificateExists(java.lang.String)!aliasCALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaH H($2ç
<org.jabref.logic.net.ssl.TrustStoreManager?store@37.21:37.26CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaJ J(2•
Torg.jabref.logic.net.ssl.TrustStoreManager.certificateExists(java.lang.String)!aliasCALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaJ, J(12é
=org.jabref.logic.net.ssl.TrustStoreManager?LOGGER@32.32:32.38CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaL L(2•
Torg.jabref.logic.net.ssl.TrustStoreManager.certificateExists(java.lang.String)!aliasCALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaLJ L(O2≠
\org.jabref.logic.net.ssl.TrustStoreManager.certificateExists(java.lang.String)?e@75.35:75.36CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaLQ L(R2™
Torg.jabref.logic.net.ssl.TrustStoreManager.certificateExists(java.lang.String)!alias	PARAMETERG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaG, G(12¥
\org.jabref.logic.net.ssl.TrustStoreManager.certificateExists(java.lang.String)?e@75.35:75.36DECLARATIONG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaK# K($2_
booleanRETURN_TYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaG G(Ÿ
Torg.jabref.logic.net.ssl.TrustStoreManager.certificateExists(java.lang.String)!alias	PARAMETERG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaG, G(1"
typeString"
isFinalfalse"!
declarationStringString alias*alias2a
java.lang.StringTYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaG% G(+˝
\org.jabref.logic.net.ssl.TrustStoreManager.certificateExists(java.lang.String)?e@75.35:75.36VARIABLEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaK# K($"
typeKeyStoreException"
isFinalfalse"(
declarationStringKeyStoreException e*e2p
java.security.KeyStoreExceptionTYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaK K("Ñ
4org.jabref.logic.net.ssl.TrustStoreManager.aliases()METHODG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaQ Q("
isFinalfalse"r
declarationString]<mark class="modifier">public </mark>List&lt;String&gt; <mark class="method">aliases</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeList<String>*aliases2Ö
4java.util.Collections.list(java.util.Enumeration<T>)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaS S(#2q
 java.security.KeyStore.aliases()CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaS* S(12r
!java.util.Collections.emptyList()CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaW W($2ç
<org.jabref.logic.net.ssl.TrustStoreManager?store@37.21:37.26CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaS$ S()2é
=org.jabref.logic.net.ssl.TrustStoreManager?LOGGER@32.32:32.38CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaU U(2ì
Borg.jabref.logic.net.ssl.TrustStoreManager.aliases()?e@84.35:84.36CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaU7 U(82ö
Borg.jabref.logic.net.ssl.TrustStoreManager.aliases()?e@84.35:84.36DECLARATIONG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaT# T($2f
java.util.ListRETURN_TYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaQ Q(2q
java.lang.StringRETURN_TYPE_ARGUMENTG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaQ Q(„
Borg.jabref.logic.net.ssl.TrustStoreManager.aliases()?e@84.35:84.36VARIABLEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaT# T($"
typeKeyStoreException"
isFinalfalse"(
declarationStringKeyStoreException e*e2p
java.security.KeyStoreExceptionTYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaT T("ù	
7org.jabref.logic.net.ssl.TrustStoreManager.certsCount()METHODG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaZ Z("
isFinalfalse"Ñ
declarationStringo<mark class="modifier">public </mark><mark class="modifier">int</mark> <mark class="method">certsCount</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeint*
certsCount2n
java.security.KeyStore.size()CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java\ \(2ç
<org.jabref.logic.net.ssl.TrustStoreManager?store@37.21:37.26CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java\ \(2é
=org.jabref.logic.net.ssl.TrustStoreManager?LOGGER@32.32:32.38CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java^ ^(2ñ
Eorg.jabref.logic.net.ssl.TrustStoreManager.certsCount()?e@93.35:93.36CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java^4 ^(52ù
Eorg.jabref.logic.net.ssl.TrustStoreManager.certsCount()?e@93.35:93.36DECLARATIONG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java]# ]($2[
intRETURN_TYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaZ Z(Ê
Eorg.jabref.logic.net.ssl.TrustStoreManager.certsCount()?e@93.35:93.36VARIABLEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java]# ]($"
typeKeyStoreException"
isFinalfalse"(
declarationStringKeyStoreException e*e2p
java.security.KeyStoreExceptionTYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java] ]("Ò
2org.jabref.logic.net.ssl.TrustStoreManager.flush()METHODG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javac c("
isFinalfalse"Ä
declarationStringk<mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">flush</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*flush2ã
:java.security.KeyStore.store(java.io.OutputStream, char[])CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javae e(2•
Tjava.nio.file.Files.newOutputStream(java.nio.file.Path, java.nio.file.OpenOption...)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javae e(-2o
java.lang.String.toCharArray()CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaeI e(T2ç
<org.jabref.logic.net.ssl.TrustStoreManager?store@37.21:37.26CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javae e(2ë
@org.jabref.logic.net.ssl.TrustStoreManager?storePath@35.23:35.32CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javae. e(72ñ
Eorg.jabref.logic.net.ssl.TrustStoreManager?STORE_PASSWORD@33.32:33.46CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javae: e(H2é
=org.jabref.logic.net.ssl.TrustStoreManager?LOGGER@32.32:32.38CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javag g(2î
Corg.jabref.logic.net.ssl.TrustStoreManager.flush()?e@102.99:102.100CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javag< g(=2õ
Corg.jabref.logic.net.ssl.TrustStoreManager.flush()?e@102.99:102.100DECLARATIONG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javafc f(d2\
voidRETURN_TYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javac c(œ
Corg.jabref.logic.net.ssl.TrustStoreManager.flush()?e@102.99:102.100VARIABLEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javafc f(d"Y
typeQKeyStoreException | IOException | NoSuchAlgorithmException | CertificateException"
isFinalfalse"h
declarationStringSKeyStoreException | IOException | NoSuchAlgorithmException | CertificateException e*e2⁄
àjava.security.KeyStoreException | java.io.IOException | java.security.NoSuchAlgorithmException | java.security.cert.CertificateExceptionTYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaf f(b€
Porg.jabref.logic.net.ssl.TrustStoreManager.isCustomCertificate(java.lang.String)METHODG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javan n('"
isFinalfalse"Ä
declarationStringk<mark class="modifier">private </mark>Boolean <mark class="method">isCustomCertificate</mark>(String alias)"
isStaticfalse"
accessprivate"

isAbstractfalse"
typeBoolean*isCustomCertificate2|
+java.lang.String.endsWith(java.lang.String)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javao o(2ß
Vorg.jabref.logic.net.ssl.TrustStoreManager.isCustomCertificate(java.lang.String)!aliasCALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javao o(2¨
Vorg.jabref.logic.net.ssl.TrustStoreManager.isCustomCertificate(java.lang.String)!alias	PARAMETERG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javan/ n(42i
java.lang.BooleanRETURN_TYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javan n(€
Vorg.jabref.logic.net.ssl.TrustStoreManager.isCustomCertificate(java.lang.String)!alias	PARAMETERG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javan/ n(4"
typeString"
isFinalfalse"!
declarationStringString alias*alias2a
java.lang.StringTYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javan( n(.˜
Dorg.jabref.logic.net.ssl.TrustStoreManager.clearCustomCertificates()METHODG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javau u('"
isFinalfalse"í
declarationString}<mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">clearCustomCertificates</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*clearCustomCertificates2ò
Gjava.util.stream.Stream.forEach(java.util.function.Consumer<? super T>)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javav= v(D2ò
Gjava.util.stream.Stream.filter(java.util.function.Predicate<? super T>)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javav v(!2n
java.util.Collection.stream()CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javav v(2Ö
4org.jabref.logic.net.ssl.TrustStoreManager.aliases()CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javav v(2É
2org.jabref.logic.net.ssl.TrustStoreManager.flush()CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaw w(2°
Porg.jabref.logic.net.ssl.TrustStoreManager.isCustomCertificate(java.lang.String)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javav" v(;2ü
Norg.jabref.logic.net.ssl.TrustStoreManager.deleteCertificate(java.lang.String)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javavE v(\2\
voidRETURN_TYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javau u(Æ
Borg.jabref.logic.net.ssl.TrustStoreManager.getCustomCertificates()METHODG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaz  z(5"
isFinalfalse"à
declarationStrings<mark class="modifier">public </mark>List&lt;SSLCertificate&gt; <mark class="method">getCustomCertificates</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeList<SSLCertificate>*getCustomCertificates2ü
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÄ Ä( 2»
wjava.util.stream.Stream.flatMap(java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java ( 2°
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java~ ~(2°
Pjava.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java} }(2ò
Gjava.util.stream.Stream.filter(java.util.function.Predicate<? super T>)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java| |(2n
java.util.Collection.stream()CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java{ {(2Ö
4org.jabref.logic.net.ssl.TrustStoreManager.aliases()CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java{ {(2w
$java.util.stream.Collectors.toList()CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÄ, Ä(22°
Porg.jabref.logic.net.ssl.TrustStoreManager.isCustomCertificate(java.lang.String)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java|  |(92ú
Korg.jabref.logic.net.ssl.TrustStoreManager.getCertificate(java.lang.String)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java} }(12•
Torg.jabref.logic.net.ssl.SSLCertificate.fromX509(java.security.cert.X509Certificate)CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java~ ~(52l
java.util.Optional.stream()CALLG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java! (12f
java.util.ListRETURN_TYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaz z(2à
'org.jabref.logic.net.ssl.SSLCertificateRETURN_TYPE_ARGUMENTG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaz z(≠
Korg.jabref.logic.net.ssl.TrustStoreManager.getCertificate(java.lang.String)METHODI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÉ É()"
isFinalfalse"Ç
declarationStringm<mark class="modifier">public </mark>X509Certificate <mark class="method">getCertificate</mark>(String alias)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeX509Certificate*getCertificate2ä
7java.security.KeyStore.getCertificate(java.lang.String)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÖ+ Ö(92è
<org.jabref.logic.net.ssl.TrustStoreManager?store@37.21:37.26CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÖ% Ö(*2§
Qorg.jabref.logic.net.ssl.TrustStoreManager.getCertificate(java.lang.String)!aliasCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÖ: Ö(?2ê
=org.jabref.logic.net.ssl.TrustStoreManager?LOGGER@32.32:32.38CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaá á(2§
Qorg.jabref.logic.net.ssl.TrustStoreManager.getCertificate(java.lang.String)!aliasCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaáH á(M2Æ
[org.jabref.logic.net.ssl.TrustStoreManager.getCertificate(java.lang.String)?e@134.35:134.36CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaáO á(P2©
Qorg.jabref.logic.net.ssl.TrustStoreManager.getCertificate(java.lang.String)!alias	PARAMETERI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÉ1 É(62µ
[org.jabref.logic.net.ssl.TrustStoreManager.getCertificate(java.lang.String)?e@134.35:134.36DECLARATIONI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÜ# Ü($2|
"java.security.cert.X509CertificateRETURN_TYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÉ É(⁄
Qorg.jabref.logic.net.ssl.TrustStoreManager.getCertificate(java.lang.String)!alias	PARAMETERI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÉ1 É(6"
typeString"
isFinalfalse"!
declarationStringString alias*alias2c
java.lang.StringTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÉ* É(0Ä
[org.jabref.logic.net.ssl.TrustStoreManager.getCertificate(java.lang.String)?e@134.35:134.36VARIABLEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÜ# Ü($"
typeKeyStoreException"
isFinalfalse"(
declarationStringKeyStoreException e*e2r
java.security.KeyStoreExceptionTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÜ Ü("“*
]org.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)METHODI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaí í(5"
isFinalfalse"Õ
declarationString∑<mark class="modifier">public </mark><mark class="modifier">static </mark><mark class="modifier">void</mark> <mark class="method">createTruststoreFileIfNotExist</mark>(Path storePath)"
isStatictrue"
accesspublic"

isAbstractfalse"
typevoid*createTruststoreFileIfNotExist2v
#java.nio.file.Path.toAbsolutePath()CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaî; î(I2°
Njava.nio.file.Files.notExists(java.nio.file.Path, java.nio.file.LinkOption...)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaï ï(2v
#java.nio.file.Path.of(java.net.URI)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javañ. ñ(02g
java.net.URL.toURI()CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javañl ñ(q2Ä
-java.lang.Class.getResource(java.lang.String)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javañI ñ(T2“
java.nio.file.Files.createDirectories(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaó ó('2q
java.nio.file.Path.getParent()CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaó2 ó(;2∞
]java.nio.file.Files.copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaò ò(2•
Rorg.jabref.logic.net.ssl.TrustStoreManager.configureTrustStore(java.nio.file.Path)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaú ú(#2ê
=org.jabref.logic.net.ssl.TrustStoreManager?LOGGER@32.32:32.38CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaî î(2∫
gorg.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)!storePathCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaî1 î(:2∫
gorg.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)!storePathCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaï  ï()2∫
gorg.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)!storePathCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaó( ó(12–
}org.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)?storeResourcePath@150.21:150.38CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaò ò(,2∫
gorg.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)!storePathCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaò. ò(72∫
gorg.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)!storePathCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaú$ ú(-2ê
=org.jabref.logic.net.ssl.TrustStoreManager?LOGGER@32.32:32.38CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaû û(2∫
gorg.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)!storePathCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaûA û(J2¬
oorg.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)?e@157.114:157.115CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaûL û(M2ê
=org.jabref.logic.net.ssl.TrustStoreManager?LOGGER@32.32:32.38CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java° °(2¿
morg.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)?e@160.29:160.30CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java°/ °(02ê
=org.jabref.logic.net.ssl.TrustStoreManager?LOGGER@32.32:32.38CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java£ £(2¿
morg.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)?e@162.36:162.37CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java£- £(.2ø
gorg.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)!storePath	PARAMETERI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaí; í(D2◊
}org.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)?storeResourcePath@150.21:150.38DECLARATIONI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javañ ñ(&2…
oorg.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)?e@157.114:157.115DECLARATIONI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaùr ù(s2«
morg.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)?e@160.29:160.30DECLARATIONI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java† †(2«
morg.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)?e@162.36:162.37DECLARATIONI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java¢$ ¢(%2^
voidRETURN_TYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaí í(è
}org.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)?storeResourcePath@150.21:150.38VARIABLEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javañ ñ(&"
typePath"
isFinalfalse"∫
declarationString§<mark class="modifier"> </mark>Path <mark class="class-field">storeResourcePath</mark> = Path.of(TrustStoreManager.class.getResource("/ssl/truststore.jks").toURI())*storeResourcePath2e
java.nio.file.PathTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javañ ñ(2v
#java.nio.file.Path.of(java.net.URI)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javañ. ñ(02g
java.net.URL.toURI()CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javañl ñ(q2Ä
-java.lang.Class.getResource(java.lang.String)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javañI ñ(Tˆ
gorg.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)!storePath	PARAMETERI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaí; í(D"
typePath"
isFinalfalse"#
declarationStringPath storePath*	storePath2e
java.nio.file.PathTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaí6 í(:¶
oorg.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)?e@157.114:157.115VARIABLEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaùr ù(s"d
type\KeyManagementException | NoSuchAlgorithmException | KeyStoreException | CertificateException"
isFinalfalse"s
declarationString^KeyManagementException | NoSuchAlgorithmException | KeyStoreException | CertificateException e*e2Ì
ôjava.security.KeyManagementException | java.security.NoSuchAlgorithmException | java.security.KeyStoreException | java.security.cert.CertificateExceptionTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaù ù(q˙
morg.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)?e@160.29:160.30VARIABLEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java† †("
typeIOException"
isFinalfalse""
declarationStringIOException e*e2f
java.io.IOExceptionTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java† †(ê
morg.jabref.logic.net.ssl.TrustStoreManager.createTruststoreFileIfNotExist(java.nio.file.Path)?e@162.36:162.37VARIABLEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java¢$ ¢(%"
typeURISyntaxException"
isFinalfalse")
declarationStringURISyntaxException e*e2n
java.net.URISyntaxExceptionTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java¢ ¢(#—
Rorg.jabref.logic.net.ssl.TrustStoreManager.configureTrustStore(java.nio.file.Path)METHODI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java® ®(+"
isFinalfalse"ﬂ
declarationString…<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">void</mark> <mark class="method">configureTrustStore</mark>(Path myStorePath)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>NoSuchAlgorithmException<mark class="modifier"><mark class="modifier">,</mark></mark> KeyManagementException<mark class="modifier"><mark class="modifier">,</mark></mark> KeyStoreException<mark class="modifier"><mark class="modifier">,</mark></mark> CertificateException<mark class="modifier"><mark class="modifier">,</mark></mark> IOException"
isStatictrue"
accessprivate"

isAbstractfalse"
typevoid*configureTrustStore2í
?org.jabref.logic.net.ssl.TrustStoreManager.getJreTrustManager()CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java™+ ™(=2ß
Torg.jabref.logic.net.ssl.TrustStoreManager.getJabRefTrustManager(java.nio.file.Path)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java´* ´(?2◊
Éorg.jabref.logic.net.ssl.TrustStoreManager.createMergedTrustManager(javax.net.ssl.X509TrustManager, javax.net.ssl.X509TrustManager)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java≠. ≠(F2≥
`org.jabref.logic.net.ssl.TrustStoreManager.setSystemTrustManager(javax.net.ssl.X509TrustManager)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÆ Æ(2±
^org.jabref.logic.net.ssl.TrustStoreManager.configureTrustStore(java.nio.file.Path)!myStorePathCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java´@ ´(K2√
porg.jabref.logic.net.ssl.TrustStoreManager.configureTrustStore(java.nio.file.Path)?jreTrustManager@170.25:170.40CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java≠G ≠(V2¬
oorg.jabref.logic.net.ssl.TrustStoreManager.configureTrustStore(java.nio.file.Path)?myTrustManager@171.25:171.39CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java≠X ≠(f2∆
sorg.jabref.logic.net.ssl.TrustStoreManager.configureTrustStore(java.nio.file.Path)?mergedTrustManager@173.25:173.43CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÆ Æ(02∂
^org.jabref.logic.net.ssl.TrustStoreManager.configureTrustStore(java.nio.file.Path)!myStorePath	PARAMETERI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java®1 ®(<2 
porg.jabref.logic.net.ssl.TrustStoreManager.configureTrustStore(java.nio.file.Path)?jreTrustManager@170.25:170.40DECLARATIONI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java™ ™((2…
oorg.jabref.logic.net.ssl.TrustStoreManager.configureTrustStore(java.nio.file.Path)?myTrustManager@171.25:171.39DECLARATIONI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java´ ´('2Õ
sorg.jabref.logic.net.ssl.TrustStoreManager.configureTrustStore(java.nio.file.Path)?mergedTrustManager@173.25:173.43DECLARATIONI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java≠ ≠(+2^
voidRETURN_TYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java® ®(õ
porg.jabref.logic.net.ssl.TrustStoreManager.configureTrustStore(java.nio.file.Path)?jreTrustManager@170.25:170.40VARIABLEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java™ ™(("
typeX509TrustManager"
isFinalfalse"å
declarationStringw<mark class="modifier"> </mark>X509TrustManager <mark class="class-field">jreTrustManager</mark> = getJreTrustManager()*jreTrustManager2q
javax.net.ssl.X509TrustManagerTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java™ ™(2í
?org.jabref.logic.net.ssl.TrustStoreManager.getJreTrustManager()CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java™+ ™(=
oorg.jabref.logic.net.ssl.TrustStoreManager.configureTrustStore(java.nio.file.Path)?myTrustManager@171.25:171.39VARIABLEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java´ ´('"
typeX509TrustManager"
isFinalfalse"ö
declarationStringÑ<mark class="modifier"> </mark>X509TrustManager <mark class="class-field">myTrustManager</mark> = getJabRefTrustManager(myStorePath)*myTrustManager2q
javax.net.ssl.X509TrustManagerTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java´ ´(2ß
Torg.jabref.logic.net.ssl.TrustStoreManager.getJabRefTrustManager(java.nio.file.Path)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java´* ´(?2±
^org.jabref.logic.net.ssl.TrustStoreManager.configureTrustStore(java.nio.file.Path)!myStorePathCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java´@ ´(Kö	
sorg.jabref.logic.net.ssl.TrustStoreManager.configureTrustStore(java.nio.file.Path)?mergedTrustManager@173.25:173.43VARIABLEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java≠ ≠(+"
typeX509TrustManager"
isFinalfalse"µ
declarationStringü<mark class="modifier"> </mark>X509TrustManager <mark class="class-field">mergedTrustManager</mark> = createMergedTrustManager(jreTrustManager, myTrustManager)*mergedTrustManager2q
javax.net.ssl.X509TrustManagerTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java≠ ≠(2◊
Éorg.jabref.logic.net.ssl.TrustStoreManager.createMergedTrustManager(javax.net.ssl.X509TrustManager, javax.net.ssl.X509TrustManager)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java≠. ≠(F2√
porg.jabref.logic.net.ssl.TrustStoreManager.configureTrustStore(java.nio.file.Path)?jreTrustManager@170.25:170.40CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java≠G ≠(V2¬
oorg.jabref.logic.net.ssl.TrustStoreManager.configureTrustStore(java.nio.file.Path)?myTrustManager@171.25:171.39CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java≠X ≠(fÒ
^org.jabref.logic.net.ssl.TrustStoreManager.configureTrustStore(java.nio.file.Path)!myStorePath	PARAMETERI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java®1 ®(<"
typePath"
isFinalfalse"%
declarationStringPath myStorePath*myStorePath2e
java.nio.file.PathTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java®, ®(0à
?org.jabref.logic.net.ssl.TrustStoreManager.getJreTrustManager()METHODI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java±$ ±(6"
isFinalfalse"Õ
declarationString∑<mark class="modifier">private </mark><mark class="modifier">static </mark>X509TrustManager <mark class="method">getJreTrustManager</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>NoSuchAlgorithmException<mark class="modifier"><mark class="modifier">,</mark></mark> KeyStoreException"
isStatictrue"
accessprivate"

isAbstractfalse"
typeX509TrustManager*getJreTrustManager2≠
Zorg.jabref.logic.net.ssl.TrustStoreManager.findDefaultTrustManager(java.security.KeyStore)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java≤ ≤(&2x
javax.net.ssl.X509TrustManagerRETURN_TYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java± ±(#È
Torg.jabref.logic.net.ssl.TrustStoreManager.getJabRefTrustManager(java.nio.file.Path)METHODI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaµ$ µ(9"
isFinalfalse"˚
declarationStringÂ<mark class="modifier">private </mark><mark class="modifier">static </mark>X509TrustManager <mark class="method">getJabRefTrustManager</mark>(Path myStorePath)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>KeyStoreException<mark class="modifier"><mark class="modifier">,</mark></mark> IOException<mark class="modifier"><mark class="modifier">,</mark></mark> NoSuchAlgorithmException<mark class="modifier"><mark class="modifier">,</mark></mark> CertificateException"
isStatictrue"
accessprivate"

isAbstractfalse"
typeX509TrustManager*getJabRefTrustManager2¶
Sjava.nio.file.Files.newInputStream(java.nio.file.Path, java.nio.file.OpenOption...)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java∏( ∏(62á
4java.security.KeyStore.getInstance(java.lang.String)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaπ- π(82ã
8java.security.KeyStore.load(java.io.InputStream, char[])CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java∫ ∫(2q
java.lang.String.toCharArray()CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java∫5 ∫(@2≠
Zorg.jabref.logic.net.ssl.TrustStoreManager.findDefaultTrustManager(java.security.KeyStore)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaº º(*2≥
`org.jabref.logic.net.ssl.TrustStoreManager.getJabRefTrustManager(java.nio.file.Path)!myStorePathCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java∏7 ∏(B2¬
oorg.jabref.logic.net.ssl.TrustStoreManager.getJabRefTrustManager(java.nio.file.Path)?myTrustStore@185.21:185.33CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java∫ ∫(2º
iorg.jabref.logic.net.ssl.TrustStoreManager.getJabRefTrustManager(java.nio.file.Path)?myKeys@184.25:184.31CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java∫ ∫($2ò
Eorg.jabref.logic.net.ssl.TrustStoreManager?STORE_PASSWORD@33.32:33.46CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java∫& ∫(42¬
oorg.jabref.logic.net.ssl.TrustStoreManager.getJabRefTrustManager(java.nio.file.Path)?myTrustStore@185.21:185.33CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaº+ º(72∏
`org.jabref.logic.net.ssl.TrustStoreManager.getJabRefTrustManager(java.nio.file.Path)!myStorePath	PARAMETERI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaµ? µ(J2√
iorg.jabref.logic.net.ssl.TrustStoreManager.getJabRefTrustManager(java.nio.file.Path)?myKeys@184.25:184.31DECLARATIONI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java∏ ∏(2…
oorg.jabref.logic.net.ssl.TrustStoreManager.getJabRefTrustManager(java.nio.file.Path)?myTrustStore@185.21:185.33DECLARATIONI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaπ π(!2x
javax.net.ssl.X509TrustManagerRETURN_TYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaµ µ(#ƒ
iorg.jabref.logic.net.ssl.TrustStoreManager.getJabRefTrustManager(java.nio.file.Path)?myKeys@184.25:184.31VARIABLEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java∏ ∏("
typeInputStream"
isFinalfalse"ã
declarationStringv<mark class="modifier"> </mark>InputStream <mark class="class-field">myKeys</mark> = Files.newInputStream(myStorePath)*myKeys2f
java.io.InputStreamTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java∏ ∏(2¶
Sjava.nio.file.Files.newInputStream(java.nio.file.Path, java.nio.file.OpenOption...)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java∏( ∏(62≥
`org.jabref.logic.net.ssl.TrustStoreManager.getJabRefTrustManager(java.nio.file.Path)!myStorePathCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java∏7 ∏(B¯
oorg.jabref.logic.net.ssl.TrustStoreManager.getJabRefTrustManager(java.nio.file.Path)?myTrustStore@185.21:185.33VARIABLEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaπ π(!"
typeKeyStore"
isFinalfalse"à
declarationStrings<mark class="modifier"> </mark>KeyStore <mark class="class-field">myTrustStore</mark> = KeyStore.getInstance("jks")*myTrustStore2i
java.security.KeyStoreTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaπ π(2á
4java.security.KeyStore.getInstance(java.lang.String)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaπ- π(8Û
`org.jabref.logic.net.ssl.TrustStoreManager.getJabRefTrustManager(java.nio.file.Path)!myStorePath	PARAMETERI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaµ? µ(J"
typePath"
isFinalfalse"%
declarationStringPath myStorePath*myStorePath2e
java.nio.file.PathTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaµ: µ(>õ
Zorg.jabref.logic.net.ssl.TrustStoreManager.findDefaultTrustManager(java.security.KeyStore)METHODI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java¿$ ¿(;"
isFinalfalse"„
declarationStringÕ<mark class="modifier">private </mark><mark class="modifier">static </mark>X509TrustManager <mark class="method">findDefaultTrustManager</mark>(KeyStore keyStore)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>NoSuchAlgorithmException<mark class="modifier"><mark class="modifier">,</mark></mark> KeyStoreException"
isStatictrue"
accessprivate"

isAbstractfalse"
typeX509TrustManager*findDefaultTrustManager2í
?javax.net.ssl.TrustManagerFactory.getInstance(java.lang.String)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java¬6 ¬(A2ä
7javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm()CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java¬V ¬(i2ë
>javax.net.ssl.TrustManagerFactory.init(java.security.KeyStore)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java√ √(2á
4javax.net.ssl.TrustManagerFactory.getTrustManagers()CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java≈# ≈(32ø
lorg.jabref.logic.net.ssl.TrustStoreManager.findDefaultTrustManager(java.security.KeyStore)?tmf@194.28:194.31CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java√ √(2∂
corg.jabref.logic.net.ssl.TrustStoreManager.findDefaultTrustManager(java.security.KeyStore)!keyStoreCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java√ √(2ø
lorg.jabref.logic.net.ssl.TrustStoreManager.findDefaultTrustManager(java.security.KeyStore)?tmf@194.28:194.31CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java≈ ≈("2æ
korg.jabref.logic.net.ssl.TrustStoreManager.findDefaultTrustManager(java.security.KeyStore)?tm@197.26:197.28CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java∆ ∆(2ª
corg.jabref.logic.net.ssl.TrustStoreManager.findDefaultTrustManager(java.security.KeyStore)!keyStore	PARAMETERI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java¿E ¿(M2∆
lorg.jabref.logic.net.ssl.TrustStoreManager.findDefaultTrustManager(java.security.KeyStore)?tmf@194.28:194.31DECLARATIONI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java¬ ¬(2≈
korg.jabref.logic.net.ssl.TrustStoreManager.findDefaultTrustManager(java.security.KeyStore)?tm@197.26:197.28DECLARATIONI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java≈ ≈(2x
javax.net.ssl.X509TrustManagerRETURN_TYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java¿ ¿(#Ã
lorg.jabref.logic.net.ssl.TrustStoreManager.findDefaultTrustManager(java.security.KeyStore)?tmf@194.28:194.31VARIABLEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java¬ ¬("
typeTrustManagerFactory"
isFinalfalse"∫
declarationString§<mark class="modifier"> </mark>TrustManagerFactory <mark class="class-field">tmf</mark> = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())*tmf2t
!javax.net.ssl.TrustManagerFactoryTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java¬ ¬(2í
?javax.net.ssl.TrustManagerFactory.getInstance(java.lang.String)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java¬6 ¬(A2ä
7javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm()CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java¬V ¬(i√
korg.jabref.logic.net.ssl.TrustStoreManager.findDefaultTrustManager(java.security.KeyStore)?tm@197.26:197.28VARIABLEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java≈ ≈("
typeTrustManager"
isFinalfalse"d
declarationStringO<mark class="modifier"> </mark>TrustManager <mark class="class-field">tm</mark>*tm2m
javax.net.ssl.TrustManagerTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java≈ ≈(¸
corg.jabref.logic.net.ssl.TrustStoreManager.findDefaultTrustManager(java.security.KeyStore)!keyStore	PARAMETERI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java¿E ¿(M"
typeKeyStore"
isFinalfalse"&
declarationStringKeyStore keyStore*keyStore2i
java.security.KeyStoreTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java¿< ¿(D”&
Éorg.jabref.logic.net.ssl.TrustStoreManager.createMergedTrustManager(javax.net.ssl.X509TrustManager, javax.net.ssl.X509TrustManager)METHODI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÕ$ Õ(<"
isFinalfalse"©
declarationStringì<mark class="modifier">private </mark><mark class="modifier">static </mark>X509TrustManager <mark class="method">createMergedTrustManager</mark>(X509TrustManager jreTrustManager<mark class="modifier"><mark class="modifier">,</mark></mark> X509TrustManager customTrustManager)"
isStatictrue"
accessprivate"

isAbstractfalse"
typeX509TrustManager*createMergedTrustManager2Ü
3javax.net.ssl.X509TrustManager.getAcceptedIssuers()CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java‘' ‘(92º
ijavax.net.ssl.X509TrustManager.checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java⁄' ⁄(92º
ijavax.net.ssl.X509TrustManager.checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java›$ ›(62º
ijavax.net.ssl.X509TrustManager.checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÂ  Â(22ﬁ
äorg.jabref.logic.net.ssl.TrustStoreManager.Anonymous-4c190254-8893-4952-92b1-528c285a44e0.Anonymous-4c190254-8893-4952-92b1-528c285a44e0()CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaœ œ(#2Á
ìorg.jabref.logic.net.ssl.TrustStoreManager.createMergedTrustManager(javax.net.ssl.X509TrustManager, javax.net.ssl.X509TrustManager)!jreTrustManagerCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java‘ ‘(&2Í
ñorg.jabref.logic.net.ssl.TrustStoreManager.createMergedTrustManager(javax.net.ssl.X509TrustManager, javax.net.ssl.X509TrustManager)!customTrustManagerCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java⁄ ⁄(&2˛
™org.jabref.logic.net.ssl.TrustStoreManager.Anonymous-52637484-3333-4807-b1ad-3a17e04edd93.checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)!chainCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java⁄: ⁄(?2Å
≠org.jabref.logic.net.ssl.TrustStoreManager.Anonymous-4a8f1813-f449-42ee-a66f-5030bee87f76.checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)!authTypeCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java⁄A ⁄(I2Á
ìorg.jabref.logic.net.ssl.TrustStoreManager.createMergedTrustManager(javax.net.ssl.X509TrustManager, javax.net.ssl.X509TrustManager)!jreTrustManagerCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java› ›(#2˛
™org.jabref.logic.net.ssl.TrustStoreManager.Anonymous-de52c3a0-9746-4e12-806f-c5c884b35ab6.checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)!chainCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java›7 ›(<2Å
≠org.jabref.logic.net.ssl.TrustStoreManager.Anonymous-d627db5e-976c-4afc-a899-e6c9b6f9a908.checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)!authTypeCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java›> ›(F2Á
ìorg.jabref.logic.net.ssl.TrustStoreManager.createMergedTrustManager(javax.net.ssl.X509TrustManager, javax.net.ssl.X509TrustManager)!jreTrustManagerCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÂ Â(2˛
™org.jabref.logic.net.ssl.TrustStoreManager.Anonymous-fdc375a5-ca5a-4cdd-bc34-dddb346ae9df.checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String)!chainCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÂ3 Â(82Å
≠org.jabref.logic.net.ssl.TrustStoreManager.Anonymous-960eec44-610b-468c-8023-97dfce0d0bd3.checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String)!authTypeCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÂ: Â(B2Ï
ìorg.jabref.logic.net.ssl.TrustStoreManager.createMergedTrustManager(javax.net.ssl.X509TrustManager, javax.net.ssl.X509TrustManager)!jreTrustManager	PARAMETERI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÕN Õ(]2Ô
ñorg.jabref.logic.net.ssl.TrustStoreManager.createMergedTrustManager(javax.net.ssl.X509TrustManager, javax.net.ssl.X509TrustManager)!customTrustManager	PARAMETERI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaŒN Œ(`2è
¥org.jabref.logic.net.ssl.TrustStoreManager.Anonymous-c1b4d18f-a318-43da-87b8-ec9b3eeba9a6.checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)?e@219.46:219.47DECLARATIONI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java€. €(/2x
javax.net.ssl.X509TrustManagerRETURN_TYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÕ Õ(#”
ìorg.jabref.logic.net.ssl.TrustStoreManager.createMergedTrustManager(javax.net.ssl.X509TrustManager, javax.net.ssl.X509TrustManager)!jreTrustManager	PARAMETERI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÕN Õ(]"
typeX509TrustManager"
isFinalfalse"5
declarationString X509TrustManager jreTrustManager*jreTrustManager2q
javax.net.ssl.X509TrustManagerTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÕ= Õ(M‹
ñorg.jabref.logic.net.ssl.TrustStoreManager.createMergedTrustManager(javax.net.ssl.X509TrustManager, javax.net.ssl.X509TrustManager)!customTrustManager	PARAMETERI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaŒN Œ(`"
typeX509TrustManager"
isFinalfalse"8
declarationString#X509TrustManager customTrustManager*customTrustManager2q
javax.net.ssl.X509TrustManagerTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaŒ= Œ(Mﬁ
™org.jabref.logic.net.ssl.TrustStoreManager.Anonymous-5aabad0b-46d0-4ddb-b217-f76954535318.checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)!chain	PARAMETERI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÿ= ÿ(B"
typeX509Certificate[]"
isFinalfalse",
declarationStringX509Certificate[] chain*chain2w
$java.security.cert.X509Certificate[]TYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÿ+ ÿ(<Ω
≠org.jabref.logic.net.ssl.TrustStoreManager.Anonymous-f5c7b82a-fb37-4a3d-8754-f8e3fee350dc.checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)!authType	PARAMETERI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÿK ÿ(S"
typeString"
isFinalfalse"$
declarationStringString authType*authType2c
java.lang.StringTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÿD ÿ(JË
¥org.jabref.logic.net.ssl.TrustStoreManager.Anonymous-207701bf-8f35-4782-919e-d258b8958a08.checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)?e@219.46:219.47VARIABLEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java€. €(/"
typeCertificateException"
isFinalfalse"+
declarationStringCertificateException e*e2z
'java.security.cert.CertificateExceptionTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java€ €(-ﬁ
™org.jabref.logic.net.ssl.TrustStoreManager.Anonymous-e19ee0d3-6a1a-4f38-8b4e-dff59a5095eb.checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String)!chain	PARAMETERI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java‚= ‚(B"
typeX509Certificate[]"
isFinalfalse",
declarationStringX509Certificate[] chain*chain2w
$java.security.cert.X509Certificate[]TYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java‚+ ‚(<Ω
≠org.jabref.logic.net.ssl.TrustStoreManager.Anonymous-93282e8f-8e28-4916-ad7d-c3d83858b5c6.checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String)!authType	PARAMETERI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java‚K ‚(S"
typeString"
isFinalfalse"$
declarationStringString authType*authType2c
java.lang.StringTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java‚D ‚(JÜ
`org.jabref.logic.net.ssl.TrustStoreManager.setSystemTrustManager(javax.net.ssl.X509TrustManager)METHODI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÍ Í(-"
isFinalfalse"ä
declarationStringÙ<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">void</mark> <mark class="method">setSystemTrustManager</mark>(X509TrustManager mergedTrustManager)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>NoSuchAlgorithmException<mark class="modifier"><mark class="modifier">,</mark></mark> KeyManagementException"
isStatictrue"
accessprivate"

isAbstractfalse"
typevoid*setSystemTrustManager2â
6javax.net.ssl.SSLContext.getInstance(java.lang.String)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÏ+ Ï(62∆
sjavax.net.ssl.SSLContext.init(javax.net.ssl.KeyManager[], javax.net.ssl.TrustManager[], java.security.SecureRandom)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÌ Ì(2ê
=javax.net.ssl.SSLContext.setDefault(javax.net.ssl.SSLContext)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÒ Ò(2Æ
[javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÚ Ú(52~
+javax.net.ssl.SSLContext.getSocketFactory()CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÚA Ú(Q2Ã
yorg.jabref.logic.net.ssl.TrustStoreManager.setSystemTrustManager(javax.net.ssl.X509TrustManager)?sslContext@236.19:236.29CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÌ Ì(2∆
sorg.jabref.logic.net.ssl.TrustStoreManager.setSystemTrustManager(javax.net.ssl.X509TrustManager)!mergedTrustManagerCALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÌ2 Ì(D2Ã
yorg.jabref.logic.net.ssl.TrustStoreManager.setSystemTrustManager(javax.net.ssl.X509TrustManager)?sslContext@236.19:236.29CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÒ Ò((2Ã
yorg.jabref.logic.net.ssl.TrustStoreManager.setSystemTrustManager(javax.net.ssl.X509TrustManager)?sslContext@236.19:236.29CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÚ6 Ú(@2À
sorg.jabref.logic.net.ssl.TrustStoreManager.setSystemTrustManager(javax.net.ssl.X509TrustManager)!mergedTrustManager	PARAMETERI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÍ? Í(Q2”
yorg.jabref.logic.net.ssl.TrustStoreManager.setSystemTrustManager(javax.net.ssl.X509TrustManager)?sslContext@236.19:236.29DECLARATIONI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÏ Ï(2^
voidRETURN_TYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÍ Í(à
yorg.jabref.logic.net.ssl.TrustStoreManager.setSystemTrustManager(javax.net.ssl.X509TrustManager)?sslContext@236.19:236.29VARIABLEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÏ Ï("
type
SSLContext"
isFinalfalse"ä
declarationStringu<mark class="modifier"> </mark>SSLContext <mark class="class-field">sslContext</mark> = SSLContext.getInstance("TLS")*
sslContext2k
javax.net.ssl.SSLContextTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÏ Ï(2â
6javax.net.ssl.SSLContext.getInstance(java.lang.String)CALLI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÏ+ Ï(6∏
sorg.jabref.logic.net.ssl.TrustStoreManager.setSystemTrustManager(javax.net.ssl.X509TrustManager)!mergedTrustManager	PARAMETERI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÍ? Í(Q"
typeX509TrustManager"
isFinalfalse"8
declarationString#X509TrustManager mergedTrustManager*mergedTrustManager2q
javax.net.ssl.X509TrustManagerTYPEI
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.javaÍ. Í(>™
=org.jabref.logic.net.ssl.TrustStoreManager?LOGGER@32.32:32.38VALUEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java    (&"
isFinaltrue"
typeLogger"Á
declarationString—<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>Logger <mark class="class-field">LOGGER</mark> = LoggerFactory.getLogger(TrustStoreManager.class);"
isStatictrue"
accessprivate*LOGGER2a
org.slf4j.LoggerTYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java   (ú
Eorg.jabref.logic.net.ssl.TrustStoreManager?STORE_PASSWORD@33.32:33.46VALUEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java!  !(."
isFinaltrue"
typeString"…
declarationString≥<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>String <mark class="class-field">STORE_PASSWORD</mark> = "changeit";"
isStatictrue"
accessprivate*STORE_PASSWORD2a
java.lang.StringTYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java! !(ÿ
@org.jabref.logic.net.ssl.TrustStoreManager?storePath@35.23:35.32VALUEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java# #( "
isFinaltrue"
typePath"é
declarationStringy<mark class="modifier">private </mark><mark class="modifier">final </mark>Path <mark class="class-field">storePath</mark>"
isStaticfalse"
accessprivate*	storePath2c
java.nio.file.PathTYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java# #(∑
<org.jabref.logic.net.ssl.TrustStoreManager?store@37.21:37.26VARIABLEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java% %("
isFinalfalse"
typeKeyStore"j
declarationStringU<mark class="modifier">private </mark>KeyStore <mark class="class-field">store</mark>"
isStaticfalse"
accessprivate*store2g
java.security.KeyStoreTYPEG
=src\main\java\org\jabref\logic\net\ssl\TrustStoreManager.java% %(