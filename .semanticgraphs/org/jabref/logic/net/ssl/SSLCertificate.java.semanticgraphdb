
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaŸ
'org.jabref.logic.net.ssl.SSLCertificateCLASSD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java ("#
packageorg.jabref.logic.net.ssl"
isFinalfalse"
inner classfalse"

isAbstractfalse"l
declarationStringW<mark class="modifier">public </mark><mark class="modifier">class </mark>SSLCertificate"
accesspublic*SSLCertificate2á
±org.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)DECLARATIOND
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (2é
9org.jabref.logic.net.ssl.SSLCertificate.getSerialNumber()DECLARATIOND
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java' '(!2à
3org.jabref.logic.net.ssl.SSLCertificate.getIssuer()DECLARATIOND
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java+ +(2ã
6org.jabref.logic.net.ssl.SSLCertificate.getValidFrom()DECLARATIOND
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java/ /(!2â
4org.jabref.logic.net.ssl.SSLCertificate.getValidTo()DECLARATIOND
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java3 3(2î
?org.jabref.logic.net.ssl.SSLCertificate.getSignatureAlgorithm()DECLARATIOND
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java7 7('2â
4org.jabref.logic.net.ssl.SSLCertificate.getVersion()DECLARATIOND
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java; ;(2í
=org.jabref.logic.net.ssl.SSLCertificate.getSHA256Thumbprint()DECLARATIOND
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaB B(%2©
Torg.jabref.logic.net.ssl.SSLCertificate.fromX509(java.security.cert.X509Certificate)DECLARATIOND
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaF+ F(32ô
Dorg.jabref.logic.net.ssl.SSLCertificate.fromPath(java.nio.file.Path)DECLARATIOND
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaU+ U(32è
:org.jabref.logic.net.ssl.SSLCertificate?LOGGER@19.32:19.38DECLARATIOND
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java  (&2ô
Dorg.jabref.logic.net.ssl.SSLCertificate?sha256Thumbprint@21.25:21.41DECLARATIOND
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java ()2ï
@org.jabref.logic.net.ssl.SSLCertificate?serialNumber@22.25:22.37DECLARATIOND
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (%2è
:org.jabref.logic.net.ssl.SSLCertificate?issuer@23.25:23.31DECLARATIOND
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (2í
=org.jabref.logic.net.ssl.SSLCertificate?validFrom@24.28:24.37DECLARATIOND
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (%2ê
;org.jabref.logic.net.ssl.SSLCertificate?validTo@25.28:25.35DECLARATIOND
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (#2õ
Forg.jabref.logic.net.ssl.SSLCertificate?signatureAlgorithm@26.25:26.43DECLARATIOND
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (+2ê
;org.jabref.logic.net.ssl.SSLCertificate?version@27.26:27.33DECLARATIOND
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (!Ω-
±org.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)CONSTRUCTORD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java ("’
declarationStringø<mark class="modifier">public </mark><mark class="method">SSLCertificate</mark>(byte[] encoded<mark class="modifier"><mark class="modifier">,</mark></mark> String serialNumber<mark class="modifier"><mark class="modifier">,</mark></mark> String issuer<mark class="modifier"><mark class="modifier">,</mark></mark> LocalDate validFrom<mark class="modifier"><mark class="modifier">,</mark></mark> LocalDate validTo<mark class="modifier"><mark class="modifier">,</mark></mark> String signatureAlgorithm<mark class="modifier"><mark class="modifier">,</mark></mark> Integer version)*SSLCertificate2ç
æorg.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)!serialNumberCALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java ((2á
∏org.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)!issuerCALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (2ä
ªorg.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)!validFromCALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java   ("2à
πorg.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)!validToCALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java! !(2ì
ƒorg.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)!signatureAlgorithmCALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java"" "(42à
πorg.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)!versionCALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java# #(2à
πorg.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)!encodedCALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java$; $(B2é
@org.jabref.logic.net.ssl.SSLCertificate?serialNumber@22.25:22.37CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (2à
:org.jabref.logic.net.ssl.SSLCertificate?issuer@23.25:23.31CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (2ã
=org.jabref.logic.net.ssl.SSLCertificate?validFrom@24.28:24.37CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java   (2â
;org.jabref.logic.net.ssl.SSLCertificate?validTo@25.28:25.35CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java! !(2î
Forg.jabref.logic.net.ssl.SSLCertificate?signatureAlgorithm@26.25:26.43CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java" "(2â
;org.jabref.logic.net.ssl.SSLCertificate?version@27.26:27.33CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java# #(2í
Dorg.jabref.logic.net.ssl.SSLCertificate?sha256Thumbprint@21.25:21.41CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java$ $(2ç
πorg.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)!encoded	PARAMETERD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java! ((2í
æorg.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)!serialNumber	PARAMETERD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java1 (=2å
∏org.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)!issuer	PARAMETERD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaF (L2è
ªorg.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)!validFrom	PARAMETERD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaX (a2ç
πorg.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)!validTo	PARAMETERD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javam (t2ô
ƒorg.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)!signatureAlgorithm	PARAMETERE
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java} (è2è
πorg.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)!version	PARAMETERF
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaô (†2|
'org.jabref.logic.net.ssl.SSLCertificateRETURN_TYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (≥
πorg.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)!encoded	PARAMETERD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java! (("
typebyte[]"
isFinalfalse"#
declarationStringbyte[] encoded*encoded2T
byte[]TYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java ( Ã
æorg.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)!serialNumber	PARAMETERD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java1 (="
typeString"
isFinalfalse"(
declarationStringString serialNumber*serialNumber2^
java.lang.StringTYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java* (0∫
∏org.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)!issuer	PARAMETERD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaF (L"
typeString"
isFinalfalse""
declarationStringString issuer*issuer2^
java.lang.StringTYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java? (EÃ
ªorg.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)!validFrom	PARAMETERD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaX (a"
type	LocalDate"
isFinalfalse"(
declarationStringLocalDate validFrom*	validFrom2a
java.time.LocalDateTYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaN (W∆
πorg.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)!validTo	PARAMETERD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javam (t"
type	LocalDate"
isFinalfalse"&
declarationStringLocalDate validTo*validTo2a
java.time.LocalDateTYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javac (lﬂ
ƒorg.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)!signatureAlgorithm	PARAMETERE
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java} (è"
typeString"
isFinalfalse".
declarationStringString signatureAlgorithm*signatureAlgorithm2^
java.lang.StringTYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javav (|ƒ
πorg.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)!version	PARAMETERF
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaô (†"
typeInteger"
isFinalfalse"$
declarationStringInteger version*version2a
java.lang.IntegerTYPEF
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaë (òﬁ
9org.jabref.logic.net.ssl.SSLCertificate.getSerialNumber()METHODD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java' '(!"
isFinalfalse"n
declarationStringY<mark class="modifier">public </mark>String <mark class="method">getSerialNumber</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*getSerialNumber2é
@org.jabref.logic.net.ssl.SSLCertificate?serialNumber@22.25:22.37CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java( ((2e
java.lang.StringRETURN_TYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java' '(∆
3org.jabref.logic.net.ssl.SSLCertificate.getIssuer()METHODD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java+ +("
isFinalfalse"h
declarationStringS<mark class="modifier">public </mark>String <mark class="method">getIssuer</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*	getIssuer2à
:org.jabref.logic.net.ssl.SSLCertificate?issuer@23.25:23.31CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java, ,(2e
java.lang.StringRETURN_TYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java+ +(€
6org.jabref.logic.net.ssl.SSLCertificate.getValidFrom()METHODD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java/ /(!"
isFinalfalse"n
declarationStringY<mark class="modifier">public </mark>LocalDate <mark class="method">getValidFrom</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
type	LocalDate*getValidFrom2ã
=org.jabref.logic.net.ssl.SSLCertificate?validFrom@24.28:24.37CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java0 0(2h
java.time.LocalDateRETURN_TYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java/ /(”
4org.jabref.logic.net.ssl.SSLCertificate.getValidTo()METHODD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java3 3("
isFinalfalse"l
declarationStringW<mark class="modifier">public </mark>LocalDate <mark class="method">getValidTo</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
type	LocalDate*
getValidTo2â
;org.jabref.logic.net.ssl.SSLCertificate?validTo@25.28:25.35CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java4 4(2h
java.time.LocalDateRETURN_TYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java3 3(ˆ
?org.jabref.logic.net.ssl.SSLCertificate.getSignatureAlgorithm()METHODD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java7 7('"
isFinalfalse"t
declarationString_<mark class="modifier">public </mark>String <mark class="method">getSignatureAlgorithm</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*getSignatureAlgorithm2î
Forg.jabref.logic.net.ssl.SSLCertificate?signatureAlgorithm@26.25:26.43CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java8 8(!2e
java.lang.StringRETURN_TYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java7 7(Õ
4org.jabref.logic.net.ssl.SSLCertificate.getVersion()METHODD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java; ;("
isFinalfalse"j
declarationStringU<mark class="modifier">public </mark>Integer <mark class="method">getVersion</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeInteger*
getVersion2â
;org.jabref.logic.net.ssl.SSLCertificate?version@27.26:27.33CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java< <(2f
java.lang.IntegerRETURN_TYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java; ;(Ó
=org.jabref.logic.net.ssl.SSLCertificate.getSHA256Thumbprint()METHODD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaB B(%"
isFinalfalse"r
declarationString]<mark class="modifier">public </mark>String <mark class="method">getSHA256Thumbprint</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*getSHA256Thumbprint2í
Dorg.jabref.logic.net.ssl.SSLCertificate?sha256Thumbprint@21.25:21.41CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaC C(2e
java.lang.StringRETURN_TYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaB B(Õ)
Torg.jabref.logic.net.ssl.SSLCertificate.fromX509(java.security.cert.X509Certificate)METHODD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaF+ F(3"
isFinalfalse"ƒ
declarationStringÆ<mark class="modifier">public </mark><mark class="modifier">static </mark>Optional&lt;SSLCertificate&gt; <mark class="method">fromX509</mark>(X509Certificate x509Certificate)"
isStatictrue"
accesspublic"

isAbstractfalse" 
typeOptional<SSLCertificate>*fromX5092q
#java.util.Objects.requireNonNull(T)CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaG G(2f
java.util.Optional.of(T)CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaI I(2y
+java.security.cert.Certificate.getEncoded()CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaIB I(L2m
java.math.BigInteger.toString()CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaIr I(z2Ç
4java.security.cert.X509Certificate.getSerialNumber()CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaI` I(o2~
0javax.security.auth.x500.X500Principal.getName()CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaJ= J(D2â
;java.security.cert.X509Certificate.getIssuerX500Principal()CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaJ$ J(:2ê
Bjava.time.LocalDate.ofInstant(java.time.Instant, java.time.ZoneId)CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaK K('2h
java.util.Date.toInstant()CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaKG K(P2
1java.security.cert.X509Certificate.getNotBefore()CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaK8 K(D2n
 java.time.ZoneId.systemDefault()CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaK[ K(h2ê
Bjava.time.LocalDate.ofInstant(java.time.Instant, java.time.ZoneId)CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaL L('2h
java.util.Date.toInstant()CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaLF L(O2~
0java.security.cert.X509Certificate.getNotAfter()CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaL8 L(C2n
 java.time.ZoneId.systemDefault()CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaLZ L(g2Ä
2java.security.cert.X509Certificate.getSigAlgName()CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaM$ M(12}
/java.security.cert.X509Certificate.getVersion()CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaN$ N(.2h
java.util.Optional.empty()CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaR R(2Ä
±org.jabref.logic.net.ssl.SSLCertificate.SSLCertificate(byte[], java.lang.String, java.lang.String, java.time.LocalDate, java.time.LocalDate, java.lang.String, java.lang.Integer)CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaI# I(12≤
dorg.jabref.logic.net.ssl.SSLCertificate.fromX509(java.security.cert.X509Certificate)!x509CertificateCALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaG G(.2≤
dorg.jabref.logic.net.ssl.SSLCertificate.fromX509(java.security.cert.X509Certificate)!x509CertificateCALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaI2 I(A2≤
dorg.jabref.logic.net.ssl.SSLCertificate.fromX509(java.security.cert.X509Certificate)!x509CertificateCALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaIP I(_2≤
dorg.jabref.logic.net.ssl.SSLCertificate.fromX509(java.security.cert.X509Certificate)!x509CertificateCALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaJ J(#2≤
dorg.jabref.logic.net.ssl.SSLCertificate.fromX509(java.security.cert.X509Certificate)!x509CertificateCALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaK( K(72≤
dorg.jabref.logic.net.ssl.SSLCertificate.fromX509(java.security.cert.X509Certificate)!x509CertificateCALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaL( L(72≤
dorg.jabref.logic.net.ssl.SSLCertificate.fromX509(java.security.cert.X509Certificate)!x509CertificateCALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaM M(#2≤
dorg.jabref.logic.net.ssl.SSLCertificate.fromX509(java.security.cert.X509Certificate)!x509CertificateCALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaN N(#2à
:org.jabref.logic.net.ssl.SSLCertificate?LOGGER@19.32:19.38CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaP P(2∞
borg.jabref.logic.net.ssl.SSLCertificate.fromX509(java.security.cert.X509Certificate)?e@79.46:79.47CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaP< P(=2∑
dorg.jabref.logic.net.ssl.SSLCertificate.fromX509(java.security.cert.X509Certificate)!x509Certificate	PARAMETERD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaFD F(S2∑
borg.jabref.logic.net.ssl.SSLCertificate.fromX509(java.security.cert.X509Certificate)?e@79.46:79.47DECLARATIOND
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaO. O(/2g
java.util.OptionalRETURN_TYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaF F(2Ö
'org.jabref.logic.net.ssl.SSLCertificateRETURN_TYPE_ARGUMENTD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaF F()õ
dorg.jabref.logic.net.ssl.SSLCertificate.fromX509(java.security.cert.X509Certificate)!x509Certificate	PARAMETERD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaFD F(S"
typeX509Certificate"
isFinalfalse"4
declarationStringX509Certificate x509Certificate*x509Certificate2p
"java.security.cert.X509CertificateTYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaF4 F(C£
borg.jabref.logic.net.ssl.SSLCertificate.fromX509(java.security.cert.X509Certificate)?e@79.46:79.47VARIABLED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaO. O(/"$
typeCertificateEncodingException"
isFinalfalse"3
declarationStringCertificateEncodingException e*e2}
/java.security.cert.CertificateEncodingExceptionTYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaO O(-Û
Dorg.jabref.logic.net.ssl.SSLCertificate.fromPath(java.nio.file.Path)METHODD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaU+ U(3"
isFinalfalse"≤
declarationStringú<mark class="modifier">public </mark><mark class="modifier">static </mark>Optional&lt;SSLCertificate&gt; <mark class="method">fromPath</mark>(Path certPath)"
isStatictrue"
accesspublic"

isAbstractfalse" 
typeOptional<SSLCertificate>*fromPath2q
#java.util.Objects.requireNonNull(T)CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaV V(2ë
Cjava.security.cert.CertificateFactory.getInstance(java.lang.String)CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaXG X(R2¢
Torg.jabref.logic.net.ssl.SSLCertificate.fromX509(java.security.cert.X509Certificate)CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaY Y(2ú
Njava.security.cert.CertificateFactory.generateCertificate(java.io.InputStream)CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaYA Y(T2i
java.nio.file.Path.toFile()CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaYr Y(x2h
java.util.Optional.empty()CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java_ _(2É
5java.io.FileInputStream.FileInputStream(java.io.File)CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaYY Y(h2õ
Morg.jabref.logic.net.ssl.SSLCertificate.fromPath(java.nio.file.Path)!certPathCALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaV V('2±
corg.jabref.logic.net.ssl.SSLCertificate.fromPath(java.nio.file.Path)?certificateFactory@88.31:88.49CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaY. Y(@2õ
Morg.jabref.logic.net.ssl.SSLCertificate.fromPath(java.nio.file.Path)!certPathCALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaYi Y(q2à
:org.jabref.logic.net.ssl.SSLCertificate?LOGGER@19.32:19.38CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java[ [(2†
Rorg.jabref.logic.net.ssl.SSLCertificate.fromPath(java.nio.file.Path)?e@90.38:90.39CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java[C [(D2à
:org.jabref.logic.net.ssl.SSLCertificate?LOGGER@19.32:19.38CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java] ](2õ
Morg.jabref.logic.net.ssl.SSLCertificate.fromPath(java.nio.file.Path)!certPathCALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java]4 ](<2†
Rorg.jabref.logic.net.ssl.SSLCertificate.fromPath(java.nio.file.Path)?e@92.39:92.40CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java]> ](?2†
Morg.jabref.logic.net.ssl.SSLCertificate.fromPath(java.nio.file.Path)!certPath	PARAMETERD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaU9 U(A2∏
corg.jabref.logic.net.ssl.SSLCertificate.fromPath(java.nio.file.Path)?certificateFactory@88.31:88.49DECLARATIOND
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaX X(12ß
Rorg.jabref.logic.net.ssl.SSLCertificate.fromPath(java.nio.file.Path)?e@90.38:90.39DECLARATIOND
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaZ& Z('2ß
Rorg.jabref.logic.net.ssl.SSLCertificate.fromPath(java.nio.file.Path)?e@92.39:92.40DECLARATIOND
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java\' \((2g
java.util.OptionalRETURN_TYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaU U(2Ö
'org.jabref.logic.net.ssl.SSLCertificateRETURN_TYPE_ARGUMENTD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaU U()ß
corg.jabref.logic.net.ssl.SSLCertificate.fromPath(java.nio.file.Path)?certificateFactory@88.31:88.49VARIABLED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaX X(1"
typeCertificateFactory"
isFinalfalse"§
declarationStringé<mark class="modifier"> </mark>CertificateFactory <mark class="class-field">certificateFactory</mark> = CertificateFactory.getInstance("X509")*certificateFactory2s
%java.security.cert.CertificateFactoryTYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaX X(2ë
Cjava.security.cert.CertificateFactory.getInstance(java.lang.String)CALLD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaXG X(R–
Morg.jabref.logic.net.ssl.SSLCertificate.fromPath(java.nio.file.Path)!certPath	PARAMETERD
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaU9 U(A"
typePath"
isFinalfalse""
declarationStringPath certPath*certPath2`
java.nio.file.PathTYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaU4 U(8˚
Rorg.jabref.logic.net.ssl.SSLCertificate.fromPath(java.nio.file.Path)?e@90.38:90.39VARIABLED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaZ& Z('"
typeCertificateException"
isFinalfalse"+
declarationStringCertificateException e*e2u
'java.security.cert.CertificateExceptionTYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.javaZ Z(%Û
Rorg.jabref.logic.net.ssl.SSLCertificate.fromPath(java.nio.file.Path)?e@92.39:92.40VARIABLED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java\' \(("
typeFileNotFoundException"
isFinalfalse",
declarationStringFileNotFoundException e*e2k
java.io.FileNotFoundExceptionTYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java\ \(&û
:org.jabref.logic.net.ssl.SSLCertificate?LOGGER@19.32:19.38VALUED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java  (&"
isFinaltrue"
typeLogger"‰
declarationStringŒ<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>Logger <mark class="class-field">LOGGER</mark> = LoggerFactory.getLogger(SSLCertificate.class);"
isStatictrue"
accessprivate*LOGGER2^
org.slf4j.LoggerTYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (Á
Dorg.jabref.logic.net.ssl.SSLCertificate?sha256Thumbprint@21.25:21.41VALUED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java ()"
isFinaltrue"
typeString"ò
declarationStringÇ<mark class="modifier">private </mark><mark class="modifier">final </mark>String <mark class="class-field">sha256Thumbprint</mark>"
isStaticfalse"
accessprivate*sha256Thumbprint2^
java.lang.StringTYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (⁄
@org.jabref.logic.net.ssl.SSLCertificate?serialNumber@22.25:22.37VALUED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (%"
isFinaltrue"
typeString"ì
declarationString~<mark class="modifier">private </mark><mark class="modifier">final </mark>String <mark class="class-field">serialNumber</mark>"
isStaticfalse"
accessprivate*serialNumber2^
java.lang.StringTYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (»
:org.jabref.logic.net.ssl.SSLCertificate?issuer@23.25:23.31VALUED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java ("
isFinaltrue"
typeString"ç
declarationStringx<mark class="modifier">private </mark><mark class="modifier">final </mark>String <mark class="class-field">issuer</mark>"
isStaticfalse"
accessprivate*issuer2^
java.lang.StringTYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (⁄
=org.jabref.logic.net.ssl.SSLCertificate?validFrom@24.28:24.37VALUED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (%"
isFinaltrue"
type	LocalDate"ì
declarationString~<mark class="modifier">private </mark><mark class="modifier">final </mark>LocalDate <mark class="class-field">validFrom</mark>"
isStaticfalse"
accessprivate*	validFrom2a
java.time.LocalDateTYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (‘
;org.jabref.logic.net.ssl.SSLCertificate?validTo@25.28:25.35VALUED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (#"
isFinaltrue"
type	LocalDate"ë
declarationString|<mark class="modifier">private </mark><mark class="modifier">final </mark>LocalDate <mark class="class-field">validTo</mark>"
isStaticfalse"
accessprivate*validTo2a
java.time.LocalDateTYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (Ì
Forg.jabref.logic.net.ssl.SSLCertificate?signatureAlgorithm@26.25:26.43VALUED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (+"
isFinaltrue"
typeString"ö
declarationStringÑ<mark class="modifier">private </mark><mark class="modifier">final </mark>String <mark class="class-field">signatureAlgorithm</mark>"
isStaticfalse"
accessprivate*signatureAlgorithm2^
java.lang.StringTYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (Œ
;org.jabref.logic.net.ssl.SSLCertificate?version@27.26:27.33VALUED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (!"
isFinaltrue"
typeInteger"è
declarationStringz<mark class="modifier">private </mark><mark class="modifier">final </mark>Integer <mark class="class-field">version</mark>"
isStaticfalse"
accessprivate*version2_
java.lang.IntegerTYPED
:src\main\java\org\jabref\logic\net\ssl\SSLCertificate.java (