
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java‚

&org.jabref.logic.git.SlrGitHandlerTestCLASSC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java ("
packageorg.jabref.logic.git"
isFinalfalse"
inner classfalse"

isAbstractfalse"i
declarationStringT<mark class="modifier"> </mark><mark class="modifier">class </mark>SlrGitHandlerTest"
accesspackage_private*SlrGitHandlerTest2å
8org.jabref.logic.git.SlrGitHandlerTest.setUpGitHandler()DECLARATIONC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java (2í
>org.jabref.logic.git.SlrGitHandlerTest.calculateDiffOnBranch()DECLARATIONC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java	 (2ã
7org.jabref.logic.git.SlrGitHandlerTest.calculatePatch()DECLARATIONC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java7	 7(2á
3org.jabref.logic.git.SlrGitHandlerTest.applyPatch()DECLARATIONC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaH	 H(2ç
9org.jabref.logic.git.SlrGitHandlerTest?LOGGER@18.32:18.38DECLARATIONC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java  (&2î
@org.jabref.logic.git.SlrGitHandlerTest?repositoryPath@21.9:21.23DECLARATIONC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java	 (2ë
=org.jabref.logic.git.SlrGitHandlerTest?gitHandler@22.26:22.36DECLARATIONC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java ($ª
8org.jabref.logic.git.SlrGitHandlerTest.setUpGitHandler()METHODC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java ("
isFinalfalse"ª
declarationString•<mark class="annotation">@BeforeEach</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">setUpGitHandler</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*setUpGitHandler2ë
Dorg.jabref.logic.git.SlrGitHandler.SlrGitHandler(java.nio.file.Path)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java (&2ä
=org.jabref.logic.git.SlrGitHandlerTest?gitHandler@22.26:22.36CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java (2ç
@org.jabref.logic.git.SlrGitHandlerTest?repositoryPath@21.9:21.23CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java' (52X
voidRETURN_TYPEC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java (É0
>org.jabref.logic.git.SlrGitHandlerTest.calculateDiffOnBranch()METHODC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java	 ("
isFinalfalse"—
declarationStringª<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">calculateDiffOnBranch</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException<mark class="modifier"><mark class="modifier">,</mark></mark> GitAPIException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*calculateDiffOnBranch2ç
@org.jabref.logic.git.GitHandler.checkoutBranch(java.lang.String)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java( ((!2 
}java.nio.file.Files.createDirectory(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java) )(2â
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java)# )(%2j
java.nio.file.Path.toString()CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java)5 )(=2≈
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java* *(2â
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java* *( 2j
java.nio.file.Path.toString()CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java*0 *(82µ
hjava.nio.file.Files.writeString(java.nio.file.Path, java.lang.CharSequence, java.nio.file.OpenOption...)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java+ +(2â
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java+ +(!2j
java.nio.file.Path.toString()CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java+1 +(92£
Vorg.jabref.logic.git.GitHandler.createCommitOnCurrentBranch(java.lang.String, boolean)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java, ,(.2≈
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java. .(2â
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java. .( 2j
java.nio.file.Path.toString()CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java.0 .(82µ
hjava.nio.file.Files.writeString(java.nio.file.Path, java.lang.CharSequence, java.nio.file.OpenOption...)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java/ /(2â
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java/ /(!2j
java.nio.file.Path.toString()CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java/1 /(92Å
2java.nio.file.Files.readString(java.nio.file.Path)CALLE
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java/Ç /(å2ã
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLE
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java/í /(î2l
java.nio.file.Path.toString()CALLE
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java/§ /(¨2£
Vorg.jabref.logic.git.GitHandler.createCommitOnCurrentBranch(java.lang.String, boolean)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java0 0(.2¢
Uorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java2  2(@2¢
Uorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java3/ 3(O2ä
=org.jabref.logic.git.SlrGitHandlerTest?gitHandler@22.26:22.36CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java( ((2ç
@org.jabref.logic.git.SlrGitHandlerTest?repositoryPath@21.9:21.23CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java)& )(42ç
@org.jabref.logic.git.SlrGitHandlerTest?repositoryPath@21.9:21.23CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java*! *(/2ç
@org.jabref.logic.git.SlrGitHandlerTest?repositoryPath@21.9:21.23CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java+" +(02ä
=org.jabref.logic.git.SlrGitHandlerTest?gitHandler@22.26:22.36CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java, ,(2ç
@org.jabref.logic.git.SlrGitHandlerTest?repositoryPath@21.9:21.23CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java.! .(/2ç
@org.jabref.logic.git.SlrGitHandlerTest?repositoryPath@21.9:21.23CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java/" /(02è
@org.jabref.logic.git.SlrGitHandlerTest?repositoryPath@21.9:21.23CALLE
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java/ï /(£2ä
=org.jabref.logic.git.SlrGitHandlerTest?gitHandler@22.26:22.36CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java0 0(2Ü
9org.jabref.logic.git.SlrGitHandlerTest?LOGGER@18.32:18.38CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java2 2(2ä
=org.jabref.logic.git.SlrGitHandlerTest?gitHandler@22.26:22.36CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java2 2(2•
Xorg.jabref.logic.git.SlrGitHandlerTest.calculateDiffOnBranch()?expectedPatch@31.15:31.28CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java3 3("2ä
=org.jabref.logic.git.SlrGitHandlerTest?gitHandler@22.26:22.36CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java3$ 3(.2¨
Xorg.jabref.logic.git.SlrGitHandlerTest.calculateDiffOnBranch()?expectedPatch@31.15:31.28DECLARATIONC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java (2X
voidRETURN_TYPEC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java (•
Xorg.jabref.logic.git.SlrGitHandlerTest.calculateDiffOnBranch()?expectedPatch@31.15:31.28VARIABLEC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java ("
typeString"
isFinalfalse"È
declarationString”<mark class="modifier"> </mark>String <mark class="class-field">expectedPatch</mark> = "diff --git a/TestFolder/Test1.txt b/TestFolder/Test1.txt\n" + "index 74809e3..2ae1945 100644\n" + "--- a/TestFolder/Test1.txt\n" + "+++ b/TestFolder/Test1.txt\n" + "@@ -1 +1,2 @@\n" + "+This is a new line of text 2\n" + " This is a new line of text\n"*expectedPatch2]
java.lang.StringTYPEC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java (π
7org.jabref.logic.git.SlrGitHandlerTest.calculatePatch()METHODC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java7	 7("
isFinalfalse" 
declarationString¥<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">calculatePatch</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException<mark class="modifier"><mark class="modifier">,</mark></mark> GitAPIException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*calculatePatch2d
java.util.Map.put(K, V)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java9 9(2â
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java9 9(2j
java.nio.file.Path.toString()CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java9, 9(42õ
Norg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java;. ;(G2h
java.util.HashMap.HashMap()CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java8) 8(22ô
Lorg.jabref.logic.git.SlrGitHandlerTest.calculatePatch()?expected@56.26:56.34CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java9 9(2ç
@org.jabref.logic.git.SlrGitHandlerTest?repositoryPath@21.9:21.23CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java9 9(+2ä
=org.jabref.logic.git.SlrGitHandlerTest?gitHandler@22.26:22.36CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java;# ;(-2ô
Lorg.jabref.logic.git.SlrGitHandlerTest.calculatePatch()?expected@56.26:56.34CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaD D(2ó
Jorg.jabref.logic.git.SlrGitHandlerTest.calculatePatch()?result@59.26:59.32CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaD D(%2†
Lorg.jabref.logic.git.SlrGitHandlerTest.calculatePatch()?expected@56.26:56.34DECLARATIONC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java8 8("2û
Jorg.jabref.logic.git.SlrGitHandlerTest.calculatePatch()?result@59.26:59.32DECLARATIONC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java; ;( 2X
voidRETURN_TYPEC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java7 7(
Lorg.jabref.logic.git.SlrGitHandlerTest.calculatePatch()?expected@56.26:56.34VARIABLEC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java8 8(""
typeMap<Path, String>"
isFinalfalse"Å
declarationStringl<mark class="modifier"> </mark>Map<Path, String> <mark class="class-field">expected</mark> = new HashMap<>()*expected2Z
java.util.MapTYPEC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java8 8(2h
java.nio.file.PathTYPE_ARGUMENTC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java8 8(2f
java.lang.StringTYPE_ARGUMENTC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java8 8(2h
java.util.HashMap.HashMap()CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java8) 8(2Ω	
Jorg.jabref.logic.git.SlrGitHandlerTest.calculatePatch()?result@59.26:59.32VARIABLEC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java; ;( "
typeMap<Path, String>"
isFinalfalse"ë
declarationString˚<mark class="modifier"> </mark>Map<Path, String> <mark class="class-field">result</mark> = gitHandler.parsePatchForAddedEntries("diff --git a/TestFolder/Test1.txt b/TestFolder/Test1.txt\n" + "index 74809e3..2ae1945 100644\n" + "--- a/TestFolder/Test1.txt\n" + "+++ b/TestFolder/Test1.txt\n" + "@@ -1 +1,2 @@\n" + "+This is a new line of text 2\n" + " This is a new line of text")*result2Z
java.util.MapTYPEC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java; ;(2h
java.nio.file.PathTYPE_ARGUMENTC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java; ;(2f
java.lang.StringTYPE_ARGUMENTC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java; ;(2õ
Norg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java;. ;(G2ä
=org.jabref.logic.git.SlrGitHandlerTest?gitHandler@22.26:22.36CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java;# ;(-à%
3org.jabref.logic.git.SlrGitHandlerTest.applyPatch()METHODC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaH	 H("
isFinalfalse"∆
declarationString∞<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">applyPatch</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException<mark class="modifier"><mark class="modifier">,</mark></mark> GitAPIException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*
applyPatch2ç
@org.jabref.logic.git.GitHandler.checkoutBranch(java.lang.String)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaI I(!2≈
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaJ J(2â
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaJ J( 2j
java.nio.file.Path.toString()CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaJ0 J(82£
Vorg.jabref.logic.git.GitHandler.createCommitOnCurrentBranch(java.lang.String, boolean)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaK K(.2ç
@org.jabref.logic.git.GitHandler.checkoutBranch(java.lang.String)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaL L(!2≈
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaM M(2â
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaM M( 2j
java.nio.file.Path.toString()CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaM0 M(82µ
hjava.nio.file.Files.writeString(java.nio.file.Path, java.lang.CharSequence, java.nio.file.OpenOption...)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaN N(2â
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaN N(!2j
java.nio.file.Path.toString()CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaN1 N(92£
Vorg.jabref.logic.git.GitHandler.createCommitOnCurrentBranch(java.lang.String, boolean)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaO O(.2ç
@org.jabref.logic.git.GitHandler.checkoutBranch(java.lang.String)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaQ Q(!2æ
qorg.jabref.logic.git.SlrGitHandler.appendLatestSearchResultsOntoCurrentBranch(java.lang.String, java.lang.String)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaR R(=2
2java.nio.file.Files.readString(java.nio.file.Path)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaT9 T(C2â
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaTI T(K2j
java.nio.file.Path.toString()CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaT[ T(c2ä
=org.jabref.logic.git.SlrGitHandlerTest?gitHandler@22.26:22.36CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaI I(2ç
@org.jabref.logic.git.SlrGitHandlerTest?repositoryPath@21.9:21.23CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaJ! J(/2ä
=org.jabref.logic.git.SlrGitHandlerTest?gitHandler@22.26:22.36CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaK K(2ä
=org.jabref.logic.git.SlrGitHandlerTest?gitHandler@22.26:22.36CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaL L(2ç
@org.jabref.logic.git.SlrGitHandlerTest?repositoryPath@21.9:21.23CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaM! M(/2ç
@org.jabref.logic.git.SlrGitHandlerTest?repositoryPath@21.9:21.23CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaN" N(02ä
=org.jabref.logic.git.SlrGitHandlerTest?gitHandler@22.26:22.36CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaO O(2ä
=org.jabref.logic.git.SlrGitHandlerTest?gitHandler@22.26:22.36CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaQ Q(2ä
=org.jabref.logic.git.SlrGitHandlerTest?gitHandler@22.26:22.36CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaR R(2ç
@org.jabref.logic.git.SlrGitHandlerTest?repositoryPath@21.9:21.23CALLC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaTL T(Z2X
voidRETURN_TYPEC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.javaH H(û
9org.jabref.logic.git.SlrGitHandlerTest?LOGGER@18.32:18.38VALUEC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java  (&"
isFinaltrue"
typeLogger"Á
declarationString—<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>Logger <mark class="class-field">LOGGER</mark> = LoggerFactory.getLogger(SlrGitHandlerTest.class);"
isStatictrue"
accessprivate*LOGGER2]
org.slf4j.LoggerTYPEC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java (∫
@org.jabref.logic.git.SlrGitHandlerTest?repositoryPath@21.9:21.23VARIABLEC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java	 ("
isFinalfalse"
typePath"h
declarationStringS<mark class="modifier"> </mark>Path <mark class="class-field">repositoryPath</mark>"
isStaticfalse"
accesspackage_private*repositoryPath2_
java.nio.file.PathTYPEC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java (–
=org.jabref.logic.git.SlrGitHandlerTest?gitHandler@22.26:22.36VARIABLEC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java ($"
isFinalfalse"
typeSlrGitHandler"t
declarationString_<mark class="modifier">private </mark>SlrGitHandler <mark class="class-field">gitHandler</mark>"
isStaticfalse"
accessprivate*
gitHandler2o
"org.jabref.logic.git.SlrGitHandlerTYPEC
9src\test\java\org\jabref\logic\git\SlrGitHandlerTest.java (