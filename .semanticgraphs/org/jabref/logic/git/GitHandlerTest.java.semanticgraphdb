
6src\test\java\org\jabref\logic\git\GitHandlerTest.javaΩ	
#org.jabref.logic.git.GitHandlerTestCLASS@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java ("
packageorg.jabref.logic.git"
isFinalfalse"
inner classfalse"

isAbstractfalse"f
declarationStringQ<mark class="modifier"> </mark><mark class="modifier">class </mark>GitHandlerTest"
accesspackage_private*GitHandlerTest2Ü
5org.jabref.logic.git.GitHandlerTest.setUpGitHandler()DECLARATION@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java (2à
7org.jabref.logic.git.GitHandlerTest.checkoutNewBranch()DECLARATION@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java	 (2í
Aorg.jabref.logic.git.GitHandlerTest.createCommitOnCurrentBranch()DECLARATION@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java&	 &($2ì
Borg.jabref.logic.git.GitHandlerTest.getCurrentlyCheckedOutBranch()DECLARATION@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java6	 6(%2é
=org.jabref.logic.git.GitHandlerTest?repositoryPath@20.9:20.23DECLARATION@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java	 (2ã
:org.jabref.logic.git.GitHandlerTest?gitHandler@21.23:21.33DECLARATION@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java (!ù
5org.jabref.logic.git.GitHandlerTest.setUpGitHandler()METHOD@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java ("
isFinalfalse"ª
declarationString•<mark class="annotation">@BeforeEach</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">setUpGitHandler</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*setUpGitHandler2à
>org.jabref.logic.git.GitHandler.GitHandler(java.nio.file.Path)CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java (#2Ñ
:org.jabref.logic.git.GitHandlerTest?gitHandler@21.23:21.33CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java (2á
=org.jabref.logic.git.GitHandlerTest?repositoryPath@20.9:20.23CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java$ (22U
voidRETURN_TYPE@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java (‘
7org.jabref.logic.git.GitHandlerTest.checkoutNewBranch()METHOD@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java	 ("
isFinalfalse"Õ
declarationString∑<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">checkoutNewBranch</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException<mark class="modifier"><mark class="modifier">,</mark></mark> GitAPIException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*checkoutNewBranch2ä
@org.jabref.logic.git.GitHandler.checkoutBranch(java.lang.String)CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java (!2e
java.nio.file.Path.toFile()CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java /  (52Ñ
:org.jabref.logic.git.GitHandlerTest?gitHandler@21.23:21.33CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java (2á
=org.jabref.logic.git.GitHandlerTest?repositoryPath@20.9:20.23CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java    (.2ë
Gorg.jabref.logic.git.GitHandlerTest.checkoutNewBranch()?git@32.17:32.20CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java!' !(*2ò
Gorg.jabref.logic.git.GitHandlerTest.checkoutNewBranch()?git@32.17:32.20DECLARATION@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java   (2U
voidRETURN_TYPE@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java (ë
Gorg.jabref.logic.git.GitHandlerTest.checkoutNewBranch()?git@32.17:32.20VARIABLE@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java   ("
typeGit"
isFinalfalse"Ä
declarationStringk<mark class="modifier"> </mark>Git <mark class="class-field">git</mark> = Git.open(repositoryPath.toFile())*git2b
org.eclipse.jgit.api.GitTYPE@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java   (2e
java.nio.file.Path.toFile()CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java /  (52á
=org.jabref.logic.git.GitHandlerTest?repositoryPath@20.9:20.23CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java    (.Î
Aorg.jabref.logic.git.GitHandlerTest.createCommitOnCurrentBranch()METHOD@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java&	 &($"
isFinalfalse"◊
declarationString¡<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">createCommitOnCurrentBranch</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException<mark class="modifier"><mark class="modifier">,</mark></mark> GitAPIException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*createCommitOnCurrentBranch2e
java.nio.file.Path.toFile()CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java'/ '(52¬
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java) )(2Ü
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java)" )($2g
java.nio.file.Path.toString()CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java)4 )(<2†
Vorg.jabref.logic.git.GitHandler.createCommitOnCurrentBranch(java.lang.String, boolean)CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java* *(22c
java.util.Iterator.next()CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java0+ 0(/2c
java.util.Iterator.next()CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java1/ 1(32á
=org.jabref.logic.git.GitHandlerTest?repositoryPath@20.9:20.23CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java'  '(.2á
=org.jabref.logic.git.GitHandlerTest?repositoryPath@20.9:20.23CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java)% )(32Ñ
:org.jabref.logic.git.GitHandlerTest?gitHandler@21.23:21.33CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java* *(2õ
Qorg.jabref.logic.git.GitHandlerTest.createCommitOnCurrentBranch()?git@39.17:39.20CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java, ,("2õ
Qorg.jabref.logic.git.GitHandlerTest.createCommitOnCurrentBranch()?git@39.17:39.20CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java-& -()2ú
Rorg.jabref.logic.git.GitHandlerTest.createCommitOnCurrentBranch()?head@44.24:44.28CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java.. .(22õ
Qorg.jabref.logic.git.GitHandlerTest.createCommitOnCurrentBranch()?log@45.32:45.35CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java0' 0(*2õ
Qorg.jabref.logic.git.GitHandlerTest.createCommitOnCurrentBranch()?log@45.32:45.35CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java1+ 1(.2¢
Qorg.jabref.logic.git.GitHandlerTest.createCommitOnCurrentBranch()?git@39.17:39.20DECLARATION@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java' '(2£
Rorg.jabref.logic.git.GitHandlerTest.createCommitOnCurrentBranch()?head@44.24:44.28DECLARATION@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java, ,(2¢
Qorg.jabref.logic.git.GitHandlerTest.createCommitOnCurrentBranch()?log@45.32:45.35DECLARATION@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java-  -(#2U
voidRETURN_TYPE@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java& &(õ
Qorg.jabref.logic.git.GitHandlerTest.createCommitOnCurrentBranch()?git@39.17:39.20VARIABLE@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java' '("
typeGit"
isFinalfalse"Ä
declarationStringk<mark class="modifier"> </mark>Git <mark class="class-field">git</mark> = Git.open(repositoryPath.toFile())*git2b
org.eclipse.jgit.api.GitTYPE@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java' '(2e
java.nio.file.Path.toFile()CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java'/ '(52á
=org.jabref.logic.git.GitHandlerTest?repositoryPath@20.9:20.23CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java'  '(.Ì
Rorg.jabref.logic.git.GitHandlerTest.createCommitOnCurrentBranch()?head@44.24:44.28VARIABLE@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java, ,("
typeAnyObjectId"
isFinalfalse"ì
declarationString~<mark class="modifier"> </mark>AnyObjectId <mark class="class-field">head</mark> = git.getRepository().resolve(Constants.HEAD)*head2j
 org.eclipse.jgit.lib.AnyObjectIdTYPE@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java, ,(2õ
Qorg.jabref.logic.git.GitHandlerTest.createCommitOnCurrentBranch()?git@39.17:39.20CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java, ,("¸
Qorg.jabref.logic.git.GitHandlerTest.createCommitOnCurrentBranch()?log@45.32:45.35VARIABLE@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java-  -(#"
typeIterator<RevCommit>"
isFinalfalse"î
declarationString<mark class="modifier"> </mark>Iterator<RevCommit> <mark class="class-field">log</mark> = git.log().add(head).call().iterator()*log2\
java.util.IteratorTYPE@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java- -(2u
"org.eclipse.jgit.revwalk.RevCommitTYPE_ARGUMENT@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java- -(2õ
Qorg.jabref.logic.git.GitHandlerTest.createCommitOnCurrentBranch()?git@39.17:39.20CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java-& -()2ú
Rorg.jabref.logic.git.GitHandlerTest.createCommitOnCurrentBranch()?head@44.24:44.28CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java.. .(2Ü
Borg.jabref.logic.git.GitHandlerTest.getCurrentlyCheckedOutBranch()METHOD@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java6	 6(%"
isFinalfalse"ã
declarationStringı<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getCurrentlyCheckedOutBranch</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*getCurrentlyCheckedOutBranch2à
>org.jabref.logic.git.GitHandler.getCurrentlyCheckedOutBranch()CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java7( 7(D2Ñ
:org.jabref.logic.git.GitHandlerTest?gitHandler@21.23:21.33CALL@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java7 7('2U
voidRETURN_TYPE@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java6 6(±
=org.jabref.logic.git.GitHandlerTest?repositoryPath@20.9:20.23VARIABLE@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java	 ("
isFinalfalse"
typePath"h
declarationStringS<mark class="modifier"> </mark>Path <mark class="class-field">repositoryPath</mark>"
isStaticfalse"
accesspackage_private*repositoryPath2\
java.nio.file.PathTYPE@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java (æ
:org.jabref.logic.git.GitHandlerTest?gitHandler@21.23:21.33VARIABLE@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java (!"
isFinalfalse"
type
GitHandler"q
declarationString\<mark class="modifier">private </mark>GitHandler <mark class="class-field">gitHandler</mark>"
isStaticfalse"
accessprivate*
gitHandler2i
org.jabref.logic.git.GitHandlerTYPE@
6src\test\java\org\jabref\logic\git\GitHandlerTest.java (