
5src\main\java\org\jabref\logic\git\SlrGitHandler.java“

"org.jabref.logic.git.SlrGitHandlerCLASS?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java ("
packageorg.jabref.logic.git"
isFinalfalse"
inner classfalse"

isAbstractfalse"ù
declarationStringá<mark class="modifier">public </mark><mark class="modifier">class </mark>SlrGitHandler<mark class="modifier"> extends </mark>GitHandler"
accesspublic*SlrGitHandler2î
Dorg.jabref.logic.git.SlrGitHandler.SlrGitHandler(java.nio.file.Path)DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java   (2¡
qorg.jabref.logic.git.SlrGitHandler.appendLatestSearchResultsOntoCurrentBranch(java.lang.String, java.lang.String)DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java$ $(:2•
Uorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java3 3(+2û
Norg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java] ](/2¥
borg.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)DECLARATIONA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaã	 ã(2j
org.jabref.logic.git.GitHandlerEXTEND?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java# (-ﬁ
Dorg.jabref.logic.git.SlrGitHandler.SlrGitHandler(java.nio.file.Path)CONSTRUCTOR?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java   ("x
declarationStringc<mark class="modifier">public </mark><mark class="method">SlrGitHandler</mark>(Path repositoryPath)*SlrGitHandler2á
>org.jabref.logic.git.GitHandler.GitHandler(java.nio.file.Path)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java! !(2ú
Sorg.jabref.logic.git.SlrGitHandler.SlrGitHandler(java.nio.file.Path)!repositoryPathCALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java! !(2°
Sorg.jabref.logic.git.SlrGitHandler.SlrGitHandler(java.nio.file.Path)!repositoryPath	PARAMETER?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java   (,2r
"org.jabref.logic.git.SlrGitHandlerRETURN_TYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java   (ÿ
Sorg.jabref.logic.git.SlrGitHandler.SlrGitHandler(java.nio.file.Path)!repositoryPath	PARAMETER?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java   (,"
typePath"
isFinalfalse"(
declarationStringPath repositoryPath*repositoryPath2[
java.nio.file.PathTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java   (‹
qorg.jabref.logic.git.SlrGitHandler.appendLatestSearchResultsOntoCurrentBranch(java.lang.String, java.lang.String)METHOD?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java$ $(:"
isFinalfalse"™
declarationStringî<mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">appendLatestSearchResultsOntoCurrentBranch</mark>(String patchMessage<mark class="modifier"><mark class="modifier">,</mark></mark> String searchBranchName)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException<mark class="modifier"><mark class="modifier">,</mark></mark> GitAPIException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid**appendLatestSearchResultsOntoCurrentBranch2û
Uorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java& &(72ó
Norg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java'# '(<2´
borg.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java) )(2ü
Vorg.jabref.logic.git.GitHandler.createCommitOnCurrentBranch(java.lang.String, boolean)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java* *((2Ã
Çorg.jabref.logic.git.SlrGitHandler.appendLatestSearchResultsOntoCurrentBranch(java.lang.String, java.lang.String)!searchBranchNameCALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java&8 &(H2Õ
Éorg.jabref.logic.git.SlrGitHandler.appendLatestSearchResultsOntoCurrentBranch(java.lang.String, java.lang.String)?patch@38.15:38.20CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java'= '(B2Œ
Ñorg.jabref.logic.git.SlrGitHandler.appendLatestSearchResultsOntoCurrentBranch(java.lang.String, java.lang.String)?result@39.26:39.32CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java) )(2«
~org.jabref.logic.git.SlrGitHandler.appendLatestSearchResultsOntoCurrentBranch(java.lang.String, java.lang.String)!patchMessageCALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java*) *(52Ã
~org.jabref.logic.git.SlrGitHandler.appendLatestSearchResultsOntoCurrentBranch(java.lang.String, java.lang.String)!patchMessage	PARAMETER?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java$B $(N2—
Çorg.jabref.logic.git.SlrGitHandler.appendLatestSearchResultsOntoCurrentBranch(java.lang.String, java.lang.String)!searchBranchName	PARAMETER?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java$W $(g2‘
Éorg.jabref.logic.git.SlrGitHandler.appendLatestSearchResultsOntoCurrentBranch(java.lang.String, java.lang.String)?patch@38.15:38.20DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java& &(2’
Ñorg.jabref.logic.git.SlrGitHandler.appendLatestSearchResultsOntoCurrentBranch(java.lang.String, java.lang.String)?result@39.26:39.32DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java' '( 2T
voidRETURN_TYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java$ $(ﬂ
Éorg.jabref.logic.git.SlrGitHandler.appendLatestSearchResultsOntoCurrentBranch(java.lang.String, java.lang.String)?patch@38.15:38.20VARIABLE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java& &("
typeString"
isFinalfalse"ó
declarationStringÅ<mark class="modifier"> </mark>String <mark class="class-field">patch</mark> = calculatePatchOfNewSearchResults(searchBranchName)*patch2Y
java.lang.StringTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java& &(2û
Uorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java& &(72Ã
Çorg.jabref.logic.git.SlrGitHandler.appendLatestSearchResultsOntoCurrentBranch(java.lang.String, java.lang.String)!searchBranchNameCALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java&8 &(H¶
Ñorg.jabref.logic.git.SlrGitHandler.appendLatestSearchResultsOntoCurrentBranch(java.lang.String, java.lang.String)?result@39.26:39.32VARIABLE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java' '( "
typeMap<Path, String>"
isFinalfalse"ê
declarationString{<mark class="modifier"> </mark>Map<Path, String> <mark class="class-field">result</mark> = parsePatchForAddedEntries(patch)*result2V
java.util.MapTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java' '(2d
java.nio.file.PathTYPE_ARGUMENT?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java' '(2b
java.lang.StringTYPE_ARGUMENT?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java' '(2ó
Norg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java'# '(<2Õ
Éorg.jabref.logic.git.SlrGitHandler.appendLatestSearchResultsOntoCurrentBranch(java.lang.String, java.lang.String)?patch@38.15:38.20CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java'= '(BÅ
~org.jabref.logic.git.SlrGitHandler.appendLatestSearchResultsOntoCurrentBranch(java.lang.String, java.lang.String)!patchMessage	PARAMETER?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java$B $(N"
typeString"
isFinalfalse"(
declarationStringString patchMessage*patchMessage2Y
java.lang.StringTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java$; $(Aé
Çorg.jabref.logic.git.SlrGitHandler.appendLatestSearchResultsOntoCurrentBranch(java.lang.String, java.lang.String)!searchBranchName	PARAMETER?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java$W $(g"
typeString"
isFinalfalse",
declarationStringString searchBranchName*searchBranchName2Y
java.lang.StringTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java$P $(VîE
Uorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)METHOD?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java3 3(+"
isFinalfalse"©
declarationStringì<mark class="modifier"> </mark>String <mark class="method">calculatePatchOfNewSearchResults</mark>(String sourceBranch)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException<mark class="modifier"><mark class="modifier">,</mark></mark> GitAPIException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typeString* calculatePatchOfNewSearchResults2ä
Aorg.jabref.logic.git.GitHandler.getRefForBranch(java.lang.String)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java5, 5(;2e
java.util.Optional.isEmpty()CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java6  6('2a
java.util.Optional.get()CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java:2 :(52q
(java.io.ByteArrayOutputStream.toString()CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaN N('2~
5java.io.ByteArrayOutputStream.ByteArrayOutputStream()CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaD0 D(E2´
borg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)!sourceBranchCALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java5< 5(H2∫
qorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?sourceBranchRef@53.26:53.41CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java6 6(2Æ
eorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?git@52.17:52.20CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java9$ 9('2∫
qorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?sourceBranchRef@53.26:53.41CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java:" :(12µ
lorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?repository@57.23:57.33CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java;" ;(,2µ
lorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?branchHead@58.21:58.31CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java;5 ;(?2µ
lorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?repository@57.23:57.33CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java<( <(22µ
lorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?branchHead@58.21:58.31CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java<; <(E2µ
lorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?repository@57.23:57.33CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java>' >(12∂
morg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?oldTreeIter@63.36:63.47CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java@ @(2±
horg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?reader@62.30:62.36CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java@" @((2ª
rorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?treeIdHeadParent@60.21:60.37CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java@* @(:2∂
morg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?newTreeIter@65.36:65.47CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaB B(2±
horg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?reader@62.30:62.36CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaB" B((2µ
lorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?treeIdHead@59.21:59.31CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaB* B(42Æ
eorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?put@68.38:68.41CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaEA E(D2¥
korg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?formatter@69.35:69.44CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaF F(2Æ
eorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?git@52.17:52.20CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaF, F(/2¥
korg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?formatter@69.35:69.44CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaG. G(72∂
morg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?oldTreeIter@63.36:63.47CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaG= G(H2∂
morg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?newTreeIter@65.36:65.47CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaGJ G(U2≤
iorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?entries@71.36:71.43CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaH+ H(22∞
gorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?entry@72.35:72.40CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaI I(!2¥
korg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?formatter@69.35:69.44CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaJ J(%2∞
gorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?entry@72.35:72.40CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaJ- J(22¥
korg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?formatter@69.35:69.44CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaM M(2Æ
eorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?put@68.38:68.41CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaN N(2∞
borg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)!sourceBranch	PARAMETER?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java33 3(?2µ
eorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?git@52.17:52.20DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java4 4(2¡
qorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?sourceBranchRef@53.26:53.41DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java5 5()2º
lorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?repository@57.23:57.33DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java9 9(!2º
lorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?branchHead@58.21:58.31DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java: :(2º
lorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?treeIdHead@59.21:59.31DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java; ;(2¬
rorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?treeIdHeadParent@60.21:60.37DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java< <(%2∏
horg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?reader@62.30:62.36DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java> >($2Ω
morg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?oldTreeIter@63.36:63.47DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java?$ ?(/2Ω
morg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?newTreeIter@65.36:65.47DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaA$ A(/2µ
eorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?put@68.38:68.41DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaD& D()2ª
korg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?formatter@69.35:69.44DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaE# E(,2π
iorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?entries@71.36:71.43DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaG$ G(+2∑
gorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?entry@72.35:72.40DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaH# H((2`
java.lang.StringRETURN_TYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java3 3(
›
eorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?git@52.17:52.20VARIABLE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java4 4("
typeGit"
isFinalfalse"°
declarationStringã<mark class="modifier"> </mark>Git <mark class="class-field">git</mark> = Git.open(<mark class="modifier">this</mark>.repositoryPathAsFile)*git2a
org.eclipse.jgit.api.GitTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java4 4(ë
qorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?sourceBranchRef@53.26:53.41VARIABLE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java5 5()"
typeOptional<Ref>"
isFinalfalse"í
declarationString}<mark class="modifier"> </mark>Optional<Ref> <mark class="class-field">sourceBranchRef</mark> = getRefForBranch(sourceBranch)*sourceBranchRef2[
java.util.OptionalTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java5 5(2j
org.eclipse.jgit.lib.RefTYPE_ARGUMENT?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java5 5(2ä
Aorg.jabref.logic.git.GitHandler.getRefForBranch(java.lang.String)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java5, 5(;2´
borg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)!sourceBranchCALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java5< 5(Hâ
lorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?repository@57.23:57.33VARIABLE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java9 9(!"
type
Repository"
isFinalfalse"Ä
declarationStringk<mark class="modifier"> </mark>Repository <mark class="class-field">repository</mark> = git.getRepository()*
repository2h
org.eclipse.jgit.lib.RepositoryTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java9 9(2Æ
eorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?git@52.17:52.20CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java9$ 9('Ç
lorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?branchHead@58.21:58.31VARIABLE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java: :("
typeObjectId"
isFinalfalse"é
declarationStringy<mark class="modifier"> </mark>ObjectId <mark class="class-field">branchHead</mark> = sourceBranchRef.get().getObjectId()*
branchHead2f
org.eclipse.jgit.lib.ObjectIdTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java: :(2a
java.util.Optional.get()CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java:2 :(52∫
qorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?sourceBranchRef@53.26:53.41CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java:" :(1‰
lorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?treeIdHead@59.21:59.31VARIABLE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java; ;("
typeObjectId"
isFinalfalse"†
declarationStringä<mark class="modifier"> </mark>ObjectId <mark class="class-field">treeIdHead</mark> = repository.resolve(branchHead.getName() + "^{tree}")*
treeIdHead2f
org.eclipse.jgit.lib.ObjectIdTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java; ;(2µ
lorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?repository@57.23:57.33CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java;" ;(,2µ
lorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?branchHead@58.21:58.31CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java;5 ;(?¯
rorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?treeIdHeadParent@60.21:60.37VARIABLE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java< <(%"
typeObjectId"
isFinalfalse"®
declarationStringí<mark class="modifier"> </mark>ObjectId <mark class="class-field">treeIdHeadParent</mark> = repository.resolve(branchHead.getName() + "~1^{tree}")*treeIdHeadParent2f
org.eclipse.jgit.lib.ObjectIdTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java< <(2µ
lorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?repository@57.23:57.33CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java<( <(22µ
lorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?branchHead@58.21:58.31CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java<; <(Eì
horg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?reader@62.30:62.36VARIABLE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java> >($"
typeObjectReader"
isFinalfalse"á
declarationStringr<mark class="modifier"> </mark>ObjectReader <mark class="class-field">reader</mark> = repository.newObjectReader()*reader2j
!org.eclipse.jgit.lib.ObjectReaderTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java> >(2µ
lorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?repository@57.23:57.33CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java>' >(1Å
morg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?oldTreeIter@63.36:63.47VARIABLE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java?$ ?(/"
typeCanonicalTreeParser"
isFinalfalse"ê
declarationString{<mark class="modifier"> </mark>CanonicalTreeParser <mark class="class-field">oldTreeIter</mark> = new CanonicalTreeParser()*oldTreeIter2v
-org.eclipse.jgit.treewalk.CanonicalTreeParserTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java? ?(#Å
morg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?newTreeIter@65.36:65.47VARIABLE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaA$ A(/"
typeCanonicalTreeParser"
isFinalfalse"ê
declarationString{<mark class="modifier"> </mark>CanonicalTreeParser <mark class="class-field">newTreeIter</mark> = new CanonicalTreeParser()*newTreeIter2v
-org.eclipse.jgit.treewalk.CanonicalTreeParserTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaA A(#ﬂ
eorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?put@68.38:68.41VARIABLE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaD& D()"
typeByteArrayOutputStream"
isFinalfalse"å
declarationStringw<mark class="modifier"> </mark>ByteArrayOutputStream <mark class="class-field">put</mark> = new ByteArrayOutputStream()*put2f
java.io.ByteArrayOutputStreamTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaD D(%2~
5java.io.ByteArrayOutputStream.ByteArrayOutputStream()CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaD0 D(Eì
korg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?formatter@69.35:69.44VARIABLE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaE# E(,"
typeDiffFormatter"
isFinalfalse"Ö
declarationStringp<mark class="modifier"> </mark>DiffFormatter <mark class="class-field">formatter</mark> = new DiffFormatter(put)*	formatter2l
#org.eclipse.jgit.diff.DiffFormatterTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaE E("2Æ
eorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?put@68.38:68.41CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaEA E(D˙
iorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?entries@71.36:71.43VARIABLE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaG$ G(+"
typeList<DiffEntry>"
isFinalfalse"ò
declarationStringÇ<mark class="modifier"> </mark>List<DiffEntry> <mark class="class-field">entries</mark> = formatter.scan(oldTreeIter, newTreeIter)*entries2W
java.util.ListTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaG G(2q
org.eclipse.jgit.diff.DiffEntryTYPE_ARGUMENT?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaG G("2¥
korg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?formatter@69.35:69.44CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaG. G(72∂
morg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?oldTreeIter@63.36:63.47CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaG= G(H2∂
morg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?newTreeIter@65.36:65.47CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaGJ G(U∞
gorg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)?entry@72.35:72.40VARIABLE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaH# H(("
type	DiffEntry"
isFinalfalse"d
declarationStringO<mark class="modifier"> </mark>DiffEntry <mark class="class-field">entry</mark>*entry2h
org.eclipse.jgit.diff.DiffEntryTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaH H("Â
borg.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(java.lang.String)!sourceBranch	PARAMETER?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java33 3(?"
typeString"
isFinalfalse"(
declarationStringString sourceBranch*sourceBranch2Y
java.lang.StringTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java3, 3(2úJ
Norg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)METHOD?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java] ](/"
isFinalfalse"Á
declarationString—<mark class="modifier"> </mark>Map&lt;Path<mark class="modifier"><mark class="modifier">,</mark></mark>String&gt; <mark class="method">parsePatchForAddedEntries</mark>(String patch)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException<mark class="modifier"><mark class="modifier">,</mark></mark> GitAPIException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typeMap<Path, String>*parsePatchForAddedEntries2q
(java.lang.String.split(java.lang.String)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java^  ^(%2v
-java.lang.String.startsWith(java.lang.String)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaf f('2z
1java.lang.String.contains(java.lang.CharSequence)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javai& i(.2`
java.util.Map.put(K, V)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaj% j((2Ö
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaj. j(02f
java.nio.file.Path.toString()CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaj@ j(H2j
!java.util.StringJoiner.toString()CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javajb j(j2m
$java.lang.String.substring(int, int)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javan, n(52s
*java.lang.String.indexOf(java.lang.String)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javanG n(N2v
-java.lang.String.startsWith(java.lang.String)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javat t('2t
+java.lang.String.endsWith(java.lang.String)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javat? t(G2v
-java.lang.String.startsWith(java.lang.String)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javay( y(22{
2java.util.StringJoiner.add(java.lang.CharSequence)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java| |(2h
java.lang.String.substring(int)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java|, |(52b
java.util.Map.put(K, V)CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaÇ Ç(2á
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaÇ" Ç($2h
java.nio.file.Path.toString()CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaÇ4 Ç(<2l
!java.util.StringJoiner.toString()CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaÇV Ç(^2d
java.util.HashMap.HashMap()CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java`- `(62Ñ
;java.util.StringJoiner.StringJoiner(java.lang.CharSequence)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javap p()2ù
Torg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)!patchCALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java^ ^(2™
aorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?tokens@94.17:94.23CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javad# d()2≤
iorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?currentToken@100.20:100.32CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaf f(2∞
gorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?relativePath@99.15:99.27CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javah h("2™
aorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?joiner@98.21:98.27CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javah. h(42∞
gorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?relativePath@99.15:99.27CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javai i(%2∞
gorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?diffsPerFile@96.26:96.38CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaj j($2∞
gorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?relativePath@99.15:99.27CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javajL j(X2™
aorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?joiner@98.21:98.27CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaj[ j(a2∞
gorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?relativePath@99.15:99.27CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javan n(2≤
iorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?currentToken@100.20:100.32CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javan n(+2≤
iorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?currentToken@100.20:100.32CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javan: n(F2´
borg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?content@97.16:97.23CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javao o(2™
aorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?joiner@98.21:98.27CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javap p(2≤
iorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?currentToken@100.20:100.32CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javat t(2≤
iorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?currentToken@100.20:100.32CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javat2 t(>2´
borg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?content@97.16:97.23CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javau u(2´
borg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?content@97.16:97.23CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javay y(2≤
iorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?currentToken@100.20:100.32CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javay y('2™
aorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?joiner@98.21:98.27CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java{ {(2™
aorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?joiner@98.21:98.27CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java| |(2≤
iorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?currentToken@100.20:100.32CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java| |(+2≤
gorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?relativePath@99.15:99.27CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaÄ Ä(2¨
aorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?joiner@98.21:98.27CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaÄ& Ä(,2≤
gorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?diffsPerFile@96.26:96.38CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaÇ Ç(2≤
gorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?relativePath@99.15:99.27CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaÇ@ Ç(L2¨
aorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?joiner@98.21:98.27CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaÇO Ç(U2≤
gorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?diffsPerFile@96.26:96.38CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaÑ Ñ(2¢
Torg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)!patch	PARAMETER?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java]7 ](<2±
aorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?tokens@94.17:94.23DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java^ ^(2∑
gorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?diffsPerFile@96.26:96.38DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java` `(&2≤
borg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?content@97.16:97.23DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaa a(2±
aorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?joiner@98.21:98.27DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javab b(2∑
gorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?relativePath@99.15:99.27DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javac c(2π
iorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?currentToken@100.20:100.32DECLARATION?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javad d( 2]
java.util.MapRETURN_TYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java] ](2k
java.nio.file.PathRETURN_TYPE_ARGUMENT?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java] ](2i
java.lang.StringRETURN_TYPE_ARGUMENT?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java] ](¬
aorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?tokens@94.17:94.23VARIABLE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java^ ^("
typeString"
isFinalfalse"x
declarationStringc<mark class="modifier"> </mark>String[] <mark class="class-field">tokens</mark> = patch.split("\n")*tokens2[
java.lang.String[]TYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java^ ^(2q
(java.lang.String.split(java.lang.String)CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java^  ^(%2ù
Torg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)!patchCALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java^ ^(ˇ
gorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?diffsPerFile@96.26:96.38VARIABLE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java` `(&"
typeMap<Path, String>"
isFinalfalse"Ö
declarationStringp<mark class="modifier"> </mark>Map<Path, String> <mark class="class-field">diffsPerFile</mark> = new HashMap<>()*diffsPerFile2V
java.util.MapTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java` `(2d
java.nio.file.PathTYPE_ARGUMENT?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java` `(2b
java.lang.StringTYPE_ARGUMENT?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java` `(2d
java.util.HashMap.HashMap()CALL?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java`- `(6Ÿ
borg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?content@97.16:97.23VARIABLE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaa a("
typeboolean"
isFinalfalse"©
declarationStringì<mark class="modifier"> </mark><mark class="modifier">boolean</mark> <mark class="class-field">content</mark> = <mark class="modifier">false</mark>*content2P
booleanTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaa a(œ
aorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?joiner@98.21:98.27VARIABLE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javab b("
typeStringJoiner"
isFinalfalse"ç
declarationStringx<mark class="modifier"> </mark>StringJoiner <mark class="class-field">joiner</mark> = <mark class="modifier">null</mark>*joiner2_
java.util.StringJoinerTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javab b(œ
gorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?relativePath@99.15:99.27VARIABLE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javac c("
typeString"
isFinalfalse"ç
declarationStringx<mark class="modifier"> </mark>String <mark class="class-field">relativePath</mark> = <mark class="modifier">null</mark>*relativePath2Y
java.lang.StringTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javac c(´
iorg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)?currentToken@100.20:100.32VARIABLE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javad d( "
typeString"
isFinalfalse"h
declarationStringS<mark class="modifier"> </mark>String <mark class="class-field">currentToken</mark>*currentToken2Y
java.lang.StringTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.javad d(…
Torg.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(java.lang.String)!patch	PARAMETER?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java]7 ](<"
typeString"
isFinalfalse"!
declarationStringString patch*patch2Y
java.lang.StringTYPE?
5src\main\java\org\jabref\logic\git\SlrGitHandler.java]0 ](6∑.
borg.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)METHODA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaã	 ã("
isFinalfalse"Ÿ
declarationString√<mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">applyPatch</mark>(Map&lt;Path<mark class="modifier"><mark class="modifier">,</mark></mark> String&gt; patch)"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*
applyPatch2ç
Bjava.lang.Iterable.forEach(java.util.function.Consumer<? super T>)CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaå å(2a
java.util.Map.keySet()CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaå å(2}
2java.nio.file.Files.readString(java.nio.file.Path)CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaé. é(82x
-java.lang.String.startsWith(java.lang.String)CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaê# ê(-2u
*java.lang.String.indexOf(java.lang.String)CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaë7 ë(>2o
$java.lang.String.substring(int, int)CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaì, ì(52j
java.lang.String.substring(int)CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaî4 î(=2Œ
Çjava.nio.file.Files.writeString(java.nio.file.Path, java.lang.CharSequence, java.nio.charset.Charset, java.nio.file.OpenOption...)CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javañ ñ(!2n
#java.util.Map.get(java.lang.Object)CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javañ7 ñ(:2≥
horg.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)!patchCALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaå å(2¿
uorg.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?path@140.31:140.35CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaé9 é(=2 
org.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?currentContent@142.23:142.37CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaê ê("2 
org.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?currentContent@142.23:142.37CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaë( ë(62¬
worg.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?prefix@143.23:143.29CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaì ì(2 
org.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?currentContent@142.23:142.37CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaì ì(+2…
~org.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?endOfEncoding@145.24:145.37CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaì9 ì(F2 
org.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?currentContent@142.23:142.37CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaî î("2 
org.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?currentContent@142.23:142.37CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaî% î(32…
~org.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?endOfEncoding@145.24:145.37CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaî> î(K2¿
uorg.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?path@140.31:140.35CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javañ" ñ(&2¬
worg.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?prefix@143.23:143.29CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javañ( ñ(.2≥
horg.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)!patchCALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javañ1 ñ(62¿
uorg.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?path@140.31:140.35CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javañ; ñ(?2 
org.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?currentContent@142.23:142.37CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javañC ñ(Q2∏
horg.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)!patch	PARAMETERA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaã& ã(+2—
org.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?currentContent@142.23:142.37DECLARATIONA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaé é(%2…
worg.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?prefix@143.23:143.29DECLARATIONA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaè è(2–
~org.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?endOfEncoding@145.24:145.37DECLARATIONA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaë ë(%2«
uorg.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?path@140.31:140.35DECLARATIONA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaå å(#2ƒ
rorg.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?e@151.33:151.34DECLARATIONA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaó! ó("2V
voidRETURN_TYPEA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaã ã(•
org.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?currentContent@142.23:142.37VARIABLEA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaé é(%"
typeString"
isFinalfalse"É
declarationStringn<mark class="modifier"> </mark>String <mark class="class-field">currentContent</mark> = Files.readString(path)*currentContent2[
java.lang.StringTYPEA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaé é(2}
2java.nio.file.Files.readString(java.nio.file.Path)CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaé. é(82¿
uorg.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?path@140.31:140.35CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaé9 é(=∂
worg.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?prefix@143.23:143.29VARIABLEA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaè è("
typeString"
isFinalfalse"g
declarationStringR<mark class="modifier"> </mark>String <mark class="class-field">prefix</mark> = ""*prefix2[
java.lang.StringTYPEA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaè è(∂
~org.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?endOfEncoding@145.24:145.37VARIABLEA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaë ë(%"
typeint"
isFinalfalse"§
declarationStringé<mark class="modifier"> </mark><mark class="modifier">int</mark> <mark class="class-field">endOfEncoding</mark> = currentContent.indexOf("\n")*endOfEncoding2N
intTYPEA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaë ë(2u
*java.lang.String.indexOf(java.lang.String)CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaë7 ë(>2 
org.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?currentContent@142.23:142.37CALLA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaë( ë(6¬
horg.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)!patch	PARAMETERA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaã& ã(+"
typeMap<Path, String>"
isFinalfalse",
declarationStringMap<Path, String> patch*patch2X
java.util.MapTYPEA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaã ã(2f
java.nio.file.PathTYPE_ARGUMENTA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaã ã(2d
java.lang.StringTYPE_ARGUMENTA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaã ã($à
uorg.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?path@140.31:140.35VARIABLEA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaå å(#"
type"
isFinalfalse"
declarationString path*path2TYPEÔ
rorg.jabref.logic.git.SlrGitHandler.applyPatch(java.util.Map<java.nio.file.Path, java.lang.String>)?e@151.33:151.34VARIABLEA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaó! ó(""
typeIOException"
isFinalfalse""
declarationStringIOException e*e2^
java.io.IOExceptionTYPEA
5src\main\java\org\jabref\logic\git\SlrGitHandler.javaó ó( 