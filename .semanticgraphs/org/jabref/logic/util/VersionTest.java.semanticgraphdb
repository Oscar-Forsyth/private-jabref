
4src\test\java\org\jabref\logic\util\VersionTest.java≤2
!org.jabref.logic.util.VersionTestCLASS>
4src\test\java\org\jabref\logic\util\VersionTest.java (" 
packageorg.jabref.logic.util"
isFinalfalse"
inner classfalse"

isAbstractfalse"i
declarationStringT<mark class="modifier">public </mark><mark class="modifier">class </mark>VersionTest"
accesspublic*VersionTest2â
:org.jabref.logic.util.VersionTest.unknownVersionAsString()DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.java (&2á
8org.jabref.logic.util.VersionTest.unknownVersionAsNull()DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.java ($2é
?org.jabref.logic.util.VersionTest.unknownVersionAsEmptyString()DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.java   (+2§
Uorg.jabref.logic.util.VersionTest.initVersionFromWrongStringResultsInUnknownVersion()DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.java& &(A2Ç
3org.jabref.logic.util.VersionTest.versionOneDigit()DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.java, ,(2É
4org.jabref.logic.util.VersionTest.versionTwoDigits()DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.java7 7( 2Ö
6org.jabref.logic.util.VersionTest.versionThreeDigits()DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.javaB B("2å
=org.jabref.logic.util.VersionTest.versionOneDigitDevVersion()DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.javaM M()2å
=org.jabref.logic.util.VersionTest.versionTwoDigitDevVersion()DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.javaX X()2é
?org.jabref.logic.util.VersionTest.versionThreeDigitDevVersion()DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.javac c(+2õ
Lorg.jabref.logic.util.VersionTest.validVersionIsNotNewerThanUnknownVersion()DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.javan n(82õ
Lorg.jabref.logic.util.VersionTest.unknownVersionIsNotNewerThanValidVersion()DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.javav v(82É
4org.jabref.logic.util.VersionTest.versionNewerThan()DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.java} }( 2à
7org.jabref.logic.util.VersionTest.versionNotNewerThan()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaÑ Ñ(#2ì
Borg.jabref.logic.util.VersionTest.versionNotNewerThanSameVersion()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaã ã(.2ë
@org.jabref.logic.util.VersionTest.versionNewerThanDevTwoDigits()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaí í(,2è
>org.jabref.logic.util.VersionTest.versionNewerThanDevVersion()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaô ô(*2ì
Borg.jabref.logic.util.VersionTest.versionNewerThanDevThreeDigits()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java° °(.2Ü
5org.jabref.logic.util.VersionTest.versionNewerMinor()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java® ®(!2â
8org.jabref.logic.util.VersionTest.versionNotNewerMinor()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaØ Ø($2Ü
5org.jabref.logic.util.VersionTest.versionNewerPatch()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java∂ ∂(!2â
8org.jabref.logic.util.VersionTest.versionNotNewerPatch()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaΩ Ω($2í
Aorg.jabref.logic.util.VersionTest.versionNewerDevelopmentNumber()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaƒ ƒ(-2õ
Jorg.jabref.logic.util.VersionTest.versionNotNewerThanSameVersionWithBeta()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaÀ À(62ä
9org.jabref.logic.util.VersionTest.equalVersionsNotNewer()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java“ “(%2ö
Iorg.jabref.logic.util.VersionTest.changelogOfDevelopmentVersionWithDash()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaŸ Ÿ(52ù
Lorg.jabref.logic.util.VersionTest.changelogOfDevelopmentVersionWithoutDash()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaﬂ ﬂ(82ô
Horg.jabref.logic.util.VersionTest.changelogOfDevelopmentStageSubNumber()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaÂ Â(42ã
:org.jabref.logic.util.VersionTest.changelogWithTwoDigits()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaÒ Ò(&2ç
<org.jabref.logic.util.VersionTest.changelogWithThreeDigits()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java˜ ˜((2Ä
/org.jabref.logic.util.VersionTest.versionNull()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java˝ ˝(2Å
0org.jabref.logic.util.VersionTest.versionEmpty()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaÑ Ñ(2á
6org.jabref.logic.util.VersionTest.betaNewerThanAlpha()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaã ã("2à
7org.jabref.logic.util.VersionTest.stableNewerThanBeta()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaí í(#2è
>org.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToBeta()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaô ô(*2ê
?org.jabref.logic.util.VersionTest.betaShouldBeUpdatedToStable()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java† †(+2î
Corg.jabref.logic.util.VersionTest.stableShouldNotBeUpdatedToAlpha()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaß ß(/2ì
Borg.jabref.logic.util.VersionTest.stableShouldNotBeUpdatedToBeta()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaÆ Æ(.2í
Aorg.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToStables()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaµ µ(-2å
;org.jabref.logic.util.VersionTest.ciSuffixShouldBeRemoved()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaΩ Ω('2õ
Jorg.jabref.logic.util.VersionTest.ciSuffixShouldBeRemovedIfDateIsPresent()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java√ √(62ú
Korg.jabref.logic.util.VersionTest.getAllAvailableVersionsReturnsSomething()DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaÀ À(7∫
:org.jabref.logic.util.VersionTest.unknownVersionAsString()METHOD>
4src\test\java\org\jabref\logic\util\VersionTest.java (&"
isFinalfalse"º
declarationString¶<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">unknownVersionAsString</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*unknownVersionAsString2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java" ('2v
.org.jabref.logic.util.Version.getFullVersion()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java8 (F2ñ
Norg.jabref.logic.util.VersionTest.unknownVersionAsString()?version@21.16:21.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java0 (72ù
Norg.jabref.logic.util.VersionTest.unknownVersionAsString()?version@21.16:21.23DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.java (2S
voidRETURN_TYPE>
4src\test\java\org\jabref\logic\util\VersionTest.java (æ
Norg.jabref.logic.util.VersionTest.unknownVersionAsString()?version@21.16:21.23VARIABLE>
4src\test\java\org\jabref\logic\util\VersionTest.java ("
typeVersion"
isFinalfalse"è
declarationStringz<mark class="modifier"> </mark>Version <mark class="class-field">version</mark> = Version.parse(BuildInfo.UNKNOWN_VERSION)*version2e
org.jabref.logic.util.VersionTYPE>
4src\test\java\org\jabref\logic\util\VersionTest.java (2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java" ('∞
8org.jabref.logic.util.VersionTest.unknownVersionAsNull()METHOD>
4src\test\java\org\jabref\logic\util\VersionTest.java ($"
isFinalfalse"∫
declarationString§<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">unknownVersionAsNull</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*unknownVersionAsNull2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java" ('2v
.org.jabref.logic.util.Version.getFullVersion()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java8 (F2î
Lorg.jabref.logic.util.VersionTest.unknownVersionAsNull()?version@27.16:27.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java0 (72õ
Lorg.jabref.logic.util.VersionTest.unknownVersionAsNull()?version@27.16:27.23DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.java (2S
voidRETURN_TYPE>
4src\test\java\org\jabref\logic\util\VersionTest.java (∆
Lorg.jabref.logic.util.VersionTest.unknownVersionAsNull()?version@27.16:27.23VARIABLE>
4src\test\java\org\jabref\logic\util\VersionTest.java ("
typeVersion"
isFinalfalse"ô
declarationStringÉ<mark class="modifier"> </mark>Version <mark class="class-field">version</mark> = Version.parse(<mark class="modifier">null</mark>)*version2e
org.jabref.logic.util.VersionTYPE>
4src\test\java\org\jabref\logic\util\VersionTest.java (2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java" ('”
?org.jabref.logic.util.VersionTest.unknownVersionAsEmptyString()METHOD>
4src\test\java\org\jabref\logic\util\VersionTest.java   (+"
isFinalfalse"¡
declarationString´<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">unknownVersionAsEmptyString</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*unknownVersionAsEmptyString2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java!" !('2v
.org.jabref.logic.util.Version.getFullVersion()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java"8 "(F2õ
Sorg.jabref.logic.util.VersionTest.unknownVersionAsEmptyString()?version@33.16:33.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java"0 "(72¢
Sorg.jabref.logic.util.VersionTest.unknownVersionAsEmptyString()?version@33.16:33.23DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.java! !(2S
voidRETURN_TYPE>
4src\test\java\org\jabref\logic\util\VersionTest.java   (´
Sorg.jabref.logic.util.VersionTest.unknownVersionAsEmptyString()?version@33.16:33.23VARIABLE>
4src\test\java\org\jabref\logic\util\VersionTest.java! !("
typeVersion"
isFinalfalse"x
declarationStringc<mark class="modifier"> </mark>Version <mark class="class-field">version</mark> = Version.parse("")*version2e
org.jabref.logic.util.VersionTYPE>
4src\test\java\org\jabref\logic\util\VersionTest.java! !(2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java!" !('¡	
Uorg.jabref.logic.util.VersionTest.initVersionFromWrongStringResultsInUnknownVersion()METHOD>
4src\test\java\org\jabref\logic\util\VersionTest.java& &(A"
isFinalfalse"◊
declarationString¡<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">initVersionFromWrongStringResultsInUnknownVersion</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*1initVersionFromWrongStringResultsInUnknownVersion2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java'" '('2v
.org.jabref.logic.util.Version.getFullVersion()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java(8 ((F2±
iorg.jabref.logic.util.VersionTest.initVersionFromWrongStringResultsInUnknownVersion()?version@39.16:39.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java(0 ((72∏
iorg.jabref.logic.util.VersionTest.initVersionFromWrongStringResultsInUnknownVersion()?version@39.16:39.23DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.java' '(2S
voidRETURN_TYPE>
4src\test\java\org\jabref\logic\util\VersionTest.java& &(Ã
iorg.jabref.logic.util.VersionTest.initVersionFromWrongStringResultsInUnknownVersion()?version@39.16:39.23VARIABLE>
4src\test\java\org\jabref\logic\util\VersionTest.java' '("
typeVersion"
isFinalfalse"Ç
declarationStringm<mark class="modifier"> </mark>Version <mark class="class-field">version</mark> = Version.parse("${version}")*version2e
org.jabref.logic.util.VersionTYPE>
4src\test\java\org\jabref\logic\util\VersionTest.java' '(2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java'" '('¸
3org.jabref.logic.util.VersionTest.versionOneDigit()METHOD>
4src\test\java\org\jabref\logic\util\VersionTest.java, ,("
isFinalfalse"µ
declarationStringü<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">versionOneDigit</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*versionOneDigit2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java." .('2v
.org.jabref.logic.util.Version.getFullVersion()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java/* /(82p
(org.jabref.logic.util.Version.getMajor()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java0  0((2p
(org.jabref.logic.util.Version.getMinor()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java1  1((2p
(org.jabref.logic.util.Version.getPatch()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java2  2((2|
4org.jabref.logic.util.Version.isDevelopmentVersion()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java3 3(02ì
Korg.jabref.logic.util.VersionTest.versionOneDigit()?versionText@45.15:45.26CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java.( .(32ì
Korg.jabref.logic.util.VersionTest.versionOneDigit()?versionText@45.15:45.26CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java/ /( 2è
Gorg.jabref.logic.util.VersionTest.versionOneDigit()?version@46.16:46.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java/" /()2è
Gorg.jabref.logic.util.VersionTest.versionOneDigit()?version@46.16:46.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java0 0(2è
Gorg.jabref.logic.util.VersionTest.versionOneDigit()?version@46.16:46.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java1 1(2è
Gorg.jabref.logic.util.VersionTest.versionOneDigit()?version@46.16:46.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java2 2(2è
Gorg.jabref.logic.util.VersionTest.versionOneDigit()?version@46.16:46.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java3 3(2ö
Korg.jabref.logic.util.VersionTest.versionOneDigit()?versionText@45.15:45.26DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.java- -(2ñ
Gorg.jabref.logic.util.VersionTest.versionOneDigit()?version@46.16:46.23DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.java. .(2S
voidRETURN_TYPE>
4src\test\java\org\jabref\logic\util\VersionTest.java, ,(è
Korg.jabref.logic.util.VersionTest.versionOneDigit()?versionText@45.15:45.26VARIABLE>
4src\test\java\org\jabref\logic\util\VersionTest.java- -("
typeString"
isFinalfalse"m
declarationStringX<mark class="modifier"> </mark>String <mark class="class-field">versionText</mark> = "1"*versionText2X
java.lang.StringTYPE>
4src\test\java\org\jabref\logic\util\VersionTest.java- -(ø
Gorg.jabref.logic.util.VersionTest.versionOneDigit()?version@46.16:46.23VARIABLE>
4src\test\java\org\jabref\logic\util\VersionTest.java. .("
typeVersion"
isFinalfalse"Å
declarationStringl<mark class="modifier"> </mark>Version <mark class="class-field">version</mark> = Version.parse(versionText)*version2e
org.jabref.logic.util.VersionTYPE>
4src\test\java\org\jabref\logic\util\VersionTest.java. .(2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java." .('2ì
Korg.jabref.logic.util.VersionTest.versionOneDigit()?versionText@45.15:45.26CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java.( .(3à
4org.jabref.logic.util.VersionTest.versionTwoDigits()METHOD>
4src\test\java\org\jabref\logic\util\VersionTest.java7 7( "
isFinalfalse"∂
declarationString†<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">versionTwoDigits</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*versionTwoDigits2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java9" 9('2v
.org.jabref.logic.util.Version.getFullVersion()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java:* :(82p
(org.jabref.logic.util.Version.getMajor()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java;  ;((2p
(org.jabref.logic.util.Version.getMinor()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java<  <((2p
(org.jabref.logic.util.Version.getPatch()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java=  =((2|
4org.jabref.logic.util.Version.isDevelopmentVersion()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java> >(02î
Lorg.jabref.logic.util.VersionTest.versionTwoDigits()?versionText@56.15:56.26CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java9( 9(32î
Lorg.jabref.logic.util.VersionTest.versionTwoDigits()?versionText@56.15:56.26CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java: :( 2ê
Horg.jabref.logic.util.VersionTest.versionTwoDigits()?version@57.16:57.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java:" :()2ê
Horg.jabref.logic.util.VersionTest.versionTwoDigits()?version@57.16:57.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java; ;(2ê
Horg.jabref.logic.util.VersionTest.versionTwoDigits()?version@57.16:57.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java< <(2ê
Horg.jabref.logic.util.VersionTest.versionTwoDigits()?version@57.16:57.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java= =(2ê
Horg.jabref.logic.util.VersionTest.versionTwoDigits()?version@57.16:57.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java> >(2õ
Lorg.jabref.logic.util.VersionTest.versionTwoDigits()?versionText@56.15:56.26DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.java8 8(2ó
Horg.jabref.logic.util.VersionTest.versionTwoDigits()?version@57.16:57.23DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.java9 9(2S
voidRETURN_TYPE>
4src\test\java\org\jabref\logic\util\VersionTest.java7 7(í
Lorg.jabref.logic.util.VersionTest.versionTwoDigits()?versionText@56.15:56.26VARIABLE>
4src\test\java\org\jabref\logic\util\VersionTest.java8 8("
typeString"
isFinalfalse"o
declarationStringZ<mark class="modifier"> </mark>String <mark class="class-field">versionText</mark> = "1.2"*versionText2X
java.lang.StringTYPE>
4src\test\java\org\jabref\logic\util\VersionTest.java8 8(¡
Horg.jabref.logic.util.VersionTest.versionTwoDigits()?version@57.16:57.23VARIABLE>
4src\test\java\org\jabref\logic\util\VersionTest.java9 9("
typeVersion"
isFinalfalse"Å
declarationStringl<mark class="modifier"> </mark>Version <mark class="class-field">version</mark> = Version.parse(versionText)*version2e
org.jabref.logic.util.VersionTYPE>
4src\test\java\org\jabref\logic\util\VersionTest.java9 9(2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java9" 9('2î
Lorg.jabref.logic.util.VersionTest.versionTwoDigits()?versionText@56.15:56.26CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java9( 9(3†
6org.jabref.logic.util.VersionTest.versionThreeDigits()METHOD>
4src\test\java\org\jabref\logic\util\VersionTest.javaB B(""
isFinalfalse"∏
declarationString¢<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">versionThreeDigits</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*versionThreeDigits2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaD" D('2v
.org.jabref.logic.util.Version.getFullVersion()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaE* E(82p
(org.jabref.logic.util.Version.getMajor()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaF  F((2p
(org.jabref.logic.util.Version.getMinor()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaG  G((2p
(org.jabref.logic.util.Version.getPatch()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaH  H((2|
4org.jabref.logic.util.Version.isDevelopmentVersion()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaI I(02ñ
Norg.jabref.logic.util.VersionTest.versionThreeDigits()?versionText@67.15:67.26CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaD( D(32ñ
Norg.jabref.logic.util.VersionTest.versionThreeDigits()?versionText@67.15:67.26CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaE E( 2í
Jorg.jabref.logic.util.VersionTest.versionThreeDigits()?version@68.16:68.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaE" E()2í
Jorg.jabref.logic.util.VersionTest.versionThreeDigits()?version@68.16:68.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaF F(2í
Jorg.jabref.logic.util.VersionTest.versionThreeDigits()?version@68.16:68.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaG G(2í
Jorg.jabref.logic.util.VersionTest.versionThreeDigits()?version@68.16:68.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaH H(2í
Jorg.jabref.logic.util.VersionTest.versionThreeDigits()?version@68.16:68.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaI I(2ù
Norg.jabref.logic.util.VersionTest.versionThreeDigits()?versionText@67.15:67.26DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.javaC C(2ô
Jorg.jabref.logic.util.VersionTest.versionThreeDigits()?version@68.16:68.23DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.javaD D(2S
voidRETURN_TYPE>
4src\test\java\org\jabref\logic\util\VersionTest.javaB B(ñ
Norg.jabref.logic.util.VersionTest.versionThreeDigits()?versionText@67.15:67.26VARIABLE>
4src\test\java\org\jabref\logic\util\VersionTest.javaC C("
typeString"
isFinalfalse"q
declarationString\<mark class="modifier"> </mark>String <mark class="class-field">versionText</mark> = "1.2.3"*versionText2X
java.lang.StringTYPE>
4src\test\java\org\jabref\logic\util\VersionTest.javaC C(≈
Jorg.jabref.logic.util.VersionTest.versionThreeDigits()?version@68.16:68.23VARIABLE>
4src\test\java\org\jabref\logic\util\VersionTest.javaD D("
typeVersion"
isFinalfalse"Å
declarationStringl<mark class="modifier"> </mark>Version <mark class="class-field">version</mark> = Version.parse(versionText)*version2e
org.jabref.logic.util.VersionTYPE>
4src\test\java\org\jabref\logic\util\VersionTest.javaD D(2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaD" D('2ñ
Norg.jabref.logic.util.VersionTest.versionThreeDigits()?versionText@67.15:67.26CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaD( D(3Ù
=org.jabref.logic.util.VersionTest.versionOneDigitDevVersion()METHOD>
4src\test\java\org\jabref\logic\util\VersionTest.javaM M()"
isFinalfalse"ø
declarationString©<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">versionOneDigitDevVersion</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*versionOneDigitDevVersion2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaO" O('2v
.org.jabref.logic.util.Version.getFullVersion()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaP* P(82p
(org.jabref.logic.util.Version.getMajor()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaQ  Q((2p
(org.jabref.logic.util.Version.getMinor()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaR  R((2p
(org.jabref.logic.util.Version.getPatch()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaS  S((2|
4org.jabref.logic.util.Version.isDevelopmentVersion()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaT T(/2ù
Uorg.jabref.logic.util.VersionTest.versionOneDigitDevVersion()?versionText@78.15:78.26CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaO( O(32ù
Uorg.jabref.logic.util.VersionTest.versionOneDigitDevVersion()?versionText@78.15:78.26CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaP P( 2ô
Qorg.jabref.logic.util.VersionTest.versionOneDigitDevVersion()?version@79.16:79.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaP" P()2ô
Qorg.jabref.logic.util.VersionTest.versionOneDigitDevVersion()?version@79.16:79.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaQ Q(2ô
Qorg.jabref.logic.util.VersionTest.versionOneDigitDevVersion()?version@79.16:79.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaR R(2ô
Qorg.jabref.logic.util.VersionTest.versionOneDigitDevVersion()?version@79.16:79.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaS S(2ô
Qorg.jabref.logic.util.VersionTest.versionOneDigitDevVersion()?version@79.16:79.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaT T(2§
Uorg.jabref.logic.util.VersionTest.versionOneDigitDevVersion()?versionText@78.15:78.26DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.javaN N(2†
Qorg.jabref.logic.util.VersionTest.versionOneDigitDevVersion()?version@79.16:79.23DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.javaO O(2S
voidRETURN_TYPE>
4src\test\java\org\jabref\logic\util\VersionTest.javaM M(ú
Uorg.jabref.logic.util.VersionTest.versionOneDigitDevVersion()?versionText@78.15:78.26VARIABLE>
4src\test\java\org\jabref\logic\util\VersionTest.javaN N("
typeString"
isFinalfalse"p
declarationString[<mark class="modifier"> </mark>String <mark class="class-field">versionText</mark> = "1dev"*versionText2X
java.lang.StringTYPE>
4src\test\java\org\jabref\logic\util\VersionTest.javaN N(”
Qorg.jabref.logic.util.VersionTest.versionOneDigitDevVersion()?version@79.16:79.23VARIABLE>
4src\test\java\org\jabref\logic\util\VersionTest.javaO O("
typeVersion"
isFinalfalse"Å
declarationStringl<mark class="modifier"> </mark>Version <mark class="class-field">version</mark> = Version.parse(versionText)*version2e
org.jabref.logic.util.VersionTYPE>
4src\test\java\org\jabref\logic\util\VersionTest.javaO O(2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaO" O('2ù
Uorg.jabref.logic.util.VersionTest.versionOneDigitDevVersion()?versionText@78.15:78.26CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaO( O(3Ù
=org.jabref.logic.util.VersionTest.versionTwoDigitDevVersion()METHOD>
4src\test\java\org\jabref\logic\util\VersionTest.javaX X()"
isFinalfalse"ø
declarationString©<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">versionTwoDigitDevVersion</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*versionTwoDigitDevVersion2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaZ" Z('2v
.org.jabref.logic.util.Version.getFullVersion()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java[* [(82p
(org.jabref.logic.util.Version.getMajor()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java\  \((2p
(org.jabref.logic.util.Version.getMinor()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java]  ]((2p
(org.jabref.logic.util.Version.getPatch()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java^  ^((2|
4org.jabref.logic.util.Version.isDevelopmentVersion()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java_ _(/2ù
Uorg.jabref.logic.util.VersionTest.versionTwoDigitDevVersion()?versionText@89.15:89.26CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaZ( Z(32ù
Uorg.jabref.logic.util.VersionTest.versionTwoDigitDevVersion()?versionText@89.15:89.26CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java[ [( 2ô
Qorg.jabref.logic.util.VersionTest.versionTwoDigitDevVersion()?version@90.16:90.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java[" [()2ô
Qorg.jabref.logic.util.VersionTest.versionTwoDigitDevVersion()?version@90.16:90.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java\ \(2ô
Qorg.jabref.logic.util.VersionTest.versionTwoDigitDevVersion()?version@90.16:90.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java] ](2ô
Qorg.jabref.logic.util.VersionTest.versionTwoDigitDevVersion()?version@90.16:90.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java^ ^(2ô
Qorg.jabref.logic.util.VersionTest.versionTwoDigitDevVersion()?version@90.16:90.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java_ _(2§
Uorg.jabref.logic.util.VersionTest.versionTwoDigitDevVersion()?versionText@89.15:89.26DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.javaY Y(2†
Qorg.jabref.logic.util.VersionTest.versionTwoDigitDevVersion()?version@90.16:90.23DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.javaZ Z(2S
voidRETURN_TYPE>
4src\test\java\org\jabref\logic\util\VersionTest.javaX X(û
Uorg.jabref.logic.util.VersionTest.versionTwoDigitDevVersion()?versionText@89.15:89.26VARIABLE>
4src\test\java\org\jabref\logic\util\VersionTest.javaY Y("
typeString"
isFinalfalse"r
declarationString]<mark class="modifier"> </mark>String <mark class="class-field">versionText</mark> = "1.2dev"*versionText2X
java.lang.StringTYPE>
4src\test\java\org\jabref\logic\util\VersionTest.javaY Y(”
Qorg.jabref.logic.util.VersionTest.versionTwoDigitDevVersion()?version@90.16:90.23VARIABLE>
4src\test\java\org\jabref\logic\util\VersionTest.javaZ Z("
typeVersion"
isFinalfalse"Å
declarationStringl<mark class="modifier"> </mark>Version <mark class="class-field">version</mark> = Version.parse(versionText)*version2e
org.jabref.logic.util.VersionTYPE>
4src\test\java\org\jabref\logic\util\VersionTest.javaZ Z(2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaZ" Z('2ù
Uorg.jabref.logic.util.VersionTest.versionTwoDigitDevVersion()?versionText@89.15:89.26CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaZ( Z(3û
?org.jabref.logic.util.VersionTest.versionThreeDigitDevVersion()METHOD>
4src\test\java\org\jabref\logic\util\VersionTest.javac c(+"
isFinalfalse"¡
declarationString´<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">versionThreeDigitDevVersion</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*versionThreeDigitDevVersion2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javae" e('2v
.org.jabref.logic.util.Version.getFullVersion()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaf* f(82p
(org.jabref.logic.util.Version.getMajor()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javag  g((2p
(org.jabref.logic.util.Version.getMinor()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javah  h((2p
(org.jabref.logic.util.Version.getPatch()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javai  i((2|
4org.jabref.logic.util.Version.isDevelopmentVersion()CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaj j(/2°
Yorg.jabref.logic.util.VersionTest.versionThreeDigitDevVersion()?versionText@100.15:100.26CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javae( e(32°
Yorg.jabref.logic.util.VersionTest.versionThreeDigitDevVersion()?versionText@100.15:100.26CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaf f( 2ù
Uorg.jabref.logic.util.VersionTest.versionThreeDigitDevVersion()?version@101.16:101.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaf" f()2ù
Uorg.jabref.logic.util.VersionTest.versionThreeDigitDevVersion()?version@101.16:101.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javag g(2ù
Uorg.jabref.logic.util.VersionTest.versionThreeDigitDevVersion()?version@101.16:101.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javah h(2ù
Uorg.jabref.logic.util.VersionTest.versionThreeDigitDevVersion()?version@101.16:101.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javai i(2ù
Uorg.jabref.logic.util.VersionTest.versionThreeDigitDevVersion()?version@101.16:101.23CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaj j(2®
Yorg.jabref.logic.util.VersionTest.versionThreeDigitDevVersion()?versionText@100.15:100.26DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.javad d(2§
Uorg.jabref.logic.util.VersionTest.versionThreeDigitDevVersion()?version@101.16:101.23DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.javae e(2S
voidRETURN_TYPE>
4src\test\java\org\jabref\logic\util\VersionTest.javac c(§
Yorg.jabref.logic.util.VersionTest.versionThreeDigitDevVersion()?versionText@100.15:100.26VARIABLE>
4src\test\java\org\jabref\logic\util\VersionTest.javad d("
typeString"
isFinalfalse"t
declarationString_<mark class="modifier"> </mark>String <mark class="class-field">versionText</mark> = "1.2.3dev"*versionText2X
java.lang.StringTYPE>
4src\test\java\org\jabref\logic\util\VersionTest.javad d(€
Uorg.jabref.logic.util.VersionTest.versionThreeDigitDevVersion()?version@101.16:101.23VARIABLE>
4src\test\java\org\jabref\logic\util\VersionTest.javae e("
typeVersion"
isFinalfalse"Å
declarationStringl<mark class="modifier"> </mark>Version <mark class="class-field">version</mark> = Version.parse(versionText)*version2e
org.jabref.logic.util.VersionTYPE>
4src\test\java\org\jabref\logic\util\VersionTest.javae e(2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javae" e('2°
Yorg.jabref.logic.util.VersionTest.versionThreeDigitDevVersion()?versionText@100.15:100.26CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javae( e(3´
Lorg.jabref.logic.util.VersionTest.validVersionIsNotNewerThanUnknownVersion()METHOD>
4src\test\java\org\jabref\logic\util\VersionTest.javan n(8"
isFinalfalse"Œ
declarationString∏<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">validVersionIsNotNewerThanUnknownVersion</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*(validVersionIsNotNewerThanUnknownVersion2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javap) p(.2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaq' q(,2ê
Horg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javar! r(,2Ø
gorg.jabref.logic.util.VersionTest.validVersionIsNotNewerThanUnknownVersion()?validVersion@113.16:113.28CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javar r( 2±
iorg.jabref.logic.util.VersionTest.validVersionIsNotNewerThanUnknownVersion()?unknownVersion@112.16:112.30CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javar- r(;2∏
iorg.jabref.logic.util.VersionTest.validVersionIsNotNewerThanUnknownVersion()?unknownVersion@112.16:112.30DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.javap p(2∂
gorg.jabref.logic.util.VersionTest.validVersionIsNotNewerThanUnknownVersion()?validVersion@113.16:113.28DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.javaq q(2S
voidRETURN_TYPE>
4src\test\java\org\jabref\logic\util\VersionTest.javan n(Ë
iorg.jabref.logic.util.VersionTest.validVersionIsNotNewerThanUnknownVersion()?unknownVersion@112.16:112.30VARIABLE>
4src\test\java\org\jabref\logic\util\VersionTest.javap p("
typeVersion"
isFinalfalse"ó
declarationStringÅ<mark class="modifier"> </mark>Version <mark class="class-field">unknownVersion</mark> = Version.parse(BuildInfo.UNKNOWN_VERSION)*unknownVersion2e
org.jabref.logic.util.VersionTYPE>
4src\test\java\org\jabref\logic\util\VersionTest.javap p(2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javap) p(.Õ
gorg.jabref.logic.util.VersionTest.validVersionIsNotNewerThanUnknownVersion()?validVersion@113.16:113.28VARIABLE>
4src\test\java\org\jabref\logic\util\VersionTest.javaq q("
typeVersion"
isFinalfalse"Ä
declarationStringk<mark class="modifier"> </mark>Version <mark class="class-field">validVersion</mark> = Version.parse("4.2")*validVersion2e
org.jabref.logic.util.VersionTYPE>
4src\test\java\org\jabref\logic\util\VersionTest.javaq q(2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaq' q(,´
Lorg.jabref.logic.util.VersionTest.unknownVersionIsNotNewerThanValidVersion()METHOD>
4src\test\java\org\jabref\logic\util\VersionTest.javav v(8"
isFinalfalse"Œ
declarationString∏<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">unknownVersionIsNotNewerThanValidVersion</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*(unknownVersionIsNotNewerThanValidVersion2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaw) w(.2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javax' x(,2ê
Horg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javay# y(.2±
iorg.jabref.logic.util.VersionTest.unknownVersionIsNotNewerThanValidVersion()?unknownVersion@119.16:119.30CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javay y("2Ø
gorg.jabref.logic.util.VersionTest.unknownVersionIsNotNewerThanValidVersion()?validVersion@120.16:120.28CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javay/ y(;2∏
iorg.jabref.logic.util.VersionTest.unknownVersionIsNotNewerThanValidVersion()?unknownVersion@119.16:119.30DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.javaw w(2∂
gorg.jabref.logic.util.VersionTest.unknownVersionIsNotNewerThanValidVersion()?validVersion@120.16:120.28DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.javax x(2S
voidRETURN_TYPE>
4src\test\java\org\jabref\logic\util\VersionTest.javav v(Ë
iorg.jabref.logic.util.VersionTest.unknownVersionIsNotNewerThanValidVersion()?unknownVersion@119.16:119.30VARIABLE>
4src\test\java\org\jabref\logic\util\VersionTest.javaw w("
typeVersion"
isFinalfalse"ó
declarationStringÅ<mark class="modifier"> </mark>Version <mark class="class-field">unknownVersion</mark> = Version.parse(BuildInfo.UNKNOWN_VERSION)*unknownVersion2e
org.jabref.logic.util.VersionTYPE>
4src\test\java\org\jabref\logic\util\VersionTest.javaw w(2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javaw) w(.Õ
gorg.jabref.logic.util.VersionTest.unknownVersionIsNotNewerThanValidVersion()?validVersion@120.16:120.28VARIABLE>
4src\test\java\org\jabref\logic\util\VersionTest.javax x("
typeVersion"
isFinalfalse"Ä
declarationStringk<mark class="modifier"> </mark>Version <mark class="class-field">validVersion</mark> = Version.parse("4.2")*validVersion2e
org.jabref.logic.util.VersionTYPE>
4src\test\java\org\jabref\logic\util\VersionTest.javax x(2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.javax' x(,Ö
4org.jabref.logic.util.VersionTest.versionNewerThan()METHOD>
4src\test\java\org\jabref\logic\util\VersionTest.java} }( "
isFinalfalse"∂
declarationString†<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">versionNewerThan</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*versionNewerThan2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java~' ~(,2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java' (,2í
Horg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÄ  Ä(+2ô
Oorg.jabref.logic.util.VersionTest.versionNewerThan()?newerVersion@127.16:127.28CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÄ Ä(2ô
Oorg.jabref.logic.util.VersionTest.versionNewerThan()?olderVersion@126.16:126.28CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÄ, Ä(82û
Oorg.jabref.logic.util.VersionTest.versionNewerThan()?olderVersion@126.16:126.28DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.java~ ~(2û
Oorg.jabref.logic.util.VersionTest.versionNewerThan()?newerVersion@127.16:127.28DECLARATION>
4src\test\java\org\jabref\logic\util\VersionTest.java (2S
voidRETURN_TYPE>
4src\test\java\org\jabref\logic\util\VersionTest.java} }(µ
Oorg.jabref.logic.util.VersionTest.versionNewerThan()?olderVersion@126.16:126.28VARIABLE>
4src\test\java\org\jabref\logic\util\VersionTest.java~ ~("
typeVersion"
isFinalfalse"Ä
declarationStringk<mark class="modifier"> </mark>Version <mark class="class-field">olderVersion</mark> = Version.parse("2.4")*olderVersion2e
org.jabref.logic.util.VersionTYPE>
4src\test\java\org\jabref\logic\util\VersionTest.java~ ~(2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java~' ~(,µ
Oorg.jabref.logic.util.VersionTest.versionNewerThan()?newerVersion@127.16:127.28VARIABLE>
4src\test\java\org\jabref\logic\util\VersionTest.java ("
typeVersion"
isFinalfalse"Ä
declarationStringk<mark class="modifier"> </mark>Version <mark class="class-field">newerVersion</mark> = Version.parse("4.2")*newerVersion2e
org.jabref.logic.util.VersionTYPE>
4src\test\java\org\jabref\logic\util\VersionTest.java (2}
5org.jabref.logic.util.Version.parse(java.lang.String)CALL>
4src\test\java\org\jabref\logic\util\VersionTest.java' (,¶
7org.jabref.logic.util.VersionTest.versionNotNewerThan()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.javaÑ Ñ(#"
isFinalfalse"π
declarationString£<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">versionNotNewerThan</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*versionNotNewerThan2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÖ' Ö(,2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÜ' Ü(,2í
Horg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaá! á(,2ú
Rorg.jabref.logic.util.VersionTest.versionNotNewerThan()?olderVersion@133.16:133.28CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaá á( 2ú
Rorg.jabref.logic.util.VersionTest.versionNotNewerThan()?newerVersion@134.16:134.28CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaá- á(92£
Rorg.jabref.logic.util.VersionTest.versionNotNewerThan()?olderVersion@133.16:133.28DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaÖ Ö(2£
Rorg.jabref.logic.util.VersionTest.versionNotNewerThan()?newerVersion@134.16:134.28DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaÜ Ü(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÑ Ñ(æ
Rorg.jabref.logic.util.VersionTest.versionNotNewerThan()?olderVersion@133.16:133.28VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÖ Ö("
typeVersion"
isFinalfalse"Ä
declarationStringk<mark class="modifier"> </mark>Version <mark class="class-field">olderVersion</mark> = Version.parse("2.4")*olderVersion2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÖ Ö(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÖ' Ö(,æ
Rorg.jabref.logic.util.VersionTest.versionNotNewerThan()?newerVersion@134.16:134.28VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÜ Ü("
typeVersion"
isFinalfalse"Ä
declarationStringk<mark class="modifier"> </mark>Version <mark class="class-field">newerVersion</mark> = Version.parse("4.2")*newerVersion2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÜ Ü(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÜ' Ü(,„
Borg.jabref.logic.util.VersionTest.versionNotNewerThanSameVersion()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.javaã ã(."
isFinalfalse"ƒ
declarationStringÆ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">versionNotNewerThanSameVersion</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*versionNotNewerThanSameVersion2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaå# å((2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaç# ç((2í
Horg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaé é((2£
Yorg.jabref.logic.util.VersionTest.versionNotNewerThanSameVersion()?version1@140.16:140.24CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaé é(2£
Yorg.jabref.logic.util.VersionTest.versionNotNewerThanSameVersion()?version2@141.16:141.24CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaé) é(12™
Yorg.jabref.logic.util.VersionTest.versionNotNewerThanSameVersion()?version1@140.16:140.24DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaå å(2™
Yorg.jabref.logic.util.VersionTest.versionNotNewerThanSameVersion()?version2@141.16:141.24DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaç ç(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaã ã(º
Yorg.jabref.logic.util.VersionTest.versionNotNewerThanSameVersion()?version1@140.16:140.24VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaå å("
typeVersion"
isFinalfalse"|
declarationStringg<mark class="modifier"> </mark>Version <mark class="class-field">version1</mark> = Version.parse("4.2")*version12g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaå å(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaå# å((º
Yorg.jabref.logic.util.VersionTest.versionNotNewerThanSameVersion()?version2@141.16:141.24VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaç ç("
typeVersion"
isFinalfalse"|
declarationStringg<mark class="modifier"> </mark>Version <mark class="class-field">version2</mark> = Version.parse("4.2")*version22g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaç ç(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaç# ç((…
@org.jabref.logic.util.VersionTest.versionNewerThanDevTwoDigits()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.javaí í(,"
isFinalfalse"¬
declarationString¨<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">versionNewerThanDevTwoDigits</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*versionNewerThanDevTwoDigits2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaì  ì(%2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaî  î(%2í
Horg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaï ï($2û
Torg.jabref.logic.util.VersionTest.versionNewerThanDevTwoDigits()?newer@148.16:148.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaï ï(2û
Torg.jabref.logic.util.VersionTest.versionNewerThanDevTwoDigits()?older@147.16:147.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaï% ï(*2•
Torg.jabref.logic.util.VersionTest.versionNewerThanDevTwoDigits()?older@147.16:147.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaì ì(2•
Torg.jabref.logic.util.VersionTest.versionNewerThanDevTwoDigits()?newer@148.16:148.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaî î(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaí í(±
Torg.jabref.logic.util.VersionTest.versionNewerThanDevTwoDigits()?older@147.16:147.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaì ì("
typeVersion"
isFinalfalse"y
declarationStringd<mark class="modifier"> </mark>Version <mark class="class-field">older</mark> = Version.parse("4.2")*older2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaì ì(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaì  ì(%¥
Torg.jabref.logic.util.VersionTest.versionNewerThanDevTwoDigits()?newer@148.16:148.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaî î("
typeVersion"
isFinalfalse"|
declarationStringg<mark class="modifier"> </mark>Version <mark class="class-field">newer</mark> = Version.parse("4.3dev")*newer2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaî î(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaî  î(%é
>org.jabref.logic.util.VersionTest.versionNewerThanDevVersion()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.javaô ô(*"
isFinalfalse"¿
declarationString™<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">versionNewerThanDevVersion</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*versionNewerThanDevVersion2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaö  ö(%2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaõ  õ(%2í
Horg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaú ú($2í
Horg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaù ù(%2ú
Rorg.jabref.logic.util.VersionTest.versionNewerThanDevVersion()?newer@155.16:155.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaú ú(2ú
Rorg.jabref.logic.util.VersionTest.versionNewerThanDevVersion()?older@154.16:154.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaú% ú(*2ú
Rorg.jabref.logic.util.VersionTest.versionNewerThanDevVersion()?older@154.16:154.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaù ù(2ú
Rorg.jabref.logic.util.VersionTest.versionNewerThanDevVersion()?newer@155.16:155.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaù& ù(+2£
Rorg.jabref.logic.util.VersionTest.versionNewerThanDevVersion()?older@154.16:154.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaö ö(2£
Rorg.jabref.logic.util.VersionTest.versionNewerThanDevVersion()?newer@155.16:155.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaõ õ(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaô ô(≤
Rorg.jabref.logic.util.VersionTest.versionNewerThanDevVersion()?older@154.16:154.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaö ö("
typeVersion"
isFinalfalse"|
declarationStringg<mark class="modifier"> </mark>Version <mark class="class-field">older</mark> = Version.parse("1.2dev")*older2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaö ö(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaö  ö(%Ø
Rorg.jabref.logic.util.VersionTest.versionNewerThanDevVersion()?newer@155.16:155.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaõ õ("
typeVersion"
isFinalfalse"y
declarationStringd<mark class="modifier"> </mark>Version <mark class="class-field">newer</mark> = Version.parse("1.2")*newer2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaõ õ(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaõ  õ(%◊
Borg.jabref.logic.util.VersionTest.versionNewerThanDevThreeDigits()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.java° °(."
isFinalfalse"ƒ
declarationStringÆ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">versionNewerThanDevThreeDigits</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*versionNewerThanDevThreeDigits2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java¢  ¢(%2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java£  £(%2í
Horg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java§ §($2†
Vorg.jabref.logic.util.VersionTest.versionNewerThanDevThreeDigits()?newer@163.16:163.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java§ §(2†
Vorg.jabref.logic.util.VersionTest.versionNewerThanDevThreeDigits()?older@162.16:162.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java§% §(*2ß
Vorg.jabref.logic.util.VersionTest.versionNewerThanDevThreeDigits()?older@162.16:162.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java¢ ¢(2ß
Vorg.jabref.logic.util.VersionTest.versionNewerThanDevThreeDigits()?newer@163.16:163.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java£ £(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java° °(µ
Vorg.jabref.logic.util.VersionTest.versionNewerThanDevThreeDigits()?older@162.16:162.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java¢ ¢("
typeVersion"
isFinalfalse"{
declarationStringf<mark class="modifier"> </mark>Version <mark class="class-field">older</mark> = Version.parse("4.2.1")*older2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java¢ ¢(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java¢  ¢(%∂
Vorg.jabref.logic.util.VersionTest.versionNewerThanDevThreeDigits()?newer@163.16:163.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java£ £("
typeVersion"
isFinalfalse"|
declarationStringg<mark class="modifier"> </mark>Version <mark class="class-field">newer</mark> = Version.parse("4.3dev")*newer2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java£ £(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java£  £(%¸
5org.jabref.logic.util.VersionTest.versionNewerMinor()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.java® ®(!"
isFinalfalse"∑
declarationString°<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">versionNewerMinor</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*versionNewerMinor2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java©  ©(%2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java™  ™(%2í
Horg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java´ ´($2ì
Iorg.jabref.logic.util.VersionTest.versionNewerMinor()?newer@170.16:170.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java´ ´(2ì
Iorg.jabref.logic.util.VersionTest.versionNewerMinor()?older@169.16:169.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java´% ´(*2ö
Iorg.jabref.logic.util.VersionTest.versionNewerMinor()?older@169.16:169.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java© ©(2ö
Iorg.jabref.logic.util.VersionTest.versionNewerMinor()?newer@170.16:170.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java™ ™(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java® ®(¶
Iorg.jabref.logic.util.VersionTest.versionNewerMinor()?older@169.16:169.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java© ©("
typeVersion"
isFinalfalse"y
declarationStringd<mark class="modifier"> </mark>Version <mark class="class-field">older</mark> = Version.parse("4.1")*older2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java© ©(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java©  ©(%®
Iorg.jabref.logic.util.VersionTest.versionNewerMinor()?newer@170.16:170.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java™ ™("
typeVersion"
isFinalfalse"{
declarationStringf<mark class="modifier"> </mark>Version <mark class="class-field">newer</mark> = Version.parse("4.2.1")*newer2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java™ ™(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java™  ™(%ë
8org.jabref.logic.util.VersionTest.versionNotNewerMinor()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.javaØ Ø($"
isFinalfalse"∫
declarationString§<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">versionNotNewerMinor</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*versionNotNewerMinor2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java∞  ∞(%2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java±  ±(%2í
Horg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java≤ ≤(%2ñ
Lorg.jabref.logic.util.VersionTest.versionNotNewerMinor()?older@176.16:176.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java≤ ≤(2ñ
Lorg.jabref.logic.util.VersionTest.versionNotNewerMinor()?newer@177.16:177.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java≤& ≤(+2ù
Lorg.jabref.logic.util.VersionTest.versionNotNewerMinor()?older@176.16:176.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java∞ ∞(2ù
Lorg.jabref.logic.util.VersionTest.versionNotNewerMinor()?newer@177.16:177.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java± ±(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaØ Ø(©
Lorg.jabref.logic.util.VersionTest.versionNotNewerMinor()?older@176.16:176.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java∞ ∞("
typeVersion"
isFinalfalse"y
declarationStringd<mark class="modifier"> </mark>Version <mark class="class-field">older</mark> = Version.parse("4.1")*older2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java∞ ∞(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java∞  ∞(%´
Lorg.jabref.logic.util.VersionTest.versionNotNewerMinor()?newer@177.16:177.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java± ±("
typeVersion"
isFinalfalse"{
declarationStringf<mark class="modifier"> </mark>Version <mark class="class-field">newer</mark> = Version.parse("4.2.1")*newer2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java± ±(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java±  ±(%¸
5org.jabref.logic.util.VersionTest.versionNewerPatch()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.java∂ ∂(!"
isFinalfalse"∑
declarationString°<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">versionNewerPatch</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*versionNewerPatch2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java∑  ∑(%2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java∏  ∏(%2í
Horg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaπ π($2ì
Iorg.jabref.logic.util.VersionTest.versionNewerPatch()?newer@184.16:184.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaπ π(2ì
Iorg.jabref.logic.util.VersionTest.versionNewerPatch()?older@183.16:183.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaπ% π(*2ö
Iorg.jabref.logic.util.VersionTest.versionNewerPatch()?older@183.16:183.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java∑ ∑(2ö
Iorg.jabref.logic.util.VersionTest.versionNewerPatch()?newer@184.16:184.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java∏ ∏(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java∂ ∂(®
Iorg.jabref.logic.util.VersionTest.versionNewerPatch()?older@183.16:183.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java∑ ∑("
typeVersion"
isFinalfalse"{
declarationStringf<mark class="modifier"> </mark>Version <mark class="class-field">older</mark> = Version.parse("4.2.1")*older2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java∑ ∑(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java∑  ∑(%®
Iorg.jabref.logic.util.VersionTest.versionNewerPatch()?newer@184.16:184.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java∏ ∏("
typeVersion"
isFinalfalse"{
declarationStringf<mark class="modifier"> </mark>Version <mark class="class-field">newer</mark> = Version.parse("4.2.2")*newer2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java∏ ∏(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java∏  ∏(%ë
8org.jabref.logic.util.VersionTest.versionNotNewerPatch()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.javaΩ Ω($"
isFinalfalse"∫
declarationString§<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">versionNotNewerPatch</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*versionNotNewerPatch2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaæ  æ(%2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaø  ø(%2í
Horg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java¿ ¿(%2ñ
Lorg.jabref.logic.util.VersionTest.versionNotNewerPatch()?older@190.16:190.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java¿ ¿(2ñ
Lorg.jabref.logic.util.VersionTest.versionNotNewerPatch()?newer@191.16:191.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java¿& ¿(+2ù
Lorg.jabref.logic.util.VersionTest.versionNotNewerPatch()?older@190.16:190.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaæ æ(2ù
Lorg.jabref.logic.util.VersionTest.versionNotNewerPatch()?newer@191.16:191.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaø ø(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaΩ Ω(´
Lorg.jabref.logic.util.VersionTest.versionNotNewerPatch()?older@190.16:190.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaæ æ("
typeVersion"
isFinalfalse"{
declarationStringf<mark class="modifier"> </mark>Version <mark class="class-field">older</mark> = Version.parse("4.2.1")*older2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaæ æ(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaæ  æ(%´
Lorg.jabref.logic.util.VersionTest.versionNotNewerPatch()?newer@191.16:191.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaø ø("
typeVersion"
isFinalfalse"{
declarationStringf<mark class="modifier"> </mark>Version <mark class="class-field">newer</mark> = Version.parse("4.2.2")*newer2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaø ø(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaø  ø(%–
Aorg.jabref.logic.util.VersionTest.versionNewerDevelopmentNumber()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.javaƒ ƒ(-"
isFinalfalse"√
declarationString≠<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">versionNewerDevelopmentNumber</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*versionNewerDevelopmentNumber2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java≈  ≈(%2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java∆  ∆(%2í
Horg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java« «(%2ü
Uorg.jabref.logic.util.VersionTest.versionNewerDevelopmentNumber()?older@197.16:197.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java« «(2ü
Uorg.jabref.logic.util.VersionTest.versionNewerDevelopmentNumber()?newer@198.16:198.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java«& «(+2¶
Uorg.jabref.logic.util.VersionTest.versionNewerDevelopmentNumber()?older@197.16:197.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java≈ ≈(2¶
Uorg.jabref.logic.util.VersionTest.versionNewerDevelopmentNumber()?newer@198.16:198.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java∆ ∆(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaƒ ƒ(∏
Uorg.jabref.logic.util.VersionTest.versionNewerDevelopmentNumber()?older@197.16:197.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java≈ ≈("
typeVersion"
isFinalfalse"
declarationStringj<mark class="modifier"> </mark>Version <mark class="class-field">older</mark> = Version.parse("4.2-beta1")*older2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java≈ ≈(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java≈  ≈(%∏
Uorg.jabref.logic.util.VersionTest.versionNewerDevelopmentNumber()?newer@198.16:198.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java∆ ∆("
typeVersion"
isFinalfalse"
declarationStringj<mark class="modifier"> </mark>Version <mark class="class-field">newer</mark> = Version.parse("4.2-beta2")*newer2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java∆ ∆(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java∆  ∆(%õ
Jorg.jabref.logic.util.VersionTest.versionNotNewerThanSameVersionWithBeta()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.javaÀ À(6"
isFinalfalse"Ã
declarationString∂<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">versionNotNewerThanSameVersionWithBeta</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*&versionNotNewerThanSameVersionWithBeta2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÃ# Ã((2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÕ# Õ((2í
Horg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaŒ Œ((2´
aorg.jabref.logic.util.VersionTest.versionNotNewerThanSameVersionWithBeta()?version2@205.16:205.24CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaŒ Œ(2´
aorg.jabref.logic.util.VersionTest.versionNotNewerThanSameVersionWithBeta()?version1@204.16:204.24CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaŒ) Œ(12≤
aorg.jabref.logic.util.VersionTest.versionNotNewerThanSameVersionWithBeta()?version1@204.16:204.24DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaÃ Ã(2≤
aorg.jabref.logic.util.VersionTest.versionNotNewerThanSameVersionWithBeta()?version2@205.16:205.24DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaÕ Õ(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÀ À(À
aorg.jabref.logic.util.VersionTest.versionNotNewerThanSameVersionWithBeta()?version1@204.16:204.24VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÃ Ã("
typeVersion"
isFinalfalse"Ç
declarationStringm<mark class="modifier"> </mark>Version <mark class="class-field">version1</mark> = Version.parse("4.2-beta2")*version12g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÃ Ã(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÃ# Ã((À
aorg.jabref.logic.util.VersionTest.versionNotNewerThanSameVersionWithBeta()?version2@205.16:205.24VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÕ Õ("
typeVersion"
isFinalfalse"Ç
declarationStringm<mark class="modifier"> </mark>Version <mark class="class-field">version2</mark> = Version.parse("4.2-beta2")*version22g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÕ Õ(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÕ# Õ((§
9org.jabref.logic.util.VersionTest.equalVersionsNotNewer()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.java“ “(%"
isFinalfalse"ª
declarationString•<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">equalVersionsNotNewer</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*equalVersionsNotNewer2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java”# ”((2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java‘# ‘((2í
Horg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java’ ’((2ö
Porg.jabref.logic.util.VersionTest.equalVersionsNotNewer()?version1@211.16:211.24CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java’ ’(2ö
Porg.jabref.logic.util.VersionTest.equalVersionsNotNewer()?version2@212.16:212.24CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java’) ’(12°
Porg.jabref.logic.util.VersionTest.equalVersionsNotNewer()?version1@211.16:211.24DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java” ”(2°
Porg.jabref.logic.util.VersionTest.equalVersionsNotNewer()?version2@212.16:212.24DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java‘ ‘(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java“ “(µ
Porg.jabref.logic.util.VersionTest.equalVersionsNotNewer()?version1@211.16:211.24VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java” ”("
typeVersion"
isFinalfalse"~
declarationStringi<mark class="modifier"> </mark>Version <mark class="class-field">version1</mark> = Version.parse("4.2.2")*version12g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java” ”(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java”# ”((µ
Porg.jabref.logic.util.VersionTest.equalVersionsNotNewer()?version2@212.16:212.24VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java‘ ‘("
typeVersion"
isFinalfalse"~
declarationStringi<mark class="modifier"> </mark>Version <mark class="class-field">version2</mark> = Version.parse("4.2.2")*version22g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java‘ ‘(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java‘# ‘((ñ	
Iorg.jabref.logic.util.VersionTest.changelogOfDevelopmentVersionWithDash()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.javaŸ Ÿ(5"
isFinalfalse"À
declarationStringµ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">changelogOfDevelopmentVersionWithDash</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*%changelogOfDevelopmentVersionWithDash2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java⁄" ⁄('2y
/org.jabref.logic.util.Version.getChangelogUrl()CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java€c €(r2©
_org.jabref.logic.util.VersionTest.changelogOfDevelopmentVersionWithDash()?version@218.16:218.23CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java€[ €(b2∞
_org.jabref.logic.util.VersionTest.changelogOfDevelopmentVersionWithDash()?version@218.16:218.23DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java⁄ ⁄(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaŸ Ÿ(ƒ
_org.jabref.logic.util.VersionTest.changelogOfDevelopmentVersionWithDash()?version@218.16:218.23VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java⁄ ⁄("
typeVersion"
isFinalfalse"
declarationStringj<mark class="modifier"> </mark>Version <mark class="class-field">version</mark> = Version.parse("4.0-dev")*version2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java⁄ ⁄(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java⁄" ⁄('•	
Lorg.jabref.logic.util.VersionTest.changelogOfDevelopmentVersionWithoutDash()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.javaﬂ ﬂ(8"
isFinalfalse"Œ
declarationString∏<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">changelogOfDevelopmentVersionWithoutDash</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*(changelogOfDevelopmentVersionWithoutDash2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java‡" ‡('2y
/org.jabref.logic.util.Version.getChangelogUrl()CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java·c ·(r2¨
borg.jabref.logic.util.VersionTest.changelogOfDevelopmentVersionWithoutDash()?version@224.16:224.23CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java·[ ·(b2≥
borg.jabref.logic.util.VersionTest.changelogOfDevelopmentVersionWithoutDash()?version@224.16:224.23DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java‡ ‡(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaﬂ ﬂ(∆
borg.jabref.logic.util.VersionTest.changelogOfDevelopmentVersionWithoutDash()?version@224.16:224.23VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java‡ ‡("
typeVersion"
isFinalfalse"~
declarationStringi<mark class="modifier"> </mark>Version <mark class="class-field">version</mark> = Version.parse("3.7dev")*version2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java‡ ‡(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java‡" ‡('§
Horg.jabref.logic.util.VersionTest.changelogOfDevelopmentStageSubNumber()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.javaÂ Â(4"
isFinalfalse" 
declarationString¥<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">changelogOfDevelopmentStageSubNumber</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*$changelogOfDevelopmentStageSubNumber2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÊ# Ê((2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÁ# Á((2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaË# Ë((2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÈ# È((2y
/org.jabref.logic.util.Version.getChangelogUrl()CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÍY Í(h2y
/org.jabref.logic.util.Version.getChangelogUrl()CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÎ^ Î(m2y
/org.jabref.logic.util.Version.getChangelogUrl()CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÏ_ Ï(n2y
/org.jabref.logic.util.Version.getChangelogUrl()CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÌ_ Ì(n2©
_org.jabref.logic.util.VersionTest.changelogOfDevelopmentStageSubNumber()?version1@230.16:230.24CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÍP Í(X2©
_org.jabref.logic.util.VersionTest.changelogOfDevelopmentStageSubNumber()?version2@231.16:231.24CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÎU Î(]2©
_org.jabref.logic.util.VersionTest.changelogOfDevelopmentStageSubNumber()?version3@232.16:232.24CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÏV Ï(^2©
_org.jabref.logic.util.VersionTest.changelogOfDevelopmentStageSubNumber()?version4@233.16:233.24CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÌV Ì(^2∞
_org.jabref.logic.util.VersionTest.changelogOfDevelopmentStageSubNumber()?version1@230.16:230.24DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaÊ Ê(2∞
_org.jabref.logic.util.VersionTest.changelogOfDevelopmentStageSubNumber()?version2@231.16:231.24DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaÁ Á(2∞
_org.jabref.logic.util.VersionTest.changelogOfDevelopmentStageSubNumber()?version3@232.16:232.24DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaË Ë(2∞
_org.jabref.logic.util.VersionTest.changelogOfDevelopmentStageSubNumber()?version4@233.16:233.24DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaÈ È(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÂ Â(¬
_org.jabref.logic.util.VersionTest.changelogOfDevelopmentStageSubNumber()?version1@230.16:230.24VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÊ Ê("
typeVersion"
isFinalfalse"|
declarationStringg<mark class="modifier"> </mark>Version <mark class="class-field">version1</mark> = Version.parse("4.0")*version12g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÊ Ê(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÊ# Ê((»
_org.jabref.logic.util.VersionTest.changelogOfDevelopmentStageSubNumber()?version2@231.16:231.24VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÁ Á("
typeVersion"
isFinalfalse"Å
declarationStringl<mark class="modifier"> </mark>Version <mark class="class-field">version2</mark> = Version.parse("4.0-beta")*version22g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÁ Á(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÁ# Á((…
_org.jabref.logic.util.VersionTest.changelogOfDevelopmentStageSubNumber()?version3@232.16:232.24VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaË Ë("
typeVersion"
isFinalfalse"Ç
declarationStringm<mark class="modifier"> </mark>Version <mark class="class-field">version3</mark> = Version.parse("4.0-beta2")*version32g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaË Ë(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaË# Ë((…
_org.jabref.logic.util.VersionTest.changelogOfDevelopmentStageSubNumber()?version4@233.16:233.24VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÈ È("
typeVersion"
isFinalfalse"Ç
declarationStringm<mark class="modifier"> </mark>Version <mark class="class-field">version4</mark> = Version.parse("4.0-beta3")*version42g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÈ È(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÈ# È((À
:org.jabref.logic.util.VersionTest.changelogWithTwoDigits()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.javaÒ Ò(&"
isFinalfalse"º
declarationString¶<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">changelogWithTwoDigits</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*changelogWithTwoDigits2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÚ" Ú('2y
/org.jabref.logic.util.Version.getChangelogUrl()CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÛX Û(g2ö
Porg.jabref.logic.util.VersionTest.changelogWithTwoDigits()?version@242.16:242.23CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÛP Û(W2°
Porg.jabref.logic.util.VersionTest.changelogWithTwoDigits()?version@242.16:242.23DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaÚ Ú(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÒ Ò(±
Porg.jabref.logic.util.VersionTest.changelogWithTwoDigits()?version@242.16:242.23VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÚ Ú("
typeVersion"
isFinalfalse"{
declarationStringf<mark class="modifier"> </mark>Version <mark class="class-field">version</mark> = Version.parse("3.4")*version2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÚ Ú(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÚ" Ú('’
<org.jabref.logic.util.VersionTest.changelogWithThreeDigits()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.java˜ ˜(("
isFinalfalse"æ
declarationString®<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">changelogWithThreeDigits</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*changelogWithThreeDigits2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java¯" ¯('2y
/org.jabref.logic.util.Version.getChangelogUrl()CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java˘Z ˘(i2ú
Rorg.jabref.logic.util.VersionTest.changelogWithThreeDigits()?version@248.16:248.23CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java˘R ˘(Y2£
Rorg.jabref.logic.util.VersionTest.changelogWithThreeDigits()?version@248.16:248.23DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java¯ ¯(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java˜ ˜(µ
Rorg.jabref.logic.util.VersionTest.changelogWithThreeDigits()?version@248.16:248.23VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java¯ ¯("
typeVersion"
isFinalfalse"}
declarationStringh<mark class="modifier"> </mark>Version <mark class="class-field">version</mark> = Version.parse("3.4.1")*version2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java¯ ¯(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java¯" ¯('∆

/org.jabref.logic.util.VersionTest.versionNull()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.java˝ ˝("
isFinalfalse"±
declarationStringõ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">versionNull</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*versionNull2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaˇ" ˇ('2x
.org.jabref.logic.util.Version.getFullVersion()CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÄ8 Ä(F2ì
Iorg.jabref.logic.util.VersionTest.versionNull()?versionText@254.15:254.26CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaˇ( ˇ(32è
Eorg.jabref.logic.util.VersionTest.versionNull()?version@255.16:255.23CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÄ0 Ä(72ö
Iorg.jabref.logic.util.VersionTest.versionNull()?versionText@254.15:254.26DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java˛ ˛(2ñ
Eorg.jabref.logic.util.VersionTest.versionNull()?version@255.16:255.23DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaˇ ˇ(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java˝ ˝(±
Iorg.jabref.logic.util.VersionTest.versionNull()?versionText@254.15:254.26VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java˛ ˛("
typeString"
isFinalfalse"å
declarationStringw<mark class="modifier"> </mark>String <mark class="class-field">versionText</mark> = <mark class="modifier">null</mark>*versionText2Z
java.lang.StringTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java˛ ˛(√
Eorg.jabref.logic.util.VersionTest.versionNull()?version@255.16:255.23VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaˇ ˇ("
typeVersion"
isFinalfalse"Å
declarationStringl<mark class="modifier"> </mark>Version <mark class="class-field">version</mark> = Version.parse(versionText)*version2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaˇ ˇ(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaˇ" ˇ('2ì
Iorg.jabref.logic.util.VersionTest.versionNull()?versionText@254.15:254.26CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaˇ( ˇ(3Õ

0org.jabref.logic.util.VersionTest.versionEmpty()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.javaÑ Ñ("
isFinalfalse"≤
declarationStringú<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">versionEmpty</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*versionEmpty2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÜ" Ü('2x
.org.jabref.logic.util.Version.getFullVersion()CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaá8 á(F2î
Jorg.jabref.logic.util.VersionTest.versionEmpty()?versionText@261.15:261.26CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÜ( Ü(32ê
Forg.jabref.logic.util.VersionTest.versionEmpty()?version@262.16:262.23CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaá0 á(72õ
Jorg.jabref.logic.util.VersionTest.versionEmpty()?versionText@261.15:261.26DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaÖ Ö(2ó
Forg.jabref.logic.util.VersionTest.versionEmpty()?version@262.16:262.23DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaÜ Ü(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÑ Ñ(ë
Jorg.jabref.logic.util.VersionTest.versionEmpty()?versionText@261.15:261.26VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÖ Ö("
typeString"
isFinalfalse"l
declarationStringW<mark class="modifier"> </mark>String <mark class="class-field">versionText</mark> = ""*versionText2Z
java.lang.StringTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÖ Ö(≈
Forg.jabref.logic.util.VersionTest.versionEmpty()?version@262.16:262.23VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÜ Ü("
typeVersion"
isFinalfalse"Å
declarationStringl<mark class="modifier"> </mark>Version <mark class="class-field">version</mark> = Version.parse(versionText)*version2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÜ Ü(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÜ" Ü('2î
Jorg.jabref.logic.util.VersionTest.versionEmpty()?versionText@261.15:261.26CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÜ( Ü(3É
6org.jabref.logic.util.VersionTest.betaNewerThanAlpha()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.javaã ã(""
isFinalfalse"∏
declarationString¢<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">betaNewerThanAlpha</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*betaNewerThanAlpha2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaå  å(%2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaç  ç(%2í
Horg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaé é($2î
Jorg.jabref.logic.util.VersionTest.betaNewerThanAlpha()?newer@269.16:269.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaé é(2î
Jorg.jabref.logic.util.VersionTest.betaNewerThanAlpha()?older@268.16:268.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaé% é(*2õ
Jorg.jabref.logic.util.VersionTest.betaNewerThanAlpha()?older@268.16:268.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaå å(2õ
Jorg.jabref.logic.util.VersionTest.betaNewerThanAlpha()?newer@269.16:269.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaç ç(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaã ã(≠
Jorg.jabref.logic.util.VersionTest.betaNewerThanAlpha()?older@268.16:268.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaå å("
typeVersion"
isFinalfalse"
declarationStringj<mark class="modifier"> </mark>Version <mark class="class-field">older</mark> = Version.parse("2.7-alpha")*older2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaå å(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaå  å(%¨
Jorg.jabref.logic.util.VersionTest.betaNewerThanAlpha()?newer@269.16:269.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaç ç("
typeVersion"
isFinalfalse"~
declarationStringi<mark class="modifier"> </mark>Version <mark class="class-field">newer</mark> = Version.parse("2.7-beta")*newer2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaç ç(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaç  ç(%ä
7org.jabref.logic.util.VersionTest.stableNewerThanBeta()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.javaí í(#"
isFinalfalse"π
declarationString£<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">stableNewerThanBeta</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*stableNewerThanBeta2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaì  ì(%2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaî  î(%2í
Horg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaï ï($2ï
Korg.jabref.logic.util.VersionTest.stableNewerThanBeta()?newer@276.16:276.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaï ï(2ï
Korg.jabref.logic.util.VersionTest.stableNewerThanBeta()?older@275.16:275.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaï% ï(*2ú
Korg.jabref.logic.util.VersionTest.stableNewerThanBeta()?older@275.16:275.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaì ì(2ú
Korg.jabref.logic.util.VersionTest.stableNewerThanBeta()?newer@276.16:276.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaî î(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaí í(Æ
Korg.jabref.logic.util.VersionTest.stableNewerThanBeta()?older@275.16:275.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaì ì("
typeVersion"
isFinalfalse"
declarationStringj<mark class="modifier"> </mark>Version <mark class="class-field">older</mark> = Version.parse("2.8-alpha")*older2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaì ì(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaì  ì(%®
Korg.jabref.logic.util.VersionTest.stableNewerThanBeta()?newer@276.16:276.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaî î("
typeVersion"
isFinalfalse"y
declarationStringd<mark class="modifier"> </mark>Version <mark class="class-field">newer</mark> = Version.parse("2.8")*newer2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaî î(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaî  î(%ø
>org.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToBeta()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.javaô ô(*"
isFinalfalse"¿
declarationString™<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">alphaShouldBeUpdatedToBeta</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*alphaShouldBeUpdatedToBeta2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaö  ö(%2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaõ õ($2ò
Norg.jabref.logic.util.Version.shouldBeUpdatedTo(org.jabref.logic.util.Version)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaú ú(*2ú
Rorg.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToBeta()?alpha@282.16:282.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaú ú(2õ
Qorg.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToBeta()?beta@283.16:283.20CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaú+ ú(/2£
Rorg.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToBeta()?alpha@282.16:282.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaö ö(2¢
Qorg.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToBeta()?beta@283.16:283.20DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaõ õ(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaô ô(µ
Rorg.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToBeta()?alpha@282.16:282.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaö ö("
typeVersion"
isFinalfalse"
declarationStringj<mark class="modifier"> </mark>Version <mark class="class-field">alpha</mark> = Version.parse("2.8-alpha")*alpha2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaö ö(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaö  ö(%±
Qorg.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToBeta()?beta@283.16:283.20VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaõ õ("
typeVersion"
isFinalfalse"}
declarationStringh<mark class="modifier"> </mark>Version <mark class="class-field">beta</mark> = Version.parse("2.8-beta")*beta2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaõ õ(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaõ õ($»
?org.jabref.logic.util.VersionTest.betaShouldBeUpdatedToStable()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.java† †(+"
isFinalfalse"¡
declarationString´<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">betaShouldBeUpdatedToStable</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*betaShouldBeUpdatedToStable2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java° °($2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java¢! ¢(&2ò
Norg.jabref.logic.util.Version.shouldBeUpdatedTo(org.jabref.logic.util.Version)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java£ £()2ú
Rorg.jabref.logic.util.VersionTest.betaShouldBeUpdatedToStable()?beta@289.16:289.20CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java£ £(2û
Torg.jabref.logic.util.VersionTest.betaShouldBeUpdatedToStable()?stable@290.16:290.22CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java£* £(02£
Rorg.jabref.logic.util.VersionTest.betaShouldBeUpdatedToStable()?beta@289.16:289.20DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java° °(2•
Torg.jabref.logic.util.VersionTest.betaShouldBeUpdatedToStable()?stable@290.16:290.22DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java¢ ¢(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java† †(≤
Rorg.jabref.logic.util.VersionTest.betaShouldBeUpdatedToStable()?beta@289.16:289.20VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java° °("
typeVersion"
isFinalfalse"}
declarationStringh<mark class="modifier"> </mark>Version <mark class="class-field">beta</mark> = Version.parse("2.8-beta")*beta2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java° °(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java° °($≥
Torg.jabref.logic.util.VersionTest.betaShouldBeUpdatedToStable()?stable@290.16:290.22VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java¢ ¢("
typeVersion"
isFinalfalse"z
declarationStringe<mark class="modifier"> </mark>Version <mark class="class-field">stable</mark> = Version.parse("2.8")*stable2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java¢ ¢(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java¢! ¢(&Ê
Corg.jabref.logic.util.VersionTest.stableShouldNotBeUpdatedToAlpha()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.javaß ß(/"
isFinalfalse"≈
declarationStringØ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">stableShouldNotBeUpdatedToAlpha</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*stableShouldNotBeUpdatedToAlpha2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java®! ®(&2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java©  ©(%2ò
Norg.jabref.logic.util.Version.shouldBeUpdatedTo(org.jabref.logic.util.Version)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java™ ™(,2¢
Xorg.jabref.logic.util.VersionTest.stableShouldNotBeUpdatedToAlpha()?stable@296.16:296.22CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java™ ™(2°
Worg.jabref.logic.util.VersionTest.stableShouldNotBeUpdatedToAlpha()?alpha@297.16:297.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java™- ™(22©
Xorg.jabref.logic.util.VersionTest.stableShouldNotBeUpdatedToAlpha()?stable@296.16:296.22DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java® ®(2®
Worg.jabref.logic.util.VersionTest.stableShouldNotBeUpdatedToAlpha()?alpha@297.16:297.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java© ©(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaß ß(∑
Xorg.jabref.logic.util.VersionTest.stableShouldNotBeUpdatedToAlpha()?stable@296.16:296.22VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java® ®("
typeVersion"
isFinalfalse"z
declarationStringe<mark class="modifier"> </mark>Version <mark class="class-field">stable</mark> = Version.parse("2.8")*stable2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java® ®(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java®! ®(&∫
Worg.jabref.logic.util.VersionTest.stableShouldNotBeUpdatedToAlpha()?alpha@297.16:297.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java© ©("
typeVersion"
isFinalfalse"
declarationStringj<mark class="modifier"> </mark>Version <mark class="class-field">alpha</mark> = Version.parse("2.9-alpha")*alpha2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java© ©(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java©  ©(%›
Borg.jabref.logic.util.VersionTest.stableShouldNotBeUpdatedToBeta()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.javaÆ Æ(."
isFinalfalse"ƒ
declarationStringÆ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">stableShouldNotBeUpdatedToBeta</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*stableShouldNotBeUpdatedToBeta2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaØ! Ø(&2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java∞ ∞($2ò
Norg.jabref.logic.util.Version.shouldBeUpdatedTo(org.jabref.logic.util.Version)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java± ±(,2°
Worg.jabref.logic.util.VersionTest.stableShouldNotBeUpdatedToBeta()?stable@303.16:303.22CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java± ±(2ü
Uorg.jabref.logic.util.VersionTest.stableShouldNotBeUpdatedToBeta()?beta@304.16:304.20CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java±- ±(12®
Worg.jabref.logic.util.VersionTest.stableShouldNotBeUpdatedToBeta()?stable@303.16:303.22DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaØ Ø(2¶
Uorg.jabref.logic.util.VersionTest.stableShouldNotBeUpdatedToBeta()?beta@304.16:304.20DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java∞ ∞(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÆ Æ(∏
Worg.jabref.logic.util.VersionTest.stableShouldNotBeUpdatedToBeta()?stable@303.16:303.22VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaØ Ø("
typeVersion"
isFinalfalse"|
declarationStringg<mark class="modifier"> </mark>Version <mark class="class-field">stable</mark> = Version.parse("3.8.2")*stable2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaØ Ø(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaØ! Ø(&µ
Uorg.jabref.logic.util.VersionTest.stableShouldNotBeUpdatedToBeta()?beta@304.16:304.20VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java∞ ∞("
typeVersion"
isFinalfalse"}
declarationStringh<mark class="modifier"> </mark>Version <mark class="class-field">beta</mark> = Version.parse("4.0-beta")*beta2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java∞ ∞(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java∞ ∞($º
Aorg.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToStables()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.javaµ µ(-"
isFinalfalse"√
declarationString≠<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">alphaShouldBeUpdatedToStables</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*alphaShouldBeUpdatedToStables2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java∂  ∂(%2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java∑! ∑(&2g
java.util.Arrays.asList(T...)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java∏1 ∏(72
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java∏@ ∏(E2b
java.util.Optional.of(T)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaπ π( 2®
^org.jabref.logic.util.Version.shouldBeUpdatedTo(java.util.List<org.jabref.logic.util.Version>)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaπ0 π(A2†
Vorg.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToStables()?stable@311.16:311.22CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java∏S ∏(Y2†
Vorg.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToStables()?stable@311.16:311.22CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaπ! π('2ü
Uorg.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToStables()?alpha@310.16:310.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaπ* π(/2´
aorg.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToStables()?availableVersions@312.22:312.39CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaπB π(S2¶
Uorg.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToStables()?alpha@310.16:310.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java∂ ∂(2ß
Vorg.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToStables()?stable@311.16:311.22DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java∑ ∑(2≤
aorg.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToStables()?availableVersions@312.22:312.39DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.java∏ ∏('2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaµ µ(∏
Uorg.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToStables()?alpha@310.16:310.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java∂ ∂("
typeVersion"
isFinalfalse"
declarationStringj<mark class="modifier"> </mark>Version <mark class="class-field">alpha</mark> = Version.parse("2.8-alpha")*alpha2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java∂ ∂(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java∂  ∂(%µ
Vorg.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToStables()?stable@311.16:311.22VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java∑ ∑("
typeVersion"
isFinalfalse"z
declarationStringe<mark class="modifier"> </mark>Version <mark class="class-field">stable</mark> = Version.parse("2.8")*stable2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java∑ ∑(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java∑! ∑(&ç
aorg.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToStables()?availableVersions@312.22:312.39VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.java∏ ∏('"
typeList<Version>"
isFinalfalse"∆
declarationString∞<mark class="modifier"> </mark>List<Version> <mark class="class-field">availableVersions</mark> = Arrays.asList(Version.parse("2.8-beta")<mark class="modifier">,</mark> stable)*availableVersions2X
java.util.ListTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java∏ ∏(2p
org.jabref.logic.util.VersionTYPE_ARGUMENT@
4src\test\java\org\jabref\logic\util\VersionTest.java∏ ∏(2g
java.util.Arrays.asList(T...)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java∏1 ∏(72
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java∏@ ∏(E2†
Vorg.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToStables()?stable@311.16:311.22CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java∏S ∏(YÀ
;org.jabref.logic.util.VersionTest.ciSuffixShouldBeRemoved()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.javaΩ Ω('"
isFinalfalse"Ω
declarationStringß<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">ciSuffixShouldBeRemoved</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*ciSuffixShouldBeRemoved2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaæ  æ(%2x
.org.jabref.logic.util.Version.getFullVersion()CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaø" ø(02ô
Oorg.jabref.logic.util.VersionTest.ciSuffixShouldBeRemoved()?v50ci@318.16:318.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaø ø(!2†
Oorg.jabref.logic.util.VersionTest.ciSuffixShouldBeRemoved()?v50ci@318.16:318.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaæ æ(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaΩ Ω(±
Oorg.jabref.logic.util.VersionTest.ciSuffixShouldBeRemoved()?v50ci@318.16:318.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaæ æ("
typeVersion"
isFinalfalse"~
declarationStringi<mark class="modifier"> </mark>Version <mark class="class-field">v50ci</mark> = Version.parse("5.0-ci.1")*v50ci2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaæ æ(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaæ  æ(%ñ	
Jorg.jabref.logic.util.VersionTest.ciSuffixShouldBeRemovedIfDateIsPresent()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.java√ √(6"
isFinalfalse"Ã
declarationString∂<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">ciSuffixShouldBeRemovedIfDateIsPresent</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*&ciSuffixShouldBeRemovedIfDateIsPresent2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaƒ  ƒ(%2x
.org.jabref.logic.util.Version.getFullVersion()CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java≈7 ≈(E2®
^org.jabref.logic.util.VersionTest.ciSuffixShouldBeRemovedIfDateIsPresent()?v50ci@324.16:324.21CALL@
4src\test\java\org\jabref\logic\util\VersionTest.java≈1 ≈(62Ø
^org.jabref.logic.util.VersionTest.ciSuffixShouldBeRemovedIfDateIsPresent()?v50ci@324.16:324.21DECLARATION@
4src\test\java\org\jabref\logic\util\VersionTest.javaƒ ƒ(2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.java√ √(÷
^org.jabref.logic.util.VersionTest.ciSuffixShouldBeRemovedIfDateIsPresent()?v50ci@324.16:324.21VARIABLE@
4src\test\java\org\jabref\logic\util\VersionTest.javaƒ ƒ("
typeVersion"
isFinalfalse"ì
declarationString~<mark class="modifier"> </mark>Version <mark class="class-field">v50ci</mark> = Version.parse("5.0-ci.1--2020-03-06--289142f")*v50ci2g
org.jabref.logic.util.VersionTYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaƒ ƒ(2
5org.jabref.logic.util.Version.parse(java.lang.String)CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaƒ  ƒ(%À
Korg.jabref.logic.util.VersionTest.getAllAvailableVersionsReturnsSomething()METHOD@
4src\test\java\org\jabref\logic\util\VersionTest.javaÀ À(7"
isFinalfalse"Ê
declarationString– <br><mark class="annotation">@DisabledOnCIServer("GitHub</mark> puts a low rate limit on unauthenticated calls") <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">getAllAvailableVersionsReturnsSomething</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*'getAllAvailableVersionsReturnsSomething2k
!java.util.Collections.emptyList()CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÃ$ Ã(-2Å
7org.jabref.logic.util.Version.getAllAvailableVersions()CALL@
4src\test\java\org\jabref\logic\util\VersionTest.javaÃ9 Ã(P2U
voidRETURN_TYPE@
4src\test\java\org\jabref\logic\util\VersionTest.javaÀ À(