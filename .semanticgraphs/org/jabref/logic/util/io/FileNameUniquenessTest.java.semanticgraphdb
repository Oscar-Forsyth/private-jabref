
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaø
/org.jabref.logic.util.io.FileNameUniquenessTestCLASSL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java (#"#
packageorg.jabref.logic.util.io"
isFinalfalse"
inner classfalse"

isAbstractfalse"t
declarationString_<mark class="modifier">public </mark><mark class="modifier">class </mark>FileNameUniquenessTest"
accesspublic*FileNameUniquenessTest2∑
Zorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsSameName()DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java (82∆
iorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsUniqueNameOver1Conflict()DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java (G2«
jorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsUniqueNameOverNConflicts()DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java( ((H2±
Torg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithNoSimilarNames()DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java4 4(22≤
Uorg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java? ?(32∏
[org.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsOrignalFileName1()DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaM M(92∏
[org.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsOrignalFileName2()DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaT T(92±
Torg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsSameName1()DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java[ [(22±
Torg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsSameName2()DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javab b(22†
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java (Å
Zorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsSameName()METHODL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java (8"
isFinalfalse"ù
declarationStringá<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">getNonOverWritingFileNameReturnsSameName</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*(getNonOverWritingFileNameReturnsSameName2°
Kjava.nio.file.Files.exists(java.nio.file.Path, java.nio.file.LinkOption...)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java ( 2Ç
,java.nio.file.Path.resolve(java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java) (02¡
korg.jabref.logic.util.io.FileNameUniqueness.getNonOverWritingFileName(java.nio.file.Path, java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java3 (L2ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java! ((2ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaM (T2À
uorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsSameName()?outputFileName@25.15:25.29CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java% (32“
uorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsSameName()?outputFileName@25.15:25.29DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java (2a
voidRETURN_TYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java (ˇ
uorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsSameName()?outputFileName@25.15:25.29VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java ("
typeString"
isFinalfalse"≥
declarationStringù<mark class="modifier"> </mark>String <mark class="class-field">outputFileName</mark> = FileNameUniqueness.getNonOverWritingFileName(tempDir, "sameFile.txt")*outputFileName2f
java.lang.StringTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java (2¡
korg.jabref.logic.util.io.FileNameUniqueness.getNonOverWritingFileName(java.nio.file.Path, java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java3 (L2ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaM (Tæ
iorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsUniqueNameOver1Conflict()METHODL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java (G"
isFinalfalse"¨
declarationStringñ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">getNonOverWritingFileNameReturnsUniqueNameOver1Conflict</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*7getNonOverWritingFileNameReturnsUniqueNameOver1Conflict2Ç
,java.nio.file.Path.resolve(java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java& (-2Œ
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java! !(2¡
korg.jabref.logic.util.io.FileNameUniqueness.getNonOverWritingFileName(java.nio.file.Path, java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java#3 #(L2ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java (%2€
Ñorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsUniqueNameOver1Conflict()?dummyFilePath1@31.13:31.27CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java! !('2ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java#M #(T2€
Ñorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsUniqueNameOver1Conflict()?outputFileName@35.15:35.29CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java$. $(<2‚
Ñorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsUniqueNameOver1Conflict()?dummyFilePath1@31.13:31.27DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java (2‚
Ñorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsUniqueNameOver1Conflict()?outputFileName@35.15:35.29DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java# #(2a
voidRETURN_TYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java (¨
Ñorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsUniqueNameOver1Conflict()?dummyFilePath1@31.13:31.27VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java ("
typePath"
isFinalfalse"è
declarationStringz<mark class="modifier"> </mark>Path <mark class="class-field">dummyFilePath1</mark> = tempDir.resolve("differentFile.txt")*dummyFilePath12h
java.nio.file.PathTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java (2Ç
,java.nio.file.Path.resolve(java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java& (-2ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java (%î
Ñorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsUniqueNameOver1Conflict()?outputFileName@35.15:35.29VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java# #("
typeString"
isFinalfalse"∏
declarationString¢<mark class="modifier"> </mark>String <mark class="class-field">outputFileName</mark> = FileNameUniqueness.getNonOverWritingFileName(tempDir, "differentFile.txt")*outputFileName2f
java.lang.StringTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java# #(2¡
korg.jabref.logic.util.io.FileNameUniqueness.getNonOverWritingFileName(java.nio.file.Path, java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java#3 #(L2ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java#M #(T¸
jorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsUniqueNameOverNConflicts()METHODL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java( ((H"
isFinalfalse"≠
declarationStringó<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">getNonOverWritingFileNameReturnsUniqueNameOverNConflicts</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*8getNonOverWritingFileNameReturnsUniqueNameOverNConflicts2Ç
,java.nio.file.Path.resolve(java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java)& )(-2Ç
,java.nio.file.Path.resolve(java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java*& *(-2Œ
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java, ,(2Œ
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java- -(2¡
korg.jabref.logic.util.io.FileNameUniqueness.getNonOverWritingFileName(java.nio.file.Path, java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java/3 /(L2ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java) )(%2ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java* *(%2‹
Öorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsUniqueNameOverNConflicts()?dummyFilePath1@41.13:41.27CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java, ,('2‹
Öorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsUniqueNameOverNConflicts()?dummyFilePath2@42.13:42.27CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java- -('2ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java/M /(T2‹
Öorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsUniqueNameOverNConflicts()?outputFileName@47.15:47.29CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java0* 0(82„
Öorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsUniqueNameOverNConflicts()?dummyFilePath1@41.13:41.27DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java) )(2„
Öorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsUniqueNameOverNConflicts()?dummyFilePath2@42.13:42.27DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java* *(2„
Öorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsUniqueNameOverNConflicts()?outputFileName@47.15:47.29DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java/ /(2a
voidRETURN_TYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java( ((©
Öorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsUniqueNameOverNConflicts()?dummyFilePath1@41.13:41.27VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java) )("
typePath"
isFinalfalse"ã
declarationStringv<mark class="modifier"> </mark>Path <mark class="class-field">dummyFilePath1</mark> = tempDir.resolve("manyfiles.txt")*dummyFilePath12h
java.nio.file.PathTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java) )(2Ç
,java.nio.file.Path.resolve(java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java)& )(-2ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java) )(%≠
Öorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsUniqueNameOverNConflicts()?dummyFilePath2@42.13:42.27VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java* *("
typePath"
isFinalfalse"è
declarationStringz<mark class="modifier"> </mark>Path <mark class="class-field">dummyFilePath2</mark> = tempDir.resolve("manyfiles (1).txt")*dummyFilePath22h
java.nio.file.PathTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java* *(2Ç
,java.nio.file.Path.resolve(java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java*& *(-2ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java* *(%ë
Öorg.jabref.logic.util.io.FileNameUniquenessTest.getNonOverWritingFileNameReturnsUniqueNameOverNConflicts()?outputFileName@47.15:47.29VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java/ /("
typeString"
isFinalfalse"¥
declarationStringû<mark class="modifier"> </mark>String <mark class="class-field">outputFileName</mark> = FileNameUniqueness.getNonOverWritingFileName(tempDir, "manyfiles.txt")*outputFileName2f
java.lang.StringTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java/ /(2¡
korg.jabref.logic.util.io.FileNameUniqueness.getNonOverWritingFileName(java.nio.file.Path, java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java/3 /(L2ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java/M /(Tî
Torg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithNoSimilarNames()METHODL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java4 4(2"
isFinalfalse"ó
declarationStringÅ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">isDuplicatedFileWithNoSimilarNames</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*"isDuplicatedFileWithNoSimilarNames2Ç
,java.nio.file.Path.resolve(java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java7! 7((2Œ
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java8 8(2Ÿ
Çorg.jabref.logic.util.io.FileNameUniqueness.isDuplicatedFile(java.nio.file.Path, java.nio.file.Path, org.jabref.gui.DialogService)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java:1 :(A2ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java7 7( 2¿
jorg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithNoSimilarNames()?filename1@54.15:54.24CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java7) 7(22¿
jorg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithNoSimilarNames()?filePath1@55.13:55.22CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java8 8("2ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java:B :(I2¿
jorg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithNoSimilarNames()?filePath1@55.13:55.22CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java:K :(T2ƒ
norg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithNoSimilarNames()?dialogService@53.22:53.35CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java:V :(c2¬
lorg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithNoSimilarNames()?isDuplicate@58.16:58.27CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java; ;(2À
norg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithNoSimilarNames()?dialogService@53.22:53.35DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java5 5(#2«
jorg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithNoSimilarNames()?filename1@54.15:54.24DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java6 6(2«
jorg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithNoSimilarNames()?filePath1@55.13:55.22DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java7 7(2…
lorg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithNoSimilarNames()?isDuplicate@58.16:58.27DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java: :(2a
voidRETURN_TYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java4 4(É
norg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithNoSimilarNames()?dialogService@53.22:53.35VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java5 5(#"
typeDialogService"
isFinalfalse"å
declarationStringw<mark class="modifier"> </mark>DialogService <mark class="class-field">dialogService</mark> = mock(DialogService.class)*dialogService2r
org.jabref.gui.DialogServiceTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java5 5(Œ
jorg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithNoSimilarNames()?filename1@54.15:54.24VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java6 6("
typeString"
isFinalfalse"s
declarationString^<mark class="modifier"> </mark>String <mark class="class-field">filename1</mark> = "file1.txt"*	filename12f
java.lang.StringTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java6 6(¿
jorg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithNoSimilarNames()?filePath1@55.13:55.22VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java7 7("
typePath"
isFinalfalse"Ä
declarationStringk<mark class="modifier"> </mark>Path <mark class="class-field">filePath1</mark> = tempDir.resolve(filename1)*	filePath12h
java.nio.file.PathTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java7 7(2Ç
,java.nio.file.Path.resolve(java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java7! 7((2ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java7 7( 2¿
jorg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithNoSimilarNames()?filename1@54.15:54.24CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java7) 7(2™

lorg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithNoSimilarNames()?isDuplicate@58.16:58.27VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java: :("
typeboolean"
isFinalfalse"–
declarationString∫<mark class="modifier"> </mark><mark class="modifier">boolean</mark> <mark class="class-field">isDuplicate</mark> = FileNameUniqueness.isDuplicatedFile(tempDir, filePath1, dialogService)*isDuplicate2]
booleanTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java: :(2Ÿ
Çorg.jabref.logic.util.io.FileNameUniqueness.isDuplicatedFile(java.nio.file.Path, java.nio.file.Path, org.jabref.gui.DialogService)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java:1 :(A2ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java:B :(I2¿
jorg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithNoSimilarNames()?filePath1@55.13:55.22CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java:K :(T2ƒ
norg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithNoSimilarNames()?dialogService@53.22:53.35CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java:V :(c∞$
Uorg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()METHODL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java? ?(3"
isFinalfalse"ò
declarationStringÇ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">isDuplicatedFileWithOneSimilarNames</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*#isDuplicatedFileWithOneSimilarNames2Ç
,java.nio.file.Path.resolve(java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaC! C((2Ç
,java.nio.file.Path.resolve(java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaD! D((2Œ
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaE E(2Œ
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaF F(2Ÿ
Çorg.jabref.logic.util.io.FileNameUniqueness.isDuplicatedFile(java.nio.file.Path, java.nio.file.Path, org.jabref.gui.DialogService)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaH1 H(A2ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaC C( 2¡
korg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?filename1@65.15:65.24CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaC) C(22ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaD D( 2¡
korg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?filename2@66.15:66.24CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaD) D(22¡
korg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?filePath1@67.13:67.22CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaE E("2¡
korg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?filePath2@68.13:68.22CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaF F("2ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaHB H(I2¡
korg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?filePath2@68.13:68.22CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaHK H(T2≈
oorg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?dialogService@64.22:64.35CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaHV H(c2√
morg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?isDuplicate@72.16:72.27CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaI I(2Ã
oorg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?dialogService@64.22:64.35DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java@ @(#2»
korg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?filename1@65.15:65.24DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaA A(2»
korg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?filename2@66.15:66.24DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaB B(2»
korg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?filePath1@67.13:67.22DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaC C(2»
korg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?filePath2@68.13:68.22DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaD D(2 
morg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?isDuplicate@72.16:72.27DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaH H(2a
voidRETURN_TYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java? ?(Ñ
oorg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?dialogService@64.22:64.35VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java@ @(#"
typeDialogService"
isFinalfalse"å
declarationStringw<mark class="modifier"> </mark>DialogService <mark class="class-field">dialogService</mark> = mock(DialogService.class)*dialogService2r
org.jabref.gui.DialogServiceTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java@ @(Œ
korg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?filename1@65.15:65.24VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaA A("
typeString"
isFinalfalse"r
declarationString]<mark class="modifier"> </mark>String <mark class="class-field">filename1</mark> = "file.txt"*	filename12f
java.lang.StringTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaA A(“
korg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?filename2@66.15:66.24VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaB B("
typeString"
isFinalfalse"v
declarationStringa<mark class="modifier"> </mark>String <mark class="class-field">filename2</mark> = "file (1).txt"*	filename22f
java.lang.StringTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaB B(¬
korg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?filePath1@67.13:67.22VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaC C("
typePath"
isFinalfalse"Ä
declarationStringk<mark class="modifier"> </mark>Path <mark class="class-field">filePath1</mark> = tempDir.resolve(filename1)*	filePath12h
java.nio.file.PathTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaC C(2Ç
,java.nio.file.Path.resolve(java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaC! C((2ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaC C( 2¡
korg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?filename1@65.15:65.24CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaC) C(2¬
korg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?filePath2@68.13:68.22VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaD D("
typePath"
isFinalfalse"Ä
declarationStringk<mark class="modifier"> </mark>Path <mark class="class-field">filePath2</mark> = tempDir.resolve(filename2)*	filePath22h
java.nio.file.PathTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaD D(2Ç
,java.nio.file.Path.resolve(java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaD! D((2ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaD D( 2¡
korg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?filename2@66.15:66.24CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaD) D(2≠

morg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?isDuplicate@72.16:72.27VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaH H("
typeboolean"
isFinalfalse"–
declarationString∫<mark class="modifier"> </mark><mark class="modifier">boolean</mark> <mark class="class-field">isDuplicate</mark> = FileNameUniqueness.isDuplicatedFile(tempDir, filePath2, dialogService)*isDuplicate2]
booleanTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaH H(2Ÿ
Çorg.jabref.logic.util.io.FileNameUniqueness.isDuplicatedFile(java.nio.file.Path, java.nio.file.Path, org.jabref.gui.DialogService)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaH1 H(A2ô
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaHB H(I2¡
korg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?filePath2@68.13:68.22CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaHK H(T2≈
oorg.jabref.logic.util.io.FileNameUniquenessTest.isDuplicatedFileWithOneSimilarNames()?dialogService@64.22:64.35CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaHV H(cú
[org.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsOrignalFileName1()METHODL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaM M(9"
isFinalfalse"û
declarationStringà<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">taseDuplicateMarksReturnsOrignalFileName1</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*)taseDuplicateMarksReturnsOrignalFileName12ß
Qorg.jabref.logic.util.io.FileNameUniqueness.eraseDuplicateMarks(java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaO. O(A2«
qorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsOrignalFileName1()?fileName1@78.15:78.24CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaOB O(K2«
qorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsOrignalFileName1()?fileName2@79.15:79.24CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaP  P()2Œ
qorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsOrignalFileName1()?fileName1@78.15:78.24DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaN N(2Œ
qorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsOrignalFileName1()?fileName2@79.15:79.24DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaO O(2a
voidRETURN_TYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaM M(◊
qorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsOrignalFileName1()?fileName1@78.15:78.24VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaN N("
typeString"
isFinalfalse"u
declarationString`<mark class="modifier"> </mark>String <mark class="class-field">fileName1</mark> = "abc def (1)"*	fileName12f
java.lang.StringTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaN N(Ò
qorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsOrignalFileName1()?fileName2@79.15:79.24VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaO O("
typeString"
isFinalfalse"ö
declarationStringÑ<mark class="modifier"> </mark>String <mark class="class-field">fileName2</mark> = FileNameUniqueness.eraseDuplicateMarks(fileName1)*	fileName22f
java.lang.StringTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaO O(2ß
Qorg.jabref.logic.util.io.FileNameUniqueness.eraseDuplicateMarks(java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaO. O(A2«
qorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsOrignalFileName1()?fileName1@78.15:78.24CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaOB O(Kú
[org.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsOrignalFileName2()METHODL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaT T(9"
isFinalfalse"û
declarationStringà<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">taseDuplicateMarksReturnsOrignalFileName2</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*)taseDuplicateMarksReturnsOrignalFileName22ß
Qorg.jabref.logic.util.io.FileNameUniqueness.eraseDuplicateMarks(java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaV. V(A2«
qorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsOrignalFileName2()?fileName1@85.15:85.24CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaVB V(K2«
qorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsOrignalFileName2()?fileName2@86.15:86.24CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaW% W(.2Œ
qorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsOrignalFileName2()?fileName1@85.15:85.24DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaU U(2Œ
qorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsOrignalFileName2()?fileName2@86.15:86.24DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaV V(2a
voidRETURN_TYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaT T(‹
qorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsOrignalFileName2()?fileName1@85.15:85.24VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaU U("
typeString"
isFinalfalse"z
declarationStringe<mark class="modifier"> </mark>String <mark class="class-field">fileName1</mark> = "abc (def) gh (1)"*	fileName12f
java.lang.StringTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaU U(Ò
qorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsOrignalFileName2()?fileName2@86.15:86.24VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaV V("
typeString"
isFinalfalse"ö
declarationStringÑ<mark class="modifier"> </mark>String <mark class="class-field">fileName2</mark> = FileNameUniqueness.eraseDuplicateMarks(fileName1)*	fileName22f
java.lang.StringTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaV V(2ß
Qorg.jabref.logic.util.io.FileNameUniqueness.eraseDuplicateMarks(java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaV. V(A2«
qorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsOrignalFileName2()?fileName1@85.15:85.24CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javaVB V(KÎ
Torg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsSameName1()METHODL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java[ [(2"
isFinalfalse"ó
declarationStringÅ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">taseDuplicateMarksReturnsSameName1</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*"taseDuplicateMarksReturnsSameName12ß
Qorg.jabref.logic.util.io.FileNameUniqueness.eraseDuplicateMarks(java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java]. ](A2¿
jorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsSameName1()?fileName1@92.15:92.24CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java]B ](K2¿
jorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsSameName1()?fileName2@93.15:93.24CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java^$ ^(-2«
jorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsSameName1()?fileName1@92.15:92.24DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java\ \(2«
jorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsSameName1()?fileName2@93.15:93.24DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java] ](2a
voidRETURN_TYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java[ [(–
jorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsSameName1()?fileName1@92.15:92.24VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java\ \("
typeString"
isFinalfalse"u
declarationString`<mark class="modifier"> </mark>String <mark class="class-field">fileName1</mark> = "abc def (g)"*	fileName12f
java.lang.StringTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java\ \(„
jorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsSameName1()?fileName2@93.15:93.24VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java] ]("
typeString"
isFinalfalse"ö
declarationStringÑ<mark class="modifier"> </mark>String <mark class="class-field">fileName2</mark> = FileNameUniqueness.eraseDuplicateMarks(fileName1)*	fileName22f
java.lang.StringTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java] ](2ß
Qorg.jabref.logic.util.io.FileNameUniqueness.eraseDuplicateMarks(java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java]. ](A2¿
jorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsSameName1()?fileName1@92.15:92.24CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java]B ](KÔ
Torg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsSameName2()METHODL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javab b(2"
isFinalfalse"ó
declarationStringÅ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">taseDuplicateMarksReturnsSameName2</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*"taseDuplicateMarksReturnsSameName22ß
Qorg.jabref.logic.util.io.FileNameUniqueness.eraseDuplicateMarks(java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javad. d(A2¿
jorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsSameName2()?fileName1@99.15:99.24CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javadB d(K2¬
lorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsSameName2()?fileName2@100.15:100.24CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javae  e()2«
jorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsSameName2()?fileName1@99.15:99.24DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javac c(2…
lorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsSameName2()?fileName2@100.15:100.24DECLARATIONL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javad d(2a
voidRETURN_TYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javab b(Ã
jorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsSameName2()?fileName1@99.15:99.24VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javac c("
typeString"
isFinalfalse"q
declarationString\<mark class="modifier"> </mark>String <mark class="class-field">fileName1</mark> = "abc def"*	fileName12f
java.lang.StringTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javac c(Â
lorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsSameName2()?fileName2@100.15:100.24VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javad d("
typeString"
isFinalfalse"ö
declarationStringÑ<mark class="modifier"> </mark>String <mark class="class-field">fileName2</mark> = FileNameUniqueness.eraseDuplicateMarks(fileName1)*	fileName22f
java.lang.StringTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javad d(2ß
Qorg.jabref.logic.util.io.FileNameUniqueness.eraseDuplicateMarks(java.lang.String)CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javad. d(A2¿
jorg.jabref.logic.util.io.FileNameUniquenessTest.taseDuplicateMarksReturnsSameName2()?fileName1@99.15:99.24CALLL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.javadB d(Kƒ
Corg.jabref.logic.util.io.FileNameUniquenessTest?tempDir@19.19:19.26VARIABLEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java ("
isFinalfalse"
typePath"j
declarationStringU<mark class="modifier">protected </mark>Path <mark class="class-field">tempDir</mark>"
isStaticfalse"
access	protected*tempDir2h
java.nio.file.PathTYPEL
Bsrc\test\java\org\jabref\logic\util\io\FileNameUniquenessTest.java (