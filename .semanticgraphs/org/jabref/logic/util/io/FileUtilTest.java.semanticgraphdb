
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java¿O
%org.jabref.logic.util.io.FileUtilTestCLASSB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java ("#
packageorg.jabref.logic.util.io"
isFinalfalse"
inner classfalse"

isAbstractfalse"∫
declarationString§<mark class="annotation">@AllowedToUseLogic("uses OS from logic package")</mark> <br><mark class="modifier"> </mark><mark class="modifier">class </mark>FileUtilTest"
accesspackage_private*FileUtilTest2õ
Horg.jabref.logic.util.io.FileUtilTest.setUpViewModel(java.nio.file.Path)DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java$	 $(2ï
Borg.jabref.logic.util.io.FileUtilTest.extensionBakAddedCorrectly()DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java3	 3(#2≥
`org.jabref.logic.util.io.FileUtilTest.extensionBakAddedCorrectlyToAFileContainedInTmpDirectory()DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java9	 9(A2ú
Iorg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameDefaultFullTitle()DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java?	 ?(*2•
Rorg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameDefaultWithLowercaseTitle()DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaJ	 J(32ï
Borg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameBibTeXKey()DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaU	 U(#2ï
Borg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameNoPattern()DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java`	 `(#2°
Norg.jabref.logic.util.io.FileUtilTest.getDefaultFileNameNoPatternNoBibTeXKey()DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaj	 j(/2û
Korg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameGetKeyIfEmptyField()DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javas	 s(,2ß
Torg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameGetDefaultIfEmptyFieldNoKey()DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java|	 |(52£
Norg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameByYearAuthorFirstpage()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÑ	 Ñ(/2ó
Borg.jabref.logic.util.io.FileUtilTest.getFileExtensionSimpleFile()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaè	 è(#2ù
Horg.jabref.logic.util.io.FileUtilTest.getFileExtensionMultipleDotsFile()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaî	 î()2ú
Gorg.jabref.logic.util.io.FileUtilTest.getFileExtensionNoExtensionFile()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaô	 ô((2ù
Horg.jabref.logic.util.io.FileUtilTest.getFileExtensionNoExtension2File()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaû	 û()2ù
Horg.jabref.logic.util.io.FileUtilTest.getFileExtensionWithSimpleString()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java£	 £()2ß
Rorg.jabref.logic.util.io.FileUtilTest.getFileExtensionTrimsAndReturnsInLowercase()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java®	 ®(32£
Norg.jabref.logic.util.io.FileUtilTest.getFileExtensionWithMultipleDotsString()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≠	 ≠(/2´
Vorg.jabref.logic.util.io.FileUtilTest.getFileExtensionWithNoDotReturnsEmptyExtension()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≤	 ≤(72∞
[org.jabref.logic.util.io.FileUtilTest.getFileExtensionWithDotAtStartReturnsEmptyExtension()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∑	 ∑(<2ò
Corg.jabref.logic.util.io.FileUtilTest.getFileNameWithSimpleString()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaº	 º($2û
Iorg.jabref.logic.util.io.FileUtilTest.getFileNameWithMultipleDotsString()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java¡	 ¡(*2ë
<org.jabref.logic.util.io.FileUtilTest.uniquePathSubstrings()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∆	 ∆(2ù
Horg.jabref.logic.util.io.FileUtilTest.uniquePathFragmentWithSameSuffix()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java◊	 ◊()2™
Uorg.jabref.logic.util.io.FileUtilTest.uniquePathFragmentWithSameSuffixAndLongerName()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java›	 ›(62√
norg.jabref.logic.util.io.FileUtilTest.copyFileFromEmptySourcePathToEmptyDestinationPathWithOverrideExistFile()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java„	 „(O2∆
qorg.jabref.logic.util.io.FileUtilTest.copyFileFromEmptySourcePathToEmptyDestinationPathWithoutOverrideExistFile()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaË	 Ë(R2√
norg.jabref.logic.util.io.FileUtilTest.copyFileFromEmptySourcePathToExistDestinationPathWithOverrideExistFile()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÌ	 Ì(O2∆
qorg.jabref.logic.util.io.FileUtilTest.copyFileFromEmptySourcePathToExistDestinationPathWithoutOverrideExistFile()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÚ	 Ú(R2√
norg.jabref.logic.util.io.FileUtilTest.copyFileFromExistSourcePathToExistDestinationPathWithOverrideExistFile()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java˜	 ˜(O2∆
qorg.jabref.logic.util.io.FileUtilTest.copyFileFromExistSourcePathToExistDestinationPathWithoutOverrideExistFile()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java¸	 ¸(R2»
sorg.jabref.logic.util.io.FileUtilTest.copyFileFromExistSourcePathToOtherExistDestinationPathWithOverrideExistFile()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÅ	 Å(T2À
vorg.jabref.logic.util.io.FileUtilTest.copyFileFromExistSourcePathToOtherExistDestinationPathWithoutOverrideExistFile()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÜ	 Ü(W2§
Oorg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithOverrideExistFile()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaã	 ã(02ß
Rorg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithoutOverrideExistFile()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaï	 ï(32•
Porg.jabref.logic.util.io.FileUtilTest.validFilenameShouldNotAlterValidFilename()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaü	 ü(12ö
Eorg.jabref.logic.util.io.FileUtilTest.validFilenameWithoutExtension()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java§	 §(&2°
Lorg.jabref.logic.util.io.FileUtilTest.validFilenameShouldBeMaximum255Chars()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java©	 ©(-2ú
Gorg.jabref.logic.util.io.FileUtilTest.invalidFilenameWithoutExtension()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∞	 ∞((2ù
Horg.jabref.logic.util.io.FileUtilTest.getLinkedDirNameDefaultFullTitle()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∑	 ∑()2ô
Dorg.jabref.logic.util.io.FileUtilTest.getLinkedDirNamePatternEmpty()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java√	 √(%2Ü
1org.jabref.logic.util.io.FileUtilTest.isBibFile()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaŒ	 Œ(2â
4org.jabref.logic.util.io.FileUtilTest.isNotBibFile()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java’	 ’(2á
2org.jabref.logic.util.io.FileUtilTest.findinPath()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java€	 €(2ç
8org.jabref.logic.util.io.FileUtilTest.findInListOfPath()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java·	 ·(2ë
<org.jabref.logic.util.io.FileUtilTest.extractFileExtension()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÍ Í($2ë
<org.jabref.logic.util.io.FileUtilTest.fileExtensionFromUrl()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java ($2ä
5org.jabref.logic.util.io.FileUtilTest.fileNameEmpty()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaˆ ˆ(2ú
Gorg.jabref.logic.util.io.FileUtilTest.fileNameIllegal(java.lang.String)DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java˝ ˝(2£
Norg.jabref.logic.util.io.FileUtilTest.findsFileInDirectory(java.nio.file.Path)DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÉ É($2¥
_org.jabref.logic.util.io.FileUtilTest.findsFileStartingWithTheSameDirectory(java.nio.file.Path)DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaå å(52À
vorg.jabref.logic.util.io.FileUtilTest.doesNotFindsFileStartingWithTheSameDirectoryHasASubdirectory(java.nio.file.Path)DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaï ï(L2Ü
1org.jabref.logic.util.io.FileUtilTest.testCTemp()DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaû û(2ó
Borg.jabref.logic.util.io.FileUtilTest.legalPaths(java.lang.String)DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java© ©(2ô
Dorg.jabref.logic.util.io.FileUtilTest.illegalPaths(java.lang.String)DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaØ Ø(2ò
Eorg.jabref.logic.util.io.FileUtilTest?nonExistingTestPath@30.23:30.42DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java (*2ï
Borg.jabref.logic.util.io.FileUtilTest?existingTestFile@31.17:31.33DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java (!2ö
Gorg.jabref.logic.util.io.FileUtilTest?otherExistingTestFile@32.17:32.38DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java   (&2å
9org.jabref.logic.util.io.FileUtilTest?rootDir@33.17:33.24DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java! !(ç"
Horg.jabref.logic.util.io.FileUtilTest.setUpViewModel(java.nio.file.Path)METHODB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java$	 $("
isFinalfalse"ï
declarationStringˇ <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">setUpViewModel</mark>(<mark class="annotation">@TempDir</mark> Path temporaryFolder)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*setUpViewModel2x
,java.nio.file.Path.resolve(java.lang.String)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java& &(%2…
}java.nio.file.Files.createDirectory(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java' '(2x
,java.nio.file.Path.resolve(java.lang.String)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java)" )()2ƒ
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java* *(2û
Rjava.nio.file.Files.write(java.nio.file.Path, byte[], java.nio.file.OpenOption...)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java+ +(2
3java.lang.String.getBytes(java.nio.charset.Charset)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java+= +(E2x
,java.nio.file.Path.resolve(java.lang.String)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java-' -(.2ƒ
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java. .(2û
Rjava.nio.file.Files.write(java.nio.file.Path, byte[], java.nio.file.OpenOption...)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java/ /(2
3java.lang.String.getBytes(java.nio.charset.Charset)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java/G /(O2Ö
9org.jabref.logic.util.io.FileUtilTest?rootDir@33.17:33.24CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java% %(2§
Xorg.jabref.logic.util.io.FileUtilTest.setUpViewModel(java.nio.file.Path)!temporaryFolderCALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java% %(!2Ö
9org.jabref.logic.util.io.FileUtilTest?rootDir@33.17:33.24CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java& &(2ß
[org.jabref.logic.util.io.FileUtilTest.setUpViewModel(java.nio.file.Path)?subDir@38.13:38.19CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java' '($2é
Borg.jabref.logic.util.io.FileUtilTest?existingTestFile@31.17:31.33CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java) )(2ß
[org.jabref.logic.util.io.FileUtilTest.setUpViewModel(java.nio.file.Path)?subDir@38.13:38.19CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java) )(!2é
Borg.jabref.logic.util.io.FileUtilTest?existingTestFile@31.17:31.33CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java* *()2é
Borg.jabref.logic.util.io.FileUtilTest?existingTestFile@31.17:31.33CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java+ +($2ì
Gorg.jabref.logic.util.io.FileUtilTest?otherExistingTestFile@32.17:32.38CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java- -(2ß
[org.jabref.logic.util.io.FileUtilTest.setUpViewModel(java.nio.file.Path)?subDir@38.13:38.19CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java-  -(&2ì
Gorg.jabref.logic.util.io.FileUtilTest?otherExistingTestFile@32.17:32.38CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java. .(.2ì
Gorg.jabref.logic.util.io.FileUtilTest?otherExistingTestFile@32.17:32.38CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java/ /()2©
Xorg.jabref.logic.util.io.FileUtilTest.setUpViewModel(java.nio.file.Path)!temporaryFolder	PARAMETERB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java$& $(52Æ
[org.jabref.logic.util.io.FileUtilTest.setUpViewModel(java.nio.file.Path)?subDir@38.13:38.19DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java& &(2W
voidRETURN_TYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java$ $(Æ
[org.jabref.logic.util.io.FileUtilTest.setUpViewModel(java.nio.file.Path)?subDir@38.13:38.19VARIABLEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java& &("
typePath"
isFinalfalse"w
declarationStringb<mark class="modifier"> </mark>Path <mark class="class-field">subDir</mark> = rootDir.resolve("1")*subDir2^
java.nio.file.PathTYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java& &(2x
,java.nio.file.Path.resolve(java.lang.String)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java& &(%2Ö
9org.jabref.logic.util.io.FileUtilTest?rootDir@33.17:33.24CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java& &(é
Xorg.jabref.logic.util.io.FileUtilTest.setUpViewModel(java.nio.file.Path)!temporaryFolder	PARAMETERB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java$& $(5"
typePath"
isFinalfalse"R
declarationString=<mark class="annotation">@TempDir</mark> Path temporaryFolder*temporaryFolder2^
java.nio.file.PathTYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java$! $(%ﬁ
Borg.jabref.logic.util.io.FileUtilTest.extensionBakAddedCorrectly()METHODB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java3	 3(#"
isFinalfalse"∫
declarationString§<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">extensionBakAddedCorrectly</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*extensionBakAddedCorrectly2à
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java4 4(2†
Torg.jabref.logic.util.io.FileUtil.addExtension(java.nio.file.Path, java.lang.String)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java5 5(%2à
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java5+ 5(-2W
voidRETURN_TYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java3 3(∏
`org.jabref.logic.util.io.FileUtilTest.extensionBakAddedCorrectlyToAFileContainedInTmpDirectory()METHODB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java9	 9(A"
isFinalfalse"ÿ
declarationString¬<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">extensionBakAddedCorrectlyToAFileContainedInTmpDirectory</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*8extensionBakAddedCorrectlyToAFileContainedInTmpDirectory2à
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java: :(2†
Torg.jabref.logic.util.io.FileUtil.addExtension(java.nio.file.Path, java.lang.String)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java; ;(%2à
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java;+ ;(-2W
voidRETURN_TYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java9 9(Ò
Iorg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameDefaultFullTitle()METHODB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java?	 ?(*"
isFinalfalse"¡
declarationString´<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getLinkedFileNameDefaultFullTitle</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*!getLinkedFileNameDefaultFullTitle2å
@org.jabref.model.entry.BibEntry.setCitationKey(java.lang.String)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaB B(2™
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaC C(2‚
ïorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaF F(22v
*org.jabref.model.entry.BibEntry.BibEntry()CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaA A(%2ß
[org.jabref.logic.util.io.FileUtilTest.getLinkedFileNameDefaultFullTitle()?entry@65.17:65.22CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaB B(2ß
[org.jabref.logic.util.io.FileUtilTest.getLinkedFileNameDefaultFullTitle()?entry@65.17:65.22CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaC C(2ß
[org.jabref.logic.util.io.FileUtilTest.getLinkedFileNameDefaultFullTitle()?entry@65.17:65.22CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaF9 F(>2±
eorg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameDefaultFullTitle()?fileNamePattern@64.15:64.30CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaF@ F(O2∏
eorg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameDefaultFullTitle()?fileNamePattern@64.15:64.30DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java@ @(2Æ
[org.jabref.logic.util.io.FileUtilTest.getLinkedFileNameDefaultFullTitle()?entry@65.17:65.22DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaA A(2W
voidRETURN_TYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java? ?(‘
eorg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameDefaultFullTitle()?fileNamePattern@64.15:64.30VARIABLEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java@ @("
typeString"
isFinalfalse"ã
declarationStringv<mark class="modifier"> </mark>String <mark class="class-field">fileNamePattern</mark> = "[citationkey] - [fulltitle]"*fileNamePattern2\
java.lang.StringTYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java@ @(±
[org.jabref.logic.util.io.FileUtilTest.getLinkedFileNameDefaultFullTitle()?entry@65.17:65.22VARIABLEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaA A("
typeBibEntry"
isFinalfalse"t
declarationString_<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry</mark> = new BibEntry()*entry2k
org.jabref.model.entry.BibEntryTYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaA A(2v
*org.jabref.model.entry.BibEntry.BibEntry()CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaA A(%¬
Rorg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameDefaultWithLowercaseTitle()METHODB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaJ	 J(3"
isFinalfalse" 
declarationString¥<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getLinkedFileNameDefaultWithLowercaseTitle</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid**getLinkedFileNameDefaultWithLowercaseTitle2å
@org.jabref.model.entry.BibEntry.setCitationKey(java.lang.String)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaM M(2™
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaN N(2‚
ïorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaQ Q(22v
*org.jabref.model.entry.BibEntry.BibEntry()CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaL L(%2∞
dorg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameDefaultWithLowercaseTitle()?entry@76.17:76.22CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaM M(2∞
dorg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameDefaultWithLowercaseTitle()?entry@76.17:76.22CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaN N(2∞
dorg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameDefaultWithLowercaseTitle()?entry@76.17:76.22CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaQ9 Q(>2∫
norg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameDefaultWithLowercaseTitle()?fileNamePattern@75.15:75.30CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaQ@ Q(O2¡
norg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameDefaultWithLowercaseTitle()?fileNamePattern@75.15:75.30DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaK K(2∑
dorg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameDefaultWithLowercaseTitle()?entry@76.17:76.22DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaL L(2W
voidRETURN_TYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaJ J(ﬂ
norg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameDefaultWithLowercaseTitle()?fileNamePattern@75.15:75.30VARIABLEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaK K("
typeString"
isFinalfalse"ç
declarationStringx<mark class="modifier"> </mark>String <mark class="class-field">fileNamePattern</mark> = "[citationkey] - [title:lower]"*fileNamePattern2\
java.lang.StringTYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaK K(∫
dorg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameDefaultWithLowercaseTitle()?entry@76.17:76.22VARIABLEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaL L("
typeBibEntry"
isFinalfalse"t
declarationString_<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry</mark> = new BibEntry()*entry2k
org.jabref.model.entry.BibEntryTYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaL L(2v
*org.jabref.model.entry.BibEntry.BibEntry()CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaL L(%≤
Borg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameBibTeXKey()METHODB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaU	 U(#"
isFinalfalse"∫
declarationString§<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getLinkedFileNameBibTeXKey</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*getLinkedFileNameBibTeXKey2å
@org.jabref.model.entry.BibEntry.setCitationKey(java.lang.String)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaX X(2™
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaY Y(2‚
ïorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java\ \(22v
*org.jabref.model.entry.BibEntry.BibEntry()CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaW W(%2†
Torg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameBibTeXKey()?entry@87.17:87.22CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaX X(2†
Torg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameBibTeXKey()?entry@87.17:87.22CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaY Y(2†
Torg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameBibTeXKey()?entry@87.17:87.22CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java\9 \(>2™
^org.jabref.logic.util.io.FileUtilTest.getLinkedFileNameBibTeXKey()?fileNamePattern@86.15:86.30CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java\@ \(O2±
^org.jabref.logic.util.io.FileUtilTest.getLinkedFileNameBibTeXKey()?fileNamePattern@86.15:86.30DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaV V(2ß
Torg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameBibTeXKey()?entry@87.17:87.22DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaW W(2W
voidRETURN_TYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaU U(æ
^org.jabref.logic.util.io.FileUtilTest.getLinkedFileNameBibTeXKey()?fileNamePattern@86.15:86.30VARIABLEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaV V("
typeString"
isFinalfalse"}
declarationStringh<mark class="modifier"> </mark>String <mark class="class-field">fileNamePattern</mark> = "[citationkey]"*fileNamePattern2\
java.lang.StringTYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaV V(™
Torg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameBibTeXKey()?entry@87.17:87.22VARIABLEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaW W("
typeBibEntry"
isFinalfalse"t
declarationString_<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry</mark> = new BibEntry()*entry2k
org.jabref.model.entry.BibEntryTYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaW W(2v
*org.jabref.model.entry.BibEntry.BibEntry()CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaW W(%≤
Borg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameNoPattern()METHODB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java`	 `(#"
isFinalfalse"∫
declarationString§<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getLinkedFileNameNoPattern</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*getLinkedFileNameNoPattern2å
@org.jabref.model.entry.BibEntry.setCitationKey(java.lang.String)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javac c(2™
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javad d(2‚
ïorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaf& f(?2v
*org.jabref.model.entry.BibEntry.BibEntry()CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javab b(%2†
Torg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameNoPattern()?entry@98.17:98.22CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javac c(2†
Torg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameNoPattern()?entry@98.17:98.22CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javad d(2†
Torg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameNoPattern()?entry@98.17:98.22CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javafF f(K2™
^org.jabref.logic.util.io.FileUtilTest.getLinkedFileNameNoPattern()?fileNamePattern@97.15:97.30CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javafM f(\2±
^org.jabref.logic.util.io.FileUtilTest.getLinkedFileNameNoPattern()?fileNamePattern@97.15:97.30DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaa a(2ß
Torg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameNoPattern()?entry@98.17:98.22DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javab b(2W
voidRETURN_TYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java` `(±
^org.jabref.logic.util.io.FileUtilTest.getLinkedFileNameNoPattern()?fileNamePattern@97.15:97.30VARIABLEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaa a("
typeString"
isFinalfalse"p
declarationString[<mark class="modifier"> </mark>String <mark class="class-field">fileNamePattern</mark> = ""*fileNamePattern2\
java.lang.StringTYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaa a(™
Torg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameNoPattern()?entry@98.17:98.22VARIABLEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javab b("
typeBibEntry"
isFinalfalse"t
declarationString_<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry</mark> = new BibEntry()*entry2k
org.jabref.model.entry.BibEntryTYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javab b(2v
*org.jabref.model.entry.BibEntry.BibEntry()CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javab b(%Í
Norg.jabref.logic.util.io.FileUtilTest.getDefaultFileNameNoPatternNoBibTeXKey()METHODB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaj	 j(/"
isFinalfalse"∆
declarationString∞<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getDefaultFileNameNoPatternNoBibTeXKey</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*&getDefaultFileNameNoPatternNoBibTeXKey2™
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javam m(2‚
ïorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javao) o(B2v
*org.jabref.model.entry.BibEntry.BibEntry()CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javal l(%2Æ
borg.jabref.logic.util.io.FileUtilTest.getDefaultFileNameNoPatternNoBibTeXKey()?entry@108.17:108.22CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javam m(2Æ
borg.jabref.logic.util.io.FileUtilTest.getDefaultFileNameNoPatternNoBibTeXKey()?entry@108.17:108.22CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaoI o(N2∏
lorg.jabref.logic.util.io.FileUtilTest.getDefaultFileNameNoPatternNoBibTeXKey()?fileNamePattern@107.15:107.30CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaoP o(_2ø
lorg.jabref.logic.util.io.FileUtilTest.getDefaultFileNameNoPatternNoBibTeXKey()?fileNamePattern@107.15:107.30DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javak k(2µ
borg.jabref.logic.util.io.FileUtilTest.getDefaultFileNameNoPatternNoBibTeXKey()?entry@108.17:108.22DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javal l(2W
voidRETURN_TYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaj j(ø
lorg.jabref.logic.util.io.FileUtilTest.getDefaultFileNameNoPatternNoBibTeXKey()?fileNamePattern@107.15:107.30VARIABLEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javak k("
typeString"
isFinalfalse"p
declarationString[<mark class="modifier"> </mark>String <mark class="class-field">fileNamePattern</mark> = ""*fileNamePattern2\
java.lang.StringTYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javak k(∏
borg.jabref.logic.util.io.FileUtilTest.getDefaultFileNameNoPatternNoBibTeXKey()?entry@108.17:108.22VARIABLEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javal l("
typeBibEntry"
isFinalfalse"t
declarationString_<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry</mark> = new BibEntry()*entry2k
org.jabref.model.entry.BibEntryTYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javal l(2v
*org.jabref.model.entry.BibEntry.BibEntry()CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javal l(%¥
Korg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameGetKeyIfEmptyField()METHODB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javas	 s(,"
isFinalfalse"√
declarationString≠<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getLinkedFileNameGetKeyIfEmptyField</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*#getLinkedFileNameGetKeyIfEmptyField2å
@org.jabref.model.entry.BibEntry.setCitationKey(java.lang.String)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javav v(2‚
ïorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javax& x(?2v
*org.jabref.model.entry.BibEntry.BibEntry()CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javau u(%2´
_org.jabref.logic.util.io.FileUtilTest.getLinkedFileNameGetKeyIfEmptyField()?entry@117.17:117.22CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javav v(2´
_org.jabref.logic.util.io.FileUtilTest.getLinkedFileNameGetKeyIfEmptyField()?entry@117.17:117.22CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaxF x(K2µ
iorg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameGetKeyIfEmptyField()?fileNamePattern@116.15:116.30CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaxM x(\2º
iorg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameGetKeyIfEmptyField()?fileNamePattern@116.15:116.30DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javat t(2≤
_org.jabref.logic.util.io.FileUtilTest.getLinkedFileNameGetKeyIfEmptyField()?entry@117.17:117.22DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javau u(2W
voidRETURN_TYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javas s(√
iorg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameGetKeyIfEmptyField()?fileNamePattern@116.15:116.30VARIABLEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javat t("
typeString"
isFinalfalse"w
declarationStringb<mark class="modifier"> </mark>String <mark class="class-field">fileNamePattern</mark> = "[title]"*fileNamePattern2\
java.lang.StringTYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javat t(µ
_org.jabref.logic.util.io.FileUtilTest.getLinkedFileNameGetKeyIfEmptyField()?entry@117.17:117.22VARIABLEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javau u("
typeBibEntry"
isFinalfalse"t
declarationString_<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry</mark> = new BibEntry()*entry2k
org.jabref.model.entry.BibEntryTYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javau u(2v
*org.jabref.model.entry.BibEntry.BibEntry()CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javau u(%º
Torg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameGetDefaultIfEmptyFieldNoKey()METHODB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java|	 |(5"
isFinalfalse"Ã
declarationString∂<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getLinkedFileNameGetDefaultIfEmptyFieldNoKey</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*,getLinkedFileNameGetDefaultIfEmptyFieldNoKey2‰
ïorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÄ) Ä(B2v
*org.jabref.model.entry.BibEntry.BibEntry()CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java~ ~(%2∂
horg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameGetDefaultIfEmptyFieldNoKey()?entry@126.17:126.22CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÄI Ä(N2¿
rorg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameGetDefaultIfEmptyFieldNoKey()?fileNamePattern@125.15:125.30CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÄP Ä(_2≈
rorg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameGetDefaultIfEmptyFieldNoKey()?fileNamePattern@125.15:125.30DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java} }(2ª
horg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameGetDefaultIfEmptyFieldNoKey()?entry@126.17:126.22DECLARATIONB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java~ ~(2W
voidRETURN_TYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java| |(Ã
rorg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameGetDefaultIfEmptyFieldNoKey()?fileNamePattern@125.15:125.30VARIABLEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java} }("
typeString"
isFinalfalse"w
declarationStringb<mark class="modifier"> </mark>String <mark class="class-field">fileNamePattern</mark> = "[title]"*fileNamePattern2\
java.lang.StringTYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java} }(æ
horg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameGetDefaultIfEmptyFieldNoKey()?entry@126.17:126.22VARIABLEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java~ ~("
typeBibEntry"
isFinalfalse"t
declarationString_<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry</mark> = new BibEntry()*entry2k
org.jabref.model.entry.BibEntryTYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java~ ~(2v
*org.jabref.model.entry.BibEntry.BibEntry()CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java~ ~(%¬
Norg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameByYearAuthorFirstpage()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÑ	 Ñ(/"
isFinalfalse"∆
declarationString∞<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getLinkedFileNameByYearAuthorFirstpage</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*&getLinkedFileNameByYearAuthorFirstpage2¨
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaá á(2¨
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaà à(2¨
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaâ â(2‰
ïorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaã2 ã(K2x
*org.jabref.model.entry.BibEntry.BibEntry()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÜ Ü(%2∞
borg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameByYearAuthorFirstpage()?entry@134.17:134.22CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaá á(2∞
borg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameByYearAuthorFirstpage()?entry@134.17:134.22CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaà à(2∞
borg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameByYearAuthorFirstpage()?entry@134.17:134.22CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaâ â(2∞
borg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameByYearAuthorFirstpage()?entry@134.17:134.22CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaãR ã(W2∫
lorg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameByYearAuthorFirstpage()?fileNamePattern@133.15:133.30CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaãY ã(h2¡
lorg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameByYearAuthorFirstpage()?fileNamePattern@133.15:133.30DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÖ Ö(2∑
borg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameByYearAuthorFirstpage()?entry@134.17:134.22DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÜ Ü(2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÑ Ñ(›
lorg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameByYearAuthorFirstpage()?fileNamePattern@133.15:133.30VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÖ Ö("
typeString"
isFinalfalse"â
declarationStringt<mark class="modifier"> </mark>String <mark class="class-field">fileNamePattern</mark> = "[year]_[auth]_[firstpage]"*fileNamePattern2^
java.lang.StringTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÖ Ö(æ
borg.jabref.logic.util.io.FileUtilTest.getLinkedFileNameByYearAuthorFirstpage()?entry@134.17:134.22VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÜ Ü("
typeBibEntry"
isFinalfalse"t
declarationString_<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry</mark> = new BibEntry()*entry2m
org.jabref.model.entry.BibEntryTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÜ Ü(2x
*org.jabref.model.entry.BibEntry.BibEntry()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÜ Ü(%µ
Borg.jabref.logic.util.io.FileUtilTest.getFileExtensionSimpleFile()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaè	 è(#"
isFinalfalse"∫
declarationString§<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getFileExtensionSimpleFile</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*getFileExtensionSimpleFile2f
java.util.Optional.get()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaêK ê(N2î
Forg.jabref.logic.util.io.FileUtil.getFileExtension(java.nio.file.Path)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaê% ê(52ä
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaê; ê(=2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaè è(«
Horg.jabref.logic.util.io.FileUtilTest.getFileExtensionMultipleDotsFile()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaî	 î()"
isFinalfalse"¿
declarationString™<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getFileExtensionMultipleDotsFile</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid* getFileExtensionMultipleDotsFile2f
java.util.Optional.get()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaïL ï(O2î
Forg.jabref.logic.util.io.FileUtil.getFileExtension(java.nio.file.Path)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaï% ï(52ä
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaï; ï(=2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaî î( 
Gorg.jabref.logic.util.io.FileUtilTest.getFileExtensionNoExtensionFile()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaô	 ô(("
isFinalfalse"ø
declarationString©<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getFileExtensionNoExtensionFile</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*getFileExtensionNoExtensionFile2l
java.util.Optional.isPresent()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaöP ö(Y2î
Forg.jabref.logic.util.io.FileUtil.getFileExtension(java.nio.file.Path)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaö ö(-2ä
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaö3 ö(52Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaô ô(Õ
Horg.jabref.logic.util.io.FileUtilTest.getFileExtensionNoExtension2File()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaû	 û()"
isFinalfalse"¿
declarationString™<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getFileExtensionNoExtension2File</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid* getFileExtensionNoExtension2File2l
java.util.Optional.isPresent()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaüZ ü(c2î
Forg.jabref.logic.util.io.FileUtil.getFileExtension(java.nio.file.Path)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaü ü(-2ä
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaü3 ü(52Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaû û(∏
Horg.jabref.logic.util.io.FileUtilTest.getFileExtensionWithSimpleString()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java£	 £()"
isFinalfalse"¿
declarationString™<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getFileExtensionWithSimpleString</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid* getFileExtensionWithSimpleString2f
java.util.Optional.get()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java§B §(E2í
Dorg.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java§% §(52Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java£ £(÷
Rorg.jabref.logic.util.io.FileUtilTest.getFileExtensionTrimsAndReturnsInLowercase()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java®	 ®(3"
isFinalfalse" 
declarationString¥<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getFileExtensionTrimsAndReturnsInLowercase</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid**getFileExtensionTrimsAndReturnsInLowercase2f
java.util.Optional.get()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java©D ©(G2í
Dorg.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java©% ©(52Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java® ®( 
Norg.jabref.logic.util.io.FileUtilTest.getFileExtensionWithMultipleDotsString()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≠	 ≠(/"
isFinalfalse"∆
declarationString∞<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getFileExtensionWithMultipleDotsString</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*&getFileExtensionWithMultipleDotsString2f
java.util.Optional.get()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÆE Æ(H2í
Dorg.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÆ% Æ(52Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≠ ≠(‰
Vorg.jabref.logic.util.io.FileUtilTest.getFileExtensionWithNoDotReturnsEmptyExtension()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≤	 ≤(7"
isFinalfalse"Œ
declarationString∏<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getFileExtensionWithNoDotReturnsEmptyExtension</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*.getFileExtensionWithNoDotReturnsEmptyExtension2h
java.util.Optional.empty()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≥ ≥(#2í
Dorg.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≥0 ≥(@2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≤ ≤(Û
[org.jabref.logic.util.io.FileUtilTest.getFileExtensionWithDotAtStartReturnsEmptyExtension()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∑	 ∑(<"
isFinalfalse"”
declarationStringΩ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getFileExtensionWithDotAtStartReturnsEmptyExtension</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*3getFileExtensionWithDotAtStartReturnsEmptyExtension2h
java.util.Optional.empty()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∏ ∏(#2í
Dorg.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∏0 ∏(@2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∑ ∑(º
Corg.jabref.logic.util.io.FileUtilTest.getFileNameWithSimpleString()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaº	 º($"
isFinalfalse"ª
declarationString•<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getFileNameWithSimpleString</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*getFileNameWithSimpleString2ç
?org.jabref.logic.util.io.FileUtil.getBaseName(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaΩ& Ω(12Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaº º(Œ
Iorg.jabref.logic.util.io.FileUtilTest.getFileNameWithMultipleDotsString()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java¡	 ¡(*"
isFinalfalse"¡
declarationString´<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getFileNameWithMultipleDotsString</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*!getFileNameWithMultipleDotsString2ç
?org.jabref.logic.util.io.FileUtil.getBaseName(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java¬' ¬(22Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java¡ ¡(É
<org.jabref.logic.util.io.FileUtilTest.uniquePathSubstrings()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∆	 ∆("
isFinalfalse"¥
declarationStringû<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">uniquePathSubstrings</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*uniquePathSubstrings2n
 java.util.List.of(E, E, E, E, E)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java«! «(#2n
 java.util.List.of(E, E, E, E, E)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÃ% Ã('2¶
Xorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java“' “(;2û
Porg.jabref.logic.util.io.FileUtilTest.uniquePathSubstrings()?paths@199.20:199.25CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java“< “(A2°
Sorg.jabref.logic.util.io.FileUtilTest.uniquePathSubstrings()?uniqPath@204.21:204.29CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java” ”(2ü
Qorg.jabref.logic.util.io.FileUtilTest.uniquePathSubstrings()?result@210.21:210.27CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java” ”(%2•
Porg.jabref.logic.util.io.FileUtilTest.uniquePathSubstrings()?paths@199.20:199.25DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java« «(2®
Sorg.jabref.logic.util.io.FileUtilTest.uniquePathSubstrings()?uniqPath@204.21:204.29DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÃ Ã(2¶
Qorg.jabref.logic.util.io.FileUtilTest.uniquePathSubstrings()?result@210.21:210.27DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java“ “(2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∆ ∆(Ú
Porg.jabref.logic.util.io.FileUtilTest.uniquePathSubstrings()?paths@199.20:199.25VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java« «("
typeList<String>"
isFinalfalse"Á
declarationString—<mark class="modifier"> </mark>List<String> <mark class="class-field">paths</mark> = List.of("C:/uniquefile.bib"<mark class="modifier">,</mark> "C:/downloads/filename.bib"<mark class="modifier">,</mark> "C:/mypaper/bib/filename.bib"<mark class="modifier">,</mark> "C:/external/mypaper/bib/filename.bib"<mark class="modifier">,</mark> "")*paths2\
java.util.ListTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java« «(2g
java.lang.StringTYPE_ARGUMENTD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java« «(2n
 java.util.List.of(E, E, E, E, E)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java«! «(#Ú
Sorg.jabref.logic.util.io.FileUtilTest.uniquePathSubstrings()?uniqPath@204.21:204.29VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÃ Ã("
typeList<String>"
isFinalfalse"·
declarationStringÀ<mark class="modifier"> </mark>List<String> <mark class="class-field">uniqPath</mark> = List.of("uniquefile.bib"<mark class="modifier">,</mark> "downloads/filename.bib"<mark class="modifier">,</mark> "C:/mypaper/bib/filename.bib"<mark class="modifier">,</mark> "external/mypaper/bib/filename.bib"<mark class="modifier">,</mark> "")*uniqPath2\
java.util.ListTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÃ Ã(2g
java.lang.StringTYPE_ARGUMENTD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÃ Ã(2n
 java.util.List.of(E, E, E, E, E)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÃ% Ã('ˆ
Qorg.jabref.logic.util.io.FileUtilTest.uniquePathSubstrings()?result@210.21:210.27VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java“ “("
typeList<String>"
isFinalfalse"è
declarationStringz<mark class="modifier"> </mark>List<String> <mark class="class-field">result</mark> = FileUtil.uniquePathSubstrings(paths)*result2\
java.util.ListTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java“ “(2g
java.lang.StringTYPE_ARGUMENTD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java“ “(2¶
Xorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java“' “(;2û
Porg.jabref.logic.util.io.FileUtilTest.uniquePathSubstrings()?paths@199.20:199.25CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java“< “(A¥
Horg.jabref.logic.util.io.FileUtilTest.uniquePathFragmentWithSameSuffix()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java◊	 ◊()"
isFinalfalse"¿
declarationString™<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">uniquePathFragmentWithSameSuffix</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid* uniquePathFragmentWithSameSuffix2e
java.util.List.of(E, E)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÿ! ÿ(#2f
java.util.Optional.of(T)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaŸ Ÿ( 2ª
morg.jabref.logic.util.io.FileUtil.getUniquePathFragment(java.util.List<java.lang.String>, java.nio.file.Path)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaŸ? Ÿ(T2ä
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaŸ` Ÿ(b2©
[org.jabref.logic.util.io.FileUtilTest.uniquePathFragmentWithSameSuffix()?dirs@216.21:216.25CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaŸU Ÿ(Y2∞
[org.jabref.logic.util.io.FileUtilTest.uniquePathFragmentWithSameSuffix()?dirs@216.21:216.25DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÿ ÿ(2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java◊ ◊(Á
[org.jabref.logic.util.io.FileUtilTest.uniquePathFragmentWithSameSuffix()?dirs@216.21:216.25VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÿ ÿ("
typeList<String>"
isFinalfalse"€
declarationString≈<mark class="modifier"> </mark>List<String> <mark class="class-field">dirs</mark> = List.of("/users/jabref/bibliography.bib"<mark class="modifier">,</mark> "/users/jabref/koppor-bibliograsphy.bib")*dirs2\
java.util.ListTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÿ ÿ(2g
java.lang.StringTYPE_ARGUMENTD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÿ ÿ(2e
java.util.List.of(E, E)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÿ! ÿ(#ı
Uorg.jabref.logic.util.io.FileUtilTest.uniquePathFragmentWithSameSuffixAndLongerName()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java›	 ›(6"
isFinalfalse"Õ
declarationString∑<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">uniquePathFragmentWithSameSuffixAndLongerName</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*-uniquePathFragmentWithSameSuffixAndLongerName2e
java.util.List.of(E, E)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaﬁ! ﬁ(#2f
java.util.Optional.of(T)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaﬂ ﬂ( 2ª
morg.jabref.logic.util.io.FileUtil.getUniquePathFragment(java.util.List<java.lang.String>, java.nio.file.Path)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaﬂF ﬂ([2ä
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaﬂg ﬂ(i2∂
horg.jabref.logic.util.io.FileUtilTest.uniquePathFragmentWithSameSuffixAndLongerName()?dirs@222.21:222.25CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaﬂ\ ﬂ(`2Ω
horg.jabref.logic.util.io.FileUtilTest.uniquePathFragmentWithSameSuffixAndLongerName()?dirs@222.21:222.25DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaﬁ ﬁ(2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java› ›(Û
horg.jabref.logic.util.io.FileUtilTest.uniquePathFragmentWithSameSuffixAndLongerName()?dirs@222.21:222.25VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaﬁ ﬁ("
typeList<String>"
isFinalfalse"⁄
declarationStringƒ<mark class="modifier"> </mark>List<String> <mark class="class-field">dirs</mark> = List.of("/users/jabref/bibliography.bib"<mark class="modifier">,</mark> "/users/jabref/koppor-bibliography.bib")*dirs2\
java.util.ListTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaﬁ ﬁ(2g
java.lang.StringTYPE_ARGUMENTD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaﬁ ﬁ(2e
java.util.List.of(E, E)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaﬁ! ﬁ(#Ö	
norg.jabref.logic.util.io.FileUtilTest.copyFileFromEmptySourcePathToEmptyDestinationPathWithOverrideExistFile()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java„	 „(O"
isFinalfalse"Ê
declarationString–<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">copyFileFromEmptySourcePathToEmptyDestinationPathWithOverrideExistFile</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*FcopyFileFromEmptySourcePathToEmptyDestinationPathWithOverrideExistFile2©
[org.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java‰ ‰(%2ì
Eorg.jabref.logic.util.io.FileUtilTest?nonExistingTestPath@30.23:30.42CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java‰& ‰(92ì
Eorg.jabref.logic.util.io.FileUtilTest?nonExistingTestPath@30.23:30.42CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java‰; ‰(N2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java„ „(é	
qorg.jabref.logic.util.io.FileUtilTest.copyFileFromEmptySourcePathToEmptyDestinationPathWithoutOverrideExistFile()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaË	 Ë(R"
isFinalfalse"È
declarationString”<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">copyFileFromEmptySourcePathToEmptyDestinationPathWithoutOverrideExistFile</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*IcopyFileFromEmptySourcePathToEmptyDestinationPathWithoutOverrideExistFile2©
[org.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÈ È(%2ì
Eorg.jabref.logic.util.io.FileUtilTest?nonExistingTestPath@30.23:30.42CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÈ& È(92ì
Eorg.jabref.logic.util.io.FileUtilTest?nonExistingTestPath@30.23:30.42CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÈ; È(N2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaË Ë(Ç	
norg.jabref.logic.util.io.FileUtilTest.copyFileFromEmptySourcePathToExistDestinationPathWithOverrideExistFile()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÌ	 Ì(O"
isFinalfalse"Ê
declarationString–<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">copyFileFromEmptySourcePathToExistDestinationPathWithOverrideExistFile</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*FcopyFileFromEmptySourcePathToExistDestinationPathWithOverrideExistFile2©
[org.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÓ Ó(%2ì
Eorg.jabref.logic.util.io.FileUtilTest?nonExistingTestPath@30.23:30.42CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÓ& Ó(92ê
Borg.jabref.logic.util.io.FileUtilTest?existingTestFile@31.17:31.33CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÓ; Ó(K2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÌ Ì(ã	
qorg.jabref.logic.util.io.FileUtilTest.copyFileFromEmptySourcePathToExistDestinationPathWithoutOverrideExistFile()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÚ	 Ú(R"
isFinalfalse"È
declarationString”<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">copyFileFromEmptySourcePathToExistDestinationPathWithoutOverrideExistFile</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*IcopyFileFromEmptySourcePathToExistDestinationPathWithoutOverrideExistFile2©
[org.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÛ Û(%2ì
Eorg.jabref.logic.util.io.FileUtilTest?nonExistingTestPath@30.23:30.42CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÛ& Û(92ê
Borg.jabref.logic.util.io.FileUtilTest?existingTestFile@31.17:31.33CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÛ; Û(K2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÚ Ú(ˇ
norg.jabref.logic.util.io.FileUtilTest.copyFileFromExistSourcePathToExistDestinationPathWithOverrideExistFile()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java˜	 ˜(O"
isFinalfalse"Ê
declarationString–<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">copyFileFromExistSourcePathToExistDestinationPathWithOverrideExistFile</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*FcopyFileFromExistSourcePathToExistDestinationPathWithOverrideExistFile2©
[org.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java¯ ¯($2ê
Borg.jabref.logic.util.io.FileUtilTest?existingTestFile@31.17:31.33CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java¯% ¯(52ê
Borg.jabref.logic.util.io.FileUtilTest?existingTestFile@31.17:31.33CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java¯7 ¯(G2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java˜ ˜(à	
qorg.jabref.logic.util.io.FileUtilTest.copyFileFromExistSourcePathToExistDestinationPathWithoutOverrideExistFile()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java¸	 ¸(R"
isFinalfalse"È
declarationString”<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">copyFileFromExistSourcePathToExistDestinationPathWithoutOverrideExistFile</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*IcopyFileFromExistSourcePathToExistDestinationPathWithoutOverrideExistFile2©
[org.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java˝ ˝(%2ê
Borg.jabref.logic.util.io.FileUtilTest?existingTestFile@31.17:31.33CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java˝& ˝(62ê
Borg.jabref.logic.util.io.FileUtilTest?existingTestFile@31.17:31.33CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java˝8 ˝(H2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java¸ ¸(ì	
sorg.jabref.logic.util.io.FileUtilTest.copyFileFromExistSourcePathToOtherExistDestinationPathWithOverrideExistFile()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÅ	 Å(T"
isFinalfalse"Î
declarationString’<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">copyFileFromExistSourcePathToOtherExistDestinationPathWithOverrideExistFile</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*KcopyFileFromExistSourcePathToOtherExistDestinationPathWithOverrideExistFile2©
[org.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÇ Ç($2ê
Borg.jabref.logic.util.io.FileUtilTest?existingTestFile@31.17:31.33CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÇ% Ç(52ï
Gorg.jabref.logic.util.io.FileUtilTest?otherExistingTestFile@32.17:32.38CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÇ7 Ç(L2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÅ Å(ú	
vorg.jabref.logic.util.io.FileUtilTest.copyFileFromExistSourcePathToOtherExistDestinationPathWithoutOverrideExistFile()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÜ	 Ü(W"
isFinalfalse"Ó
declarationStringÿ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">copyFileFromExistSourcePathToOtherExistDestinationPathWithoutOverrideExistFile</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*NcopyFileFromExistSourcePathToOtherExistDestinationPathWithoutOverrideExistFile2©
[org.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaá á(%2ê
Borg.jabref.logic.util.io.FileUtilTest?existingTestFile@31.17:31.33CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaá& á(62ï
Gorg.jabref.logic.util.io.FileUtilTest?otherExistingTestFile@32.17:32.38CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaá8 á(M2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÜ Ü(¡
Oorg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithOverrideExistFile()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaã	 ã(0"
isFinalfalse"ñ
declarationStringÄ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">copyFileSuccessfulWithOverrideExistFile</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*'copyFileSuccessfulWithOverrideExistFile2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaå å(%2À
}java.nio.file.Files.createDirectory(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaç ç(2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaé é("2∆
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaè è(2©
[org.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaê ê(2ú
Njava.nio.file.Files.readAllLines(java.nio.file.Path, java.nio.charset.Charset)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaë ë('2ú
Njava.nio.file.Files.readAllLines(java.nio.file.Path, java.nio.charset.Charset)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaëY ë(e2á
9org.jabref.logic.util.io.FileUtilTest?rootDir@33.17:33.24CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaå å(2≤
dorg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithOverrideExistFile()?subDir@268.13:268.19CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaç ç($2≤
dorg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithOverrideExistFile()?subDir@268.13:268.19CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaé é(2∞
borg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithOverrideExistFile()?temp@270.13:270.17CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaè è(2ê
Borg.jabref.logic.util.io.FileUtilTest?existingTestFile@31.17:31.33CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaê ê(*2∞
borg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithOverrideExistFile()?temp@270.13:270.17CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaê, ê(02ê
Borg.jabref.logic.util.io.FileUtilTest?existingTestFile@31.17:31.33CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaë( ë(82∞
borg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithOverrideExistFile()?temp@270.13:270.17CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaëf ë(j2π
dorg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithOverrideExistFile()?subDir@268.13:268.19DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaå å(2∑
borg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithOverrideExistFile()?temp@270.13:270.17DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaé é(2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaã ã(ø
dorg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithOverrideExistFile()?subDir@268.13:268.19VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaå å("
typePath"
isFinalfalse"w
declarationStringb<mark class="modifier"> </mark>Path <mark class="class-field">subDir</mark> = rootDir.resolve("2")*subDir2`
java.nio.file.PathTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaå å(2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaå å(%2á
9org.jabref.logic.util.io.FileUtilTest?rootDir@33.17:33.24CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaå å(˜
borg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithOverrideExistFile()?temp@270.13:270.17VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaé é("
typePath"
isFinalfalse"á
declarationStringr<mark class="modifier"> </mark>Path <mark class="class-field">temp</mark> = subDir.resolve("existingTestFile.txt")*temp2`
java.nio.file.PathTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaé é(2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaé é("2≤
dorg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithOverrideExistFile()?subDir@268.13:268.19CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaé é(ﬂ
Rorg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithoutOverrideExistFile()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaï	 ï(3"
isFinalfalse"ô
declarationStringÉ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">copyFileSuccessfulWithoutOverrideExistFile</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid**copyFileSuccessfulWithoutOverrideExistFile2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javañ ñ(%2À
}java.nio.file.Files.createDirectory(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaó ó(2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaò ò("2∆
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaô ô(2©
[org.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaö ö(2ú
Njava.nio.file.Files.readAllLines(java.nio.file.Path, java.nio.charset.Charset)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaõ õ(*2ú
Njava.nio.file.Files.readAllLines(java.nio.file.Path, java.nio.charset.Charset)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaõ\ õ(h2á
9org.jabref.logic.util.io.FileUtilTest?rootDir@33.17:33.24CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javañ ñ(2µ
gorg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithoutOverrideExistFile()?subDir@278.13:278.19CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaó ó($2µ
gorg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithoutOverrideExistFile()?subDir@278.13:278.19CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaò ò(2≥
eorg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithoutOverrideExistFile()?temp@280.13:280.17CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaô ô(2ê
Borg.jabref.logic.util.io.FileUtilTest?existingTestFile@31.17:31.33CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaö ö(*2≥
eorg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithoutOverrideExistFile()?temp@280.13:280.17CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaö, ö(02ê
Borg.jabref.logic.util.io.FileUtilTest?existingTestFile@31.17:31.33CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaõ+ õ(;2≥
eorg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithoutOverrideExistFile()?temp@280.13:280.17CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaõi õ(m2º
gorg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithoutOverrideExistFile()?subDir@278.13:278.19DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javañ ñ(2∫
eorg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithoutOverrideExistFile()?temp@280.13:280.17DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaò ò(2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaï ï(¬
gorg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithoutOverrideExistFile()?subDir@278.13:278.19VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javañ ñ("
typePath"
isFinalfalse"w
declarationStringb<mark class="modifier"> </mark>Path <mark class="class-field">subDir</mark> = rootDir.resolve("2")*subDir2`
java.nio.file.PathTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javañ ñ(2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javañ ñ(%2á
9org.jabref.logic.util.io.FileUtilTest?rootDir@33.17:33.24CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javañ ñ(˝
eorg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithoutOverrideExistFile()?temp@280.13:280.17VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaò ò("
typePath"
isFinalfalse"á
declarationStringr<mark class="modifier"> </mark>Path <mark class="class-field">temp</mark> = subDir.resolve("existingTestFile.txt")*temp2`
java.nio.file.PathTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaò ò(2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaò ò("2µ
gorg.jabref.logic.util.io.FileUtilTest.copyFileSuccessfulWithoutOverrideExistFile()?subDir@278.13:278.19CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaò ò(Ë
Porg.jabref.logic.util.io.FileUtilTest.validFilenameShouldNotAlterValidFilename()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaü	 ü(1"
isFinalfalse"»
declarationString≤<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">validFilenameShouldNotAlterValidFilename</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*(validFilenameShouldNotAlterValidFilename2í
Dorg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java†. †(>2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaü ü(«
Eorg.jabref.logic.util.io.FileUtilTest.validFilenameWithoutExtension()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java§	 §(&"
isFinalfalse"Ω
declarationStringß<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">validFilenameWithoutExtension</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*validFilenameWithoutExtension2í
Dorg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java•* •(:2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java§ §(˝
Lorg.jabref.logic.util.io.FileUtilTest.validFilenameShouldBeMaximum255Chars()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java©	 ©(-"
isFinalfalse"ƒ
declarationStringÆ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">validFilenameShouldBeMaximum255Chars</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*$validFilenameShouldBeMaximum255Chars2õ
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALLE
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java™~ ™(Ö2q
#java.util.stream.Stream.limit(long)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java™Q ™(V2ò
Jjava.util.stream.Stream.generate(java.util.function.Supplier<? extends T>)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java™- ™(52l
java.lang.String.valueOf(char)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java™C ™(J2u
%java.util.stream.Collectors.joining()CALLF
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java™ë ™(ò2ö
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java´V ´(]2q
#java.util.stream.Stream.limit(long)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java´K ´(P2ò
Jjava.util.stream.Stream.generate(java.util.function.Supplier<? extends T>)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java´' ´(/2l
java.lang.String.valueOf(char)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java´= ´(D2s
%java.util.stream.Collectors.joining()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java´i ´(p2í
Dorg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java¨4 ¨(D2Ω
oorg.jabref.logic.util.io.FileUtilTest.validFilenameShouldBeMaximum255Chars()?longestValidFilename@298.15:298.35CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java¨ ¨()2∑
iorg.jabref.logic.util.io.FileUtilTest.validFilenameShouldBeMaximum255Chars()?longerFilename@299.15:299.29CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java¨E ¨(S2ƒ
oorg.jabref.logic.util.io.FileUtilTest.validFilenameShouldBeMaximum255Chars()?longestValidFilename@298.15:298.35DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java™ ™(#2æ
iorg.jabref.logic.util.io.FileUtilTest.validFilenameShouldBeMaximum255Chars()?longerFilename@299.15:299.29DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java´ ´(2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java© ©(ﬂ	
oorg.jabref.logic.util.io.FileUtilTest.validFilenameShouldBeMaximum255Chars()?longestValidFilename@298.15:298.35VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java™ ™(#"
typeString"
isFinalfalse"Ú
declarationString‹<mark class="modifier"> </mark>String <mark class="class-field">longestValidFilename</mark> = Stream.generate(() -> String.valueOf('1')).limit(FileUtil.MAXIMUM_FILE_NAME_LENGTH - 4).collect(Collectors.joining()) + ".pdf"*longestValidFilename2^
java.lang.StringTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java™ ™(2õ
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALLE
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java™~ ™(Ö2q
#java.util.stream.Stream.limit(long)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java™Q ™(V2ò
Jjava.util.stream.Stream.generate(java.util.function.Supplier<? extends T>)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java™- ™(52l
java.lang.String.valueOf(char)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java™C ™(J2u
%java.util.stream.Collectors.joining()CALLF
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java™ë ™(ò®	
iorg.jabref.logic.util.io.FileUtilTest.validFilenameShouldBeMaximum255Chars()?longerFilename@299.15:299.29VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java´ ´("
typeString"
isFinalfalse" 
declarationString¥<mark class="modifier"> </mark>String <mark class="class-field">longerFilename</mark> = Stream.generate(() -> String.valueOf('1')).limit(260).collect(Collectors.joining()) + ".pdf"*longerFilename2^
java.lang.StringTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java´ ´(2ö
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java´V ´(]2q
#java.util.stream.Stream.limit(long)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java´K ´(P2ò
Jjava.util.stream.Stream.generate(java.util.function.Supplier<? extends T>)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java´' ´(/2l
java.lang.String.valueOf(char)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java´= ´(D2s
%java.util.stream.Collectors.joining()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java´i ´(p⁄
Gorg.jabref.logic.util.io.FileUtilTest.invalidFilenameWithoutExtension()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∞	 ∞(("
isFinalfalse"ø
declarationString©<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">invalidFilenameWithoutExtension</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*invalidFilenameWithoutExtension2õ
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALLE
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java±z ±(Å2q
#java.util.stream.Stream.limit(long)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java±Q ±(V2ò
Jjava.util.stream.Stream.generate(java.util.function.Supplier<? extends T>)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java±- ±(52l
java.lang.String.valueOf(char)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java±C ±(J2u
%java.util.stream.Collectors.joining()CALLF
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java±ç ±(î2ö
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≤V ≤(]2q
#java.util.stream.Stream.limit(long)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≤K ≤(P2ò
Jjava.util.stream.Stream.generate(java.util.function.Supplier<? extends T>)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≤' ≤(/2l
java.lang.String.valueOf(char)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≤= ≤(D2s
%java.util.stream.Collectors.joining()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≤i ≤(p2í
Dorg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≥4 ≥(D2∏
jorg.jabref.logic.util.io.FileUtilTest.invalidFilenameWithoutExtension()?longestValidFilename@305.15:305.35CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≥ ≥()2≤
dorg.jabref.logic.util.io.FileUtilTest.invalidFilenameWithoutExtension()?longerFilename@306.15:306.29CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≥E ≥(S2ø
jorg.jabref.logic.util.io.FileUtilTest.invalidFilenameWithoutExtension()?longestValidFilename@305.15:305.35DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java± ±(#2π
dorg.jabref.logic.util.io.FileUtilTest.invalidFilenameWithoutExtension()?longerFilename@306.15:306.29DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≤ ≤(2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∞ ∞(Õ	
jorg.jabref.logic.util.io.FileUtilTest.invalidFilenameWithoutExtension()?longestValidFilename@305.15:305.35VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java± ±(#"
typeString"
isFinalfalse"Â
declarationStringœ<mark class="modifier"> </mark>String <mark class="class-field">longestValidFilename</mark> = Stream.generate(() -> String.valueOf('1')).limit(FileUtil.MAXIMUM_FILE_NAME_LENGTH).collect(Collectors.joining())*longestValidFilename2^
java.lang.StringTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java± ±(2õ
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALLE
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java±z ±(Å2q
#java.util.stream.Stream.limit(long)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java±Q ±(V2ò
Jjava.util.stream.Stream.generate(java.util.function.Supplier<? extends T>)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java±- ±(52l
java.lang.String.valueOf(char)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java±C ±(J2u
%java.util.stream.Collectors.joining()CALLF
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java±ç ±(îö	
dorg.jabref.logic.util.io.FileUtilTest.invalidFilenameWithoutExtension()?longerFilename@306.15:306.29VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≤ ≤("
typeString"
isFinalfalse"¡
declarationString´<mark class="modifier"> </mark>String <mark class="class-field">longerFilename</mark> = Stream.generate(() -> String.valueOf('1')).limit(260).collect(Collectors.joining())*longerFilename2^
java.lang.StringTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≤ ≤(2ö
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≤V ≤(]2q
#java.util.stream.Stream.limit(long)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≤K ≤(P2ò
Jjava.util.stream.Stream.generate(java.util.function.Supplier<? extends T>)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≤' ≤(/2l
java.lang.String.valueOf(char)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≤= ≤(D2s
%java.util.stream.Collectors.joining()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≤i ≤(p¡
Horg.jabref.logic.util.io.FileUtilTest.getLinkedDirNameDefaultFullTitle()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∑	 ∑()"
isFinalfalse"¿
declarationString™<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getLinkedDirNameDefaultFullTitle</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid* getLinkedDirNameDefaultFullTitle2é
@org.jabref.model.entry.BibEntry.setCitationKey(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∫ ∫(2¨
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaª ª(2¨
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaº º(2¨
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaΩ Ω(2„
îorg.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaø@ ø(X2x
*org.jabref.model.entry.BibEntry.BibEntry()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaπ π(%2™
\org.jabref.logic.util.io.FileUtilTest.getLinkedDirNameDefaultFullTitle()?entry@313.17:313.22CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∫ ∫(2™
\org.jabref.logic.util.io.FileUtilTest.getLinkedDirNameDefaultFullTitle()?entry@313.17:313.22CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaª ª(2™
\org.jabref.logic.util.io.FileUtilTest.getLinkedDirNameDefaultFullTitle()?entry@313.17:313.22CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaº º(2™
\org.jabref.logic.util.io.FileUtilTest.getLinkedDirNameDefaultFullTitle()?entry@313.17:313.22CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaΩ Ω(2™
\org.jabref.logic.util.io.FileUtilTest.getLinkedDirNameDefaultFullTitle()?entry@313.17:313.22CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaø_ ø(d2≥
eorg.jabref.logic.util.io.FileUtilTest.getLinkedDirNameDefaultFullTitle()?fileDirPattern@312.15:312.29CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaøf ø(t2∫
eorg.jabref.logic.util.io.FileUtilTest.getLinkedDirNameDefaultFullTitle()?fileDirPattern@312.15:312.29DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∏ ∏(2±
\org.jabref.logic.util.io.FileUtilTest.getLinkedDirNameDefaultFullTitle()?entry@313.17:313.22DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaπ π(2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∑ ∑(È
eorg.jabref.logic.util.io.FileUtilTest.getLinkedDirNameDefaultFullTitle()?fileDirPattern@312.15:312.29VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∏ ∏("
typeString"
isFinalfalse"ù
declarationStringá<mark class="modifier"> </mark>String <mark class="class-field">fileDirPattern</mark> = "PDF/[year]/[auth]/[citationkey] - [fulltitle]"*fileDirPattern2^
java.lang.StringTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∏ ∏(∏
\org.jabref.logic.util.io.FileUtilTest.getLinkedDirNameDefaultFullTitle()?entry@313.17:313.22VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaπ π("
typeBibEntry"
isFinalfalse"t
declarationString_<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry</mark> = new BibEntry()*entry2m
org.jabref.model.entry.BibEntryTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaπ π(2x
*org.jabref.model.entry.BibEntry.BibEntry()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaπ π(%™
Dorg.jabref.logic.util.io.FileUtilTest.getLinkedDirNamePatternEmpty()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java√	 √(%"
isFinalfalse"º
declarationString¶<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getLinkedDirNamePatternEmpty</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*getLinkedDirNamePatternEmpty2é
@org.jabref.model.entry.BibEntry.setCitationKey(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≈ ≈(2¨
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∆ ∆(2¨
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java« «(2¨
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java» »(2„
îorg.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java "  (:2x
*org.jabref.model.entry.BibEntry.BibEntry()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaƒ ƒ(%2¶
Xorg.jabref.logic.util.io.FileUtilTest.getLinkedDirNamePatternEmpty()?entry@324.17:324.22CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java≈ ≈(2¶
Xorg.jabref.logic.util.io.FileUtilTest.getLinkedDirNamePatternEmpty()?entry@324.17:324.22CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∆ ∆(2¶
Xorg.jabref.logic.util.io.FileUtilTest.getLinkedDirNamePatternEmpty()?entry@324.17:324.22CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java« «(2¶
Xorg.jabref.logic.util.io.FileUtilTest.getLinkedDirNamePatternEmpty()?entry@324.17:324.22CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java» »(2¶
Xorg.jabref.logic.util.io.FileUtilTest.getLinkedDirNamePatternEmpty()?entry@324.17:324.22CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java A  (F2≠
Xorg.jabref.logic.util.io.FileUtilTest.getLinkedDirNamePatternEmpty()?entry@324.17:324.22DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaƒ ƒ(2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java√ √(¥
Xorg.jabref.logic.util.io.FileUtilTest.getLinkedDirNamePatternEmpty()?entry@324.17:324.22VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaƒ ƒ("
typeBibEntry"
isFinalfalse"t
declarationString_<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry</mark> = new BibEntry()*entry2m
org.jabref.model.entry.BibEntryTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaƒ ƒ(2x
*org.jabref.model.entry.BibEntry.BibEntry()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaƒ ƒ(%€
1org.jabref.logic.util.io.FileUtilTest.isBibFile()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaŒ	 Œ("
isFinalfalse"¯
declarationString‚<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">isBibFile</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*	isBibFile2∆
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaœ œ('2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaœ0 œ(72ç
?org.jabref.logic.util.io.FileUtil.isBibFile(java.nio.file.Path)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java— —(%2á
9org.jabref.logic.util.io.FileUtilTest?rootDir@33.17:33.24CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaœ( œ(/2ï
Gorg.jabref.logic.util.io.FileUtilTest.isBibFile()?bibFile@335.13:335.20CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java—& —(-2ú
Gorg.jabref.logic.util.io.FileUtilTest.isBibFile()?bibFile@335.13:335.20DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaœ œ(2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaŒ Œ(á
Gorg.jabref.logic.util.io.FileUtilTest.isBibFile()?bibFile@335.13:335.20VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaœ œ("
typePath"
isFinalfalse"ë
declarationString|<mark class="modifier"> </mark>Path <mark class="class-field">bibFile</mark> = Files.createFile(rootDir.resolve("test.bib"))*bibFile2`
java.nio.file.PathTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaœ œ(2∆
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaœ œ('2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaœ0 œ(72á
9org.jabref.logic.util.io.FileUtilTest?rootDir@33.17:33.24CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaœ( œ(/Í
4org.jabref.logic.util.io.FileUtilTest.isNotBibFile()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java’	 ’("
isFinalfalse"˚
declarationStringÂ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">isNotBibFile</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*isNotBibFile2∆
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java÷ ÷('2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java÷0 ÷(72ç
?org.jabref.logic.util.io.FileUtil.isBibFile(java.nio.file.Path)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java◊ ◊(&2á
9org.jabref.logic.util.io.FileUtilTest?rootDir@33.17:33.24CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java÷( ÷(/2ò
Jorg.jabref.logic.util.io.FileUtilTest.isNotBibFile()?bibFile@342.13:342.20CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java◊' ◊(.2ü
Jorg.jabref.logic.util.io.FileUtilTest.isNotBibFile()?bibFile@342.13:342.20DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java÷ ÷(2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java’ ’(ä
Jorg.jabref.logic.util.io.FileUtilTest.isNotBibFile()?bibFile@342.13:342.20VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java÷ ÷("
typePath"
isFinalfalse"ë
declarationString|<mark class="modifier"> </mark>Path <mark class="class-field">bibFile</mark> = Files.createFile(rootDir.resolve("test.pdf"))*bibFile2`
java.nio.file.PathTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java÷ ÷(2∆
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java÷ ÷('2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java÷0 ÷(72á
9org.jabref.logic.util.io.FileUtilTest?rootDir@33.17:33.24CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java÷( ÷(/À
2org.jabref.logic.util.io.FileUtilTest.findinPath()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java€	 €("
isFinalfalse"™
declarationStringî<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findinPath</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*
findinPath2Ø
aorg.jabref.logic.util.io.FileUtil.findSingleFileRecursively(java.lang.String, java.nio.file.Path)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java‹. ‹(G2k
java.nio.file.Path.toString()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java›' ›(/2f
java.util.Optional.get()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java›! ›($2k
java.nio.file.Path.toString()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java›D ›(L2á
9org.jabref.logic.util.io.FileUtilTest?rootDir@33.17:33.24CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java‹` ‹(g2ö
Lorg.jabref.logic.util.io.FileUtilTest.findinPath()?resultPath1@348.23:348.34CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java› ›( 2ê
Borg.jabref.logic.util.io.FileUtilTest?existingTestFile@31.17:31.33CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java›3 ›(C2°
Lorg.jabref.logic.util.io.FileUtilTest.findinPath()?resultPath1@348.23:348.34DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java‹ ‹("2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java€ €(µ
Lorg.jabref.logic.util.io.FileUtilTest.findinPath()?resultPath1@348.23:348.34VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java‹ ‹(""
typeOptional<Path>"
isFinalfalse"‘
declarationStringæ<mark class="modifier"> </mark>Optional<Path> <mark class="class-field">resultPath1</mark> = FileUtil.findSingleFileRecursively("existingTestFile.txt"<mark class="modifier">,</mark> rootDir)*resultPath12`
java.util.OptionalTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java‹ ‹(2i
java.nio.file.PathTYPE_ARGUMENTD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java‹ ‹(2Ø
aorg.jabref.logic.util.io.FileUtil.findSingleFileRecursively(java.lang.String, java.nio.file.Path)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java‹. ‹(G2á
9org.jabref.logic.util.io.FileUtilTest?rootDir@33.17:33.24CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java‹` ‹(g™
8org.jabref.logic.util.io.FileUtilTest.findInListOfPath()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java·	 ·("
isFinalfalse"∞
declarationStringö<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findInListOfPath</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*findInListOfPath2h
java.util.List.of(E, E, E)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java„  „("2b
java.util.List.of(E)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java‰& ‰((2µ
gorg.jabref.logic.util.io.FileUtil.findListOfFiles(java.lang.String, java.util.List<java.nio.file.Path>)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÂ% Â(42ê
Borg.jabref.logic.util.io.FileUtilTest?existingTestFile@31.17:31.33CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java„# „(32ï
Gorg.jabref.logic.util.io.FileUtilTest?otherExistingTestFile@32.17:32.38CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java„5 „(J2á
9org.jabref.logic.util.io.FileUtilTest?rootDir@33.17:33.24CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java„L „(S2ê
Borg.jabref.logic.util.io.FileUtilTest?existingTestFile@31.17:31.33CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java‰) ‰(92ö
Lorg.jabref.logic.util.io.FileUtilTest.findInListOfPath()?paths@355.19:355.24CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÂM Â(R2†
Rorg.jabref.logic.util.io.FileUtilTest.findInListOfPath()?resultPaths@356.19:356.30CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÊ Ê( 2õ
Morg.jabref.logic.util.io.FileUtilTest.findInListOfPath()?result@357.19:357.25CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÊ" Ê((2°
Lorg.jabref.logic.util.io.FileUtilTest.findInListOfPath()?paths@355.19:355.24DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java„ „(2ß
Rorg.jabref.logic.util.io.FileUtilTest.findInListOfPath()?resultPaths@356.19:356.30DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java‰ ‰(2¢
Morg.jabref.logic.util.io.FileUtilTest.findInListOfPath()?result@357.19:357.25DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÂ Â(2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java· ·(ÿ
Lorg.jabref.logic.util.io.FileUtilTest.findInListOfPath()?paths@355.19:355.24VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java„ „("
type
List<Path>"
isFinalfalse"¢
declarationStringå<mark class="modifier"> </mark>List<Path> <mark class="class-field">paths</mark> = List.of(existingTestFile, otherExistingTestFile, rootDir)*paths2\
java.util.ListTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java„ „(2i
java.nio.file.PathTYPE_ARGUMENTD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java„ „(2h
java.util.List.of(E, E, E)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java„  „("2ê
Borg.jabref.logic.util.io.FileUtilTest?existingTestFile@31.17:31.33CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java„# „(32ï
Gorg.jabref.logic.util.io.FileUtilTest?otherExistingTestFile@32.17:32.38CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java„5 „(J2á
9org.jabref.logic.util.io.FileUtilTest?rootDir@33.17:33.24CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java„L „(S°
Rorg.jabref.logic.util.io.FileUtilTest.findInListOfPath()?resultPaths@356.19:356.30VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java‰ ‰("
type
List<Path>"
isFinalfalse"á
declarationStringr<mark class="modifier"> </mark>List<Path> <mark class="class-field">resultPaths</mark> = List.of(existingTestFile)*resultPaths2\
java.util.ListTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java‰ ‰(2i
java.nio.file.PathTYPE_ARGUMENTD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java‰ ‰(2b
java.util.List.of(E)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java‰& ‰((2ê
Borg.jabref.logic.util.io.FileUtilTest?existingTestFile@31.17:31.33CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java‰) ‰(9≠
Morg.jabref.logic.util.io.FileUtilTest.findInListOfPath()?result@357.19:357.25VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÂ Â("
type
List<Path>"
isFinalfalse"ø
declarationString©<mark class="modifier"> </mark>List<Path> <mark class="class-field">result</mark> = FileUtil.findListOfFiles("existingTestFile.txt"<mark class="modifier">,</mark> paths)*result2\
java.util.ListTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÂ Â(2i
java.nio.file.PathTYPE_ARGUMENTD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÂ Â(2µ
gorg.jabref.logic.util.io.FileUtil.findListOfFiles(java.lang.String, java.util.List<java.nio.file.Path>)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÂ% Â(42ö
Lorg.jabref.logic.util.io.FileUtilTest.findInListOfPath()?paths@355.19:355.24CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÂM Â(R√

<org.jabref.logic.util.io.FileUtilTest.extractFileExtension()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÍ Í($"
isFinalfalse"∫
declarationString§<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">extractFileExtension</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*extractFileExtension2d
java.net.URL.getPath()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÎN Î(U2{
-java.lang.Class.getResource(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÎ3 Î(>2f
java.util.Optional.of(T)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÏ Ï( 2í
Dorg.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÏ2 Ï(B2°
Sorg.jabref.logic.util.io.FileUtilTest.extractFileExtension()?filePath@363.21:363.29CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÏC Ï(K2®
Sorg.jabref.logic.util.io.FileUtilTest.extractFileExtension()?filePath@363.21:363.29DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÎ Î(2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÍ Í(÷
Sorg.jabref.logic.util.io.FileUtilTest.extractFileExtension()?filePath@363.21:363.29VALUED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÎ Î("
typeString"
isFinaltrue"√
declarationString≠<mark class="modifier"> </mark><mark class="modifier">final </mark>String <mark class="class-field">filePath</mark> = FileUtilTest.class.getResource("pdffile.pdf").getPath()*filePath2^
java.lang.StringTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÎ Î(2d
java.net.URL.getPath()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÎN Î(U2{
-java.lang.Class.getResource(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÎ3 Î(>‡
<org.jabref.logic.util.io.FileUtilTest.fileExtensionFromUrl()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java ($"
isFinalfalse"∫
declarationString§<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">fileExtensionFromUrl</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*fileExtensionFromUrl2f
java.util.Optional.of(T)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÚ Ú( 2í
Dorg.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÚ2 Ú(B2°
Sorg.jabref.logic.util.io.FileUtilTest.fileExtensionFromUrl()?filePath@369.21:369.29CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÚC Ú(K2®
Sorg.jabref.logic.util.io.FileUtilTest.fileExtensionFromUrl()?filePath@369.21:369.29DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÒ Ò(2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java (É
Sorg.jabref.logic.util.io.FileUtilTest.fileExtensionFromUrl()?filePath@369.21:369.29VALUED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÒ Ò("
typeString"
isFinaltrue"”
declarationStringΩ<mark class="modifier"> </mark><mark class="modifier">final </mark>String <mark class="class-field">filePath</mark> = "https://link.springer.com/content/pdf/10.1007%2Fs40955-018-0121-9.pdf"*filePath2^
java.lang.StringTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÒ Ò(„

5org.jabref.logic.util.io.FileUtilTest.fileNameEmpty()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaˆ ˆ("
isFinalfalse"≥
declarationStringù<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">fileNameEmpty</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*fileNameEmpty2ä
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java˜ ˜(2f
java.util.Optional.of(T)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java¯ ¯( 2ö
Lorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java¯1 ¯(52ñ
Horg.jabref.logic.util.io.FileUtilTest.fileNameEmpty()?path@375.13:375.17CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java¯! ¯(%2ñ
Horg.jabref.logic.util.io.FileUtilTest.fileNameEmpty()?path@375.13:375.17CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java¯: ¯(>2ù
Horg.jabref.logic.util.io.FileUtilTest.fileNameEmpty()?path@375.13:375.17DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java˜ ˜(2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaˆ ˆ(û
Horg.jabref.logic.util.io.FileUtilTest.fileNameEmpty()?path@375.13:375.17VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java˜ ˜("
typePath"
isFinalfalse"m
declarationStringX<mark class="modifier"> </mark>Path <mark class="class-field">path</mark> = Path.of("/")*path2`
java.nio.file.PathTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java˜ ˜(2ä
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java˜ ˜(ø
Gorg.jabref.logic.util.io.FileUtilTest.fileNameIllegal(java.lang.String)METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java˝ ˝("
isFinalfalse"ß
declarationStringë <br><mark class="annotation">@ValueSource(strings</mark> = { "*"<mark class="modifier"><mark class="modifier">,</mark></mark> "?"<mark class="modifier"><mark class="modifier">,</mark></mark> ">"<mark class="modifier"><mark class="modifier">,</mark></mark> "\"" }) <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">fileNameIllegal</mark>(String fileName)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*fileNameIllegal2ä
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java˛ ˛(2h
java.util.Optional.empty()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaˇ ˇ(#2ö
Lorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaˇ0 ˇ(42û
Porg.jabref.logic.util.io.FileUtilTest.fileNameIllegal(java.lang.String)!fileNameCALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaˇ5 ˇ(=2®
Zorg.jabref.logic.util.io.FileUtilTest.fileNameIllegal(java.lang.String)?path@382.13:382.17CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaˇ? ˇ(C2£
Porg.jabref.logic.util.io.FileUtilTest.fileNameIllegal(java.lang.String)!fileName	PARAMETERD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java˝' ˝(/2Ø
Zorg.jabref.logic.util.io.FileUtilTest.fileNameIllegal(java.lang.String)?path@382.13:382.17DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java˛ ˛(2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java˝ ˝(∞
Zorg.jabref.logic.util.io.FileUtilTest.fileNameIllegal(java.lang.String)?path@382.13:382.17VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java˛ ˛("
typePath"
isFinalfalse"m
declarationStringX<mark class="modifier"> </mark>Path <mark class="class-field">path</mark> = Path.of("/")*path2`
java.nio.file.PathTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java˛ ˛(2ä
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java˛ ˛(’
Porg.jabref.logic.util.io.FileUtilTest.fileNameIllegal(java.lang.String)!fileName	PARAMETERD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java˝' ˝(/"
typeString"
isFinalfalse"$
declarationStringString fileName*fileName2^
java.lang.StringTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java˝  ˝(&∞
Norg.jabref.logic.util.io.FileUtilTest.findsFileInDirectory(java.nio.file.Path)METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÉ É($"
isFinalfalse"î
declarationString˛ <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">findsFileInDirectory</mark>(<mark class="annotation">@TempDir</mark> Path temp)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*findsFileInDirectory2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÑ" Ñ()2Õ
java.nio.file.Files.createDirectories(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÖ Ö(2∆
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÜ Ü()2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÜ8 Ü(?2f
java.util.Optional.of(T)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaà à( 2ö
Lorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaà6 à(:2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaàL à(S2°
Sorg.jabref.logic.util.io.FileUtilTest.findsFileInDirectory(java.nio.file.Path)!tempCALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÑ Ñ(!2∏
jorg.jabref.logic.util.io.FileUtilTest.findsFileInDirectory(java.nio.file.Path)?firstFilePath@388.13:388.26CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÖ  Ö(-2∏
jorg.jabref.logic.util.io.FileUtilTest.findsFileInDirectory(java.nio.file.Path)?firstFilePath@388.13:388.26CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÜ* Ü(72¥
forg.jabref.logic.util.io.FileUtilTest.findsFileInDirectory(java.nio.file.Path)?firstFile@390.13:390.22CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaà! à(*2°
Sorg.jabref.logic.util.io.FileUtilTest.findsFileInDirectory(java.nio.file.Path)!tempCALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaàG à(K2¶
Sorg.jabref.logic.util.io.FileUtilTest.findsFileInDirectory(java.nio.file.Path)!temp	PARAMETERD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÉ3 É(72ø
jorg.jabref.logic.util.io.FileUtilTest.findsFileInDirectory(java.nio.file.Path)?firstFilePath@388.13:388.26DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÑ Ñ(2ª
forg.jabref.logic.util.io.FileUtilTest.findsFileInDirectory(java.nio.file.Path)?firstFile@390.13:390.22DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÜ Ü(2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÉ É(Ó
jorg.jabref.logic.util.io.FileUtilTest.findsFileInDirectory(java.nio.file.Path)?firstFilePath@388.13:388.26VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÑ Ñ("
typePath"
isFinalfalse"
declarationStringj<mark class="modifier"> </mark>Path <mark class="class-field">firstFilePath</mark> = temp.resolve("files")*firstFilePath2`
java.nio.file.PathTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÑ Ñ(2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÑ" Ñ()2°
Sorg.jabref.logic.util.io.FileUtilTest.findsFileInDirectory(java.nio.file.Path)!tempCALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÑ Ñ(!‚
forg.jabref.logic.util.io.FileUtilTest.findsFileInDirectory(java.nio.file.Path)?firstFile@390.13:390.22VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÜ Ü("
typePath"
isFinalfalse"ö
declarationStringÑ<mark class="modifier"> </mark>Path <mark class="class-field">firstFile</mark> = Files.createFile(firstFilePath.resolve("test.pdf"))*	firstFile2`
java.nio.file.PathTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÜ Ü(2∆
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÜ Ü()2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÜ8 Ü(?2∏
jorg.jabref.logic.util.io.FileUtilTest.findsFileInDirectory(java.nio.file.Path)?firstFilePath@388.13:388.26CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÜ* Ü(7˜
Sorg.jabref.logic.util.io.FileUtilTest.findsFileInDirectory(java.nio.file.Path)!temp	PARAMETERD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÉ3 É(7"
typePath"
isFinalfalse"G
declarationString2<mark class="annotation">@TempDir</mark> Path temp*temp2`
java.nio.file.PathTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaÉ. É(2Î
_org.jabref.logic.util.io.FileUtilTest.findsFileStartingWithTheSameDirectory(java.nio.file.Path)METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaå å(5"
isFinalfalse"•
declarationStringè <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">findsFileStartingWithTheSameDirectory</mark>(<mark class="annotation">@TempDir</mark> Path temp)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*%findsFileStartingWithTheSameDirectory2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaç" ç()2Õ
java.nio.file.Files.createDirectories(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaé é(2∆
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaè è()2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaè8 è(?2f
java.util.Optional.of(T)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaë ë( 2ö
Lorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaë6 ë(:2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaëR ë(Y2≤
dorg.jabref.logic.util.io.FileUtilTest.findsFileStartingWithTheSameDirectory(java.nio.file.Path)!tempCALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaç ç(!2…
{org.jabref.logic.util.io.FileUtilTest.findsFileStartingWithTheSameDirectory(java.nio.file.Path)?firstFilePath@397.13:397.26CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaé  é(-2…
{org.jabref.logic.util.io.FileUtilTest.findsFileStartingWithTheSameDirectory(java.nio.file.Path)?firstFilePath@397.13:397.26CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaè* è(72≈
worg.jabref.logic.util.io.FileUtilTest.findsFileStartingWithTheSameDirectory(java.nio.file.Path)?firstFile@399.13:399.22CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaë! ë(*2≤
dorg.jabref.logic.util.io.FileUtilTest.findsFileStartingWithTheSameDirectory(java.nio.file.Path)!tempCALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaëM ë(Q2∑
dorg.jabref.logic.util.io.FileUtilTest.findsFileStartingWithTheSameDirectory(java.nio.file.Path)!temp	PARAMETERD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaåD å(H2–
{org.jabref.logic.util.io.FileUtilTest.findsFileStartingWithTheSameDirectory(java.nio.file.Path)?firstFilePath@397.13:397.26DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaç ç(2Ã
worg.jabref.logic.util.io.FileUtilTest.findsFileStartingWithTheSameDirectory(java.nio.file.Path)?firstFile@399.13:399.22DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaè è(2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaå å(ê
{org.jabref.logic.util.io.FileUtilTest.findsFileStartingWithTheSameDirectory(java.nio.file.Path)?firstFilePath@397.13:397.26VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaç ç("
typePath"
isFinalfalse"
declarationStringj<mark class="modifier"> </mark>Path <mark class="class-field">firstFilePath</mark> = temp.resolve("files")*firstFilePath2`
java.nio.file.PathTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaç ç(2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaç" ç()2≤
dorg.jabref.logic.util.io.FileUtilTest.findsFileStartingWithTheSameDirectory(java.nio.file.Path)!tempCALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaç ç(!Ñ
worg.jabref.logic.util.io.FileUtilTest.findsFileStartingWithTheSameDirectory(java.nio.file.Path)?firstFile@399.13:399.22VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaè è("
typePath"
isFinalfalse"ö
declarationStringÑ<mark class="modifier"> </mark>Path <mark class="class-field">firstFile</mark> = Files.createFile(firstFilePath.resolve("test.pdf"))*	firstFile2`
java.nio.file.PathTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaè è(2∆
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaè è()2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaè8 è(?2…
{org.jabref.logic.util.io.FileUtilTest.findsFileStartingWithTheSameDirectory(java.nio.file.Path)?firstFilePath@397.13:397.26CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaè* è(7à
dorg.jabref.logic.util.io.FileUtilTest.findsFileStartingWithTheSameDirectory(java.nio.file.Path)!temp	PARAMETERD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaåD å(H"
typePath"
isFinalfalse"G
declarationString2<mark class="annotation">@TempDir</mark> Path temp*temp2`
java.nio.file.PathTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaå? å(C≠"
vorg.jabref.logic.util.io.FileUtilTest.doesNotFindsFileStartingWithTheSameDirectoryHasASubdirectory(java.nio.file.Path)METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaï ï(L"
isFinalfalse"º
declarationString¶ <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">doesNotFindsFileStartingWithTheSameDirectoryHasASubdirectory</mark>(<mark class="annotation">@TempDir</mark> Path temp)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*<doesNotFindsFileStartingWithTheSameDirectoryHasASubdirectory2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javañ# ñ(*2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaó. ó(52Õ
java.nio.file.Files.createDirectories(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaò ò(2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaô( ô(/2∆
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaö ö(2f
java.util.Optional.of(T)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaõ õ( 2q
#java.nio.file.Path.toAbsolutePath()CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaõ* õ(82ö
Lorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaõF õ(J2…
{org.jabref.logic.util.io.FileUtilTest.doesNotFindsFileStartingWithTheSameDirectoryHasASubdirectory(java.nio.file.Path)!tempCALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javañ ñ("2‚
ìorg.jabref.logic.util.io.FileUtilTest.doesNotFindsFileStartingWithTheSameDirectoryHasASubdirectory(java.nio.file.Path)?firstFilesPath@406.13:406.27CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaó ó(-2„
îorg.jabref.logic.util.io.FileUtilTest.doesNotFindsFileStartingWithTheSameDirectoryHasASubdirectory(java.nio.file.Path)?secondFilesPath@407.13:407.28CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaò  ò(/2„
îorg.jabref.logic.util.io.FileUtilTest.doesNotFindsFileStartingWithTheSameDirectoryHasASubdirectory(java.nio.file.Path)?secondFilesPath@407.13:407.28CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaô ô('2‹
çorg.jabref.logic.util.io.FileUtilTest.doesNotFindsFileStartingWithTheSameDirectoryHasASubdirectory(java.nio.file.Path)?testFile@409.13:409.21CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaö ö(!2‹
çorg.jabref.logic.util.io.FileUtilTest.doesNotFindsFileStartingWithTheSameDirectoryHasASubdirectory(java.nio.file.Path)?testFile@409.13:409.21CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaõ! õ()2‚
ìorg.jabref.logic.util.io.FileUtilTest.doesNotFindsFileStartingWithTheSameDirectoryHasASubdirectory(java.nio.file.Path)?firstFilesPath@406.13:406.27CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaõ] õ(k2Œ
{org.jabref.logic.util.io.FileUtilTest.doesNotFindsFileStartingWithTheSameDirectoryHasASubdirectory(java.nio.file.Path)!temp	PARAMETERD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaï[ ï(_2È
ìorg.jabref.logic.util.io.FileUtilTest.doesNotFindsFileStartingWithTheSameDirectoryHasASubdirectory(java.nio.file.Path)?firstFilesPath@406.13:406.27DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javañ ñ(2Í
îorg.jabref.logic.util.io.FileUtilTest.doesNotFindsFileStartingWithTheSameDirectoryHasASubdirectory(java.nio.file.Path)?secondFilesPath@407.13:407.28DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaó ó(2„
çorg.jabref.logic.util.io.FileUtilTest.doesNotFindsFileStartingWithTheSameDirectoryHasASubdirectory(java.nio.file.Path)?testFile@409.13:409.21DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaô ô(2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaï ï(√
ìorg.jabref.logic.util.io.FileUtilTest.doesNotFindsFileStartingWithTheSameDirectoryHasASubdirectory(java.nio.file.Path)?firstFilesPath@406.13:406.27VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javañ ñ("
typePath"
isFinalfalse"Ä
declarationStringk<mark class="modifier"> </mark>Path <mark class="class-field">firstFilesPath</mark> = temp.resolve("files")*firstFilesPath2`
java.nio.file.PathTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javañ ñ(2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javañ# ñ(*2…
{org.jabref.logic.util.io.FileUtilTest.doesNotFindsFileStartingWithTheSameDirectoryHasASubdirectory(java.nio.file.Path)!tempCALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javañ ñ("È
îorg.jabref.logic.util.io.FileUtilTest.doesNotFindsFileStartingWithTheSameDirectoryHasASubdirectory(java.nio.file.Path)?secondFilesPath@407.13:407.28VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaó ó("
typePath"
isFinalfalse"ã
declarationStringv<mark class="modifier"> </mark>Path <mark class="class-field">secondFilesPath</mark> = firstFilesPath.resolve("files")*secondFilesPath2`
java.nio.file.PathTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaó ó(2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaó. ó(52‚
ìorg.jabref.logic.util.io.FileUtilTest.doesNotFindsFileStartingWithTheSameDirectoryHasASubdirectory(java.nio.file.Path)?firstFilesPath@406.13:406.27CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaó ó(-Ÿ
çorg.jabref.logic.util.io.FileUtilTest.doesNotFindsFileStartingWithTheSameDirectoryHasASubdirectory(java.nio.file.Path)?testFile@409.13:409.21VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaô ô("
typePath"
isFinalfalse"à
declarationStrings<mark class="modifier"> </mark>Path <mark class="class-field">testFile</mark> = secondFilesPath.resolve("test.pdf")*testFile2`
java.nio.file.PathTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaô ô(2z
,java.nio.file.Path.resolve(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaô( ô(/2„
îorg.jabref.logic.util.io.FileUtilTest.doesNotFindsFileStartingWithTheSameDirectoryHasASubdirectory(java.nio.file.Path)?secondFilesPath@407.13:407.28CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaô ô('ü
{org.jabref.logic.util.io.FileUtilTest.doesNotFindsFileStartingWithTheSameDirectoryHasASubdirectory(java.nio.file.Path)!temp	PARAMETERD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaï[ ï(_"
typePath"
isFinalfalse"G
declarationString2<mark class="annotation">@TempDir</mark> Path temp*temp2`
java.nio.file.PathTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaïV ï(Z∆	
1org.jabref.logic.util.io.FileUtilTest.testCTemp()METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaû û("
isFinalfalse"Ñ
declarationStringo<mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">testCTemp</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*	testCTemp2ì
Eorg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java°! °(22ì
Eorg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java£  £(12ñ
Horg.jabref.logic.util.io.FileUtilTest.testCTemp()?fileName@415.15:415.23CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java°3 °(;2ñ
Horg.jabref.logic.util.io.FileUtilTest.testCTemp()?fileName@415.15:415.23CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java£2 £(:2ù
Horg.jabref.logic.util.io.FileUtilTest.testCTemp()?fileName@415.15:415.23DECLARATIOND
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaü ü(2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaû û(ù
Horg.jabref.logic.util.io.FileUtilTest.testCTemp()?fileName@415.15:415.23VARIABLED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaü ü("
typeString"
isFinalfalse"u
declarationString`<mark class="modifier"> </mark>String <mark class="class-field">fileName</mark> = "c:\\temp.pdf"*fileName2^
java.lang.StringTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaü ü(ó
Borg.jabref.logic.util.io.FileUtilTest.legalPaths(java.lang.String)METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java© ©("
isFinalfalse"Ó
declarationStringÿ <br><mark class="annotation">@ValueSource(strings</mark> = { "/mnt/tmp/test.pdf" }) <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">legalPaths</mark>(String fileName)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*
legalPaths2ì
Eorg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java™ ™(.2ô
Korg.jabref.logic.util.io.FileUtilTest.legalPaths(java.lang.String)!fileNameCALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java™/ ™(72û
Korg.jabref.logic.util.io.FileUtilTest.legalPaths(java.lang.String)!fileName	PARAMETERD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java©" ©(*2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java© ©(–
Korg.jabref.logic.util.io.FileUtilTest.legalPaths(java.lang.String)!fileName	PARAMETERD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java©" ©(*"
typeString"
isFinalfalse"$
declarationStringString fileName*fileName2^
java.lang.StringTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java© ©(!ö
Dorg.jabref.logic.util.io.FileUtilTest.illegalPaths(java.lang.String)METHODD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaØ Ø("
isFinalfalse"È
declarationString” <br><mark class="annotation">@ValueSource(strings</mark> = { "te{}mp.pdf" }) <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">illegalPaths</mark>(String fileName)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*illegalPaths2ì
Eorg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)CALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∞ ∞(-2õ
Morg.jabref.logic.util.io.FileUtilTest.illegalPaths(java.lang.String)!fileNameCALLD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java∞. ∞(62†
Morg.jabref.logic.util.io.FileUtilTest.illegalPaths(java.lang.String)!fileName	PARAMETERD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaØ$ Ø(,2Y
voidRETURN_TYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaØ Ø(“
Morg.jabref.logic.util.io.FileUtilTest.illegalPaths(java.lang.String)!fileName	PARAMETERD
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaØ$ Ø(,"
typeString"
isFinalfalse"$
declarationStringString fileName*fileName2^
java.lang.StringTYPED
8src\test\java\org\jabref\logic\util\io\FileUtilTest.javaØ Ø(#ï
Eorg.jabref.logic.util.io.FileUtilTest?nonExistingTestPath@30.23:30.42VALUEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java (*"
isFinaltrue"
typePath"ª
declarationString•<mark class="modifier">private </mark><mark class="modifier">final </mark>Path <mark class="class-field">nonExistingTestPath</mark> = Path.of("nonExistingTestPath");"
isStaticfalse"
accessprivate*nonExistingTestPath2^
java.nio.file.PathTYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java (2à
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java2 (4Ω
Borg.jabref.logic.util.io.FileUtilTest?existingTestFile@31.17:31.33VARIABLEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java (!"
isFinalfalse"
typePath"q
declarationString\<mark class="modifier">private </mark>Path <mark class="class-field">existingTestFile</mark>"
isStaticfalse"
accessprivate*existingTestFile2^
java.nio.file.PathTYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java (Ã
Gorg.jabref.logic.util.io.FileUtilTest?otherExistingTestFile@32.17:32.38VARIABLEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java   (&"
isFinalfalse"
typePath"v
declarationStringa<mark class="modifier">private </mark>Path <mark class="class-field">otherExistingTestFile</mark>"
isStaticfalse"
accessprivate*otherExistingTestFile2^
java.nio.file.PathTYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java   (¢
9org.jabref.logic.util.io.FileUtilTest?rootDir@33.17:33.24VARIABLEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java! !("
isFinalfalse"
typePath"h
declarationStringS<mark class="modifier">private </mark>Path <mark class="class-field">rootDir</mark>"
isStaticfalse"
accessprivate*rootDir2^
java.nio.file.PathTYPEB
8src\test\java\org\jabref\logic\util\io\FileUtilTest.java! !(