
4src\main\java\org\jabref\logic\util\io\FileUtil.java±*
!org.jabref.logic.util.io.FileUtilCLASS>
4src\main\java\org\jabref\logic\util\io\FileUtil.java' '("#
packageorg.jabref.logic.util.io"
isFinalfalse"
inner classfalse"

isAbstractfalse"f
declarationStringQ<mark class="modifier">public </mark><mark class="modifier">class </mark>FileUtil"
accesspublic*FileUtil2{
,org.jabref.logic.util.io.FileUtil.FileUtil()DECLARATION>
4src\main\java\org\jabref\logic\util\io\FileUtil.java> >(2ì
Dorg.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)DECLARATION>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaF# F(32ï
Forg.jabref.logic.util.io.FileUtil.getFileExtension(java.nio.file.Path)DECLARATION>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaT# T(32é
?org.jabref.logic.util.io.FileUtil.getBaseName(java.lang.String)DECLARATION>
4src\main\java\org\jabref\logic\util\io\FileUtil.java[ [($2ê
Aorg.jabref.logic.util.io.FileUtil.getBaseName(java.nio.file.Path)DECLARATION>
4src\main\java\org\jabref\logic\util\io\FileUtil.javab b($2ì
Dorg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)DECLARATION>
4src\main\java\org\jabref\logic\util\io\FileUtil.javam m()2•
Torg.jabref.logic.util.io.FileUtil.addExtension(java.nio.file.Path, java.lang.String)DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÑ Ñ(#2ø
norg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaé# é(92æ
morg.jabref.logic.util.io.FileUtil.getUniquePathFragment(java.util.List<java.lang.String>, java.nio.file.Path)DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaü# ü(82©
Xorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java´ ´(32¨
[org.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÿ ÿ("2µ
dorg.jabref.logic.util.io.FileUtil.relativize(java.nio.file.Path, java.util.List<java.nio.file.Path>)DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˜ ˜(!2›
ãorg.jabref.logic.util.io.FileUtil.getListOfLinkedFiles(java.util.List<org.jabref.model.entry.BibEntry>, java.util.List<java.nio.file.Path>)DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaã ã(12Á
ïorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaù ù(22Ê
îorg.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java± ±(12≤
aorg.jabref.logic.util.io.FileUtil.findSingleFileRecursively(java.lang.String, java.nio.file.Path)DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java≈! ≈(:2‡
éorg.jabref.logic.util.io.FileUtil.find(org.jabref.model.database.BibDatabaseContext, java.lang.String, org.jabref.preferences.FilePreferences)DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java—! —(%2≠
\org.jabref.logic.util.io.FileUtil.find(java.lang.String, java.util.List<java.nio.file.Path>)DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java›! ›(%2ù
Lorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaı! ı(%2∏
gorg.jabref.logic.util.io.FileUtil.findListOfFiles(java.lang.String, java.util.List<java.nio.file.Path>)DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaû û(,2ó
Forg.jabref.logic.util.io.FileUtil.toPortableString(java.nio.file.Path)DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java™ ™()2ê
?org.jabref.logic.util.io.FileUtil.isBibFile(java.nio.file.Path)DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaµ µ(#2ê
?org.jabref.logic.util.io.FileUtil.isPDFFile(java.nio.file.Path)DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaø ø(#2»
worg.jabref.logic.util.io.FileUtil.getInitialDirectory(org.jabref.model.database.BibDatabaseContext, java.nio.file.Path)DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java« «(*2ñ
Eorg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java” ”(+2Ñ
3org.jabref.logic.util.io.FileUtil.isCharLegal(char)DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÁ Á(%2è
@org.jabref.logic.util.io.FileUtil?IS_POSIX_COMPLIANT@41.32:41.50DECLARATION>
4src\main\java\org\jabref\logic\util\io\FileUtil.java)  )(22ï
Forg.jabref.logic.util.io.FileUtil?MAXIMUM_FILE_NAME_LENGTH@42.28:42.52DECLARATION>
4src\main\java\org\jabref\logic\util\io\FileUtil.java* *(42É
4org.jabref.logic.util.io.FileUtil?LOGGER@44.32:44.38DECLARATION>
4src\main\java\org\jabref\logic\util\io\FileUtil.java,  ,(&2ä
;org.jabref.logic.util.io.FileUtil?ILLEGAL_CHARS@50.31:50.44DECLARATION>
4src\main\java\org\jabref\logic\util\io\FileUtil.java2 2(,⁄
,org.jabref.logic.util.io.FileUtil.FileUtil()CONSTRUCTOR>
4src\main\java\org\jabref\logic\util\io\FileUtil.java> >("a
declarationStringL<mark class="modifier">private </mark><mark class="method">FileUtil</mark>()*FileUtil2p
!org.jabref.logic.util.io.FileUtilRETURN_TYPE>
4src\main\java\org\jabref\logic\util\io\FileUtil.java> >(Á
Dorg.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)METHOD>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaF# F(3"
isFinalfalse"¥
declarationStringû<mark class="modifier">public </mark><mark class="modifier">static </mark>Optional&lt;String&gt; <mark class="method">getFileExtension</mark>(String fileName)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeOptional<String>*getFileExtension2i
!java.lang.String.lastIndexOf(int)CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaG# G(.2a
java.lang.String.length()CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaH: H(@2`
java.util.Optional.of(T)CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaI I(2v
.java.lang.String.toLowerCase(java.util.Locale)CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaIJ I(U2_
java.lang.String.trim()CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaIC I(G2g
java.lang.String.substring(int)CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaI( I(12b
java.util.Optional.empty()CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaK K(!2ï
Morg.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)!fileNameCALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaG G("2§
\org.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)?dotPosition@71.12:71.23CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaH H(2§
\org.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)?dotPosition@71.12:71.23CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaH" H(-2ï
Morg.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)!fileNameCALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaH1 H(92ï
Morg.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)!fileNameCALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaI I('2§
\org.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)?dotPosition@71.12:71.23CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaI2 I(=2ö
Morg.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)!fileName	PARAMETER>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaF; F(C2´
\org.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)?dotPosition@71.12:71.23DECLARATION>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaG G(2a
java.util.OptionalRETURN_TYPE>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaF F(2h
java.lang.StringRETURN_TYPE_ARGUMENT>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaF F(!∆
\org.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)?dotPosition@71.12:71.23VARIABLE>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaG G("
typeint"
isFinalfalse"ü
declarationStringâ<mark class="modifier"> </mark><mark class="modifier">int</mark> <mark class="class-field">dotPosition</mark> = fileName.lastIndexOf('.')*dotPosition2K
intTYPE>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaG G(2i
!java.lang.String.lastIndexOf(int)CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaG# G(.2ï
Morg.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)!fileNameCALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaG G("∆
Morg.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)!fileName	PARAMETER>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaF; F(C"
typeString"
isFinalfalse"$
declarationStringString fileName*fileName2X
java.lang.StringTYPE>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaF4 F(:ñ

Forg.jabref.logic.util.io.FileUtil.getFileExtension(java.nio.file.Path)METHOD>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaT# T(3"
isFinalfalse"Æ
declarationStringò<mark class="modifier">public </mark><mark class="modifier">static </mark>Optional&lt;String&gt; <mark class="method">getFileExtension</mark>(Path file)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeOptional<String>*getFileExtension2å
Dorg.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaU U(2e
java.nio.file.Path.toString()CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaU3 U(;2h
 java.nio.file.Path.getFileName()CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaU% U(02ì
Korg.jabref.logic.util.io.FileUtil.getFileExtension(java.nio.file.Path)!fileCALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaU  U($2ò
Korg.jabref.logic.util.io.FileUtil.getFileExtension(java.nio.file.Path)!file	PARAMETER>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaT9 T(=2a
java.util.OptionalRETURN_TYPE>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaT T(2h
java.lang.StringRETURN_TYPE_ARGUMENT>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaT T(!∫
Korg.jabref.logic.util.io.FileUtil.getFileExtension(java.nio.file.Path)!file	PARAMETER>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaT9 T(="
typePath"
isFinalfalse"
declarationString	Path file*file2Z
java.nio.file.PathTYPE>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaT4 T(8∆
?org.jabref.logic.util.io.FileUtil.getBaseName(java.lang.String)METHOD>
4src\main\java\org\jabref\logic\util\io\FileUtil.java[ [($"
isFinalfalse"¨
declarationStringñ<mark class="modifier">public </mark><mark class="modifier">static </mark>String <mark class="method">getBaseName</mark>(String fileNameWithExtension)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeString*getBaseName2ù
Uorg.jabref.logic.util.io.FileUtil.getBaseName(java.lang.String)!fileNameWithExtensionCALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.java\B \(W2¢
Uorg.jabref.logic.util.io.FileUtil.getBaseName(java.lang.String)!fileNameWithExtension	PARAMETER>
4src\main\java\org\jabref\logic\util\io\FileUtil.java[, [(A2_
java.lang.StringRETURN_TYPE>
4src\main\java\org\jabref\logic\util\io\FileUtil.java[ [(Ë
Uorg.jabref.logic.util.io.FileUtil.getBaseName(java.lang.String)!fileNameWithExtension	PARAMETER>
4src\main\java\org\jabref\logic\util\io\FileUtil.java[, [(A"
typeString"
isFinalfalse"1
declarationStringString fileNameWithExtension*fileNameWithExtension2X
java.lang.StringTYPE>
4src\main\java\org\jabref\logic\util\io\FileUtil.java[% [(+•	
Aorg.jabref.logic.util.io.FileUtil.getBaseName(java.nio.file.Path)METHOD>
4src\main\java\org\jabref\logic\util\io\FileUtil.javab b($"
isFinalfalse"™
declarationStringî<mark class="modifier">public </mark><mark class="modifier">static </mark>String <mark class="method">getBaseName</mark>(Path fileNameWithExtension)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeString*getBaseName2á
?org.jabref.logic.util.io.FileUtil.getBaseName(java.lang.String)CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javac c(2e
java.nio.file.Path.toString()CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javac? c(G2h
 java.nio.file.Path.getFileName()CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javac1 c(<2ü
Worg.jabref.logic.util.io.FileUtil.getBaseName(java.nio.file.Path)!fileNameWithExtensionCALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javac c(02§
Worg.jabref.logic.util.io.FileUtil.getBaseName(java.nio.file.Path)!fileNameWithExtension	PARAMETER>
4src\main\java\org\jabref\logic\util\io\FileUtil.javab* b(?2_
java.lang.StringRETURN_TYPE>
4src\main\java\org\jabref\logic\util\io\FileUtil.javab b(Ë
Worg.jabref.logic.util.io.FileUtil.getBaseName(java.nio.file.Path)!fileNameWithExtension	PARAMETER>
4src\main\java\org\jabref\logic\util\io\FileUtil.javab* b(?"
typePath"
isFinalfalse"/
declarationStringPath fileNameWithExtension*fileNameWithExtension2Z
java.nio.file.PathTYPE>
4src\main\java\org\jabref\logic\util\io\FileUtil.javab% b()•+
Dorg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)METHOD>
4src\main\java\org\jabref\logic\util\io\FileUtil.javam m()"
isFinalfalse"§
declarationStringé<mark class="modifier">public </mark><mark class="modifier">static </mark>String <mark class="method">getValidFileName</mark>(String fileName)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeString*getValidFileName2á
?org.jabref.logic.util.io.FileUtil.getBaseName(java.lang.String)CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javan& n(12a
java.lang.String.length()CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javap! p('2å
Dorg.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaq) q(92l
$java.lang.String.substring(int, int)CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javar4 r(=2e
java.util.Optional.orElse(T)CALL?
4src\main\java\org\jabref\logic\util\io\FileUtil.javar r(Ö2ì
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javarf r(i2a
java.lang.String.length()CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javarq r(w2w
/java.lang.String.formatted(java.lang.Object...)CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javasX s(a2a
java.lang.String.length()CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javasu s({2d
java.util.Optional.orElse(T)CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javat; t(A2ì
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javat t( 2ï
Morg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)!fileNameCALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javan2 n(:2Ø
gorg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)?nameWithoutExtension@110.15:110.35CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javap p( 2é
Forg.jabref.logic.util.io.FileUtil?MAXIMUM_FILE_NAME_LENGTH@42.28:42.52CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javap, p(D2ï
Morg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)!fileNameCALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaq: q(B2Ø
gorg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)?nameWithoutExtension@110.15:110.35CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javar r(32é
Forg.jabref.logic.util.io.FileUtil?MAXIMUM_FILE_NAME_LENGTH@42.28:42.52CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javarA r(Y2§
\org.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)?extension@113.29:113.38CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javar\ r(e2û
Vorg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)?s@114.106:114.107CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaro r(p2|
4org.jabref.logic.util.io.FileUtil?LOGGER@44.32:44.38CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javas s(2ï
Morg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)!fileNameCALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javasb s(j2ï
Morg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)!fileNameCALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javasl s(t2•
\org.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)?shortName@114.19:114.28CALL?
4src\main\java\org\jabref\logic\util\io\FileUtil.javas s(à2§
\org.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)?extension@113.29:113.38CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javat t(2§
\org.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)?shortName@114.19:114.28CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javat& t(/2ú
Torg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)?s@116.33:116.34CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javat8 t(92§
\org.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)?shortName@114.19:114.28CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javatB t(K2ï
Morg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)!fileNameCALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaw w(2ö
Morg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)!fileName	PARAMETER>
4src\main\java\org\jabref\logic\util\io\FileUtil.javam1 m(92∂
gorg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)?nameWithoutExtension@110.15:110.35DECLARATION>
4src\main\java\org\jabref\logic\util\io\FileUtil.javan n(#2´
\org.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)?extension@113.29:113.38DECLARATION>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaq q(&2´
\org.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)?shortName@114.19:114.28DECLARATION>
4src\main\java\org\jabref\logic\util\io\FileUtil.javar r(2•
Vorg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)?s@114.106:114.107DECLARATION>
4src\main\java\org\jabref\logic\util\io\FileUtil.javarj r(k2£
Torg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)?s@116.33:116.34DECLARATION>
4src\main\java\org\jabref\logic\util\io\FileUtil.javat! t("2_
java.lang.StringRETURN_TYPE>
4src\main\java\org\jabref\logic\util\io\FileUtil.javam m(Ú
gorg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)?nameWithoutExtension@110.15:110.35VARIABLE>
4src\main\java\org\jabref\logic\util\io\FileUtil.javan n(#"
typeString"
isFinalfalse"à
declarationStrings<mark class="modifier"> </mark>String <mark class="class-field">nameWithoutExtension</mark> = getBaseName(fileName)*nameWithoutExtension2X
java.lang.StringTYPE>
4src\main\java\org\jabref\logic\util\io\FileUtil.javan n(2á
?org.jabref.logic.util.io.FileUtil.getBaseName(java.lang.String)CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javan& n(12ï
Morg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)!fileNameCALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javan2 n(:‘
\org.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)?extension@113.29:113.38VARIABLE>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaq q(&"
typeOptional<String>"
isFinalfalse"å
declarationStringw<mark class="modifier"> </mark>Optional<String> <mark class="class-field">extension</mark> = getFileExtension(fileName)*	extension2Z
java.util.OptionalTYPE>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaq q(2a
java.lang.StringTYPE_ARGUMENT>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaq q(2å
Dorg.jabref.logic.util.io.FileUtil.getFileExtension(java.lang.String)CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaq) q(92ï
Morg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)!fileNameCALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaq: q(Bﬁ
\org.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)?shortName@114.19:114.28VARIABLE>
4src\main\java\org\jabref\logic\util\io\FileUtil.javar r("
typeString"
isFinalfalse"”
declarationStringΩ<mark class="modifier"> </mark>String <mark class="class-field">shortName</mark> = nameWithoutExtension.substring(0, MAXIMUM_FILE_NAME_LENGTH - extension.map(s -> s.length() + 1).orElse(0))*	shortName2X
java.lang.StringTYPE>
4src\main\java\org\jabref\logic\util\io\FileUtil.javar r(2l
$java.lang.String.substring(int, int)CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javar4 r(=2e
java.util.Optional.orElse(T)CALL?
4src\main\java\org\jabref\logic\util\io\FileUtil.javar r(Ö2ì
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javarf r(i2a
java.lang.String.length()CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javarq r(w2Ø
gorg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)?nameWithoutExtension@110.15:110.35CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javar r(32é
Forg.jabref.logic.util.io.FileUtil?MAXIMUM_FILE_NAME_LENGTH@42.28:42.52CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javarA r(Y2§
\org.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)?extension@113.29:113.38CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javar\ r(e2û
Vorg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)?s@114.106:114.107CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.javaro r(p∆
Morg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)!fileName	PARAMETER>
4src\main\java\org\jabref\logic\util\io\FileUtil.javam1 m(9"
typeString"
isFinalfalse"$
declarationStringString fileName*fileName2X
java.lang.StringTYPE>
4src\main\java\org\jabref\logic\util\io\FileUtil.javam* m(0‡
Vorg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)?s@114.106:114.107VARIABLE>
4src\main\java\org\jabref\logic\util\io\FileUtil.javarj r(k"
type"
isFinalfalse"
declarationString s*s2TYPEﬁ
Torg.jabref.logic.util.io.FileUtil.getValidFileName(java.lang.String)?s@116.33:116.34VARIABLE>
4src\main\java\org\jabref\logic\util\io\FileUtil.javat! t(""
type"
isFinalfalse"
declarationString s*s2TYPEí
Torg.jabref.logic.util.io.FileUtil.addExtension(java.nio.file.Path, java.lang.String)METHOD@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÑ Ñ(#"
isFinalfalse"Ê
declarationString–<mark class="modifier">public </mark><mark class="modifier">static </mark>Path <mark class="method">addExtension</mark>(Path path<mark class="modifier"><mark class="modifier">,</mark></mark> String extension)"
isStatictrue"
accesspublic"

isAbstractfalse"
typePath*addExtension2}
3java.nio.file.Path.resolveSibling(java.lang.String)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÖ Ö("2j
 java.nio.file.Path.getFileName()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÖ( Ö(32£
Yorg.jabref.logic.util.io.FileUtil.addExtension(java.nio.file.Path, java.lang.String)!pathCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÖ Ö(2£
Yorg.jabref.logic.util.io.FileUtil.addExtension(java.nio.file.Path, java.lang.String)!pathCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÖ# Ö('2®
^org.jabref.logic.util.io.FileUtil.addExtension(java.nio.file.Path, java.lang.String)!extensionCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÖ8 Ö(A2®
Yorg.jabref.logic.util.io.FileUtil.addExtension(java.nio.file.Path, java.lang.String)!path	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÑ) Ñ(-2≠
^org.jabref.logic.util.io.FileUtil.addExtension(java.nio.file.Path, java.lang.String)!extension	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÑ6 Ñ(?2c
java.nio.file.PathRETURN_TYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÑ Ñ(Ã
Yorg.jabref.logic.util.io.FileUtil.addExtension(java.nio.file.Path, java.lang.String)!path	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÑ) Ñ(-"
typePath"
isFinalfalse"
declarationString	Path path*path2\
java.nio.file.PathTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÑ$ Ñ((›
^org.jabref.logic.util.io.FileUtil.addExtension(java.nio.file.Path, java.lang.String)!extension	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÑ6 Ñ(?"
typeString"
isFinalfalse"%
declarationStringString extension*	extension2Z
java.lang.StringTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÑ/ Ñ(5‹,
norg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)METHOD@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaé# é(9"
isFinalfalse"ë
declarationString˚<mark class="modifier">public </mark><mark class="modifier">static </mark>Optional&lt;String&gt; <mark class="method">getUniquePathDirectory</mark>(List&lt;String&gt; paths<mark class="modifier"><mark class="modifier">,</mark></mark> Path comparePath)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeOptional<String>*getUniquePathDirectory2g
java.nio.file.Path.toString()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaè4 è(<2j
 java.nio.file.Path.getFileName()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaè& è(12¢
Xorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaë' ë(;2ï
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javañ ñ("2m
#java.util.stream.Stream.findFirst()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaï ï((2ë
Gjava.util.stream.Stream.filter(java.util.function.Predicate<? super T>)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaì ì(%2g
java.util.Collection.stream()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaí í(%2{
1java.lang.String.contains(java.lang.CharSequence)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaìE ì(M2g
java.nio.file.Path.toString()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaì: ì(B2s
)java.lang.String.equals(java.lang.Object)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaî7 î(=2{
1java.lang.String.contains(java.lang.CharSequence)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaîP î(X2n
$java.lang.String.substring(int, int)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javañ0 ñ(92x
.java.lang.String.lastIndexOf(java.lang.String)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javañB ñ(M2ƒ
zorg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)!comparePathCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaè è(%2æ
torg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)!pathsCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaë< ë(A2◊
åorg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)?uniquePathParts@145.21:145.36CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaí í(2ƒ
zorg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)!comparePathCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaì. ì(92Ã
Åorg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)?part@147.38:147.42CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaìN ì(R2Ã
Åorg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)?part@147.38:147.42CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaî2 î(62–
Öorg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)?fileName@143.15:143.23CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaî> î(F2Ã
Åorg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)?part@147.38:147.42CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaîK î(O2Ã
Åorg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)?part@150.35:150.39CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javañ+ ñ(/2Ã
Åorg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)?part@150.35:150.39CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javañ= ñ(A2√
torg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)!paths	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaéG é(L2…
zorg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)!comparePath	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaéS é(^2◊
Öorg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)?fileName@143.15:143.23DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaè è(2ﬁ
åorg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)?uniquePathParts@145.21:145.36DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaë ë($2”
Åorg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)?part@147.38:147.42DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaì& ì(*2”
Åorg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)?part@150.35:150.39DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javañ# ñ('2c
java.util.OptionalRETURN_TYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaé é(2j
java.lang.StringRETURN_TYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaé é(!Ü
Öorg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)?fileName@143.15:143.23VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaè è("
typeString"
isFinalfalse"ã
declarationStringv<mark class="modifier"> </mark>String <mark class="class-field">fileName</mark> = comparePath.getFileName().toString()*fileName2Z
java.lang.StringTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaè è(2g
java.nio.file.Path.toString()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaè4 è(<2j
 java.nio.file.Path.getFileName()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaè& è(12ƒ
zorg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)!comparePathCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaè è(%À
åorg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)?uniquePathParts@145.21:145.36VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaë ë($"
typeList<String>"
isFinalfalse"è
declarationStringz<mark class="modifier"> </mark>List<String> <mark class="class-field">uniquePathParts</mark> = uniquePathSubstrings(paths)*uniquePathParts2X
java.util.ListTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaë ë(2c
java.lang.StringTYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaë ë(2¢
Xorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaë' ë(;2æ
torg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)!pathsCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaë< ë(A⁄
torg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)!paths	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaéG é(L"
typeList<String>"
isFinalfalse"'
declarationStringList<String> paths*paths2X
java.util.ListTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaé: é(>2c
java.lang.StringTYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaé? é(E˚
zorg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)!comparePath	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaéS é(^"
typePath"
isFinalfalse"%
declarationStringPath comparePath*comparePath2\
java.nio.file.PathTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaéN é(Rî
Åorg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)?part@147.38:147.42VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaì& ì(*"
type"
isFinalfalse"
declarationString part*part2TYPEî
Åorg.jabref.logic.util.io.FileUtil.getUniquePathDirectory(java.util.List<java.lang.String>, java.nio.file.Path)?part@150.35:150.39VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javañ# ñ('"
type"
isFinalfalse"
declarationString part*part2TYPE„
morg.jabref.logic.util.io.FileUtil.getUniquePathFragment(java.util.List<java.lang.String>, java.nio.file.Path)METHOD@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaü# ü(8"
isFinalfalse"ê
declarationString˙<mark class="modifier">public </mark><mark class="modifier">static </mark>Optional&lt;String&gt; <mark class="method">getUniquePathFragment</mark>(List&lt;String&gt; paths<mark class="modifier"><mark class="modifier">,</mark></mark> Path comparePath)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeOptional<String>*getUniquePathFragment2Ü
<java.util.stream.Stream.max(java.util.Comparator<? super T>)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¢+ ¢(.2ë
Gjava.util.stream.Stream.filter(java.util.function.Predicate<? super T>)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java°+ °(12g
java.util.Collection.stream()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java†+ †(12¢
Xorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java† †(#2{
1java.lang.String.contains(java.lang.CharSequence)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java°Q °(Y2g
java.nio.file.Path.toString()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java°F °(N2ò
Njava.util.Comparator.comparingInt(java.util.function.ToIntFunction<? super T>)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¢: ¢(F2Ω
sorg.jabref.logic.util.io.FileUtil.getUniquePathFragment(java.util.List<java.lang.String>, java.nio.file.Path)!pathsCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java†$ †()2√
yorg.jabref.logic.util.io.FileUtil.getUniquePathFragment(java.util.List<java.lang.String>, java.nio.file.Path)!comparePathCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java°: °(E2À
Äorg.jabref.logic.util.io.FileUtil.getUniquePathFragment(java.util.List<java.lang.String>, java.nio.file.Path)?part@161.50:161.54CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java°Z °(^2c
java.lang.String.length()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¢G ¢(U2¬
sorg.jabref.logic.util.io.FileUtil.getUniquePathFragment(java.util.List<java.lang.String>, java.nio.file.Path)!paths	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaüF ü(K2»
yorg.jabref.logic.util.io.FileUtil.getUniquePathFragment(java.util.List<java.lang.String>, java.nio.file.Path)!comparePath	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaüR ü(]2“
Äorg.jabref.logic.util.io.FileUtil.getUniquePathFragment(java.util.List<java.lang.String>, java.nio.file.Path)?part@161.50:161.54DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java°2 °(62c
java.util.OptionalRETURN_TYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaü ü(2j
java.lang.StringRETURN_TYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaü ü(!Ÿ
sorg.jabref.logic.util.io.FileUtil.getUniquePathFragment(java.util.List<java.lang.String>, java.nio.file.Path)!paths	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaüF ü(K"
typeList<String>"
isFinalfalse"'
declarationStringList<String> paths*paths2X
java.util.ListTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaü9 ü(=2c
java.lang.StringTYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaü> ü(D˙
yorg.jabref.logic.util.io.FileUtil.getUniquePathFragment(java.util.List<java.lang.String>, java.nio.file.Path)!comparePath	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaüR ü(]"
typePath"
isFinalfalse"%
declarationStringPath comparePath*comparePath2\
java.nio.file.PathTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaüM ü(Qì
Äorg.jabref.logic.util.io.FileUtil.getUniquePathFragment(java.util.List<java.lang.String>, java.nio.file.Path)?part@161.50:161.54VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java°2 °(6"
type"
isFinalfalse"
declarationString part*part2TYPEÎe
Xorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)METHOD@
4src\main\java\org\jabref\logic\util\io\FileUtil.java´ ´(3"
isFinalfalse"Ω
declarationStringß<mark class="modifier">public </mark><mark class="modifier">static </mark>List&lt;String&gt; <mark class="method">uniquePathSubstrings</mark>(List&lt;String&gt; paths)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeList<String>*uniquePathSubstrings2_
java.util.List.size()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¨> ¨(B2g
java.util.Arrays.asList(T...)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaØ. Ø(42r
(java.lang.String.split(java.lang.String)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaØ: Ø(?2y
/java.util.regex.Pattern.quote(java.lang.String)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaØH Ø(M2_
java.util.List.add(E)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java± ±(2o
%java.util.Collections.nCopies(int, T)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¥B ¥(I2_
java.util.List.size()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¥P ¥(T2ì
Ijava.util.stream.Stream.allMatch(java.util.function.Predicate<? super T>)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∑# ∑(+2g
java.util.Collection.stream()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∑ ∑( 2_
java.util.List.size()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∏* ∏(.2a
java.util.List.get(int)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaπ7 π(:2a
java.util.List.get(int)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaª0 ª(32d
java.lang.String.isEmpty()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaΩ# Ω(*2h
java.util.Collection.isEmpty()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaΩ7 Ω(>2_
java.util.Deque.pop()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaæ3 æ(62d
java.util.List.set(int, E)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaø# ø(&2h
java.util.Collection.isEmpty()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¿" ¿()2_
java.util.Deque.pop()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¡3 ¡(62d
java.util.List.set(int, E)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¬# ¬(&2_
java.util.List.size()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∆* ∆(.2a
java.util.List.get(int)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java«3 «(62≠
cjava.util.Collections.frequency(java.util.Collection<? extends java.lang.Object>, java.lang.Object)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java»  »()2f
java.util.Collection.clear()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java…% …(*2a
java.util.List.get(int)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java… …(!2l
"java.util.ArrayList.ArrayList(int)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¨, ¨(72ä
@java.util.ArrayList.ArrayList(java.util.Collection<? extends E>)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¥* ¥(52®
^org.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)!pathsCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¨8 ¨(=2®
^org.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)!pathsCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÆ Æ( 2µ
korg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?path@174.20:174.24CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaØ5 Ø(92º
rorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?directories@175.25:175.36CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∞3 ∞(>2∫
porg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stackList@172.28:172.37CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java± ±(2∂
lorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stack@176.26:176.31CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java± ±(2®
^org.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)!pathsCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¥J ¥(O2∫
porg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stackList@172.28:172.37CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∑ ∑(2≤
horg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?i@184.21:184.22CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∏ ∏(2∫
porg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stackList@172.28:172.37CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∏  ∏()2≤
horg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?i@184.21:184.22CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∏2 ∏(32ø
uorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?pathSubstrings@180.21:180.35CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaπ( π(62≤
horg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?i@184.21:184.22CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaπ; π(<2∫
porg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stackList@172.28:172.37CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaª& ª(/2≤
horg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?i@184.21:184.22CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaª4 ª(52ø
uorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?tempPathString@185.23:185.37CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaΩ Ω("2∂
lorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stack@187.30:187.35CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaΩ1 Ω(62∂
lorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stack@187.30:187.35CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaæ- æ(22ø
uorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?pathSubstrings@180.21:180.35CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaø ø("2≤
horg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?i@184.21:184.22CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaø' ø((2¿
vorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stringFromDeque@190.27:190.42CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaø* ø(92∂
lorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stack@187.30:187.35CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¿ ¿(!2∂
lorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stack@187.30:187.35CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¡- ¡(22ø
uorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?pathSubstrings@180.21:180.35CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¬ ¬("2≤
horg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?i@184.21:184.22CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¬' ¬((2¿
vorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stringFromStack@193.27:193.42CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¬* ¬(92ø
uorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?tempPathString@185.23:185.37CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¬M ¬([2≤
horg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?i@198.21:198.22CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∆ ∆(2∫
porg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stackList@172.28:172.37CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∆  ∆()2≤
horg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?i@198.21:198.22CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∆2 ∆(32ø
uorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?pathSubstrings@180.21:180.35CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java«$ «(22≤
horg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?i@198.21:198.22CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java«7 «(82ø
uorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?pathSubstrings@180.21:180.35CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java»* »(82ª
qorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?tempString@199.23:199.33CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java»: »(D2∫
porg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stackList@172.28:172.37CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java… …(2≤
horg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?i@198.21:198.22CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java…" …(#2ø
uorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?pathSubstrings@180.21:180.35CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÕ Õ(2h
java.util.Collection.isEmpty()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∑, ∑(:2≠
^org.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)!paths	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java´A ´(F2¡
porg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stackList@172.28:172.37DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¨ ¨(%2º
korg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?path@174.20:174.24DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÆ Æ(2√
rorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?directories@175.25:175.36DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaØ Ø($2Ω
lorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stack@176.26:176.31DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∞ ∞(2∆
uorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?pathSubstrings@180.21:180.35DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¥ ¥(#2π
horg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?i@184.21:184.22DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∏ ∏(2∆
uorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?tempPathString@185.23:185.37DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaπ π(%2Ω
lorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stack@187.30:187.35DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaª ª(#2«
vorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stringFromDeque@190.27:190.42DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaæ æ(*2«
vorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stringFromStack@193.27:193.42DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¡ ¡(*2π
horg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?i@198.21:198.22DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∆ ∆(2¬
qorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?tempString@199.23:199.33DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java« «(!2_
java.util.ListRETURN_TYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java´ ´(2j
java.lang.StringRETURN_TYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.java´ ´(™
porg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stackList@172.28:172.37VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¨ ¨(%"
typeList<Deque<String>>"
isFinalfalse"í
declarationString}<mark class="modifier"> </mark>List<Deque<String>> <mark class="class-field">stackList</mark> = new ArrayList<>(paths.size())*	stackList2X
java.util.ListTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¨ ¨(2b
java.util.DequeTYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¨ ¨(2c
java.lang.StringTYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¨ ¨(2_
java.util.List.size()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¨> ¨(B2l
"java.util.ArrayList.ArrayList(int)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¨, ¨(72®
^org.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)!pathsCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¨8 ¨(=ü
korg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?path@174.20:174.24VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÆ Æ("
typeString"
isFinalfalse"`
declarationStringK<mark class="modifier"> </mark>String <mark class="class-field">path</mark>*path2Z
java.lang.StringTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÆ Æ(
rorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?directories@175.25:175.36VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaØ Ø($"
typeList<String>"
isFinalfalse"©
declarationStringì<mark class="modifier"> </mark>List<String> <mark class="class-field">directories</mark> = Arrays.asList(path.split(Pattern.quote(File.separator)))*directories2X
java.util.ListTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaØ Ø(2c
java.lang.StringTYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaØ Ø(2g
java.util.Arrays.asList(T...)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaØ. Ø(42r
(java.lang.String.split(java.lang.String)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaØ: Ø(?2y
/java.util.regex.Pattern.quote(java.lang.String)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaØH Ø(M2µ
korg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?path@174.20:174.24CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaØ5 Ø(9ˇ
lorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stack@176.26:176.31VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∞ ∞("
typeDeque<String>"
isFinalfalse"ì
declarationString~<mark class="modifier"> </mark>Deque<String> <mark class="class-field">stack</mark> = new ArrayDeque<>(directories.reversed())*stack2Y
java.util.DequeTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∞ ∞(2c
java.lang.StringTYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∞ ∞(2º
rorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?directories@175.25:175.36CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∞3 ∞(>è	
uorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?pathSubstrings@180.21:180.35VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¥ ¥(#"
typeList<String>"
isFinalfalse"»
declarationString≤<mark class="modifier"> </mark>List<String> <mark class="class-field">pathSubstrings</mark> = new ArrayList<>(Collections.nCopies(paths.size()<mark class="modifier">,</mark> ""))*pathSubstrings2X
java.util.ListTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¥ ¥(2c
java.lang.StringTYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¥ ¥(2o
%java.util.Collections.nCopies(int, T)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¥B ¥(I2_
java.util.List.size()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¥P ¥(T2ä
@java.util.ArrayList.ArrayList(java.util.Collection<? extends E>)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¥* ¥(52®
^org.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)!pathsCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¥J ¥(O•
horg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?i@184.21:184.22VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∏ ∏("
typeint"
isFinalfalse"|
declarationStringg<mark class="modifier"> </mark><mark class="modifier">int</mark> <mark class="class-field">i</mark> = 0*i2M
intTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∏ ∏(∞
uorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?tempPathString@185.23:185.37VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaπ π(%"
typeString"
isFinalfalse"Ç
declarationStringm<mark class="modifier"> </mark>String <mark class="class-field">tempPathString</mark> = pathSubstrings.get(i)*tempPathString2Z
java.lang.StringTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaπ π(2a
java.util.List.get(int)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaπ7 π(:2ø
uorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?pathSubstrings@180.21:180.35CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaπ( π(62≤
horg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?i@184.21:184.22CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaπ; π(<¸
lorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stack@187.30:187.35VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaª ª(#"
typeDeque<String>"
isFinalfalse"{
declarationStringf<mark class="modifier"> </mark>Deque<String> <mark class="class-field">stack</mark> = stackList.get(i)*stack2Y
java.util.DequeTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaª ª(2c
java.lang.StringTYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaª ª(2a
java.util.List.get(int)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaª0 ª(32∫
porg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stackList@172.28:172.37CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaª& ª(/2≤
horg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?i@184.21:184.22CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaª4 ª(5Ë
vorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stringFromDeque@190.27:190.42VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaæ æ(*"
typeString"
isFinalfalse"y
declarationStringd<mark class="modifier"> </mark>String <mark class="class-field">stringFromDeque</mark> = stack.pop()*stringFromDeque2Z
java.lang.StringTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaæ æ(2_
java.util.Deque.pop()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaæ3 æ(62∂
lorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stack@187.30:187.35CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaæ- æ(2Ë
vorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stringFromStack@193.27:193.42VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¡ ¡(*"
typeString"
isFinalfalse"y
declarationStringd<mark class="modifier"> </mark>String <mark class="class-field">stringFromStack</mark> = stack.pop()*stringFromStack2Z
java.lang.StringTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¡ ¡(2_
java.util.Deque.pop()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¡3 ¡(62∂
lorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?stack@187.30:187.35CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¡- ¡(2•
horg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?i@198.21:198.22VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∆ ∆("
typeint"
isFinalfalse"|
declarationStringg<mark class="modifier"> </mark><mark class="modifier">int</mark> <mark class="class-field">i</mark> = 0*i2M
intTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∆ ∆(£
qorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?tempString@199.23:199.33VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java« «(!"
typeString"
isFinalfalse"~
declarationStringi<mark class="modifier"> </mark>String <mark class="class-field">tempString</mark> = pathSubstrings.get(i)*
tempString2Z
java.lang.StringTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java« «(2a
java.util.List.get(int)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java«3 «(62ø
uorg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?pathSubstrings@180.21:180.35CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java«$ «(22≤
horg.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)?i@198.21:198.22CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java«7 «(8ƒ
^org.jabref.logic.util.io.FileUtil.uniquePathSubstrings(java.util.List<java.lang.String>)!paths	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java´A ´(F"
typeList<String>"
isFinalfalse"'
declarationStringList<String> paths*paths2X
java.util.ListTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java´4 ´(82c
java.lang.StringTYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.java´9 ´(?†
[org.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)METHOD@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÿ ÿ(""
isFinalfalse"å
declarationStringˆ<mark class="modifier">public </mark><mark class="modifier">static </mark><mark class="modifier">boolean</mark> <mark class="method">copyFile</mark>(Path pathToSourceFile<mark class="modifier"><mark class="modifier">,</mark></mark> Path pathToDestinationFile<mark class="modifier"><mark class="modifier">,</mark></mark> <mark class="modifier">boolean</mark> replaceExisting)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeboolean*copyFile2ï
Kjava.nio.file.Files.exists(java.nio.file.Path, java.nio.file.LinkOption...)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java⁄ ⁄(2ï
Kjava.nio.file.Files.exists(java.nio.file.Path, java.nio.file.LinkOption...)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaﬁ ﬁ(2ú
Rjava.nio.file.Files.write(java.nio.file.Path, byte[], java.nio.file.OpenOption...)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java‰ ‰(2~
4java.nio.file.Files.readAllBytes(java.nio.file.Path)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java‰5 ‰(A2∂
lorg.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)!pathToSourceFileCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java⁄ ⁄(*2~
4org.jabref.logic.util.io.FileUtil?LOGGER@44.32:44.38CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java€ €(2ª
qorg.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)!pathToDestinationFileCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaﬁ ﬁ(.2µ
korg.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)!replaceExistingCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaﬁ4 ﬁ(C2~
4org.jabref.logic.util.io.FileUtil?LOGGER@44.32:44.38CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaﬂ ﬂ(2ª
qorg.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)!pathToDestinationFileCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java‰ ‰(-2∂
lorg.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)!pathToSourceFileCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java‰B ‰(R2~
4org.jabref.logic.util.io.FileUtil?LOGGER@44.32:44.38CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaË Ë(2µ
korg.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)?e@231.29:231.30CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaË2 Ë(32ª
lorg.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)!pathToSourceFile	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÿ( ÿ(82¿
qorg.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)!pathToDestinationFile	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÿ? ÿ(T2∫
korg.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)!replaceExisting	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÿ^ ÿ(m2º
korg.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)?e@231.29:231.30DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÁ Á(2X
booleanRETURN_TYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÿ ÿ(˜
lorg.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)!pathToSourceFile	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÿ( ÿ(8"
typePath"
isFinalfalse"*
declarationStringPath pathToSourceFile*pathToSourceFile2\
java.nio.file.PathTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÿ# ÿ('Ü
qorg.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)!pathToDestinationFile	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÿ? ÿ(T"
typePath"
isFinalfalse"/
declarationStringPath pathToDestinationFile*pathToDestinationFile2\
java.nio.file.PathTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÿ: ÿ(>ç
korg.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)!replaceExisting	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÿ^ ÿ(m"
typeboolean"
isFinalfalse"J
declarationString5<mark class="modifier">boolean</mark> replaceExisting*replaceExisting2Q
booleanTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÿV ÿ(]Ê
korg.jabref.logic.util.io.FileUtil.copyFile(java.nio.file.Path, java.nio.file.Path, boolean)?e@231.29:231.30VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÁ Á("
typeIOException"
isFinalfalse""
declarationStringIOException e*e2]
java.io.IOExceptionTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÁ Á(¸
dorg.jabref.logic.util.io.FileUtil.relativize(java.nio.file.Path, java.util.List<java.nio.file.Path>)METHOD@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˜ ˜(!"
isFinalfalse"
declarationString⁄<mark class="modifier">public </mark><mark class="modifier">static </mark>Path <mark class="method">relativize</mark>(Path file<mark class="modifier"><mark class="modifier">,</mark></mark> List&lt;Path&gt; directories)"
isStatictrue"
accesspublic"

isAbstractfalse"
typePath*
relativize2i
java.nio.file.Path.isAbsolute()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¯ ¯(2{
1java.nio.file.Path.startsWith(java.nio.file.Path)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˝ ˝(2{
1java.nio.file.Path.relativize(java.nio.file.Path)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˛! ˛(+2≥
iorg.jabref.logic.util.io.FileUtil.relativize(java.nio.file.Path, java.util.List<java.nio.file.Path>)!fileCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¯ ¯(2≥
iorg.jabref.logic.util.io.FileUtil.relativize(java.nio.file.Path, java.util.List<java.nio.file.Path>)!fileCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˘ ˘(2∫
porg.jabref.logic.util.io.FileUtil.relativize(java.nio.file.Path, java.util.List<java.nio.file.Path>)!directoriesCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¸ ¸()2≥
iorg.jabref.logic.util.io.FileUtil.relativize(java.nio.file.Path, java.util.List<java.nio.file.Path>)!fileCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˝ ˝(2∆
|org.jabref.logic.util.io.FileUtil.relativize(java.nio.file.Path, java.util.List<java.nio.file.Path>)?directory@252.18:252.27CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˝  ˝()2∆
|org.jabref.logic.util.io.FileUtil.relativize(java.nio.file.Path, java.util.List<java.nio.file.Path>)?directory@252.18:252.27CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˛ ˛( 2≥
iorg.jabref.logic.util.io.FileUtil.relativize(java.nio.file.Path, java.util.List<java.nio.file.Path>)!fileCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˛, ˛(02≥
iorg.jabref.logic.util.io.FileUtil.relativize(java.nio.file.Path, java.util.List<java.nio.file.Path>)!fileCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÅ Å(2∏
iorg.jabref.logic.util.io.FileUtil.relativize(java.nio.file.Path, java.util.List<java.nio.file.Path>)!file	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˜' ˜(+2ø
porg.jabref.logic.util.io.FileUtil.relativize(java.nio.file.Path, java.util.List<java.nio.file.Path>)!directories	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˜8 ˜(C2Õ
|org.jabref.logic.util.io.FileUtil.relativize(java.nio.file.Path, java.util.List<java.nio.file.Path>)?directory@252.18:252.27DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¸ ¸(2c
java.nio.file.PathRETURN_TYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˜ ˜(∏
|org.jabref.logic.util.io.FileUtil.relativize(java.nio.file.Path, java.util.List<java.nio.file.Path>)?directory@252.18:252.27VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¸ ¸("
typePath"
isFinalfalse"c
declarationStringN<mark class="modifier"> </mark>Path <mark class="class-field">directory</mark>*	directory2\
java.nio.file.PathTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¸ ¸(‹
iorg.jabref.logic.util.io.FileUtil.relativize(java.nio.file.Path, java.util.List<java.nio.file.Path>)!file	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˜' ˜(+"
typePath"
isFinalfalse"
declarationString	Path file*file2\
java.nio.file.PathTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˜" ˜(&‡
porg.jabref.logic.util.io.FileUtil.relativize(java.nio.file.Path, java.util.List<java.nio.file.Path>)!directories	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˜8 ˜(C"
type
List<Path>"
isFinalfalse"+
declarationStringList<Path> directories*directories2X
java.util.ListTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˜- ˜(12e
java.nio.file.PathTYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˜2 ˜(6Ô#
ãorg.jabref.logic.util.io.FileUtil.getListOfLinkedFiles(java.util.List<org.jabref.model.entry.BibEntry>, java.util.List<java.nio.file.Path>)METHOD@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaã ã(1"
isFinalfalse"í
declarationString¸<mark class="modifier">public </mark><mark class="modifier">static </mark>List&lt;Path&gt; <mark class="method">getListOfLinkedFiles</mark>(List&lt;BibEntry&gt; bes<mark class="modifier"><mark class="modifier">,</mark></mark> List&lt;Path&gt; fileDirs)"
isStatictrue"
accesspublic"

isAbstractfalse"
type
List<Path>*getListOfLinkedFiles2m
#java.util.Objects.requireNonNull(T)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaå å(2m
#java.util.Objects.requireNonNull(T)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaç ç(2ñ
Ljava.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaí í(2¡
wjava.util.stream.Stream.flatMap(java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaë ë(2¡
wjava.util.stream.Stream.flatMap(java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaê ê(2g
java.util.Collection.stream()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaè è(2g
java.util.Collection.stream()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaê5 ê(;2t
*org.jabref.model.entry.BibEntry.getFiles()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaê* ê(22e
java.util.Optional.stream()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaë9 ë(?2ñ
Lorg.jabref.model.entry.LinkedFile.findIn(java.util.List<java.nio.file.Path>)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaë( ë(.2n
$java.util.stream.Collectors.toList()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaí& í(,2⁄
èorg.jabref.logic.util.io.FileUtil.getListOfLinkedFiles(java.util.List<org.jabref.model.entry.BibEntry>, java.util.List<java.nio.file.Path>)!besCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaå å("2ﬂ
îorg.jabref.logic.util.io.FileUtil.getListOfLinkedFiles(java.util.List<org.jabref.model.entry.BibEntry>, java.util.List<java.nio.file.Path>)!fileDirsCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaç ç('2⁄
èorg.jabref.logic.util.io.FileUtil.getListOfLinkedFiles(java.util.List<org.jabref.model.entry.BibEntry>, java.util.List<java.nio.file.Path>)!besCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaè è(2Í
üorg.jabref.logic.util.io.FileUtil.getListOfLinkedFiles(java.util.List<org.jabref.model.entry.BibEntry>, java.util.List<java.nio.file.Path>)?entry@272.27:272.32CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaê$ ê()2È
ûorg.jabref.logic.util.io.FileUtil.getListOfLinkedFiles(java.util.List<org.jabref.model.entry.BibEntry>, java.util.List<java.nio.file.Path>)?file@273.27:273.31CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaë# ë('2ﬂ
îorg.jabref.logic.util.io.FileUtil.getListOfLinkedFiles(java.util.List<org.jabref.model.entry.BibEntry>, java.util.List<java.nio.file.Path>)!fileDirsCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaë/ ë(72ﬂ
èorg.jabref.logic.util.io.FileUtil.getListOfLinkedFiles(java.util.List<org.jabref.model.entry.BibEntry>, java.util.List<java.nio.file.Path>)!bes	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaãA ã(D2‰
îorg.jabref.logic.util.io.FileUtil.getListOfLinkedFiles(java.util.List<org.jabref.model.entry.BibEntry>, java.util.List<java.nio.file.Path>)!fileDirs	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaãQ ã(Y2Ò
üorg.jabref.logic.util.io.FileUtil.getListOfLinkedFiles(java.util.List<org.jabref.model.entry.BibEntry>, java.util.List<java.nio.file.Path>)?entry@272.27:272.32DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaê ê( 2
ûorg.jabref.logic.util.io.FileUtil.getListOfLinkedFiles(java.util.List<org.jabref.model.entry.BibEntry>, java.util.List<java.nio.file.Path>)?file@273.27:273.31DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaë ë(2_
java.util.ListRETURN_TYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaã ã(2l
java.nio.file.PathRETURN_TYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaã ã(Ö
èorg.jabref.logic.util.io.FileUtil.getListOfLinkedFiles(java.util.List<org.jabref.model.entry.BibEntry>, java.util.List<java.nio.file.Path>)!bes	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaãA ã(D"
typeList<BibEntry>"
isFinalfalse"'
declarationStringList<BibEntry> bes*bes2X
java.util.ListTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaã2 ã(62r
org.jabref.model.entry.BibEntryTYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaã7 ã(?ˇ
îorg.jabref.logic.util.io.FileUtil.getListOfLinkedFiles(java.util.List<org.jabref.model.entry.BibEntry>, java.util.List<java.nio.file.Path>)!fileDirs	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaãQ ã(Y"
type
List<Path>"
isFinalfalse"(
declarationStringList<Path> fileDirs*fileDirs2X
java.util.ListTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaãF ã(J2e
java.nio.file.PathTYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaãK ã(O¥
üorg.jabref.logic.util.io.FileUtil.getListOfLinkedFiles(java.util.List<org.jabref.model.entry.BibEntry>, java.util.List<java.nio.file.Path>)?entry@272.27:272.32VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaê ê( "
type"
isFinalfalse"
declarationString entry*entry2TYPE±
ûorg.jabref.logic.util.io.FileUtil.getListOfLinkedFiles(java.util.List<org.jabref.model.entry.BibEntry>, java.util.List<java.nio.file.Path>)?file@273.27:273.31VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaë ë("
type"
isFinalfalse"
declarationString file*file2TYPEÊ$
ïorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)METHOD@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaù ù(2"
isFinalfalse"“
declarationStringº<mark class="modifier">public </mark><mark class="modifier">static </mark>String <mark class="method">createFileNameFromPattern</mark>(BibDatabase database<mark class="modifier"><mark class="modifier">,</mark></mark> BibEntry entry<mark class="modifier"><mark class="modifier">,</mark></mark> String fileNamePattern)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeString*createFileNameFromPattern2˝
≤org.jabref.logic.citationkeypattern.BracketedPattern.expandBrackets(java.lang.String, java.lang.Character, org.jabref.model.entry.BibEntry, org.jabref.model.database.BibDatabase)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaû- û(;2d
java.lang.String.isEmpty()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java† †(2f
java.util.Optional.orElse(T)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java°0 °(62z
0org.jabref.model.entry.BibEntry.getCitationKey()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java° °(-2í
Horg.jabref.logic.util.io.FileNameCleaner.cleanFileName(java.lang.String)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java•% •(22
•org.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!fileNamePatternCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaû< û(K2Ê
õorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!entryCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaûR û(W2È
ûorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!databaseCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaûY û(a2˘
Æorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)?targetName@286.15:286.25CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java† †(2˘
Æorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)?targetName@286.15:286.25CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java° °(2Ê
õorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!entryCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java° °(2˘
Æorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)?targetName@286.15:286.25CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java• •(2˘
Æorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)?targetName@286.15:286.25CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java•3 •(=2˘
Æorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)?targetName@286.15:286.25CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¶ ¶(2Ó
ûorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!database	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaù? ù(G2Î
õorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!entry	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaùR ù(W2ı
•org.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!fileNamePattern	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaù` ù(o2Ä
Æorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)?targetName@286.15:286.25DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaû û(2a
java.lang.StringRETURN_TYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaù ù(†
Æorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)?targetName@286.15:286.25VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaû û("
typeString"
isFinalfalse"Œ
declarationString∏<mark class="modifier"> </mark>String <mark class="class-field">targetName</mark> = BracketedPattern.expandBrackets(fileNamePattern, ';'<mark class="modifier">,</mark> entry, database)*
targetName2Z
java.lang.StringTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaû û(2˝
≤org.jabref.logic.citationkeypattern.BracketedPattern.expandBrackets(java.lang.String, java.lang.Character, org.jabref.model.entry.BibEntry, org.jabref.model.database.BibDatabase)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaû- û(;2
•org.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!fileNamePatternCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaû< û(K2Ê
õorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!entryCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaûR û(W2È
ûorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!databaseCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaûY û(aª
ûorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!database	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaù? ù(G"
typeBibDatabase"
isFinalfalse")
declarationStringBibDatabase database*database2o
%org.jabref.model.database.BibDatabaseTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaù3 ù(>¶
õorg.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!entry	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaùR ù(W"
typeBibEntry"
isFinalfalse"#
declarationStringBibEntry entry*entry2i
org.jabref.model.entry.BibEntryTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaùI ù(Q±
•org.jabref.logic.util.io.FileUtil.createFileNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!fileNamePattern	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaù` ù(o"
typeString"
isFinalfalse"+
declarationStringString fileNamePattern*fileNamePattern2Z
java.lang.StringTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaùY ù(_û!
îorg.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)METHOD@
4src\main\java\org\jabref\logic\util\io\FileUtil.java± ±(1"
isFinalfalse"÷
declarationString¿<mark class="modifier">public </mark><mark class="modifier">static </mark>String <mark class="method">createDirNameFromPattern</mark>(BibDatabase database<mark class="modifier"><mark class="modifier">,</mark></mark> BibEntry entry<mark class="modifier"><mark class="modifier">,</mark></mark> String directoryNamePattern)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeString*createDirNameFromPattern2˝
≤org.jabref.logic.citationkeypattern.BracketedPattern.expandBrackets(java.lang.String, java.lang.Character, org.jabref.model.entry.BibEntry, org.jabref.model.database.BibDatabase)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java≤- ≤(;2d
java.lang.String.isEmpty()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¥ ¥(2ó
Morg.jabref.logic.util.io.FileNameCleaner.cleanDirectoryName(java.lang.String)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaπ% π(72Ù
©org.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!directoryNamePatternCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java≤< ≤(P2Â
öorg.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!entryCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java≤W ≤(\2Ë
ùorg.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!databaseCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java≤^ ≤(f2¯
≠org.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)?targetName@306.15:306.25CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¥ ¥(2¯
≠org.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)?targetName@306.15:306.25CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaµ µ(2¯
≠org.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)?targetName@306.15:306.25CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaπ π(2¯
≠org.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)?targetName@306.15:306.25CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaπ8 π(B2¯
≠org.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)?targetName@306.15:306.25CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaª ª(2Ì
ùorg.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!database	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java±> ±(F2Í
öorg.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!entry	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java±Q ±(V2˘
©org.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!directoryNamePattern	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java±_ ±(s2ˇ
≠org.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)?targetName@306.15:306.25DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java≤ ≤(2a
java.lang.StringRETURN_TYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java± ±(¶
≠org.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)?targetName@306.15:306.25VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java≤ ≤("
typeString"
isFinalfalse"”
declarationStringΩ<mark class="modifier"> </mark>String <mark class="class-field">targetName</mark> = BracketedPattern.expandBrackets(directoryNamePattern, ';'<mark class="modifier">,</mark> entry, database)*
targetName2Z
java.lang.StringTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java≤ ≤(2˝
≤org.jabref.logic.citationkeypattern.BracketedPattern.expandBrackets(java.lang.String, java.lang.Character, org.jabref.model.entry.BibEntry, org.jabref.model.database.BibDatabase)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java≤- ≤(;2Ù
©org.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!directoryNamePatternCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java≤< ≤(P2Â
öorg.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!entryCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java≤W ≤(\2Ë
ùorg.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!databaseCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java≤^ ≤(f∫
ùorg.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!database	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java±> ±(F"
typeBibDatabase"
isFinalfalse")
declarationStringBibDatabase database*database2o
%org.jabref.model.database.BibDatabaseTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java±2 ±(=•
öorg.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!entry	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java±Q ±(V"
typeBibEntry"
isFinalfalse"#
declarationStringBibEntry entry*entry2i
org.jabref.model.entry.BibEntryTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java±H ±(Pø
©org.jabref.logic.util.io.FileUtil.createDirNameFromPattern(org.jabref.model.database.BibDatabase, org.jabref.model.entry.BibEntry, java.lang.String)!directoryNamePattern	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java±_ ±(s"
typeString"
isFinalfalse"0
declarationStringString directoryNamePattern*directoryNamePattern2Z
java.lang.StringTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java±X ±(^Œ 
aorg.jabref.logic.util.io.FileUtil.findSingleFileRecursively(java.lang.String, java.nio.file.Path)METHOD@
4src\main\java\org\jabref\logic\util\io\FileUtil.java≈! ≈(:"
isFinalfalse"ã
declarationStringı<mark class="modifier">public </mark><mark class="modifier">static </mark>Optional&lt;Path&gt; <mark class="method">findSingleFileRecursively</mark>(String filename<mark class="modifier"><mark class="modifier">,</mark></mark> Path rootDirectory)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeOptional<Path>*findSingleFileRecursively2ò
Njava.nio.file.Files.walk(java.nio.file.Path, java.nio.file.FileVisitOption...)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∆- ∆(12m
#java.util.stream.Stream.findFirst()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java   ('2ë
Gjava.util.stream.Stream.filter(java.util.function.Predicate<? super T>)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java… …($2ë
Gjava.util.stream.Stream.filter(java.util.function.Predicate<? super T>)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java» »($2s
)java.lang.String.equals(java.lang.Object)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java…E …(K2g
java.nio.file.Path.toString()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java…: …(B2j
 java.nio.file.Path.getFileName()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java…, …(72d
java.util.Optional.empty()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaŒ Œ(2π
oorg.jabref.logic.util.io.FileUtil.findSingleFileRecursively(java.lang.String, java.nio.file.Path)!rootDirectoryCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∆2 ∆(?2ƒ
zorg.jabref.logic.util.io.FileUtil.findSingleFileRecursively(java.lang.String, java.nio.file.Path)?pathStream@326.26:326.36CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java« «(2ª
qorg.jabref.logic.util.io.FileUtil.findSingleFileRecursively(java.lang.String, java.nio.file.Path)?f@329.37:329.38CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java…* …(+2¥
jorg.jabref.logic.util.io.FileUtil.findSingleFileRecursively(java.lang.String, java.nio.file.Path)!filenameCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java…L …(T2~
4org.jabref.logic.util.io.FileUtil?LOGGER@44.32:44.38CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÃ Ã(2¥
jorg.jabref.logic.util.io.FileUtil.findSingleFileRecursively(java.lang.String, java.nio.file.Path)!filenameCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÃ> Ã(F2π
oorg.jabref.logic.util.io.FileUtil.findSingleFileRecursively(java.lang.String, java.nio.file.Path)!rootDirectoryCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÃd Ã(q2ú
Rjava.nio.file.Files.isRegularFile(java.nio.file.Path, java.nio.file.LinkOption...)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java»% »(92π
jorg.jabref.logic.util.io.FileUtil.findSingleFileRecursively(java.lang.String, java.nio.file.Path)!filename	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java≈B ≈(J2æ
oorg.jabref.logic.util.io.FileUtil.findSingleFileRecursively(java.lang.String, java.nio.file.Path)!rootDirectory	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java≈Q ≈(^2À
zorg.jabref.logic.util.io.FileUtil.findSingleFileRecursively(java.lang.String, java.nio.file.Path)?pathStream@326.26:326.36DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∆ ∆($2¬
qorg.jabref.logic.util.io.FileUtil.findSingleFileRecursively(java.lang.String, java.nio.file.Path)?f@329.37:329.38DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java…% …(&2√
rorg.jabref.logic.util.io.FileUtil.findSingleFileRecursively(java.lang.String, java.nio.file.Path)?ex@331.52:331.54DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÀ4 À(62c
java.util.OptionalRETURN_TYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java≈ ≈(2l
java.nio.file.PathRETURN_TYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.java≈ ≈(®
zorg.jabref.logic.util.io.FileUtil.findSingleFileRecursively(java.lang.String, java.nio.file.Path)?pathStream@326.26:326.36VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∆ ∆($"
typeStream<Path>"
isFinalfalse"à
declarationStrings<mark class="modifier"> </mark>Stream<Path> <mark class="class-field">pathStream</mark> = Files.walk(rootDirectory)*
pathStream2a
java.util.stream.StreamTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∆ ∆(2e
java.nio.file.PathTYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∆ ∆(2ò
Njava.nio.file.Files.walk(java.nio.file.Path, java.nio.file.FileVisitOption...)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∆- ∆(12π
oorg.jabref.logic.util.io.FileUtil.findSingleFileRecursively(java.lang.String, java.nio.file.Path)!rootDirectoryCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∆2 ∆(?Á
jorg.jabref.logic.util.io.FileUtil.findSingleFileRecursively(java.lang.String, java.nio.file.Path)!filename	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java≈B ≈(J"
typeString"
isFinalfalse"$
declarationStringString filename*filename2Z
java.lang.StringTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java≈; ≈(AÙ
oorg.jabref.logic.util.io.FileUtil.findSingleFileRecursively(java.lang.String, java.nio.file.Path)!rootDirectory	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java≈Q ≈(^"
typePath"
isFinalfalse"'
declarationStringPath rootDirectory*rootDirectory2\
java.nio.file.PathTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java≈L ≈(P˝
qorg.jabref.logic.util.io.FileUtil.findSingleFileRecursively(java.lang.String, java.nio.file.Path)?f@329.37:329.38VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java…% …(&"
type"
isFinalfalse"
declarationString f*f2TYPEº
rorg.jabref.logic.util.io.FileUtil.findSingleFileRecursively(java.lang.String, java.nio.file.Path)?ex@331.52:331.54VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÀ4 À(6"*
type"UncheckedIOException | IOException"
isFinalfalse":
declarationString%UncheckedIOException | IOException ex*ex2|
2java.io.UncheckedIOException | java.io.IOExceptionTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÀ À(3–
éorg.jabref.logic.util.io.FileUtil.find(org.jabref.model.database.BibDatabaseContext, java.lang.String, org.jabref.preferences.FilePreferences)METHOD@
4src\main\java\org\jabref\logic\util\io\FileUtil.java—! —(%"
isFinalfalse"È
declarationString”<mark class="modifier">public </mark><mark class="modifier">static </mark>Optional&lt;Path&gt; <mark class="method">find</mark>(final BibDatabaseContext databaseContext<mark class="modifier"><mark class="modifier">,</mark></mark> String fileName<mark class="modifier"><mark class="modifier">,</mark></mark> FilePreferences filePreferences)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeOptional<Path>*find2
5java.util.Objects.requireNonNull(T, java.lang.String)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java“ “(2¶
\org.jabref.logic.util.io.FileUtil.find(java.lang.String, java.util.List<java.nio.file.Path>)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java” ”(2±
gorg.jabref.model.database.BibDatabaseContext.getFileDirectories(org.jabref.preferences.FilePreferences)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java”. ”(@2‚
óorg.jabref.logic.util.io.FileUtil.find(org.jabref.model.database.BibDatabaseContext, java.lang.String, org.jabref.preferences.FilePreferences)!fileNameCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java“ “('2‚
óorg.jabref.logic.util.io.FileUtil.find(org.jabref.model.database.BibDatabaseContext, java.lang.String, org.jabref.preferences.FilePreferences)!fileNameCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java” ”(2È
ûorg.jabref.logic.util.io.FileUtil.find(org.jabref.model.database.BibDatabaseContext, java.lang.String, org.jabref.preferences.FilePreferences)!databaseContextCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java” ”(-2È
ûorg.jabref.logic.util.io.FileUtil.find(org.jabref.model.database.BibDatabaseContext, java.lang.String, org.jabref.preferences.FilePreferences)!filePreferencesCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java”A ”(P2Ó
ûorg.jabref.logic.util.io.FileUtil.find(org.jabref.model.database.BibDatabaseContext, java.lang.String, org.jabref.preferences.FilePreferences)!databaseContext	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java—? —(N2Á
óorg.jabref.logic.util.io.FileUtil.find(org.jabref.model.database.BibDatabaseContext, java.lang.String, org.jabref.preferences.FilePreferences)!fileName	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java—W —(_2Ô
ûorg.jabref.logic.util.io.FileUtil.find(org.jabref.model.database.BibDatabaseContext, java.lang.String, org.jabref.preferences.FilePreferences)!filePreferences	PARAMETERA
4src\main\java\org\jabref\logic\util\io\FileUtil.java—q —(Ä2c
java.util.OptionalRETURN_TYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java— —(2l
java.nio.file.PathRETURN_TYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.java— —(›
ûorg.jabref.logic.util.io.FileUtil.find(org.jabref.model.database.BibDatabaseContext, java.lang.String, org.jabref.preferences.FilePreferences)!databaseContext	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java—? —(N"
typeBibDatabaseContext"
isFinaltrue"7
declarationString"BibDatabaseContext databaseContext*databaseContext2v
,org.jabref.model.database.BibDatabaseContextTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java—, —(>ï
óorg.jabref.logic.util.io.FileUtil.find(org.jabref.model.database.BibDatabaseContext, java.lang.String, org.jabref.preferences.FilePreferences)!fileName	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java—W —(_"
typeString"
isFinalfalse"$
declarationStringString fileName*fileName2Z
java.lang.StringTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java—P —(V”
ûorg.jabref.logic.util.io.FileUtil.find(org.jabref.model.database.BibDatabaseContext, java.lang.String, org.jabref.preferences.FilePreferences)!filePreferences	PARAMETERA
4src\main\java\org\jabref\logic\util\io\FileUtil.java—q —(Ä"
typeFilePreferences"
isFinalfalse"4
declarationStringFilePreferences filePreferences*filePreferences2p
&org.jabref.preferences.FilePreferencesTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java—a —(p®
\org.jabref.logic.util.io.FileUtil.find(java.lang.String, java.util.List<java.nio.file.Path>)METHOD@
4src\main\java\org\jabref\logic\util\io\FileUtil.java›! ›(%"
isFinalfalse"Ä
declarationStringÍ<mark class="modifier">public </mark><mark class="modifier">static </mark>Optional&lt;Path&gt; <mark class="method">find</mark>(String fileName<mark class="modifier"><mark class="modifier">,</mark></mark> List&lt;Path&gt; directories)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeOptional<Path>*find2b
java.util.List.isEmpty()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaﬁ ﬁ(2Ü
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java‡ ‡(2i
java.nio.file.Path.isAbsolute()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java· ·(2b
java.util.Optional.of(T)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java‚  ‚("2d
java.util.Optional.empty()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java‰  ‰(%2m
#java.util.stream.Stream.findFirst()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÍ Í($2¡
wjava.util.stream.Stream.flatMap(java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÈ È("2g
java.util.Collection.stream()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaË Ë(!2e
java.util.Optional.stream()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÈJ È(P2ñ
Lorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÈ0 È(42≤
horg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.util.List<java.nio.file.Path>)!directoriesCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaﬁ ﬁ(2Ø
eorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.util.List<java.nio.file.Path>)!fileNameCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java‡  ‡((2π
oorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.util.List<java.nio.file.Path>)?path@352.17:352.21CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java· ·(2π
oorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.util.List<java.nio.file.Path>)?path@352.17:352.21CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java‚# ‚('2≤
horg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.util.List<java.nio.file.Path>)!directoriesCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaË Ë(2Ø
eorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.util.List<java.nio.file.Path>)!fileNameCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÈ5 È(=2æ
torg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.util.List<java.nio.file.Path>)?directory@361.35:361.44CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÈ? È(H2¥
eorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.util.List<java.nio.file.Path>)!fileName	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java›- ›(52∑
horg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.util.List<java.nio.file.Path>)!directories	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java›B ›(M2¿
oorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.util.List<java.nio.file.Path>)?path@352.17:352.21DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java‡ ‡(2≈
torg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.util.List<java.nio.file.Path>)?directory@361.35:361.44DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÈ# È(,2c
java.util.OptionalRETURN_TYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java› ›(2l
java.nio.file.PathRETURN_TYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.java› ›(
oorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.util.List<java.nio.file.Path>)?path@352.17:352.21VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java‡ ‡("
typePath"
isFinalfalse"r
declarationString]<mark class="modifier"> </mark>Path <mark class="class-field">path</mark> = Path.of(fileName)*path2\
java.nio.file.PathTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java‡ ‡(2Ü
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java‡ ‡(2Ø
eorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.util.List<java.nio.file.Path>)!fileNameCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java‡  ‡((‚
eorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.util.List<java.nio.file.Path>)!fileName	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java›- ›(5"
typeString"
isFinalfalse"$
declarationStringString fileName*fileName2Z
java.lang.StringTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java›& ›(,ÿ
horg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.util.List<java.nio.file.Path>)!directories	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java›B ›(M"
type
List<Path>"
isFinalfalse"+
declarationStringList<Path> directories*directories2X
java.util.ListTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java›7 ›(;2e
java.nio.file.PathTYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.java›< ›(@ê
torg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.util.List<java.nio.file.Path>)?directory@361.35:361.44VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÈ# È(,"
type"
isFinalfalse"
declarationString
 directory*	directory2TYPE¥2
Lorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)METHOD@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaı! ı(%"
isFinalfalse"Ú
declarationString‹<mark class="modifier">public </mark><mark class="modifier">static </mark>Optional&lt;Path&gt; <mark class="method">find</mark>(String fileName<mark class="modifier"><mark class="modifier">,</mark></mark> Path directory)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeOptional<Path>*find2m
#java.util.Objects.requireNonNull(T)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaˆ ˆ(2m
#java.util.Objects.requireNonNull(T)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˜ ˜(2è
Eorg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˘ ˘(2d
java.util.Optional.empty()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˚ ˚(!2d
java.lang.String.isEmpty()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÄ Ä(2b
java.util.Optional.of(T)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÅ Å(2v
,java.nio.file.Path.resolve(java.lang.String)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÑ& Ñ(-2ï
Kjava.nio.file.Files.exists(java.nio.file.Path, java.nio.file.LinkOption...)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÖ Ö(2b
java.util.Optional.of(T)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÜ Ü(2g
java.nio.file.Path.toString()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaã= ã(E2j
 java.nio.file.Path.getFileName()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaã/ ã(:2w
-java.lang.String.startsWith(java.lang.String)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaå å(2}
3java.nio.file.Path.resolveSibling(java.lang.String)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaç% ç(32ï
Kjava.nio.file.Files.exists(java.nio.file.Path, java.nio.file.LinkOption...)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaê ê(2b
java.util.Optional.of(T)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaë ë(2d
java.util.Optional.empty()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaì ì(!2ü
Uorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)!fileNameCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaˆ ˆ('2†
Vorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)!directoryCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˜ ˜((2ü
Uorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)!fileNameCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˘ ˘(&2~
4org.jabref.logic.util.io.FileUtil?LOGGER@44.32:44.38CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˙ ˙(2ü
Uorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)!fileNameCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java˙D ˙(L2ü
Uorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)!fileNameCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÄ Ä(2†
Vorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)!directoryCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÅ Å((2†
Vorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)!directoryCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÑ Ñ(%2ü
Uorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)!fileNameCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÑ. Ñ(62±
gorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)?resolvedFile@388.13:388.25CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÖ Ö(%2±
gorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)?resolvedFile@388.13:388.25CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÜ Ü(+2†
Vorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)!directoryCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaã% ã(.2ü
Uorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)!fileNameCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaå å(2∏
norg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)?furthestDirFromRoot@395.15:395.34CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaå  å(32±
gorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)?resolvedFile@388.13:388.25CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaç ç(2†
Vorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)!directoryCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaç ç($2ü
Uorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)!fileNameCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaç4 ç(<2±
gorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)?resolvedFile@388.13:388.25CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaê ê(%2±
gorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)?resolvedFile@388.13:388.25CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaë ë(+2§
Uorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)!fileName	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaı- ı(52•
Vorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)!directory	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaı< ı(E2∏
gorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)?resolvedFile@388.13:388.25DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÑ Ñ(2ø
norg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)?furthestDirFromRoot@395.15:395.34DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaã ã("2c
java.util.OptionalRETURN_TYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaı ı(2l
java.nio.file.PathRETURN_TYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaı ı(Ö
gorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)?resolvedFile@388.13:388.25VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÑ Ñ("
typePath"
isFinalfalse"Ñ
declarationStringo<mark class="modifier"> </mark>Path <mark class="class-field">resolvedFile</mark> = directory.resolve(fileName)*resolvedFile2\
java.nio.file.PathTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÑ Ñ(2v
,java.nio.file.Path.resolve(java.lang.String)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÑ& Ñ(-2†
Vorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)!directoryCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÑ Ñ(%2ü
Uorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)!fileNameCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÑ. Ñ(6ﬁ
norg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)?furthestDirFromRoot@395.15:395.34VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaã ã(""
typeString"
isFinalfalse"î
declarationString<mark class="modifier"> </mark>String <mark class="class-field">furthestDirFromRoot</mark> = directory.getFileName().toString()*furthestDirFromRoot2Z
java.lang.StringTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaã ã(2g
java.nio.file.Path.toString()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaã= ã(E2j
 java.nio.file.Path.getFileName()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaã/ ã(:2†
Vorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)!directoryCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaã% ã(.“
Uorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)!fileName	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaı- ı(5"
typeString"
isFinalfalse"$
declarationStringString fileName*fileName2Z
java.lang.StringTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaı& ı(,”
Vorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)!directory	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaı< ı(E"
typePath"
isFinalfalse"#
declarationStringPath directory*	directory2\
java.nio.file.PathTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaı7 ı(;†
gorg.jabref.logic.util.io.FileUtil.findListOfFiles(java.lang.String, java.util.List<java.nio.file.Path>)METHOD@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaû û(,"
isFinalfalse"á
declarationStringÒ<mark class="modifier">public </mark><mark class="modifier">static </mark>List&lt;Path&gt; <mark class="method">findListOfFiles</mark>(String filename<mark class="modifier"><mark class="modifier">,</mark></mark> List&lt;Path&gt; directories)"
isStatictrue"
accesspublic"

isAbstractfalse"
type
List<Path>*findListOfFiles2é
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java°) °(22ñ
Lorg.jabref.logic.util.io.FileUtil.find(java.lang.String, java.nio.file.Path)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java° °(2i
java.util.ArrayList.ArrayList()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaü ü(*2Ω
sorg.jabref.logic.util.io.FileUtil.findListOfFiles(java.lang.String, java.util.List<java.nio.file.Path>)!directoriesCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java† †(#2∫
porg.jabref.logic.util.io.FileUtil.findListOfFiles(java.lang.String, java.util.List<java.nio.file.Path>)!filenameCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java° °("2√
yorg.jabref.logic.util.io.FileUtil.findListOfFiles(java.lang.String, java.util.List<java.nio.file.Path>)?dir@416.18:416.21CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java°$ °('2≈
{org.jabref.logic.util.io.FileUtil.findListOfFiles(java.lang.String, java.util.List<java.nio.file.Path>)?files@415.19:415.24CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java£ £(2_
java.util.List.add(E)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java°3 °(=2ø
porg.jabref.logic.util.io.FileUtil.findListOfFiles(java.lang.String, java.util.List<java.nio.file.Path>)!filename	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaû4 û(<2¬
sorg.jabref.logic.util.io.FileUtil.findListOfFiles(java.lang.String, java.util.List<java.nio.file.Path>)!directories	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaûI û(T2Ã
{org.jabref.logic.util.io.FileUtil.findListOfFiles(java.lang.String, java.util.List<java.nio.file.Path>)?files@415.19:415.24DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaü ü(2 
yorg.jabref.logic.util.io.FileUtil.findListOfFiles(java.lang.String, java.util.List<java.nio.file.Path>)?dir@416.18:416.21DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java† †(2_
java.util.ListRETURN_TYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaû û(2l
java.nio.file.PathRETURN_TYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaû û(ù
{org.jabref.logic.util.io.FileUtil.findListOfFiles(java.lang.String, java.util.List<java.nio.file.Path>)?files@415.19:415.24VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaü ü("
type
List<Path>"
isFinalfalse"y
declarationStringd<mark class="modifier"> </mark>List<Path> <mark class="class-field">files</mark> = new ArrayList<>()*files2X
java.util.ListTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaü ü(2e
java.nio.file.PathTYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaü ü(2i
java.util.ArrayList.ArrayList()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaü ü(*©
yorg.jabref.logic.util.io.FileUtil.findListOfFiles(java.lang.String, java.util.List<java.nio.file.Path>)?dir@416.18:416.21VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java† †("
typePath"
isFinalfalse"]
declarationStringH<mark class="modifier"> </mark>Path <mark class="class-field">dir</mark>*dir2\
java.nio.file.PathTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java† †(Ì
porg.jabref.logic.util.io.FileUtil.findListOfFiles(java.lang.String, java.util.List<java.nio.file.Path>)!filename	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaû4 û(<"
typeString"
isFinalfalse"$
declarationStringString filename*filename2Z
java.lang.StringTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaû- û(3„
sorg.jabref.logic.util.io.FileUtil.findListOfFiles(java.lang.String, java.util.List<java.nio.file.Path>)!directories	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaûI û(T"
type
List<Path>"
isFinalfalse"+
declarationStringList<Path> directories*directories2X
java.util.ListTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaû> û(B2e
java.nio.file.PathTYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaûC û(Gë
Forg.jabref.logic.util.io.FileUtil.toPortableString(java.nio.file.Path)METHOD@
4src\main\java\org\jabref\logic\util\io\FileUtil.java™ ™()"
isFinalfalse"û
declarationStringà<mark class="modifier">public </mark><mark class="modifier">static </mark>String <mark class="method">toPortableString</mark>(Path path)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeString*toPortableString2n
$java.lang.String.replace(char, char)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¨ ¨(2g
java.nio.file.Path.toString()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java´ ´(2ï
Korg.jabref.logic.util.io.FileUtil.toPortableString(java.nio.file.Path)!pathCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java´ ´(2ö
Korg.jabref.logic.util.io.FileUtil.toPortableString(java.nio.file.Path)!path	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java™/ ™(32a
java.lang.StringRETURN_TYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java™ ™(æ
Korg.jabref.logic.util.io.FileUtil.toPortableString(java.nio.file.Path)!path	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java™/ ™(3"
typePath"
isFinalfalse"
declarationString	Path path*path2\
java.nio.file.PathTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java™* ™(.≠

?org.jabref.logic.util.io.FileUtil.isBibFile(java.nio.file.Path)METHOD@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaµ µ(#"
isFinalfalse"∂
declarationString†<mark class="modifier">public </mark><mark class="modifier">static </mark><mark class="modifier">boolean</mark> <mark class="method">isBibFile</mark>(Path file)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeboolean*	isBibFile2h
java.util.Optional.isPresent()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∂< ∂(E2å
Bjava.util.Optional.filter(java.util.function.Predicate<? super T>)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∂& ∂(,2ê
Forg.jabref.logic.util.io.FileUtil.getFileExtension(java.nio.file.Path)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∂ ∂(2é
Dorg.jabref.logic.util.io.FileUtil.isBibFile(java.nio.file.Path)!fileCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∂  ∂($2s
)java.lang.String.equals(java.lang.Object)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java∂- ∂(:2ì
Dorg.jabref.logic.util.io.FileUtil.isBibFile(java.nio.file.Path)!file	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaµ) µ(-2X
booleanRETURN_TYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaµ µ(∑
Dorg.jabref.logic.util.io.FileUtil.isBibFile(java.nio.file.Path)!file	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaµ) µ(-"
typePath"
isFinalfalse"
declarationString	Path file*file2\
java.nio.file.PathTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaµ$ µ((¯
?org.jabref.logic.util.io.FileUtil.isPDFFile(java.nio.file.Path)METHOD@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaø ø(#"
isFinalfalse"∂
declarationString†<mark class="modifier">public </mark><mark class="modifier">static </mark><mark class="modifier">boolean</mark> <mark class="method">isPDFFile</mark>(Path file)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeboolean*	isPDFFile2ê
Forg.jabref.logic.util.io.FileUtil.getFileExtension(java.nio.file.Path)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¿. ¿(>2h
java.util.Optional.isPresent()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¡ ¡("2s
)java.util.List.contains(java.lang.Object)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¡M ¡(U2Ä
6org.jabref.logic.util.StandardFileType.getExtensions()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¡= ¡(J2b
java.util.Optional.get()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¡` ¡(c2é
Dorg.jabref.logic.util.io.FileUtil.isPDFFile(java.nio.file.Path)!fileCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¿? ¿(C2°
Worg.jabref.logic.util.io.FileUtil.isPDFFile(java.nio.file.Path)?extension@448.25:448.34CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¡ ¡(2°
Worg.jabref.logic.util.io.FileUtil.isPDFFile(java.nio.file.Path)?extension@448.25:448.34CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¡V ¡(_2ì
Dorg.jabref.logic.util.io.FileUtil.isPDFFile(java.nio.file.Path)!file	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaø) ø(-2®
Worg.jabref.logic.util.io.FileUtil.isPDFFile(java.nio.file.Path)?extension@448.25:448.34DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¿ ¿("2X
booleanRETURN_TYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaø ø(◊
Worg.jabref.logic.util.io.FileUtil.isPDFFile(java.nio.file.Path)?extension@448.25:448.34VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¿ ¿(""
typeOptional<String>"
isFinalfalse"ë
declarationString|<mark class="modifier"> </mark>Optional<String> <mark class="class-field">extension</mark> = FileUtil.getFileExtension(file)*	extension2\
java.util.OptionalTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¿ ¿(2c
java.lang.StringTYPE_ARGUMENT@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¿ ¿(2ê
Forg.jabref.logic.util.io.FileUtil.getFileExtension(java.nio.file.Path)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¿. ¿(>2é
Dorg.jabref.logic.util.io.FileUtil.isPDFFile(java.nio.file.Path)!fileCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java¿? ¿(C∑
Dorg.jabref.logic.util.io.FileUtil.isPDFFile(java.nio.file.Path)!file	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaø) ø(-"
typePath"
isFinalfalse"
declarationString	Path file*file2\
java.nio.file.PathTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaø$ ø((˘
worg.jabref.logic.util.io.FileUtil.getInitialDirectory(org.jabref.model.database.BibDatabaseContext, java.nio.file.Path)METHOD@
4src\main\java\org\jabref\logic\util\io\FileUtil.java« «(*"
isFinalfalse"ã
declarationStringı<mark class="modifier">public </mark><mark class="modifier">static </mark>Path <mark class="method">getInitialDirectory</mark>(BibDatabaseContext databaseContext<mark class="modifier"><mark class="modifier">,</mark></mark> Path workingDirectory)"
isStatictrue"
accesspublic"

isAbstractfalse"
typePath*getInitialDirectory2f
java.util.Optional.orElse(T)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java»F »(L2ï
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java»1 »(42à
>org.jabref.model.database.BibDatabaseContext.getDatabasePath()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java» »(.2“
áorg.jabref.logic.util.io.FileUtil.getInitialDirectory(org.jabref.model.database.BibDatabaseContext, java.nio.file.Path)!databaseContextCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java» »(2”
àorg.jabref.logic.util.io.FileUtil.getInitialDirectory(org.jabref.model.database.BibDatabaseContext, java.nio.file.Path)!workingDirectoryCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java»M »(]2h
java.nio.file.Path.getParent()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java»5 »(D2◊
áorg.jabref.logic.util.io.FileUtil.getInitialDirectory(org.jabref.model.database.BibDatabaseContext, java.nio.file.Path)!databaseContext	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java«> «(M2ÿ
àorg.jabref.logic.util.io.FileUtil.getInitialDirectory(org.jabref.model.database.BibDatabaseContext, java.nio.file.Path)!workingDirectory	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java«T «(d2c
java.nio.file.PathRETURN_TYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java« «(«
áorg.jabref.logic.util.io.FileUtil.getInitialDirectory(org.jabref.model.database.BibDatabaseContext, java.nio.file.Path)!databaseContext	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java«> «(M"
typeBibDatabaseContext"
isFinalfalse"7
declarationString"BibDatabaseContext databaseContext*databaseContext2v
,org.jabref.model.database.BibDatabaseContextTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java«+ «(=î
àorg.jabref.logic.util.io.FileUtil.getInitialDirectory(org.jabref.model.database.BibDatabaseContext, java.nio.file.Path)!workingDirectory	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java«T «(d"
typePath"
isFinalfalse"*
declarationStringPath workingDirectory*workingDirectory2\
java.nio.file.PathTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java«O «(S⁄
Eorg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)METHOD@
4src\main\java\org\jabref\logic\util\io\FileUtil.java” ”(+"
isFinalfalse"ƒ
declarationStringÆ<mark class="modifier">public </mark><mark class="modifier">static </mark><mark class="modifier">boolean</mark> <mark class="method">detectBadFileName</mark>(String fileName)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeboolean*detectBadFileName2g
java.nio.file.Path.toString()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÿ7 ÿ(?2j
 java.nio.file.Path.getFileName()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÿ) ÿ(42Ü
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÿ ÿ(2c
java.lang.String.length()CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaﬁ% ﬁ(+2f
java.lang.String.charAt(int)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaﬂ ﬂ($2}
3org.jabref.logic.util.io.FileUtil.isCharLegal(char)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java‡ ‡(2ò
Norg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)!fileNameCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÿ ÿ(2ò
Norg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)!fileNameCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÿ ÿ('2ü
Uorg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)?i@478.17:478.18CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaﬁ ﬁ(2ò
Norg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)!fileNameCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaﬁ ﬁ($2ü
Uorg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)?i@478.17:478.18CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaﬁ/ ﬁ(02ò
Norg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)!fileNameCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaﬂ ﬂ(2ü
Uorg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)?i@478.17:478.18CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaﬂ% ﬂ(&2ü
Uorg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)?c@479.17:479.18CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.java‡ ‡(2ù
Norg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)!fileName	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java”3 ”(;2¶
Uorg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)?i@478.17:478.18DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaﬁ ﬁ(2¶
Uorg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)?c@479.17:479.18DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaﬂ ﬂ(2¶
Uorg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)?e@473.38:473.39DECLARATION@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaŸ& Ÿ('2X
booleanRETURN_TYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java” ”(í
Uorg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)?i@478.17:478.18VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaﬁ ﬁ("
typeint"
isFinalfalse"|
declarationStringg<mark class="modifier"> </mark><mark class="modifier">int</mark> <mark class="class-field">i</mark> = 0*i2M
intTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaﬁ ﬁ(≠
Uorg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)?c@479.17:479.18VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaﬂ ﬂ("
typechar"
isFinalfalse"p
declarationString[<mark class="modifier"> </mark>char <mark class="class-field">c</mark> = fileName.charAt(i)*c2N
charTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaﬂ ﬂ(2f
java.lang.String.charAt(int)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaﬂ ﬂ($2ò
Norg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)!fileNameCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaﬂ ﬂ(2ü
Uorg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)?i@478.17:478.18CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaﬂ% ﬂ(&À
Norg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)!fileName	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.java”3 ”(;"
typeString"
isFinalfalse"$
declarationStringString fileName*fileName2Z
java.lang.StringTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.java”, ”(2Ò
Uorg.jabref.logic.util.io.FileUtil.detectBadFileName(java.lang.String)?e@473.38:473.39VARIABLE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaŸ& Ÿ('"
typeInvalidPathException"
isFinalfalse"+
declarationStringInvalidPathException e*e2l
"java.nio.file.InvalidPathExceptionTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaŸ Ÿ(%ˇ
3org.jabref.logic.util.io.FileUtil.isCharLegal(char)METHOD@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÁ Á(%"
isFinalfalse"µ
declarationStringü<mark class="modifier">public </mark><mark class="modifier">static </mark><mark class="modifier">boolean</mark> <mark class="method">isCharLegal</mark>(char c)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeboolean*isCharLegal2s
)java.util.Arrays.binarySearch(int[], int)CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaË Ë("2Ö
;org.jabref.logic.util.io.FileUtil?ILLEGAL_CHARS@50.31:50.44CALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaË# Ë(02
5org.jabref.logic.util.io.FileUtil.isCharLegal(char)!cCALL@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaË2 Ë(32Ñ
5org.jabref.logic.util.io.FileUtil.isCharLegal(char)!c	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÁ+ Á(,2X
booleanRETURN_TYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÁ Á(î
5org.jabref.logic.util.io.FileUtil.isCharLegal(char)!c	PARAMETER@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÁ+ Á(,"
typechar"
isFinalfalse"
declarationStringchar c*c2N
charTYPE@
4src\main\java\org\jabref\logic\util\io\FileUtil.javaÁ& Á(*¬
@org.jabref.logic.util.io.FileUtil?IS_POSIX_COMPLIANT@41.32:41.50VALUE>
4src\main\java\org\jabref\logic\util\io\FileUtil.java)  )(2"
isFinaltrue"
typeboolean"©
declarationStringì<mark class="modifier">public </mark><mark class="modifier">static </mark><mark class="modifier">final </mark><mark class="modifier">boolean</mark> <mark class="class-field">IS_POSIX_COMPLIANT</mark> = FileSystems.getDefault().supportedFileAttributeViews().contains("posix");"
isStatictrue"
accesspublic*IS_POSIX_COMPLIANT2O
booleanTYPE>
4src\main\java\org\jabref\logic\util\io\FileUtil.java) )(2p
(java.util.Set.contains(java.lang.Object)CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.java)l )(t2~
6java.nio.file.FileSystem.supportedFileAttributeViews()CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.java)N )(i2n
&java.nio.file.FileSystems.getDefault()CALL>
4src\main\java\org\jabref\logic\util\io\FileUtil.java)A )(K°
Forg.jabref.logic.util.io.FileUtil?MAXIMUM_FILE_NAME_LENGTH@42.28:42.52VALUE>
4src\main\java\org\jabref\logic\util\io\FileUtil.java* *(4"
isFinaltrue"
typeint"Ê
declarationString–<mark class="modifier">public </mark><mark class="modifier">static </mark><mark class="modifier">final </mark><mark class="modifier">int</mark> <mark class="class-field">MAXIMUM_FILE_NAME_LENGTH</mark> = 255;"
isStatictrue"
accesspublic*MAXIMUM_FILE_NAME_LENGTH2K
intTYPE>
4src\main\java\org\jabref\logic\util\io\FileUtil.java* *(Ü
4org.jabref.logic.util.io.FileUtil?LOGGER@44.32:44.38VALUE>
4src\main\java\org\jabref\logic\util\io\FileUtil.java,  ,(&"
isFinaltrue"
typeLogger"ﬁ
declarationString»<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>Logger <mark class="class-field">LOGGER</mark> = LoggerFactory.getLogger(FileUtil.class);"
isStatictrue"
accessprivate*LOGGER2X
org.slf4j.LoggerTYPE>
4src\main\java\org\jabref\logic\util\io\FileUtil.java, ,(™
;org.jabref.logic.util.io.FileUtil?ILLEGAL_CHARS@50.31:50.44VALUE>
4src\main\java\org\jabref\logic\util\io\FileUtil.java2 2(,"
isFinaltrue"
typeint"Ç
declarationStringÏ<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark><mark class="modifier">int</mark>[] <mark class="class-field">ILLEGAL_CHARS</mark> = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 42, // ":"
58, 60, 62, 63, 123, 124, 125 };"
isStatictrue"
accessprivate*ILLEGAL_CHARS2M
int[]TYPE>
4src\main\java\org\jabref\logic\util\io\FileUtil.java2 2(