
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaﬁ
2org.jabref.logic.util.io.RegExpBasedFileFinderTestCLASSO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java ("#
packageorg.jabref.logic.util.io"
isFinalfalse"
inner classfalse"

isAbstractfalse"q
declarationString\<mark class="modifier"> </mark><mark class="modifier">class </mark>RegExpBasedFileFinderTest"
accesspackage_private*RegExpBasedFileFinderTest2¨
Lorg.jabref.logic.util.io.RegExpBasedFileFinderTest.setUp(java.nio.file.Path)DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java!	 !(2û
>org.jabref.logic.util.io.RegExpBasedFileFinderTest.findFiles()DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java:	 :(2Ø
Oorg.jabref.logic.util.io.RegExpBasedFileFinderTest.yearAuthFirstPageFindFiles()DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaI	 I(#2Ÿ
yorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingBracketsFromBracketedExpression()DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaV	 V(M2Œ
norg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindCleanedFileFromBracketedExpression()DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javab	 b(B2ﬁ
~org.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingParenthesizesFromBracketedExpression()DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javan	 n(R2©
Iorg.jabref.logic.util.io.RegExpBasedFileFinderTest.authorWithDiacritics()DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java~	 ~(2≠
Korg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileInSubdirectory()DECLARATIONQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaê	 ê(2´
Iorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileNonRecursive()DECLARATIONQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java°	 °(2¨
Lorg.jabref.logic.util.io.RegExpBasedFileFinderTest?PDF_EXTENSION@19.38:19.51DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java& (32©
Iorg.jabref.logic.util.io.RegExpBasedFileFinderTest?FILE_NAMES@20.38:20.48DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java& (02®
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java (2§
Dorg.jabref.logic.util.io.RegExpBasedFileFinderTest?entry@30.21:30.26DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java (Ω:
Lorg.jabref.logic.util.io.RegExpBasedFileFinderTest.setUp(java.nio.file.Path)METHODO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java!	 !("
isFinalfalse"Ç
declarationStringÏ <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">setUp</mark>(<mark class="annotation">@TempDir</mark> Path tempDir)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*setUp2®
Oorg.jabref.model.entry.BibEntry.setType(org.jabref.model.entry.types.EntryType)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java# #(2ô
@org.jabref.model.entry.BibEntry.setCitationKey(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java$ $(2∑
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java% %(2∑
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java& &(2∑
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java' '(2∑
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java( ((2∑
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java) )(2∑
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java* *(2∑
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java+ +(2∑
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java, ,(2∑
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java- -(2∑
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java. .(2∑
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java/ /(2ÿ
java.nio.file.Files.createDirectories(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java3 3(2Ö
,java.nio.file.Path.resolve(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java3* 3(12—
xjava.nio.file.Files.createFile(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java5 5(2Ö
,java.nio.file.Path.resolve(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java5' 5(.2É
*org.jabref.model.entry.BibEntry.BibEntry()CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java" "(2ù
Dorg.jabref.logic.util.io.RegExpBasedFileFinderTest?entry@30.21:30.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java" "(2ù
Dorg.jabref.logic.util.io.RegExpBasedFileFinderTest?entry@30.21:30.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java# #(2ù
Dorg.jabref.logic.util.io.RegExpBasedFileFinderTest?entry@30.21:30.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java$ $(2ù
Dorg.jabref.logic.util.io.RegExpBasedFileFinderTest?entry@30.21:30.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java% %(2ù
Dorg.jabref.logic.util.io.RegExpBasedFileFinderTest?entry@30.21:30.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java& &(2ù
Dorg.jabref.logic.util.io.RegExpBasedFileFinderTest?entry@30.21:30.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java' '(2ù
Dorg.jabref.logic.util.io.RegExpBasedFileFinderTest?entry@30.21:30.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java( ((2ù
Dorg.jabref.logic.util.io.RegExpBasedFileFinderTest?entry@30.21:30.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java) )(2ù
Dorg.jabref.logic.util.io.RegExpBasedFileFinderTest?entry@30.21:30.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java* *(2ù
Dorg.jabref.logic.util.io.RegExpBasedFileFinderTest?entry@30.21:30.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java+ +(2ù
Dorg.jabref.logic.util.io.RegExpBasedFileFinderTest?entry@30.21:30.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java, ,(2ù
Dorg.jabref.logic.util.io.RegExpBasedFileFinderTest?entry@30.21:30.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java- -(2ù
Dorg.jabref.logic.util.io.RegExpBasedFileFinderTest?entry@30.21:30.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java. .(2ù
Dorg.jabref.logic.util.io.RegExpBasedFileFinderTest?entry@30.21:30.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java/ /(2°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java2 2(2≠
Torg.jabref.logic.util.io.RegExpBasedFileFinderTest.setUp(java.nio.file.Path)!tempDirCALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java2 2(2°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java3  3()2¢
Iorg.jabref.logic.util.io.RegExpBasedFileFinderTest?FILE_NAMES@20.38:20.48CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java4 4()2°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java5 5(&2∫
aorg.jabref.logic.util.io.RegExpBasedFileFinderTest.setUp(java.nio.file.Path)?fileName@52.20:52.28CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java5/ 5(72≤
Torg.jabref.logic.util.io.RegExpBasedFileFinderTest.setUp(java.nio.file.Path)!tempDir	PARAMETERO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java! !($2¡
aorg.jabref.logic.util.io.RegExpBasedFileFinderTest.setUp(java.nio.file.Path)?fileName@52.20:52.28DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java4 4(2d
voidRETURN_TYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java! !(ª
aorg.jabref.logic.util.io.RegExpBasedFileFinderTest.setUp(java.nio.file.Path)?fileName@52.20:52.28VARIABLEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java4 4("
typeString"
isFinalfalse"d
declarationStringO<mark class="modifier"> </mark>String <mark class="class-field">fileName</mark>*fileName2i
java.lang.StringTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java4 4(î
Torg.jabref.logic.util.io.RegExpBasedFileFinderTest.setUp(java.nio.file.Path)!tempDir	PARAMETERO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java! !($"
typePath"
isFinalfalse"J
declarationString5<mark class="annotation">@TempDir</mark> Path tempDir*tempDir2k
java.nio.file.PathTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java! !(Í
>org.jabref.logic.util.io.RegExpBasedFileFinderTest.findFiles()METHODO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java:	 :("
isFinalfalse"ˆ
declarationString‡<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findFiles</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*	findFiles2ö
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java<F <(U2É
©org.jabref.logic.util.io.RegExpBasedFileFinder.findAssociatedFiles(org.jabref.model.entry.BibEntry, java.util.List<java.nio.file.Path>, java.util.List<java.lang.String>)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaA' A(:2m
java.util.List.of(E)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaAL A(N2m
java.util.List.of(E)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaB# B(%2Ö
,java.nio.file.Path.resolve(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaB0 B(72©
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java<" <(*2ƒ
korg.jabref.logic.util.io.RegExpBasedFileFinder.RegExpBasedFileFinder(java.lang.String, java.lang.Character)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java>/ >(D2Æ
Uorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFiles()?fileFinder@62.30:62.40CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaA A(&2Æ
Uorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFiles()?localEntry@60.17:60.27CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaA; A(E2°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaAO A(X2•
Lorg.jabref.logic.util.io.RegExpBasedFileFinderTest?PDF_EXTENSION@19.38:19.51CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaA[ A(h2°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaB& B(/2¨
Sorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFiles()?expected@66.19:66.27CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaE E(2™
Qorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFiles()?result@65.19:65.25CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaE E(%2µ
Uorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFiles()?localEntry@60.17:60.27DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java< <(2µ
Uorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFiles()?fileFinder@62.30:62.40DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java> >((2±
Qorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFiles()?result@65.19:65.25DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaA A(2≥
Sorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFiles()?expected@66.19:66.27DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaB B(2d
voidRETURN_TYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java: :(‹
Uorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFiles()?localEntry@60.17:60.27VARIABLEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java< <("
typeBibEntry"
isFinalfalse"¥
declarationStringû<mark class="modifier"> </mark>BibEntry <mark class="class-field">localEntry</mark> = new BibEntry(StandardEntryType.Article).withCitationKey("pdfInDatabase")*
localEntry2x
org.jabref.model.entry.BibEntryTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java< <(2ö
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java<F <(U2©
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java<" <(*º
Uorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFiles()?fileFinder@62.30:62.40VARIABLEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java> >(("
typeRegExpBasedFileFinder"
isFinalfalse"˘
declarationString„<mark class="modifier"> </mark>RegExpBasedFileFinder <mark class="class-field">fileFinder</mark> = new RegExpBasedFileFinder("**/[citationkey].*\\\\.[extension]"<mark class="modifier">,</mark> '<mark class="modifier">,</mark>')*
fileFinder2á
.org.jabref.logic.util.io.RegExpBasedFileFinderTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java> >(2ƒ
korg.jabref.logic.util.io.RegExpBasedFileFinder.RegExpBasedFileFinder(java.lang.String, java.lang.Character)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java>/ >(D∂
Qorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFiles()?result@65.19:65.25VARIABLEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaA A("
type
List<Path>"
isFinalfalse"’
declarationStringø<mark class="modifier"> </mark>List<Path> <mark class="class-field">result</mark> = fileFinder.findAssociatedFiles(localEntry, List.of(directory)<mark class="modifier">,</mark> PDF_EXTENSION)*result2g
java.util.ListTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaA A(2t
java.nio.file.PathTYPE_ARGUMENTO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaA A(2É
©org.jabref.logic.util.io.RegExpBasedFileFinder.findAssociatedFiles(org.jabref.model.entry.BibEntry, java.util.List<java.nio.file.Path>, java.util.List<java.lang.String>)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaA' A(:2m
java.util.List.of(E)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaAL A(N2Æ
Uorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFiles()?fileFinder@62.30:62.40CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaA A(&2Æ
Uorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFiles()?localEntry@60.17:60.27CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaA; A(E2°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaAO A(X2•
Lorg.jabref.logic.util.io.RegExpBasedFileFinderTest?PDF_EXTENSION@19.38:19.51CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaA[ A(h¯
Sorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFiles()?expected@66.19:66.27VARIABLEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaB B("
type
List<Path>"
isFinalfalse"õ
declarationStringÖ<mark class="modifier"> </mark>List<Path> <mark class="class-field">expected</mark> = List.of(directory.resolve("pdfInDatabase.pdf"))*expected2g
java.util.ListTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaB B(2t
java.nio.file.PathTYPE_ARGUMENTO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaB B(2m
java.util.List.of(E)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaB# B(%2Ö
,java.nio.file.Path.resolve(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaB0 B(72°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaB& B(/Ò
Oorg.jabref.logic.util.io.RegExpBasedFileFinderTest.yearAuthFirstPageFindFiles()METHODO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaI	 I(#"
isFinalfalse"á
declarationStringÒ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">yearAuthFirstPageFindFiles</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*yearAuthFirstPageFindFiles2É
©org.jabref.logic.util.io.RegExpBasedFileFinder.findAssociatedFiles(org.jabref.model.entry.BibEntry, java.util.List<java.nio.file.Path>, java.util.List<java.lang.String>)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaN' N(:2m
java.util.List.of(E)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaNG N(I2m
java.util.List.of(E)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaO# O(%2Ö
,java.nio.file.Path.resolve(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaO0 O(72ƒ
korg.jabref.logic.util.io.RegExpBasedFileFinder.RegExpBasedFileFinder(java.lang.String, java.lang.Character)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaK/ K(D2ø
forg.jabref.logic.util.io.RegExpBasedFileFinderTest.yearAuthFirstPageFindFiles()?fileFinder@75.30:75.40CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaN N(&2ù
Dorg.jabref.logic.util.io.RegExpBasedFileFinderTest?entry@30.21:30.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaN; N(@2°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaNJ N(S2•
Lorg.jabref.logic.util.io.RegExpBasedFileFinderTest?PDF_EXTENSION@19.38:19.51CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaNV N(c2°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaO& O(/2Ω
dorg.jabref.logic.util.io.RegExpBasedFileFinderTest.yearAuthFirstPageFindFiles()?expected@79.19:79.27CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaR R(2ª
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.yearAuthFirstPageFindFiles()?result@78.19:78.25CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaR R(%2∆
forg.jabref.logic.util.io.RegExpBasedFileFinderTest.yearAuthFirstPageFindFiles()?fileFinder@75.30:75.40DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaK K((2¬
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.yearAuthFirstPageFindFiles()?result@78.19:78.25DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaN N(2ƒ
dorg.jabref.logic.util.io.RegExpBasedFileFinderTest.yearAuthFirstPageFindFiles()?expected@79.19:79.27DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaO O(2d
voidRETURN_TYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaI I(Ÿ
forg.jabref.logic.util.io.RegExpBasedFileFinderTest.yearAuthFirstPageFindFiles()?fileFinder@75.30:75.40VARIABLEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaK K(("
typeRegExpBasedFileFinder"
isFinalfalse"Ö
declarationStringÔ<mark class="modifier"> </mark>RegExpBasedFileFinder <mark class="class-field">fileFinder</mark> = new RegExpBasedFileFinder("**/[year]_[auth]_[firstpage].*\\\\.[extension]"<mark class="modifier">,</mark> '<mark class="modifier">,</mark>')*
fileFinder2á
.org.jabref.logic.util.io.RegExpBasedFileFinderTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaK K(2ƒ
korg.jabref.logic.util.io.RegExpBasedFileFinder.RegExpBasedFileFinder(java.lang.String, java.lang.Character)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaK/ K(D¬
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.yearAuthFirstPageFindFiles()?result@78.19:78.25VARIABLEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaN N("
type
List<Path>"
isFinalfalse"–
declarationString∫<mark class="modifier"> </mark>List<Path> <mark class="class-field">result</mark> = fileFinder.findAssociatedFiles(entry, List.of(directory)<mark class="modifier">,</mark> PDF_EXTENSION)*result2g
java.util.ListTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaN N(2t
java.nio.file.PathTYPE_ARGUMENTO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaN N(2É
©org.jabref.logic.util.io.RegExpBasedFileFinder.findAssociatedFiles(org.jabref.model.entry.BibEntry, java.util.List<java.nio.file.Path>, java.util.List<java.lang.String>)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaN' N(:2m
java.util.List.of(E)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaNG N(I2ø
forg.jabref.logic.util.io.RegExpBasedFileFinderTest.yearAuthFirstPageFindFiles()?fileFinder@75.30:75.40CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaN N(&2ù
Dorg.jabref.logic.util.io.RegExpBasedFileFinderTest?entry@30.21:30.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaN; N(@2°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaNJ N(S2•
Lorg.jabref.logic.util.io.RegExpBasedFileFinderTest?PDF_EXTENSION@19.38:19.51CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaNV N(c¢
dorg.jabref.logic.util.io.RegExpBasedFileFinderTest.yearAuthFirstPageFindFiles()?expected@79.19:79.27VARIABLEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaO O("
type
List<Path>"
isFinalfalse"¥
declarationStringû<mark class="modifier"> </mark>List<Path> <mark class="class-field">expected</mark> = List.of(directory.resolve("directory/subdirectory/2003_Hippel_209.pdf"))*expected2g
java.util.ListTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaO O(2t
java.nio.file.PathTYPE_ARGUMENTO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaO O(2m
java.util.List.of(E)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaO# O(%2Ö
,java.nio.file.Path.resolve(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaO0 O(72°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaO& O(/Ì!
yorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingBracketsFromBracketedExpression()METHODO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaV	 V(M"
isFinalfalse"±
declarationStringõ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findAssociatedFilesFindFileContainingBracketsFromBracketedExpression</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*DfindAssociatedFilesFindFileContainingBracketsFromBracketedExpression2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaW& W(/2É
©org.jabref.logic.util.io.RegExpBasedFileFinder.findAssociatedFiles(org.jabref.model.entry.BibEntry, java.util.List<java.nio.file.Path>, java.util.List<java.lang.String>)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java[' [(:2m
java.util.List.of(E)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java[J [(L2m
java.util.List.of(E)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java\" \($2Ö
,java.nio.file.Path.resolve(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java\/ \(62É
*org.jabref.model.entry.BibEntry.BibEntry()CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaW W(#2ƒ
korg.jabref.logic.util.io.RegExpBasedFileFinder.RegExpBasedFileFinder(java.lang.String, java.lang.Character)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaY/ Y(D2Í
êorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingBracketsFromBracketedExpression()?fileFinder@89.30:89.40CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java[ [(&2Ë
éorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingBracketsFromBracketedExpression()?bibEntry@87.12:87.20CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java[; [(C2°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java[M [(V2•
Lorg.jabref.logic.util.io.RegExpBasedFileFinderTest?PDF_EXTENSION@19.38:19.51CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java[Y [(f2°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java\% \(.2Á
çorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingBracketsFromBracketedExpression()?pdfFile@92.19:92.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java^ ^(2Ê
åorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingBracketsFromBracketedExpression()?result@91.19:91.25CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java^ ^($2Ô
éorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingBracketsFromBracketedExpression()?bibEntry@87.12:87.20DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaW W(2Ò
êorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingBracketsFromBracketedExpression()?fileFinder@89.30:89.40DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaY Y((2Ì
åorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingBracketsFromBracketedExpression()?result@91.19:91.25DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java[ [(2Ó
çorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingBracketsFromBracketedExpression()?pdfFile@92.19:92.26DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java\ \(2d
voidRETURN_TYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaV V(˙
éorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingBracketsFromBracketedExpression()?bibEntry@87.12:87.20VARIABLEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaW W("
typevar"
isFinalfalse"ß
declarationStringë<mark class="modifier"> </mark>var <mark class="class-field">bibEntry</mark> = new BibEntry().withField(StandardField.TITLE, "Regexp from [A-Z]")*bibEntry2x
org.jabref.model.entry.BibEntryTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaW W(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaW& W(/2É
*org.jabref.model.entry.BibEntry.BibEntry()CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaW W(#Ì
êorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingBracketsFromBracketedExpression()?fileFinder@89.30:89.40VARIABLEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaY Y(("
typeRegExpBasedFileFinder"
isFinalfalse"Ó
declarationStringÿ<mark class="modifier"> </mark>RegExpBasedFileFinder <mark class="class-field">fileFinder</mark> = new RegExpBasedFileFinder("[TITLE]\\\\.[extension]"<mark class="modifier">,</mark> '<mark class="modifier">,</mark>')*
fileFinder2á
.org.jabref.logic.util.io.RegExpBasedFileFinderTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaY Y(2ƒ
korg.jabref.logic.util.io.RegExpBasedFileFinder.RegExpBasedFileFinder(java.lang.String, java.lang.Character)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaY/ Y(DÊ
åorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingBracketsFromBracketedExpression()?result@91.19:91.25VARIABLEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java[ [("
type
List<Path>"
isFinalfalse"”
declarationStringΩ<mark class="modifier"> </mark>List<Path> <mark class="class-field">result</mark> = fileFinder.findAssociatedFiles(bibEntry, List.of(directory)<mark class="modifier">,</mark> PDF_EXTENSION)*result2g
java.util.ListTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java[ [(2t
java.nio.file.PathTYPE_ARGUMENTO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java[ [(2É
©org.jabref.logic.util.io.RegExpBasedFileFinder.findAssociatedFiles(org.jabref.model.entry.BibEntry, java.util.List<java.nio.file.Path>, java.util.List<java.lang.String>)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java[' [(:2m
java.util.List.of(E)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java[J [(L2Í
êorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingBracketsFromBracketedExpression()?fileFinder@89.30:89.40CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java[ [(&2Ë
éorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingBracketsFromBracketedExpression()?bibEntry@87.12:87.20CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java[; [(C2°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java[M [(V2•
Lorg.jabref.logic.util.io.RegExpBasedFileFinderTest?PDF_EXTENSION@19.38:19.51CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java[Y [(fµ
çorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingBracketsFromBracketedExpression()?pdfFile@92.19:92.26VARIABLEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java\ \("
type
List<Path>"
isFinalfalse"û
declarationStringà<mark class="modifier"> </mark>List<Path> <mark class="class-field">pdfFile</mark> = List.of(directory.resolve("Regexp from [A-Z].pdf"))*pdfFile2g
java.util.ListTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java\ \(2t
java.nio.file.PathTYPE_ARGUMENTO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java\ \(2m
java.util.List.of(E)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java\" \($2Ö
,java.nio.file.Path.resolve(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java\/ \(62°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java\% \(.Ä!
norg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindCleanedFileFromBracketedExpression()METHODO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javab	 b(B"
isFinalfalse"¶
declarationStringê<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findAssociatedFilesFindCleanedFileFromBracketedExpression</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*9findAssociatedFilesFindCleanedFileFromBracketedExpression2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javac& c(/2É
©org.jabref.logic.util.io.RegExpBasedFileFinder.findAssociatedFiles(org.jabref.model.entry.BibEntry, java.util.List<java.nio.file.Path>, java.util.List<java.lang.String>)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javag' g(:2m
java.util.List.of(E)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javagJ g(L2m
java.util.List.of(E)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javah" h($2Ö
,java.nio.file.Path.resolve(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javah/ h(62É
*org.jabref.model.entry.BibEntry.BibEntry()CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javac c(#2ƒ
korg.jabref.logic.util.io.RegExpBasedFileFinder.RegExpBasedFileFinder(java.lang.String, java.lang.Character)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javae/ e(D2·
áorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindCleanedFileFromBracketedExpression()?fileFinder@101.30:101.40CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javag g(&2›
Éorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindCleanedFileFromBracketedExpression()?bibEntry@99.12:99.20CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javag; g(C2°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javagM g(V2•
Lorg.jabref.logic.util.io.RegExpBasedFileFinderTest?PDF_EXTENSION@19.38:19.51CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javagY g(f2°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javah% h(.2ﬁ
Ñorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindCleanedFileFromBracketedExpression()?pdfFile@104.19:104.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaj j(2›
Éorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindCleanedFileFromBracketedExpression()?result@103.19:103.25CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaj j($2‰
Éorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindCleanedFileFromBracketedExpression()?bibEntry@99.12:99.20DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javac c(2Ë
áorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindCleanedFileFromBracketedExpression()?fileFinder@101.30:101.40DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javae e((2‰
Éorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindCleanedFileFromBracketedExpression()?result@103.19:103.25DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javag g(2Â
Ñorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindCleanedFileFromBracketedExpression()?pdfFile@104.19:104.26DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javah h(2d
voidRETURN_TYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javab b(Î
Éorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindCleanedFileFromBracketedExpression()?bibEntry@99.12:99.20VARIABLEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javac c("
typevar"
isFinalfalse"£
declarationStringç<mark class="modifier"> </mark>var <mark class="class-field">bibEntry</mark> = new BibEntry().withField(StandardField.JOURNAL, "ACM/IEEE-CS")*bibEntry2x
org.jabref.model.entry.BibEntryTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javac c(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javac& c(/2É
*org.jabref.model.entry.BibEntry.BibEntry()CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javac c(#Ê
áorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindCleanedFileFromBracketedExpression()?fileFinder@101.30:101.40VARIABLEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javae e(("
typeRegExpBasedFileFinder"
isFinalfalse"
declarationString⁄<mark class="modifier"> </mark>RegExpBasedFileFinder <mark class="class-field">fileFinder</mark> = new RegExpBasedFileFinder("[JOURNAL]\\\\.[extension]"<mark class="modifier">,</mark> '<mark class="modifier">,</mark>')*
fileFinder2á
.org.jabref.logic.util.io.RegExpBasedFileFinderTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javae e(2ƒ
korg.jabref.logic.util.io.RegExpBasedFileFinder.RegExpBasedFileFinder(java.lang.String, java.lang.Character)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javae/ e(D…
Éorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindCleanedFileFromBracketedExpression()?result@103.19:103.25VARIABLEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javag g("
type
List<Path>"
isFinalfalse"”
declarationStringΩ<mark class="modifier"> </mark>List<Path> <mark class="class-field">result</mark> = fileFinder.findAssociatedFiles(bibEntry, List.of(directory)<mark class="modifier">,</mark> PDF_EXTENSION)*result2g
java.util.ListTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javag g(2t
java.nio.file.PathTYPE_ARGUMENTO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javag g(2É
©org.jabref.logic.util.io.RegExpBasedFileFinder.findAssociatedFiles(org.jabref.model.entry.BibEntry, java.util.List<java.nio.file.Path>, java.util.List<java.lang.String>)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javag' g(:2m
java.util.List.of(E)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javagJ g(L2·
áorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindCleanedFileFromBracketedExpression()?fileFinder@101.30:101.40CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javag g(&2›
Éorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindCleanedFileFromBracketedExpression()?bibEntry@99.12:99.20CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javag; g(C2°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javagM g(V2•
Lorg.jabref.logic.util.io.RegExpBasedFileFinderTest?PDF_EXTENSION@19.38:19.51CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javagY g(f¶
Ñorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindCleanedFileFromBracketedExpression()?pdfFile@104.19:104.26VARIABLEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javah h("
type
List<Path>"
isFinalfalse"ò
declarationStringÇ<mark class="modifier"> </mark>List<Path> <mark class="class-field">pdfFile</mark> = List.of(directory.resolve("ACM_IEEE-CS.pdf"))*pdfFile2g
java.util.ListTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javah h(2t
java.nio.file.PathTYPE_ARGUMENTO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javah h(2m
java.util.List.of(E)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javah" h($2Ö
,java.nio.file.Path.resolve(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javah/ h(62°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javah% h(.Ç(
~org.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingParenthesizesFromBracketedExpression()METHODO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javan	 n(R"
isFinalfalse"∂
declarationString†<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findAssociatedFilesFindFileContainingParenthesizesFromBracketedExpression</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*IfindAssociatedFilesFindFileContainingParenthesizesFromBracketedExpression2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javas& s(/2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javar& r(/2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaq& q(/2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javap& p(/2ö
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javao& o(52É
©org.jabref.logic.util.io.RegExpBasedFileFinder.findAssociatedFiles(org.jabref.model.entry.BibEntry, java.util.List<java.nio.file.Path>, java.util.List<java.lang.String>)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaw' w(:2m
java.util.List.of(E)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javawJ w(L2m
java.util.List.of(E)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javax" x($2Ö
,java.nio.file.Path.resolve(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javax/ x(62É
*org.jabref.model.entry.BibEntry.BibEntry()CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javao o(#2ƒ
korg.jabref.logic.util.io.RegExpBasedFileFinder.RegExpBasedFileFinder(java.lang.String, java.lang.Character)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javau/ u(D2Ò
óorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingParenthesizesFromBracketedExpression()?fileFinder@117.30:117.40CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaw w(&2Ô
ïorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingParenthesizesFromBracketedExpression()?bibEntry@111.12:111.20CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaw; w(C2°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javawM w(V2•
Lorg.jabref.logic.util.io.RegExpBasedFileFinderTest?PDF_EXTENSION@19.38:19.51CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javawY w(f2°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javax% x(.2Ó
îorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingParenthesizesFromBracketedExpression()?pdfFile@120.19:120.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaz z(2Ì
ìorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingParenthesizesFromBracketedExpression()?result@119.19:119.25CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaz z($2ˆ
ïorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingParenthesizesFromBracketedExpression()?bibEntry@111.12:111.20DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javao o(2¯
óorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingParenthesizesFromBracketedExpression()?fileFinder@117.30:117.40DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javau u((2Ù
ìorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingParenthesizesFromBracketedExpression()?result@119.19:119.25DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaw w(2ı
îorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingParenthesizesFromBracketedExpression()?pdfFile@120.19:120.26DECLARATIONO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javax x(2d
voidRETURN_TYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javan n(¡
ïorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingParenthesizesFromBracketedExpression()?bibEntry@111.12:111.20VARIABLEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javao o("
typevar"
isFinalfalse"ô
declarationStringÉ<mark class="modifier"> </mark>var <mark class="class-field">bibEntry</mark> = new BibEntry().withCitationKey("Guo_ICC_2010").withField(StandardField.TITLE, "Ferroelectric Metal Organic Framework (MOF)").withField(StandardField.AUTHOR, "Guo, M. and Cai, H.-L. and Xiong, R.-G.").withField(StandardField.JOURNAL, "Inorganic Chemistry Communications").withField(StandardField.YEAR, "2010")*bibEntry2x
org.jabref.model.entry.BibEntryTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javao o(2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javas& s(/2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javar& r(/2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaq& q(/2∏
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javap& p(/2ö
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javao& o(52É
*org.jabref.model.entry.BibEntry.BibEntry()CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javao o(#˚
óorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingParenthesizesFromBracketedExpression()?fileFinder@117.30:117.40VARIABLEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javau u(("
typeRegExpBasedFileFinder"
isFinalfalse"ı
declarationStringﬂ<mark class="modifier"> </mark>RegExpBasedFileFinder <mark class="class-field">fileFinder</mark> = new RegExpBasedFileFinder("**/.*[TITLE].*\\\\.[extension]"<mark class="modifier">,</mark> '<mark class="modifier">,</mark>')*
fileFinder2á
.org.jabref.logic.util.io.RegExpBasedFileFinderTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javau u(2ƒ
korg.jabref.logic.util.io.RegExpBasedFileFinder.RegExpBasedFileFinder(java.lang.String, java.lang.Character)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javau/ u(D˚
ìorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingParenthesizesFromBracketedExpression()?result@119.19:119.25VARIABLEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaw w("
type
List<Path>"
isFinalfalse"”
declarationStringΩ<mark class="modifier"> </mark>List<Path> <mark class="class-field">result</mark> = fileFinder.findAssociatedFiles(bibEntry, List.of(directory)<mark class="modifier">,</mark> PDF_EXTENSION)*result2g
java.util.ListTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaw w(2t
java.nio.file.PathTYPE_ARGUMENTO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaw w(2É
©org.jabref.logic.util.io.RegExpBasedFileFinder.findAssociatedFiles(org.jabref.model.entry.BibEntry, java.util.List<java.nio.file.Path>, java.util.List<java.lang.String>)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaw' w(:2m
java.util.List.of(E)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javawJ w(L2Ò
óorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingParenthesizesFromBracketedExpression()?fileFinder@117.30:117.40CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaw w(&2Ô
ïorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingParenthesizesFromBracketedExpression()?bibEntry@111.12:111.20CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaw; w(C2°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javawM w(V2•
Lorg.jabref.logic.util.io.RegExpBasedFileFinderTest?PDF_EXTENSION@19.38:19.51CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javawY w(fè	
îorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findAssociatedFilesFindFileContainingParenthesizesFromBracketedExpression()?pdfFile@120.19:120.26VARIABLEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javax x("
type
List<Path>"
isFinalfalse"Ò
declarationString€<mark class="modifier"> </mark>List<Path> <mark class="class-field">pdfFile</mark> = List.of(directory.resolve("directory/subdirectory/GUO ea - INORG CHEM COMMUN 2010 - Ferroelectric Metal Organic Framework (MOF).pdf"))*pdfFile2g
java.util.ListTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javax x(2t
java.nio.file.PathTYPE_ARGUMENTO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javax x(2m
java.util.List.of(E)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javax" x($2Ö
,java.nio.file.Path.resolve(java.lang.String)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javax/ x(62°
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javax% x(.ã'
Iorg.jabref.logic.util.io.RegExpBasedFileFinderTest.authorWithDiacritics()METHODO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java~	 ~("
isFinalfalse"Å
declarationStringÎ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">authorWithDiacritics</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*authorWithDiacritics2ú
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaÄF Ä(U2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaÅ Å(2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaÇ Ç(2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaÉ É(2Ö
©org.jabref.logic.util.io.RegExpBasedFileFinder.findAssociatedFiles(org.jabref.model.entry.BibEntry, java.util.List<java.nio.file.Path>, java.util.List<java.lang.String>)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaà' à(:2o
java.util.List.of(E)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaàL à(N2o
java.util.List.of(E)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaâ# â(%2á
,java.nio.file.Path.resolve(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaâ0 â(72´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaÄ" Ä(*2∆
korg.jabref.logic.util.io.RegExpBasedFileFinder.RegExpBasedFileFinder(java.lang.String, java.lang.Character)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaÖ/ Ö(D2Ω
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.authorWithDiacritics()?localEntry@128.17:128.27CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaÅ Å(2Ω
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.authorWithDiacritics()?localEntry@128.17:128.27CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaÇ Ç(2Ω
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.authorWithDiacritics()?localEntry@128.17:128.27CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaÉ É(2Ω
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.authorWithDiacritics()?fileFinder@133.30:133.40CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaà à(&2Ω
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.authorWithDiacritics()?localEntry@128.17:128.27CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaà; à(E2£
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaàO à(X2ß
Lorg.jabref.logic.util.io.RegExpBasedFileFinderTest?PDF_EXTENSION@19.38:19.51CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaà[ à(h2£
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaâ& â(/2ª
`org.jabref.logic.util.io.RegExpBasedFileFinderTest.authorWithDiacritics()?expected@137.19:137.27CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaå å(2π
^org.jabref.logic.util.io.RegExpBasedFileFinderTest.authorWithDiacritics()?result@136.19:136.25CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaå å(%2ƒ
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.authorWithDiacritics()?localEntry@128.17:128.27DECLARATIONQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaÄ Ä(2ƒ
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.authorWithDiacritics()?fileFinder@133.30:133.40DECLARATIONQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaÖ Ö((2¿
^org.jabref.logic.util.io.RegExpBasedFileFinderTest.authorWithDiacritics()?result@136.19:136.25DECLARATIONQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaà à(2¬
`org.jabref.logic.util.io.RegExpBasedFileFinderTest.authorWithDiacritics()?expected@137.19:137.27DECLARATIONQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaâ â(2d
voidRETURN_TYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java~ ~(
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.authorWithDiacritics()?localEntry@128.17:128.27VARIABLEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaÄ Ä("
typeBibEntry"
isFinalfalse"≥
declarationStringù<mark class="modifier"> </mark>BibEntry <mark class="class-field">localEntry</mark> = new BibEntry(StandardEntryType.Article).withCitationKey("Grazulis2017")*
localEntry2z
org.jabref.model.entry.BibEntryTYPEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaÄ Ä(2ú
Aorg.jabref.model.entry.BibEntry.withCitationKey(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaÄF Ä(U2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaÄ" Ä(*Ÿ
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.authorWithDiacritics()?fileFinder@133.30:133.40VARIABLEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaÖ Ö(("
typeRegExpBasedFileFinder"
isFinalfalse"É
declarationStringÌ<mark class="modifier"> </mark>RegExpBasedFileFinder <mark class="class-field">fileFinder</mark> = new RegExpBasedFileFinder("**/[year]_[auth]_[firstpage]\\\\.[extension]"<mark class="modifier">,</mark> '<mark class="modifier">,</mark>')*
fileFinder2â
.org.jabref.logic.util.io.RegExpBasedFileFinderTYPEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaÖ Ö(2∆
korg.jabref.logic.util.io.RegExpBasedFileFinder.RegExpBasedFileFinder(java.lang.String, java.lang.Character)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaÖ/ Ö(DÔ
^org.jabref.logic.util.io.RegExpBasedFileFinderTest.authorWithDiacritics()?result@136.19:136.25VARIABLEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaà à("
type
List<Path>"
isFinalfalse"’
declarationStringø<mark class="modifier"> </mark>List<Path> <mark class="class-field">result</mark> = fileFinder.findAssociatedFiles(localEntry, List.of(directory)<mark class="modifier">,</mark> PDF_EXTENSION)*result2i
java.util.ListTYPEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaà à(2v
java.nio.file.PathTYPE_ARGUMENTQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaà à(2Ö
©org.jabref.logic.util.io.RegExpBasedFileFinder.findAssociatedFiles(org.jabref.model.entry.BibEntry, java.util.List<java.nio.file.Path>, java.util.List<java.lang.String>)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaà' à(:2o
java.util.List.of(E)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaàL à(N2Ω
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.authorWithDiacritics()?fileFinder@133.30:133.40CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaà à(&2Ω
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.authorWithDiacritics()?localEntry@128.17:128.27CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaà; à(E2£
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaàO à(X2ß
Lorg.jabref.logic.util.io.RegExpBasedFileFinderTest?PDF_EXTENSION@19.38:19.51CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaà[ à(h≠
`org.jabref.logic.util.io.RegExpBasedFileFinderTest.authorWithDiacritics()?expected@137.19:137.27VARIABLEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaâ â("
type
List<Path>"
isFinalfalse"∑
declarationString°<mark class="modifier"> </mark>List<Path> <mark class="class-field">expected</mark> = List.of(directory.resolve("directory/subdirectory/2017_Gra≈æulis_726.pdf"))*expected2i
java.util.ListTYPEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaâ â(2v
java.nio.file.PathTYPE_ARGUMENTQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaâ â(2o
java.util.List.of(E)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaâ# â(%2á
,java.nio.file.Path.resolve(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaâ0 â(72£
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaâ& â(/"
Korg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileInSubdirectory()METHODQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaê	 ê("
isFinalfalse"É
declarationStringÌ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findFileInSubdirectory</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*findFileInSubdirectory2õ
@org.jabref.model.entry.BibEntry.setCitationKey(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaì ì(!2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaî î(2Ö
©org.jabref.logic.util.io.RegExpBasedFileFinder.findAssociatedFiles(org.jabref.model.entry.BibEntry, java.util.List<java.nio.file.Path>, java.util.List<java.lang.String>)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaô' ô(:2o
java.util.List.of(E)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaôL ô(N2o
java.util.List.of(E)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaö# ö(%2á
,java.nio.file.Path.resolve(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaö0 ö(72´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaí" í(*2∆
korg.jabref.logic.util.io.RegExpBasedFileFinder.RegExpBasedFileFinder(java.lang.String, java.lang.Character)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javañ/ ñ(D2ø
dorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileInSubdirectory()?localEntry@146.17:146.27CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaì ì(2ø
dorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileInSubdirectory()?localEntry@146.17:146.27CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaî î(2ø
dorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileInSubdirectory()?fileFinder@150.30:150.40CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaô ô(&2ø
dorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileInSubdirectory()?localEntry@146.17:146.27CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaô; ô(E2£
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaôO ô(X2ß
Lorg.jabref.logic.util.io.RegExpBasedFileFinderTest?PDF_EXTENSION@19.38:19.51CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaô[ ô(h2£
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaö& ö(/2Ω
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileInSubdirectory()?expected@154.19:154.27CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaù ù(2ª
`org.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileInSubdirectory()?result@153.19:153.25CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaù ù(%2∆
dorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileInSubdirectory()?localEntry@146.17:146.27DECLARATIONQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaí í(2∆
dorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileInSubdirectory()?fileFinder@150.30:150.40DECLARATIONQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javañ ñ((2¬
`org.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileInSubdirectory()?result@153.19:153.25DECLARATIONQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaô ô(2ƒ
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileInSubdirectory()?expected@154.19:154.27DECLARATIONQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaö ö(2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaê ê(≤
dorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileInSubdirectory()?localEntry@146.17:146.27VARIABLEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaí í("
typeBibEntry"
isFinalfalse"í
declarationString}<mark class="modifier"> </mark>BibEntry <mark class="class-field">localEntry</mark> = new BibEntry(StandardEntryType.Article)*
localEntry2z
org.jabref.model.entry.BibEntryTYPEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaí í(2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaí" í(*—
dorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileInSubdirectory()?fileFinder@150.30:150.40VARIABLEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javañ ñ(("
typeRegExpBasedFileFinder"
isFinalfalse"˘
declarationString„<mark class="modifier"> </mark>RegExpBasedFileFinder <mark class="class-field">fileFinder</mark> = new RegExpBasedFileFinder("**/[citationkey].*\\\\.[extension]"<mark class="modifier">,</mark> '<mark class="modifier">,</mark>')*
fileFinder2â
.org.jabref.logic.util.io.RegExpBasedFileFinderTYPEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javañ ñ(2∆
korg.jabref.logic.util.io.RegExpBasedFileFinder.RegExpBasedFileFinder(java.lang.String, java.lang.Character)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javañ/ ñ(Dı
`org.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileInSubdirectory()?result@153.19:153.25VARIABLEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaô ô("
type
List<Path>"
isFinalfalse"’
declarationStringø<mark class="modifier"> </mark>List<Path> <mark class="class-field">result</mark> = fileFinder.findAssociatedFiles(localEntry, List.of(directory)<mark class="modifier">,</mark> PDF_EXTENSION)*result2i
java.util.ListTYPEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaô ô(2v
java.nio.file.PathTYPE_ARGUMENTQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaô ô(2Ö
©org.jabref.logic.util.io.RegExpBasedFileFinder.findAssociatedFiles(org.jabref.model.entry.BibEntry, java.util.List<java.nio.file.Path>, java.util.List<java.lang.String>)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaô' ô(:2o
java.util.List.of(E)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaôL ô(N2ø
dorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileInSubdirectory()?fileFinder@150.30:150.40CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaô ô(&2ø
dorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileInSubdirectory()?localEntry@146.17:146.27CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaô; ô(E2£
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaôO ô(X2ß
Lorg.jabref.logic.util.io.RegExpBasedFileFinderTest?PDF_EXTENSION@19.38:19.51CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaô[ ô(hÆ
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileInSubdirectory()?expected@154.19:154.27VARIABLEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaö ö("
type
List<Path>"
isFinalfalse"∂
declarationString†<mark class="modifier"> </mark>List<Path> <mark class="class-field">expected</mark> = List.of(directory.resolve("directory/subdirectory/pdfInSubdirectory.pdf"))*expected2i
java.util.ListTYPEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaö ö(2v
java.nio.file.PathTYPE_ARGUMENTQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaö ö(2o
java.util.List.of(E)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaö# ö(%2á
,java.nio.file.Path.resolve(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaö0 ö(72£
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaö& ö(/ß
Iorg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileNonRecursive()METHODQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java°	 °("
isFinalfalse"Å
declarationStringÎ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">findFileNonRecursive</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*findFileNonRecursive2õ
@org.jabref.model.entry.BibEntry.setCitationKey(java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java§ §(!2π
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java• •(2Ö
©org.jabref.logic.util.io.RegExpBasedFileFinder.findAssociatedFiles(org.jabref.model.entry.BibEntry, java.util.List<java.nio.file.Path>, java.util.List<java.lang.String>)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java™' ™(:2o
java.util.List.of(E)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java™L ™(N2s
java.util.List.isEmpty()CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java≠ ≠(!2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java£" £(*2∆
korg.jabref.logic.util.io.RegExpBasedFileFinder.RegExpBasedFileFinder(java.lang.String, java.lang.Character)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaß/ ß(D2Ω
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileNonRecursive()?localEntry@163.17:163.27CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java§ §(2Ω
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileNonRecursive()?localEntry@163.17:163.27CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java• •(2Ω
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileNonRecursive()?fileFinder@167.30:167.40CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java™ ™(&2Ω
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileNonRecursive()?localEntry@163.17:163.27CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java™; ™(E2£
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java™O ™(X2ß
Lorg.jabref.logic.util.io.RegExpBasedFileFinderTest?PDF_EXTENSION@19.38:19.51CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java™[ ™(h2π
^org.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileNonRecursive()?result@170.19:170.25CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java≠ ≠(2ƒ
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileNonRecursive()?localEntry@163.17:163.27DECLARATIONQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java£ £(2ƒ
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileNonRecursive()?fileFinder@167.30:167.40DECLARATIONQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaß ß((2¿
^org.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileNonRecursive()?result@170.19:170.25DECLARATIONQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java™ ™(2f
voidRETURN_TYPEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java° °(∞
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileNonRecursive()?localEntry@163.17:163.27VARIABLEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java£ £("
typeBibEntry"
isFinalfalse"í
declarationString}<mark class="modifier"> </mark>BibEntry <mark class="class-field">localEntry</mark> = new BibEntry(StandardEntryType.Article)*
localEntry2z
org.jabref.model.entry.BibEntryTYPEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java£ £(2´
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java£" £(*Œ
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileNonRecursive()?fileFinder@167.30:167.40VARIABLEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaß ß(("
typeRegExpBasedFileFinder"
isFinalfalse"¯
declarationString‚<mark class="modifier"> </mark>RegExpBasedFileFinder <mark class="class-field">fileFinder</mark> = new RegExpBasedFileFinder("*/[citationkey].*\\\\.[extension]"<mark class="modifier">,</mark> '<mark class="modifier">,</mark>')*
fileFinder2â
.org.jabref.logic.util.io.RegExpBasedFileFinderTYPEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaß ß(2∆
korg.jabref.logic.util.io.RegExpBasedFileFinder.RegExpBasedFileFinder(java.lang.String, java.lang.Character)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaß/ ß(DÔ
^org.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileNonRecursive()?result@170.19:170.25VARIABLEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java™ ™("
type
List<Path>"
isFinalfalse"’
declarationStringø<mark class="modifier"> </mark>List<Path> <mark class="class-field">result</mark> = fileFinder.findAssociatedFiles(localEntry, List.of(directory)<mark class="modifier">,</mark> PDF_EXTENSION)*result2i
java.util.ListTYPEQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java™ ™(2v
java.nio.file.PathTYPE_ARGUMENTQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java™ ™(2Ö
©org.jabref.logic.util.io.RegExpBasedFileFinder.findAssociatedFiles(org.jabref.model.entry.BibEntry, java.util.List<java.nio.file.Path>, java.util.List<java.lang.String>)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java™' ™(:2o
java.util.List.of(E)CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java™L ™(N2Ω
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileNonRecursive()?fileFinder@167.30:167.40CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java™ ™(&2Ω
borg.jabref.logic.util.io.RegExpBasedFileFinderTest.findFileNonRecursive()?localEntry@163.17:163.27CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java™; ™(E2£
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java™O ™(X2ß
Lorg.jabref.logic.util.io.RegExpBasedFileFinderTest?PDF_EXTENSION@19.38:19.51CALLQ
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java™[ ™(h∆
Lorg.jabref.logic.util.io.RegExpBasedFileFinderTest?PDF_EXTENSION@19.38:19.51VALUEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java& (3"
isFinaltrue"
typeList<String>"‰
declarationStringŒ<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>List<String> <mark class="class-field">PDF_EXTENSION</mark> = Collections.singletonList("pdf");"
isStatictrue"
accessprivate*PDF_EXTENSION2g
java.util.ListTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java (2r
java.lang.StringTYPE_ARGUMENTO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java ($2
&java.util.Collections.singletonList(T)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.javaB (Oî

Iorg.jabref.logic.util.io.RegExpBasedFileFinderTest?FILE_NAMES@20.38:20.48VALUEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java& (0"
isFinaltrue"
typeList<String>"∏
declarationString¢<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>List<String> <mark class="class-field">FILE_NAMES</mark> = List.of("ACM_IEEE-CS.pdf"<mark class="modifier">,</mark> "pdfInDatabase.pdf"<mark class="modifier">,</mark> "Regexp from [A-Z].pdf"<mark class="modifier">,</mark> "directory/subdirectory/2003_Hippel_209.pdf"<mark class="modifier">,</mark> "directory/subdirectory/2017_Gra≈æulis_726.pdf"<mark class="modifier">,</mark> "directory/subdirectory/pdfInSubdirectory.pdf"<mark class="modifier">,</mark> "directory/subdirectory/GUO ea - INORG CHEM COMMUN 2010 - Ferroelectric Metal Organic Framework (MOF).pdf");"
isStatictrue"
accessprivate*
FILE_NAMES2g
java.util.ListTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java (2r
java.lang.StringTYPE_ARGUMENTO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java ($2
&java.util.List.of(E, E, E, E, E, E, E)CALLO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java8 (:œ
Horg.jabref.logic.util.io.RegExpBasedFileFinderTest?directory@29.17:29.26VARIABLEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java ("
isFinalfalse"
typePath"j
declarationStringU<mark class="modifier">private </mark>Path <mark class="class-field">directory</mark>"
isStaticfalse"
accessprivate*	directory2k
java.nio.file.PathTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java (ÿ
Dorg.jabref.logic.util.io.RegExpBasedFileFinderTest?entry@30.21:30.26VARIABLEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java ("
isFinalfalse"
typeBibEntry"j
declarationStringU<mark class="modifier">private </mark>BibEntry <mark class="class-field">entry</mark>"
isStaticfalse"
accessprivate*entry2x
org.jabref.model.entry.BibEntryTYPEO
Esrc\test\java\org\jabref\logic\util\io\RegExpBasedFileFinderTest.java (