
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaô

'org.jabref.logic.util.io.BackupFileUtilCLASSD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java ("#
packageorg.jabref.logic.util.io"
isFinalfalse"
inner classfalse"

isAbstractfalse"l
declarationStringW<mark class="modifier">public </mark><mark class="modifier">class </mark>BackupFileUtil"
accesspublic*BackupFileUtil2ç
8org.jabref.logic.util.io.BackupFileUtil.BackupFileUtil()DECLARATIOND
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java (2ı
üorg.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)DECLARATIOND
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java) )(@2Ì
óorg.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)DECLARATIOND
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java;! ;(B2§
Oorg.jabref.logic.util.io.BackupFileUtil.getUniqueFilePrefix(java.nio.file.Path)DECLARATIOND
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javae e(,2è
:org.jabref.logic.util.io.BackupFileUtil?LOGGER@19.32:19.38DECLARATIOND
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java  (&Ñ
8org.jabref.logic.util.io.BackupFileUtil.BackupFileUtil()CONSTRUCTORD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java ("g
declarationStringR<mark class="modifier">private </mark><mark class="method">BackupFileUtil</mark>()*BackupFileUtil2|
'org.jabref.logic.util.io.BackupFileUtilRETURN_TYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java (¸I
üorg.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)METHODD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java) )(@"
isFinalfalse"‹
declarationString∆<mark class="modifier">public </mark><mark class="modifier">static </mark>Path <mark class="method">getPathForNewBackupFileAndCreateDirectory</mark>(Path targetFile<mark class="modifier"><mark class="modifier">,</mark></mark> BackupFileType fileType<mark class="modifier"><mark class="modifier">,</mark></mark> Path backupDir)"
isStatictrue"
accesspublic"

isAbstractfalse"
typePath*)getPathForNewBackupFileAndCreateDirectory2e
java.util.List.get(int)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java*: *(=2Ç
4org.jabref.logic.util.BackupFileType.getExtensions()CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java** *(72ê
Bjava.time.ZonedDateTime.format(java.time.format.DateTimeFormatter)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java+0 +(62k
java.time.ZonedDateTime.now()CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java+* +(-2å
>java.time.format.DateTimeFormatter.ofPattern(java.lang.String)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java+I +(R2Õ
java.nio.file.Files.createDirectories(java.nio.file.Path, java.nio.file.attribute.FileAttribute<? extends java.lang.Object>...)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java0 0(#2¢
Torg.jabref.logic.util.io.FileUtil.addExtension(java.nio.file.Path, java.lang.String)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java2# 2(/2ù
Oorg.jabref.logic.util.io.BackupFileUtil.getUniqueFilePrefix(java.nio.file.Path)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java6 6(12n
 java.nio.file.Path.getFileName()CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java6R 6(]2¢
Torg.jabref.logic.util.io.FileUtil.addExtension(java.nio.file.Path, java.lang.String)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java7! 7(-2ä
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java73 7(52|
.java.nio.file.Path.resolve(java.nio.file.Path)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java8 8( 2˜
®org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!fileTypeCALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java*! *()2¯
©org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!backupDirCALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java. .("2Ñ
µorg.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?directory@46.13:46.22CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java0$ 0(-2˘
™org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!targetFileCALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java20 2(:2Ñ
µorg.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?extension@42.15:42.24CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java2< 2(E2à
:org.jabref.logic.util.io.BackupFileUtil?LOGGER@19.32:19.38CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java3 3(2Ñ
µorg.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?directory@46.13:46.22CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java3W 3(`2Å
≤org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?result@50.17:50.23CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java3b 3(h2¸
≠org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?e@49.29:49.30CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java3j 3(k2Å
≤org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?result@50.17:50.23CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java4 4(2˘
™org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!targetFileCALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java62 6(<2˘
™org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!targetFileCALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java6G 6(Q2Ö
∂org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?timeSuffix@43.15:43.25CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java6i 6(s2á
∏org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?baseFileName@54.15:54.27CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java76 7(B2Ñ
µorg.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?extension@42.15:42.24CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java7E 7(N2Ñ
µorg.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?directory@46.13:46.22CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java8 8(2É
¥org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?fileName@55.13:55.21CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java8! 8()2˛
™org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!targetFile	PARAMETERD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java)F )(P2¸
®org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!fileType	PARAMETERD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java)a )(i2˝
©org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!backupDir	PARAMETERD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java)p )(y2ã
µorg.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?extension@42.15:42.24DECLARATIOND
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java* *(2å
∂org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?timeSuffix@43.15:43.25DECLARATIOND
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java+ +(2ã
µorg.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?directory@46.13:46.22DECLARATIOND
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java. .(2à
≤org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?result@50.17:50.23DECLARATIOND
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java2 2(2é
∏org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?baseFileName@54.15:54.27DECLARATIOND
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java6 6(2ä
¥org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?fileName@55.13:55.21DECLARATIOND
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java7 7(2É
≠org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?e@49.29:49.30DECLARATIOND
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java1 1(2g
java.nio.file.PathRETURN_TYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java) )(ã
µorg.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?extension@42.15:42.24VARIABLED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java* *("
typeString"
isFinalfalse"ç
declarationStringx<mark class="modifier"> </mark>String <mark class="class-field">extension</mark> = "." + fileType.getExtensions().get(0)*	extension2^
java.lang.StringTYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java* *(2e
java.util.List.get(int)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java*: *(=2Ç
4org.jabref.logic.util.BackupFileType.getExtensions()CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java** *(72˜
®org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!fileTypeCALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java*! *()‚
∂org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?timeSuffix@43.15:43.25VARIABLED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java+ +("
typeString"
isFinalfalse"π
declarationString£<mark class="modifier"> </mark>String <mark class="class-field">timeSuffix</mark> = ZonedDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd--HH.mm.ss"))*
timeSuffix2^
java.lang.StringTYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java+ +(2ê
Bjava.time.ZonedDateTime.format(java.time.format.DateTimeFormatter)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java+0 +(62k
java.time.ZonedDateTime.now()CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java+* +(-2å
>java.time.format.DateTimeFormatter.ofPattern(java.lang.String)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java+I +(RÅ
µorg.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?directory@46.13:46.22VARIABLED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java. .("
typePath"
isFinalfalse"o
declarationStringZ<mark class="modifier"> </mark>Path <mark class="class-field">directory</mark> = backupDir*	directory2`
java.nio.file.PathTYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java. .(2¯
©org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!backupDirCALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java. .("…	
≤org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?result@50.17:50.23VARIABLED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java2 2("
typePath"
isFinalfalse"è
declarationStringz<mark class="modifier"> </mark>Path <mark class="class-field">result</mark> = FileUtil.addExtension(targetFile, extension)*result2`
java.nio.file.PathTYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java2 2(2¢
Torg.jabref.logic.util.io.FileUtil.addExtension(java.nio.file.Path, java.lang.String)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java2# 2(/2˘
™org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!targetFileCALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java20 2(:2Ñ
µorg.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?extension@42.15:42.24CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java2< 2(EÔ
∏org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?baseFileName@54.15:54.27VARIABLED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java6 6("
typeString"
isFinalfalse"¡
declarationString´<mark class="modifier"> </mark>String <mark class="class-field">baseFileName</mark> = getUniqueFilePrefix(targetFile) + "--" + targetFile.getFileName() + "--" + timeSuffix*baseFileName2^
java.lang.StringTYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java6 6(2ù
Oorg.jabref.logic.util.io.BackupFileUtil.getUniqueFilePrefix(java.nio.file.Path)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java6 6(12n
 java.nio.file.Path.getFileName()CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java6R 6(]2˘
™org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!targetFileCALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java62 6(<2˘
™org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!targetFileCALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java6G 6(Q2Ö
∂org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?timeSuffix@43.15:43.25CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java6i 6(sî
¥org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?fileName@55.13:55.21VARIABLED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java7 7("
typePath"
isFinalfalse"ª
declarationString•<mark class="modifier"> </mark>Path <mark class="class-field">fileName</mark> = FileUtil.addExtension(Path.of(baseFileName)<mark class="modifier">,</mark> extension)*fileName2`
java.nio.file.PathTYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java7 7(2¢
Torg.jabref.logic.util.io.FileUtil.addExtension(java.nio.file.Path, java.lang.String)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java7! 7(-2ä
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java73 7(52á
∏org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?baseFileName@54.15:54.27CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java76 7(B2Ñ
µorg.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?extension@42.15:42.24CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java7E 7(N≤
™org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!targetFile	PARAMETERD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java)F )(P"
typePath"
isFinalfalse"$
declarationStringPath targetFile*
targetFile2`
java.nio.file.PathTYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java)A )(E“
®org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!fileType	PARAMETERD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java)a )(i"
typeBackupFileType"
isFinalfalse",
declarationStringBackupFileType fileType*fileType2r
$org.jabref.logic.util.BackupFileTypeTYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java)R )(`Ø
©org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!backupDir	PARAMETERD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java)p )(y"
typePath"
isFinalfalse"#
declarationStringPath backupDir*	backupDir2`
java.nio.file.PathTYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java)k )(o±
≠org.jabref.logic.util.io.BackupFileUtil.getPathForNewBackupFileAndCreateDirectory(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?e@49.29:49.30VARIABLED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java1 1("
typeIOException"
isFinalfalse""
declarationStringIOException e*e2a
java.io.IOExceptionTYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java1 1(ﬂL
óorg.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)METHODD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java;! ;(B"
isFinalfalse"‰
declarationStringŒ<mark class="modifier">public </mark><mark class="modifier">static </mark>Optional&lt;Path&gt; <mark class="method">getPathOfLatestExistingBackupFile</mark>(Path targetFile<mark class="modifier"><mark class="modifier">,</mark></mark> BackupFileType fileType<mark class="modifier"><mark class="modifier">,</mark></mark> Path backupDir)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeOptional<Path>*!getPathOfLatestExistingBackupFile2e
java.util.List.get(int)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java>: >(=2Ç
4org.jabref.logic.util.BackupFileType.getExtensions()CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java>* >(72ú
Njava.nio.file.Files.notExists(java.nio.file.Path, java.nio.file.LinkOption...)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java@ @(2¢
Torg.jabref.logic.util.io.FileUtil.addExtension(java.nio.file.Path, java.lang.String)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaB# B(/2ô
Kjava.nio.file.Files.exists(java.nio.file.Path, java.nio.file.LinkOption...)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaC C(2f
java.util.Optional.of(T)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaD  D("2h
java.util.Optional.empty()CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaF  F(%2ù
Oorg.jabref.logic.util.io.BackupFileUtil.getUniqueFilePrefix(java.nio.file.Path)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaK K(12n
 java.nio.file.Path.getFileName()CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaKR K(]2í
Djava.util.stream.Stream.reduce(java.util.function.BinaryOperator<T>)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaR# R()2n
 java.util.stream.Stream.sorted()CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaQ# Q()2ï
Gjava.util.stream.Stream.filter(java.util.function.Predicate<? super T>)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaP# P()2z
,java.nio.file.Files.list(java.nio.file.Path)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaN# N('2{
-java.lang.String.startsWith(java.lang.String)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaPJ P(T2k
java.nio.file.Path.toString()CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaP? P(G2n
 java.nio.file.Path.getFileName()CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaP1 P(<2h
java.util.Optional.empty()CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaU U(!2Ô
†org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!fileTypeCALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java>! >()2
°org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!backupDirCALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java@ @(%2Ò
¢org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!targetFileCALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaB0 B(:2¸
≠org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?extension@62.15:62.24CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaB< B(E2˘
™org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?result@66.17:66.23CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaC C(#2˘
™org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?result@66.17:66.23CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaD# D()2Ò
¢org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!targetFileCALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaK2 K(<2Ò
¢org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!targetFileCALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaKG K(Q2Å
≤org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?mostRecentFile@76.23:76.37CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaN N(2
°org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!backupDirCALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaN( N(12Ù
•org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?p@80.42:80.43CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaP/ P(02˘
™org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?prefix@75.21:75.27CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaPU P([2˘
™org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?second@82.50:82.56CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaR= R(C2à
:org.jabref.logic.util.io.BackupFileUtil?LOGGER@19.32:19.38CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaT T(2Ù
•org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?e@83.29:83.30CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaTA T(B2Å
≤org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?mostRecentFile@76.23:76.37CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaW W(2ˆ
¢org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!targetFile	PARAMETERD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java;H ;(R2Ù
†org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!fileType	PARAMETERD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java;c ;(k2ı
°org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!backupDir	PARAMETERD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java;r ;({2É
≠org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?extension@62.15:62.24DECLARATIOND
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java> >(2Ä
™org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?result@66.17:66.23DECLARATIOND
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaB B(2Ä
™org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?prefix@75.21:75.27DECLARATIOND
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaK K(2à
≤org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?mostRecentFile@76.23:76.37DECLARATIOND
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaL L(%2˚
•org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?p@80.42:80.43DECLARATIOND
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaP* P(+2ˇ
©org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?first@82.43:82.48DECLARATIOND
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaR+ R(02Ä
™org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?second@82.50:82.56DECLARATIOND
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaR2 R(82˚
•org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?e@83.29:83.30DECLARATIOND
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaS S(2g
java.util.OptionalRETURN_TYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java; ;(2p
java.nio.file.PathRETURN_TYPE_ARGUMENTD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java; ;(˚
≠org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?extension@62.15:62.24VARIABLED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java> >("
typeString"
isFinalfalse"ç
declarationStringx<mark class="modifier"> </mark>String <mark class="class-field">extension</mark> = "." + fileType.getExtensions().get(0)*	extension2^
java.lang.StringTYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java> >(2e
java.util.List.get(int)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java>: >(=2Ç
4org.jabref.logic.util.BackupFileType.getExtensions()CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java>* >(72Ô
†org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!fileTypeCALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java>! >()±	
™org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?result@66.17:66.23VARIABLED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaB B("
typePath"
isFinalfalse"è
declarationStringz<mark class="modifier"> </mark>Path <mark class="class-field">result</mark> = FileUtil.addExtension(targetFile, extension)*result2`
java.nio.file.PathTYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaB B(2¢
Torg.jabref.logic.util.io.FileUtil.addExtension(java.nio.file.Path, java.lang.String)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaB# B(/2Ò
¢org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!targetFileCALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaB0 B(:2¸
≠org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?extension@62.15:62.24CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaB< B(E…

™org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?prefix@75.21:75.27VALUED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaK K("
typeString"
isFinaltrue"À
declarationStringµ<mark class="modifier"> </mark><mark class="modifier">final </mark>String <mark class="class-field">prefix</mark> = getUniqueFilePrefix(targetFile) + "--" + targetFile.getFileName()*prefix2^
java.lang.StringTYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaK K(2ù
Oorg.jabref.logic.util.io.BackupFileUtil.getUniqueFilePrefix(java.nio.file.Path)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaK K(12n
 java.nio.file.Path.getFileName()CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaKR K(]2Ò
¢org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!targetFileCALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaK2 K(<2Ò
¢org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!targetFileCALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaKG K(QÄ
≤org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?mostRecentFile@76.23:76.37VARIABLED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaL L(%"
typeOptional<Path>"
isFinalfalse"r
declarationString]<mark class="modifier"> </mark>Optional<Path> <mark class="class-field">mostRecentFile</mark>*mostRecentFile2`
java.util.OptionalTYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaL L(2i
java.nio.file.PathTYPE_ARGUMENTD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaL L(™
¢org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!targetFile	PARAMETERD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java;H ;(R"
typePath"
isFinalfalse"$
declarationStringPath targetFile*
targetFile2`
java.nio.file.PathTYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java;C ;(G 
†org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!fileType	PARAMETERD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java;c ;(k"
typeBackupFileType"
isFinalfalse",
declarationStringBackupFileType fileType*fileType2r
$org.jabref.logic.util.BackupFileTypeTYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java;T ;(bß
°org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)!backupDir	PARAMETERD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java;r ;({"
typePath"
isFinalfalse"#
declarationStringPath backupDir*	backupDir2`
java.nio.file.PathTYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java;m ;(q∂
•org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?p@80.42:80.43VARIABLED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaP* P(+"
type"
isFinalfalse"
declarationString p*p2TYPE¬
©org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?first@82.43:82.48VARIABLED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaR+ R(0"
type"
isFinalfalse"
declarationString first*first2TYPE≈
™org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?second@82.50:82.56VARIABLED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaR2 R(8"
type"
isFinalfalse"
declarationString second*second2TYPE©
•org.jabref.logic.util.io.BackupFileUtil.getPathOfLatestExistingBackupFile(java.nio.file.Path, org.jabref.logic.util.BackupFileType, java.nio.file.Path)?e@83.29:83.30VARIABLED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaS S("
typeIOException"
isFinalfalse""
declarationStringIOException e*e2a
java.io.IOExceptionTYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaS S(„
Oorg.jabref.logic.util.io.BackupFileUtil.getUniqueFilePrefix(java.nio.file.Path)METHODD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javae e(,"
isFinalfalse"ß
declarationStringë<mark class="modifier">public </mark><mark class="modifier">static </mark>String <mark class="method">getUniqueFilePrefix</mark>(Path targetFile)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeString*getUniqueFilePrefix2e
java.lang.Math.abs(int)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javah  h(#2k
java.nio.file.Path.hashCode()CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javah/ h(72i
java.nio.ByteBuffer.array()CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaiC i(H2m
java.nio.ByteBuffer.putInt(int)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javai. i(42o
!java.nio.ByteBuffer.allocate(int)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javai" i(*2s
%java.util.HexFormat.formatHex(byte[])CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaj j('2f
java.util.HexFormat.of()CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaj j(2®
Zorg.jabref.logic.util.io.BackupFileUtil.getUniqueFilePrefix(java.nio.file.Path)!targetFileCALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javah$ h(.2∏
jorg.jabref.logic.util.io.BackupFileUtil.getUniqueFilePrefix(java.nio.file.Path)?positiveCode@104.12:104.24CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javai5 i(A2±
corg.jabref.logic.util.io.BackupFileUtil.getUniqueFilePrefix(java.nio.file.Path)?array@105.15:105.20CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaj( j(-2≠
Zorg.jabref.logic.util.io.BackupFileUtil.getUniqueFilePrefix(java.nio.file.Path)!targetFile	PARAMETERD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javae2 e(<2ø
jorg.jabref.logic.util.io.BackupFileUtil.getUniqueFilePrefix(java.nio.file.Path)?positiveCode@104.12:104.24DECLARATIOND
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javah h(2∏
corg.jabref.logic.util.io.BackupFileUtil.getUniqueFilePrefix(java.nio.file.Path)?array@105.15:105.20DECLARATIOND
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javai i(2e
java.lang.StringRETURN_TYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javae e(‰
jorg.jabref.logic.util.io.BackupFileUtil.getUniqueFilePrefix(java.nio.file.Path)?positiveCode@104.12:104.24VARIABLED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javah h("
typeint"
isFinalfalse"¶
declarationStringê<mark class="modifier"> </mark><mark class="modifier">int</mark> <mark class="class-field">positiveCode</mark> = Math.abs(targetFile.hashCode())*positiveCode2Q
intTYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javah h(2e
java.lang.Math.abs(int)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javah  h(#2k
java.nio.file.Path.hashCode()CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javah/ h(72®
Zorg.jabref.logic.util.io.BackupFileUtil.getUniqueFilePrefix(java.nio.file.Path)!targetFileCALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javah$ h(.”
corg.jabref.logic.util.io.BackupFileUtil.getUniqueFilePrefix(java.nio.file.Path)?array@105.15:105.20VARIABLED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javai i("
typebyte"
isFinalfalse"ò
declarationStringÇ<mark class="modifier"> </mark>byte[] <mark class="class-field">array</mark> = ByteBuffer.allocate(4).putInt(positiveCode).array()*array2T
byte[]TYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javai i(2i
java.nio.ByteBuffer.array()CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javaiC i(H2m
java.nio.ByteBuffer.putInt(int)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javai. i(42o
!java.nio.ByteBuffer.allocate(int)CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javai" i(*2∏
jorg.jabref.logic.util.io.BackupFileUtil.getUniqueFilePrefix(java.nio.file.Path)?positiveCode@104.12:104.24CALLD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javai5 i(A·
Zorg.jabref.logic.util.io.BackupFileUtil.getUniqueFilePrefix(java.nio.file.Path)!targetFile	PARAMETERD
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javae2 e(<"
typePath"
isFinalfalse"$
declarationStringPath targetFile*
targetFile2`
java.nio.file.PathTYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.javae- e(1û
:org.jabref.logic.util.io.BackupFileUtil?LOGGER@19.32:19.38VALUED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java  (&"
isFinaltrue"
typeLogger"‰
declarationStringŒ<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>Logger <mark class="class-field">LOGGER</mark> = LoggerFactory.getLogger(BackupFileUtil.class);"
isStatictrue"
accessprivate*LOGGER2^
org.slf4j.LoggerTYPED
:src\main\java\org\jabref\logic\util\io\BackupFileUtil.java (