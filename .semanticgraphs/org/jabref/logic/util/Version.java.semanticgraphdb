
0src\main\java\org\jabref\logic\util\Version.java≠!
org.jabref.logic.util.VersionCLASS:
0src\main\java\org\jabref\logic\util\Version.java (" 
packageorg.jabref.logic.util"
isFinalfalse"
inner classfalse"

isAbstractfalse"e
declarationStringP<mark class="modifier">public </mark><mark class="modifier">class </mark>Version"
accesspublic*Version2r
'org.jabref.logic.util.Version.Version()DECLARATION:
0src\main\java\org\jabref\logic\util\Version.java, ,(2t
)org.jabref.logic.util.Version.getLogger()DECLARATION:
0src\main\java\org\jabref\logic\util\Version.java3 3(#2Ä
5org.jabref.logic.util.Version.parse(java.lang.String)DECLARATION:
0src\main\java\org\jabref\logic\util\Version.java; ;(2Ç
7org.jabref.logic.util.Version.getAllAvailableVersions()DECLARATION:
0src\main\java\org\jabref\logic\util\Version.javak  k(72ì
Horg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)DECLARATION:
0src\main\java\org\jabref\logic\util\Version.java~ ~(2´
^org.jabref.logic.util.Version.shouldBeUpdatedTo(java.util.List<org.jabref.logic.util.Version>)DECLARATION<
0src\main\java\org\jabref\logic\util\Version.java´ ´(.2õ
Norg.jabref.logic.util.Version.shouldBeUpdatedTo(org.jabref.logic.util.Version)DECLARATION<
0src\main\java\org\jabref\logic\util\Version.javaª ª($2{
.org.jabref.logic.util.Version.getFullVersion()DECLARATION<
0src\main\java\org\jabref\logic\util\Version.java∆ ∆( 2u
(org.jabref.logic.util.Version.getMajor()DECLARATION<
0src\main\java\org\jabref\logic\util\Version.java   (2u
(org.jabref.logic.util.Version.getMinor()DECLARATION<
0src\main\java\org\jabref\logic\util\Version.javaŒ Œ(2u
(org.jabref.logic.util.Version.getPatch()DECLARATION<
0src\main\java\org\jabref\logic\util\Version.java“ “(2~
1org.jabref.logic.util.Version.getDevelopmentNum()DECLARATION<
0src\main\java\org\jabref\logic\util\Version.java÷ ÷( 2Å
4org.jabref.logic.util.Version.isDevelopmentVersion()DECLARATION<
0src\main\java\org\jabref\logic\util\Version.java⁄ ⁄('2|
/org.jabref.logic.util.Version.getChangelogUrl()DECLARATION<
0src\main\java\org\jabref\logic\util\Version.java· ·(!2É
6org.jabref.logic.util.Version.equals(java.lang.Object)DECLARATION<
0src\main\java\org\jabref\logic\util\Version.javaÄ Ä(2u
(org.jabref.logic.util.Version.hashCode()DECLARATION<
0src\main\java\org\jabref\logic\util\Version.javaç ç(2u
(org.jabref.logic.util.Version.toString()DECLARATION<
0src\main\java\org\jabref\logic\util\Version.javaí í(2à
=org.jabref.logic.util.Version?JABREF_DOWNLOAD_URL@24.31:24.50DECLARATION:
0src\main\java\org\jabref\logic\util\Version.java (22Ñ
9org.jabref.logic.util.Version?UNKNOWN_VERSION@26.33:26.48DECLARATION:
0src\main\java\org\jabref\logic\util\Version.java! (02Ñ
9org.jabref.logic.util.Version?VERSION_PATTERN@28.33:28.48DECLARATION:
0src\main\java\org\jabref\logic\util\Version.java! (02Ü
;org.jabref.logic.util.Version?CI_SUFFIX_PATTERN@29.33:29.50DECLARATION:
0src\main\java\org\jabref\logic\util\Version.java! (22ã
@org.jabref.logic.util.Version?JABREF_GITHUB_RELEASES@31.32:31.54DECLARATION:
0src\main\java\org\jabref\logic\util\Version.java  (62Ä
5org.jabref.logic.util.Version?fullVersion@33.19:33.30DECLARATION:
0src\main\java\org\jabref\logic\util\Version.java! !(2z
/org.jabref.logic.util.Version?major@34.16:34.21DECLARATION:
0src\main\java\org\jabref\logic\util\Version.java" "(2z
/org.jabref.logic.util.Version?minor@35.16:35.21DECLARATION:
0src\main\java\org\jabref\logic\util\Version.java# #(2z
/org.jabref.logic.util.Version?patch@36.16:36.21DECLARATION:
0src\main\java\org\jabref\logic\util\Version.java$ $(2Ö
:org.jabref.logic.util.Version?developmentStage@37.29:37.45DECLARATION:
0src\main\java\org\jabref\logic\util\Version.java% %(-2É
8org.jabref.logic.util.Version?developmentNum@38.16:38.30DECLARATION:
0src\main\java\org\jabref\logic\util\Version.java& &(2â
>org.jabref.logic.util.Version?isDevelopmentVersion@39.20:39.40DECLARATION:
0src\main\java\org\jabref\logic\util\Version.java' '((2{
.org.jabref.logic.util.Version.DevelopmentStageDECLARATION<
0src\main\java\org\jabref\logic\util\Version.javañ ñ( «
'org.jabref.logic.util.Version.Version()CONSTRUCTOR:
0src\main\java\org\jabref\logic\util\Version.java, ,("`
declarationStringK<mark class="modifier">private </mark><mark class="method">Version</mark>()*Version2h
org.jabref.logic.util.VersionRETURN_TYPE:
0src\main\java\org\jabref\logic\util\Version.java, ,(ƒ
)org.jabref.logic.util.Version.getLogger()METHOD:
0src\main\java\org\jabref\logic\util\Version.java3 3(#"
isFinalfalse"é
declarationStringy<mark class="modifier">private </mark><mark class="modifier">static </mark>Logger <mark class="method">getLogger</mark>()"
isStatictrue"
accessprivate"

isAbstractfalse"
typeLogger*	getLogger2[
org.slf4j.LoggerRETURN_TYPE:
0src\main\java\org\jabref\logic\util\Version.java3 3(√X
5org.jabref.logic.util.Version.parse(java.lang.String)METHOD:
0src\main\java\org\jabref\logic\util\Version.java; ;("
isFinalfalse"ô
declarationStringÉ<mark class="modifier">public </mark><mark class="modifier">static </mark>Version <mark class="method">parse</mark>(String version)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeVersion*parse2m
)java.lang.String.equals(java.lang.Object)CALL:
0src\main\java\org\jabref\logic\util\Version.java<$ <(*2m
)java.lang.String.equals(java.lang.Object)CALL:
0src\main\java\org\jabref\logic\util\Version.java<? <(E2m
)java.lang.String.equals(java.lang.Object)CALL:
0src\main\java\org\jabref\logic\util\Version.java=  =(&2{
7java.util.regex.Pattern.matcher(java.lang.CharSequence)CALL:
0src\main\java\org\jabref\logic\util\Version.javaD4 D(;2x
4java.util.regex.Matcher.replaceAll(java.lang.String)CALL:
0src\main\java\org\jabref\logic\util\Version.javaE" E(,2{
7java.util.regex.Pattern.matcher(java.lang.CharSequence)CALL:
0src\main\java\org\jabref\logic\util\Version.javaH* H(12b
java.util.regex.Matcher.find()CALL:
0src\main\java\org\jabref\logic\util\Version.javaI I(2p
,java.lang.Integer.parseInt(java.lang.String)CALL:
0src\main\java\org\jabref\logic\util\Version.javaK. K(62s
/java.util.regex.Matcher.group(java.lang.String)CALL:
0src\main\java\org\jabref\logic\util\Version.javaK? K(D2s
/java.util.regex.Matcher.group(java.lang.String)CALL:
0src\main\java\org\jabref\logic\util\Version.javaM- M(22p
,java.lang.Integer.parseInt(java.lang.String)CALL:
0src\main\java\org\jabref\logic\util\Version.javaNH N(P2s
/java.util.regex.Matcher.group(java.lang.String)CALL:
0src\main\java\org\jabref\logic\util\Version.javaP- P(22p
,java.lang.Integer.parseInt(java.lang.String)CALL:
0src\main\java\org\jabref\logic\util\Version.javaQH Q(P2s
/java.util.regex.Matcher.group(java.lang.String)CALL:
0src\main\java\org\jabref\logic\util\Version.javaS4 S(92ä
Forg.jabref.logic.util.Version.DevelopmentStage.parse(java.lang.String)CALL:
0src\main\java\org\jabref\logic\util\Version.javaTy T(~2s
/java.util.regex.Matcher.group(java.lang.String)CALL:
0src\main\java\org\jabref\logic\util\Version.javaV0 V(52p
,java.lang.Integer.parseInt(java.lang.String)CALL:
0src\main\java\org\jabref\logic\util\Version.javaWT W(\2s
/java.util.regex.Matcher.group(java.lang.String)CALL:
0src\main\java\org\jabref\logic\util\Version.javaY= Y(B2m
)org.jabref.logic.util.Version.getLogger()CALL:
0src\main\java\org\jabref\logic\util\Version.java[ [(2m
)org.jabref.logic.util.Version.getLogger()CALL:
0src\main\java\org\jabref\logic\util\Version.java^ ^(2m
)org.jabref.logic.util.Version.getLogger()CALL:
0src\main\java\org\jabref\logic\util\Version.javab b(2k
'org.jabref.logic.util.Version.Version()CALL:
0src\main\java\org\jabref\logic\util\Version.javaA$ A(+2Å
=org.jabref.logic.util.Version.parse(java.lang.String)!versionCALL:
0src\main\java\org\jabref\logic\util\Version.java< <(2Å
=org.jabref.logic.util.Version.parse(java.lang.String)!versionCALL:
0src\main\java\org\jabref\logic\util\Version.java<+ <(22Å
=org.jabref.logic.util.Version.parse(java.lang.String)!versionCALL:
0src\main\java\org\jabref\logic\util\Version.java<7 <(>2Å
=org.jabref.logic.util.Version.parse(java.lang.String)!versionCALL:
0src\main\java\org\jabref\logic\util\Version.java=' =(.2}
9org.jabref.logic.util.Version?UNKNOWN_VERSION@26.33:26.48CALL:
0src\main\java\org\jabref\logic\util\Version.java> >("2
;org.jabref.logic.util.Version?CI_SUFFIX_PATTERN@29.33:29.50CALL:
0src\main\java\org\jabref\logic\util\Version.javaD" D(32Å
=org.jabref.logic.util.Version.parse(java.lang.String)!versionCALL:
0src\main\java\org\jabref\logic\util\Version.javaD< D(C2Å
=org.jabref.logic.util.Version.parse(java.lang.String)!versionCALL:
0src\main\java\org\jabref\logic\util\Version.javaE E(2ï
Qorg.jabref.logic.util.Version.parse(java.lang.String)?ciSuffixMatcher@68.16:68.31CALL:
0src\main\java\org\jabref\logic\util\Version.javaE E(!2ì
Oorg.jabref.logic.util.Version.parse(java.lang.String)?parsedVersion@65.16:65.29CALL:
0src\main\java\org\jabref\logic\util\Version.javaG G(2Å
=org.jabref.logic.util.Version.parse(java.lang.String)!versionCALL:
0src\main\java\org\jabref\logic\util\Version.javaG$ G(+2}
9org.jabref.logic.util.Version?VERSION_PATTERN@28.33:28.48CALL:
0src\main\java\org\jabref\logic\util\Version.javaH H()2Å
=org.jabref.logic.util.Version.parse(java.lang.String)!versionCALL:
0src\main\java\org\jabref\logic\util\Version.javaH2 H(92ç
Iorg.jabref.logic.util.Version.parse(java.lang.String)?matcher@72.16:72.23CALL:
0src\main\java\org\jabref\logic\util\Version.javaI I(2ì
Oorg.jabref.logic.util.Version.parse(java.lang.String)?parsedVersion@65.16:65.29CALL:
0src\main\java\org\jabref\logic\util\Version.javaK K(2ç
Iorg.jabref.logic.util.Version.parse(java.lang.String)?matcher@72.16:72.23CALL:
0src\main\java\org\jabref\logic\util\Version.javaK7 K(>2ç
Iorg.jabref.logic.util.Version.parse(java.lang.String)?matcher@72.16:72.23CALL:
0src\main\java\org\jabref\logic\util\Version.javaM% M(,2ì
Oorg.jabref.logic.util.Version.parse(java.lang.String)?parsedVersion@65.16:65.29CALL:
0src\main\java\org\jabref\logic\util\Version.javaN N(2ë
Morg.jabref.logic.util.Version.parse(java.lang.String)?minorString@77.23:77.34CALL:
0src\main\java\org\jabref\logic\util\Version.javaN& N(12ë
Morg.jabref.logic.util.Version.parse(java.lang.String)?minorString@77.23:77.34CALL:
0src\main\java\org\jabref\logic\util\Version.javaNQ N(\2ç
Iorg.jabref.logic.util.Version.parse(java.lang.String)?matcher@72.16:72.23CALL:
0src\main\java\org\jabref\logic\util\Version.javaP% P(,2ì
Oorg.jabref.logic.util.Version.parse(java.lang.String)?parsedVersion@65.16:65.29CALL:
0src\main\java\org\jabref\logic\util\Version.javaQ Q(2ë
Morg.jabref.logic.util.Version.parse(java.lang.String)?patchString@80.23:80.34CALL:
0src\main\java\org\jabref\logic\util\Version.javaQ& Q(12ë
Morg.jabref.logic.util.Version.parse(java.lang.String)?patchString@80.23:80.34CALL:
0src\main\java\org\jabref\logic\util\Version.javaQQ Q(\2ç
Iorg.jabref.logic.util.Version.parse(java.lang.String)?matcher@72.16:72.23CALL:
0src\main\java\org\jabref\logic\util\Version.javaS, S(32ì
Oorg.jabref.logic.util.Version.parse(java.lang.String)?parsedVersion@65.16:65.29CALL:
0src\main\java\org\jabref\logic\util\Version.javaT T(2ò
Torg.jabref.logic.util.Version.parse(java.lang.String)?versionStageString@83.23:83.41CALL:
0src\main\java\org\jabref\logic\util\Version.javaT1 T(C2ô
Torg.jabref.logic.util.Version.parse(java.lang.String)?versionStageString@83.23:83.41CALL;
0src\main\java\org\jabref\logic\util\Version.javaT T(ë2ç
Iorg.jabref.logic.util.Version.parse(java.lang.String)?matcher@72.16:72.23CALL:
0src\main\java\org\jabref\logic\util\Version.javaV( V(/2ì
Oorg.jabref.logic.util.Version.parse(java.lang.String)?parsedVersion@65.16:65.29CALL:
0src\main\java\org\jabref\logic\util\Version.javaW W(2î
Porg.jabref.logic.util.Version.parse(java.lang.String)?stageNumString@86.23:86.37CALL:
0src\main\java\org\jabref\logic\util\Version.javaW/ W(=2î
Porg.jabref.logic.util.Version.parse(java.lang.String)?stageNumString@86.23:86.37CALL:
0src\main\java\org\jabref\logic\util\Version.javaW] W(k2ì
Oorg.jabref.logic.util.Version.parse(java.lang.String)?parsedVersion@65.16:65.29CALL:
0src\main\java\org\jabref\logic\util\Version.javaY Y(2ç
Iorg.jabref.logic.util.Version.parse(java.lang.String)?matcher@72.16:72.23CALL:
0src\main\java\org\jabref\logic\util\Version.javaY5 Y(<2Å
=org.jabref.logic.util.Version.parse(java.lang.String)!versionCALL:
0src\main\java\org\jabref\logic\util\Version.java[D [(K2á
Corg.jabref.logic.util.Version.parse(java.lang.String)?e@90.43:90.44CALL:
0src\main\java\org\jabref\logic\util\Version.java[M [(N2}
9org.jabref.logic.util.Version?UNKNOWN_VERSION@26.33:26.48CALL:
0src\main\java\org\jabref\logic\util\Version.java\ \(&2á
Corg.jabref.logic.util.Version.parse(java.lang.String)?e@93.46:93.47CALL:
0src\main\java\org\jabref\logic\util\Version.java^D ^(E2}
9org.jabref.logic.util.Version?UNKNOWN_VERSION@26.33:26.48CALL:
0src\main\java\org\jabref\logic\util\Version.java_ _(&2}
9org.jabref.logic.util.Version?UNKNOWN_VERSION@26.33:26.48CALL:
0src\main\java\org\jabref\logic\util\Version.javac c("2ì
Oorg.jabref.logic.util.Version.parse(java.lang.String)?parsedVersion@65.16:65.29CALL:
0src\main\java\org\jabref\logic\util\Version.javae e(2y
5org.jabref.logic.util.Version?fullVersion@33.19:33.30CALL:
0src\main\java\org\jabref\logic\util\Version.javaG G(!2s
/org.jabref.logic.util.Version?major@34.16:34.21CALL:
0src\main\java\org\jabref\logic\util\Version.javaK K(#2s
/org.jabref.logic.util.Version?minor@35.16:35.21CALL:
0src\main\java\org\jabref\logic\util\Version.javaN N(#2s
/org.jabref.logic.util.Version?patch@36.16:36.21CALL:
0src\main\java\org\jabref\logic\util\Version.javaQ Q(#2~
:org.jabref.logic.util.Version?developmentStage@37.29:37.45CALL:
0src\main\java\org\jabref\logic\util\Version.javaT T(.2y
5org.jabref.logic.util.Version.DevelopmentStage?STABLECALL:
0src\main\java\org\jabref\logic\util\Version.javaT_ T(e2|
8org.jabref.logic.util.Version?developmentNum@38.16:38.30CALL:
0src\main\java\org\jabref\logic\util\Version.javaW W(,2Ç
>org.jabref.logic.util.Version?isDevelopmentVersion@39.20:39.40CALL:
0src\main\java\org\jabref\logic\util\Version.javaY Y(22Ü
=org.jabref.logic.util.Version.parse(java.lang.String)!version	PARAMETER:
0src\main\java\org\jabref\logic\util\Version.java;' ;(.2ö
Oorg.jabref.logic.util.Version.parse(java.lang.String)?parsedVersion@65.16:65.29DECLARATION:
0src\main\java\org\jabref\logic\util\Version.javaA A(2ú
Qorg.jabref.logic.util.Version.parse(java.lang.String)?ciSuffixMatcher@68.16:68.31DECLARATION:
0src\main\java\org\jabref\logic\util\Version.javaD D(2î
Iorg.jabref.logic.util.Version.parse(java.lang.String)?matcher@72.16:72.23DECLARATION:
0src\main\java\org\jabref\logic\util\Version.javaH H(2ò
Morg.jabref.logic.util.Version.parse(java.lang.String)?minorString@77.23:77.34DECLARATION:
0src\main\java\org\jabref\logic\util\Version.javaM M("2ò
Morg.jabref.logic.util.Version.parse(java.lang.String)?patchString@80.23:80.34DECLARATION:
0src\main\java\org\jabref\logic\util\Version.javaP P("2ü
Torg.jabref.logic.util.Version.parse(java.lang.String)?versionStageString@83.23:83.41DECLARATION:
0src\main\java\org\jabref\logic\util\Version.javaS S()2õ
Porg.jabref.logic.util.Version.parse(java.lang.String)?stageNumString@86.23:86.37DECLARATION:
0src\main\java\org\jabref\logic\util\Version.javaV V(%2é
Corg.jabref.logic.util.Version.parse(java.lang.String)?e@90.43:90.44DECLARATION:
0src\main\java\org\jabref\logic\util\Version.javaZ+ Z(,2é
Corg.jabref.logic.util.Version.parse(java.lang.String)?e@93.46:93.47DECLARATION:
0src\main\java\org\jabref\logic\util\Version.java]. ](/2h
org.jabref.logic.util.VersionRETURN_TYPE:
0src\main\java\org\jabref\logic\util\Version.java; ;(ï
Oorg.jabref.logic.util.Version.parse(java.lang.String)?parsedVersion@65.16:65.29VARIABLE:
0src\main\java\org\jabref\logic\util\Version.javaA A("
typeVersion"
isFinalfalse"z
declarationStringe<mark class="modifier"> </mark>Version <mark class="class-field">parsedVersion</mark> = new Version()*parsedVersion2a
org.jabref.logic.util.VersionTYPE:
0src\main\java\org\jabref\logic\util\Version.javaA A(2k
'org.jabref.logic.util.Version.Version()CALL:
0src\main\java\org\jabref\logic\util\Version.javaA$ A(+¿
Qorg.jabref.logic.util.Version.parse(java.lang.String)?ciSuffixMatcher@68.16:68.31VARIABLE:
0src\main\java\org\jabref\logic\util\Version.javaD D("
typeMatcher"
isFinalfalse"ë
declarationString|<mark class="modifier"> </mark>Matcher <mark class="class-field">ciSuffixMatcher</mark> = CI_SUFFIX_PATTERN.matcher(version)*ciSuffixMatcher2[
java.util.regex.MatcherTYPE:
0src\main\java\org\jabref\logic\util\Version.javaD D(2{
7java.util.regex.Pattern.matcher(java.lang.CharSequence)CALL:
0src\main\java\org\jabref\logic\util\Version.javaD4 D(;2
;org.jabref.logic.util.Version?CI_SUFFIX_PATTERN@29.33:29.50CALL:
0src\main\java\org\jabref\logic\util\Version.javaD" D(32Å
=org.jabref.logic.util.Version.parse(java.lang.String)!versionCALL:
0src\main\java\org\jabref\logic\util\Version.javaD< D(C§
Iorg.jabref.logic.util.Version.parse(java.lang.String)?matcher@72.16:72.23VARIABLE:
0src\main\java\org\jabref\logic\util\Version.javaH H("
typeMatcher"
isFinalfalse"á
declarationStringr<mark class="modifier"> </mark>Matcher <mark class="class-field">matcher</mark> = VERSION_PATTERN.matcher(version)*matcher2[
java.util.regex.MatcherTYPE:
0src\main\java\org\jabref\logic\util\Version.javaH H(2{
7java.util.regex.Pattern.matcher(java.lang.CharSequence)CALL:
0src\main\java\org\jabref\logic\util\Version.javaH* H(12}
9org.jabref.logic.util.Version?VERSION_PATTERN@28.33:28.48CALL:
0src\main\java\org\jabref\logic\util\Version.javaH H()2Å
=org.jabref.logic.util.Version.parse(java.lang.String)!versionCALL:
0src\main\java\org\jabref\logic\util\Version.javaH2 H(9¢
Morg.jabref.logic.util.Version.parse(java.lang.String)?minorString@77.23:77.34VARIABLE:
0src\main\java\org\jabref\logic\util\Version.javaM M(""
typeString"
isFinalfalse"Ä
declarationStringk<mark class="modifier"> </mark>String <mark class="class-field">minorString</mark> = matcher.group("minor")*minorString2T
java.lang.StringTYPE:
0src\main\java\org\jabref\logic\util\Version.javaM M(2s
/java.util.regex.Matcher.group(java.lang.String)CALL:
0src\main\java\org\jabref\logic\util\Version.javaM- M(22ç
Iorg.jabref.logic.util.Version.parse(java.lang.String)?matcher@72.16:72.23CALL:
0src\main\java\org\jabref\logic\util\Version.javaM% M(,¢
Morg.jabref.logic.util.Version.parse(java.lang.String)?patchString@80.23:80.34VARIABLE:
0src\main\java\org\jabref\logic\util\Version.javaP P(""
typeString"
isFinalfalse"Ä
declarationStringk<mark class="modifier"> </mark>String <mark class="class-field">patchString</mark> = matcher.group("patch")*patchString2T
java.lang.StringTYPE:
0src\main\java\org\jabref\logic\util\Version.javaP P(2s
/java.util.regex.Matcher.group(java.lang.String)CALL:
0src\main\java\org\jabref\logic\util\Version.javaP- P(22ç
Iorg.jabref.logic.util.Version.parse(java.lang.String)?matcher@72.16:72.23CALL:
0src\main\java\org\jabref\logic\util\Version.javaP% P(,∑
Torg.jabref.logic.util.Version.parse(java.lang.String)?versionStageString@83.23:83.41VARIABLE:
0src\main\java\org\jabref\logic\util\Version.javaS S()"
typeString"
isFinalfalse"á
declarationStringr<mark class="modifier"> </mark>String <mark class="class-field">versionStageString</mark> = matcher.group("stage")*versionStageString2T
java.lang.StringTYPE:
0src\main\java\org\jabref\logic\util\Version.javaS S(2s
/java.util.regex.Matcher.group(java.lang.String)CALL:
0src\main\java\org\jabref\logic\util\Version.javaS4 S(92ç
Iorg.jabref.logic.util.Version.parse(java.lang.String)?matcher@72.16:72.23CALL:
0src\main\java\org\jabref\logic\util\Version.javaS, S(3©
Porg.jabref.logic.util.Version.parse(java.lang.String)?stageNumString@86.23:86.37VARIABLE:
0src\main\java\org\jabref\logic\util\Version.javaV V(%"
typeString"
isFinalfalse"Å
declarationStringl<mark class="modifier"> </mark>String <mark class="class-field">stageNumString</mark> = matcher.group("num")*stageNumString2T
java.lang.StringTYPE:
0src\main\java\org\jabref\logic\util\Version.javaV V(2s
/java.util.regex.Matcher.group(java.lang.String)CALL:
0src\main\java\org\jabref\logic\util\Version.javaV0 V(52ç
Iorg.jabref.logic.util.Version.parse(java.lang.String)?matcher@72.16:72.23CALL:
0src\main\java\org\jabref\logic\util\Version.javaV( V(/¨
=org.jabref.logic.util.Version.parse(java.lang.String)!version	PARAMETER:
0src\main\java\org\jabref\logic\util\Version.java;' ;(."
typeString"
isFinalfalse"#
declarationStringString version*version2T
java.lang.StringTYPE:
0src\main\java\org\jabref\logic\util\Version.java;  ;(&“
Corg.jabref.logic.util.Version.parse(java.lang.String)?e@90.43:90.44VARIABLE:
0src\main\java\org\jabref\logic\util\Version.javaZ+ Z(,"
typeNumberFormatException"
isFinalfalse",
declarationStringNumberFormatException e*e2c
java.lang.NumberFormatExceptionTYPE:
0src\main\java\org\jabref\logic\util\Version.javaZ Z(*€
Corg.jabref.logic.util.Version.parse(java.lang.String)?e@93.46:93.47VARIABLE:
0src\main\java\org\jabref\logic\util\Version.java]. ](/" 
typeIllegalArgumentException"
isFinalfalse"/
declarationStringIllegalArgumentException e*e2f
"java.lang.IllegalArgumentExceptionTYPE:
0src\main\java\org\jabref\logic\util\Version.java] ](-ç'
7org.jabref.logic.util.Version.getAllAvailableVersions()METHOD:
0src\main\java\org\jabref\logic\util\Version.javak  k(7"
isFinalfalse"¯
declarationString‚<mark class="modifier">public </mark><mark class="modifier">static </mark>List&lt;Version&gt; <mark class="method">getAllAvailableVersions</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStatictrue"
accesspublic"

isAbstractfalse"
typeList<Version>*getAllAvailableVersions2a
java.net.URL.openConnection()CALL:
0src\main\java\org\jabref\logic\util\Version.javal[ l(i2ë
Mjava.net.URLConnection.setRequestProperty(java.lang.String, java.lang.String)CALL:
0src\main\java\org\jabref\logic\util\Version.javam m(%2k
'java.net.URLConnection.getInputStream()CALL:
0src\main\java\org\jabref\logic\util\Version.javanU n(c2e
!java.io.BufferedReader.readLine()CALL:
0src\main\java\org\jabref\logic\util\Version.javao1 o(92Y
java.util.List.add(E)CALL:
0src\main\java\org\jabref\logic\util\Version.javat t(2k
'java.net.HttpURLConnection.disconnect()CALL:
0src\main\java\org\jabref\logic\util\Version.javav v(!2f
"java.net.URL.URL(java.lang.String)CALL:
0src\main\java\org\jabref\logic\util\Version.javal? l(B2y
5java.io.BufferedReader.BufferedReader(java.io.Reader)CALL:
0src\main\java\org\jabref\logic\util\Version.javan% n(32Ñ
@java.io.InputStreamReader.InputStreamReader(java.io.InputStream)CALL:
0src\main\java\org\jabref\logic\util\Version.javan8 n(I2Ñ
@org.jabref.logic.util.Version?JABREF_GITHUB_RELEASES@31.32:31.54CALL:
0src\main\java\org\jabref\logic\util\Version.javalC l(Y2î
Porg.jabref.logic.util.Version.getAllAvailableVersions()?connection@108.26:108.36CALL:
0src\main\java\org\jabref\logic\util\Version.javam m(2î
Porg.jabref.logic.util.Version.getAllAvailableVersions()?connection@108.26:108.36CALL:
0src\main\java\org\jabref\logic\util\Version.javanJ n(T2å
Horg.jabref.logic.util.Version.getAllAvailableVersions()?rd@110.28:110.30CALL:
0src\main\java\org\jabref\logic\util\Version.javao. o(02ë
Morg.jabref.logic.util.Version.getAllAvailableVersions()?objects@111.22:111.29CALL:
0src\main\java\org\jabref\logic\util\Version.javap5 p(<2ã
Gorg.jabref.logic.util.Version.getAllAvailableVersions()?i@113.21:113.22CALL:
0src\main\java\org\jabref\logic\util\Version.javaq q(2ë
Morg.jabref.logic.util.Version.getAllAvailableVersions()?objects@111.22:111.29CALL:
0src\main\java\org\jabref\logic\util\Version.javaq  q('2ã
Gorg.jabref.logic.util.Version.getAllAvailableVersions()?i@113.21:113.22CALL:
0src\main\java\org\jabref\logic\util\Version.javaq2 q(32ë
Morg.jabref.logic.util.Version.getAllAvailableVersions()?objects@111.22:111.29CALL:
0src\main\java\org\jabref\logic\util\Version.javar( r(/2ã
Gorg.jabref.logic.util.Version.getAllAvailableVersions()?i@113.21:113.22CALL:
0src\main\java\org\jabref\logic\util\Version.javar> r(?2î
Porg.jabref.logic.util.Version.getAllAvailableVersions()?jsonObject@114.27:114.37CALL:
0src\main\java\org\jabref\logic\util\Version.javas0 s(:2í
Norg.jabref.logic.util.Version.getAllAvailableVersions()?versions@112.26:112.34CALL:
0src\main\java\org\jabref\logic\util\Version.javat t(2ë
Morg.jabref.logic.util.Version.getAllAvailableVersions()?version@115.24:115.31CALL:
0src\main\java\org\jabref\logic\util\Version.javat t($2î
Porg.jabref.logic.util.Version.getAllAvailableVersions()?connection@108.26:108.36CALL:
0src\main\java\org\jabref\logic\util\Version.javav v(2í
Norg.jabref.logic.util.Version.getAllAvailableVersions()?versions@112.26:112.34CALL:
0src\main\java\org\jabref\logic\util\Version.javaw w(2õ
Porg.jabref.logic.util.Version.getAllAvailableVersions()?connection@108.26:108.36DECLARATION:
0src\main\java\org\jabref\logic\util\Version.javal l($2ì
Horg.jabref.logic.util.Version.getAllAvailableVersions()?rd@110.28:110.30DECLARATION:
0src\main\java\org\jabref\logic\util\Version.javan n(2ò
Morg.jabref.logic.util.Version.getAllAvailableVersions()?objects@111.22:111.29DECLARATION:
0src\main\java\org\jabref\logic\util\Version.javao o(2ô
Norg.jabref.logic.util.Version.getAllAvailableVersions()?versions@112.26:112.34DECLARATION:
0src\main\java\org\jabref\logic\util\Version.javap p("2í
Gorg.jabref.logic.util.Version.getAllAvailableVersions()?i@113.21:113.22DECLARATION:
0src\main\java\org\jabref\logic\util\Version.javaq q(2õ
Porg.jabref.logic.util.Version.getAllAvailableVersions()?jsonObject@114.27:114.37DECLARATION:
0src\main\java\org\jabref\logic\util\Version.javar r(%2ò
Morg.jabref.logic.util.Version.getAllAvailableVersions()?version@115.24:115.31DECLARATION:
0src\main\java\org\jabref\logic\util\Version.javas s(2Y
java.util.ListRETURN_TYPE:
0src\main\java\org\jabref\logic\util\Version.javak k(2q
org.jabref.logic.util.VersionRETURN_TYPE_ARGUMENT:
0src\main\java\org\jabref\logic\util\Version.javak k(ø
Porg.jabref.logic.util.Version.getAllAvailableVersions()?connection@108.26:108.36VARIABLE:
0src\main\java\org\jabref\logic\util\Version.javal l($"
typeHttpURLConnection"
isFinalfalse"π
declarationString£<mark class="modifier"> </mark>HttpURLConnection <mark class="class-field">connection</mark> = (HttpURLConnection) new URL(JABREF_GITHUB_RELEASES).openConnection()*
connection2^
java.net.HttpURLConnectionTYPE:
0src\main\java\org\jabref\logic\util\Version.javal l(2a
java.net.URL.openConnection()CALL:
0src\main\java\org\jabref\logic\util\Version.javal[ l(i2f
"java.net.URL.URL(java.lang.String)CALL:
0src\main\java\org\jabref\logic\util\Version.javal? l(B2Ñ
@org.jabref.logic.util.Version?JABREF_GITHUB_RELEASES@31.32:31.54CALL:
0src\main\java\org\jabref\logic\util\Version.javalC l(Y”
Horg.jabref.logic.util.Version.getAllAvailableVersions()?rd@110.28:110.30VARIABLE:
0src\main\java\org\jabref\logic\util\Version.javan n("
typeBufferedReader"
isFinalfalse"∞
declarationStringö<mark class="modifier"> </mark>BufferedReader <mark class="class-field">rd</mark> = new BufferedReader(new InputStreamReader(connection.getInputStream()))*rd2Z
java.io.BufferedReaderTYPE:
0src\main\java\org\jabref\logic\util\Version.javan n(2k
'java.net.URLConnection.getInputStream()CALL:
0src\main\java\org\jabref\logic\util\Version.javanU n(c2y
5java.io.BufferedReader.BufferedReader(java.io.Reader)CALL:
0src\main\java\org\jabref\logic\util\Version.javan% n(32Ñ
@java.io.InputStreamReader.InputStreamReader(java.io.InputStream)CALL:
0src\main\java\org\jabref\logic\util\Version.javan8 n(I2î
Porg.jabref.logic.util.Version.getAllAvailableVersions()?connection@108.26:108.36CALL:
0src\main\java\org\jabref\logic\util\Version.javanJ n(T¢
Morg.jabref.logic.util.Version.getAllAvailableVersions()?objects@111.22:111.29VARIABLE:
0src\main\java\org\jabref\logic\util\Version.javao o("
type	JSONArray"
isFinalfalse"Ö
declarationStringp<mark class="modifier"> </mark>JSONArray <mark class="class-field">objects</mark> = new JSONArray(rd.readLine())*objects2_
kong.unirest.json.JSONArrayTYPE:
0src\main\java\org\jabref\logic\util\Version.javao o(2e
!java.io.BufferedReader.readLine()CALL:
0src\main\java\org\jabref\logic\util\Version.javao1 o(92å
Horg.jabref.logic.util.Version.getAllAvailableVersions()?rd@110.28:110.30CALL:
0src\main\java\org\jabref\logic\util\Version.javao. o(0Ø
Norg.jabref.logic.util.Version.getAllAvailableVersions()?versions@112.26:112.34VARIABLE:
0src\main\java\org\jabref\logic\util\Version.javap p(""
typeList<Version>"
isFinalfalse"è
declarationStringz<mark class="modifier"> </mark>List<Version> <mark class="class-field">versions</mark> = new ArrayList<>(objects.length())*versions2R
java.util.ListTYPE:
0src\main\java\org\jabref\logic\util\Version.javap p(2j
org.jabref.logic.util.VersionTYPE_ARGUMENT:
0src\main\java\org\jabref\logic\util\Version.javap p(2ë
Morg.jabref.logic.util.Version.getAllAvailableVersions()?objects@111.22:111.29CALL:
0src\main\java\org\jabref\logic\util\Version.javap5 p(<¯
Gorg.jabref.logic.util.Version.getAllAvailableVersions()?i@113.21:113.22VARIABLE:
0src\main\java\org\jabref\logic\util\Version.javaq q("
typeint"
isFinalfalse"|
declarationStringg<mark class="modifier"> </mark><mark class="modifier">int</mark> <mark class="class-field">i</mark> = 0*i2G
intTYPE:
0src\main\java\org\jabref\logic\util\Version.javaq q(÷
Porg.jabref.logic.util.Version.getAllAvailableVersions()?jsonObject@114.27:114.37VARIABLE:
0src\main\java\org\jabref\logic\util\Version.javar r(%"
type
JSONObject"
isFinalfalse"Ö
declarationStringp<mark class="modifier"> </mark>JSONObject <mark class="class-field">jsonObject</mark> = objects.getJSONObject(i)*
jsonObject2`
kong.unirest.json.JSONObjectTYPE:
0src\main\java\org\jabref\logic\util\Version.javar r(2ë
Morg.jabref.logic.util.Version.getAllAvailableVersions()?objects@111.22:111.29CALL:
0src\main\java\org\jabref\logic\util\Version.javar( r(/2ã
Gorg.jabref.logic.util.Version.getAllAvailableVersions()?i@113.21:113.22CALL:
0src\main\java\org\jabref\logic\util\Version.javar> r(?â
Morg.jabref.logic.util.Version.getAllAvailableVersions()?version@115.24:115.31VARIABLE:
0src\main\java\org\jabref\logic\util\Version.javas s("
typeVersion"
isFinalfalse"À
declarationStringµ<mark class="modifier"> </mark>Version <mark class="class-field">version</mark> = Version.parse(jsonObject.getString("tag_name").replaceFirst("v"<mark class="modifier">,</mark> ""))*version2a
org.jabref.logic.util.VersionTYPE:
0src\main\java\org\jabref\logic\util\Version.javas s(2î
Porg.jabref.logic.util.Version.getAllAvailableVersions()?jsonObject@114.27:114.37CALL:
0src\main\java\org\jabref\logic\util\Version.javas0 s(:‚1
Horg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)METHOD:
0src\main\java\org\jabref\logic\util\Version.java~ ~("
isFinalfalse"û
declarationStringà<mark class="modifier">public </mark><mark class="modifier">boolean</mark> <mark class="method">isNewerThan</mark>(Version otherVersion)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeboolean*isNewerThan2g
#java.util.Objects.requireNonNull(T)CALL:
0src\main\java\org\jabref\logic\util\Version.java (2Ç
<java.util.Objects.equals(java.lang.Object, java.lang.Object)CALL<
0src\main\java\org\jabref\logic\util\Version.javaÄ Ä(2o
)java.lang.String.equals(java.lang.Object)CALL<
0src\main\java\org\jabref\logic\util\Version.javaÇ) Ç(/2t
.org.jabref.logic.util.Version.getFullVersion()CALL<
0src\main\java\org\jabref\logic\util\Version.javaÇ Ç(&2o
)java.lang.String.equals(java.lang.Object)CALL<
0src\main\java\org\jabref\logic\util\Version.javaÑ1 Ñ(72t
.org.jabref.logic.util.Version.getFullVersion()CALL<
0src\main\java\org\jabref\logic\util\Version.javaÑ  Ñ(.2n
(org.jabref.logic.util.Version.getMajor()CALL<
0src\main\java\org\jabref\logic\util\Version.javaâ â(2n
(org.jabref.logic.util.Version.getMajor()CALL<
0src\main\java\org\jabref\logic\util\Version.javaâ+ â(32n
(org.jabref.logic.util.Version.getMajor()CALL<
0src\main\java\org\jabref\logic\util\Version.javaã ã( 2n
(org.jabref.logic.util.Version.getMajor()CALL<
0src\main\java\org\jabref\logic\util\Version.javaã3 ã(;2n
(org.jabref.logic.util.Version.getMinor()CALL<
0src\main\java\org\jabref\logic\util\Version.javaç ç(2n
(org.jabref.logic.util.Version.getMinor()CALL<
0src\main\java\org\jabref\logic\util\Version.javaç/ ç(72n
(org.jabref.logic.util.Version.getMinor()CALL<
0src\main\java\org\jabref\logic\util\Version.javaè è($2n
(org.jabref.logic.util.Version.getMinor()CALL<
0src\main\java\org\jabref\logic\util\Version.javaè7 è(?2n
(org.jabref.logic.util.Version.getPatch()CALL<
0src\main\java\org\jabref\logic\util\Version.javaë ë(!2n
(org.jabref.logic.util.Version.getPatch()CALL<
0src\main\java\org\jabref\logic\util\Version.javaë3 ë(;2n
(org.jabref.logic.util.Version.getPatch()CALL<
0src\main\java\org\jabref\logic\util\Version.javaì  ì((2n
(org.jabref.logic.util.Version.getPatch()CALL<
0src\main\java\org\jabref\logic\util\Version.javaì; ì(C2µ
oorg.jabref.logic.util.Version.DevelopmentStage.isMoreStableThan(org.jabref.logic.util.Version.DevelopmentStage)CALL<
0src\main\java\org\jabref\logic\util\Version.javaï. ï(>2w
1org.jabref.logic.util.Version.getDevelopmentNum()CALL<
0src\main\java\org\jabref\logic\util\Version.javaô! ô(22w
1org.jabref.logic.util.Version.getDevelopmentNum()CALL<
0src\main\java\org\jabref\logic\util\Version.javaôD ô(U2w
1org.jabref.logic.util.Version.getDevelopmentNum()CALL<
0src\main\java\org\jabref\logic\util\Version.javaõ( õ(92w
1org.jabref.logic.util.Version.getDevelopmentNum()CALL<
0src\main\java\org\jabref\logic\util\Version.javaõL õ(]2ô
Uorg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)!otherVersionCALL:
0src\main\java\org\jabref\logic\util\Version.java (+2õ
Uorg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)!otherVersionCALL<
0src\main\java\org\jabref\logic\util\Version.javaÄ! Ä(-2õ
Uorg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)!otherVersionCALL<
0src\main\java\org\jabref\logic\util\Version.javaÑ Ñ(2õ
Uorg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)!otherVersionCALL<
0src\main\java\org\jabref\logic\util\Version.javaâ â(*2õ
Uorg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)!otherVersionCALL<
0src\main\java\org\jabref\logic\util\Version.javaã& ã(22õ
Uorg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)!otherVersionCALL<
0src\main\java\org\jabref\logic\util\Version.javaç" ç(.2õ
Uorg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)!otherVersionCALL<
0src\main\java\org\jabref\logic\util\Version.javaè* è(62õ
Uorg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)!otherVersionCALL<
0src\main\java\org\jabref\logic\util\Version.javaë& ë(22õ
Uorg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)!otherVersionCALL<
0src\main\java\org\jabref\logic\util\Version.javaì. ì(:2õ
Uorg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)!otherVersionCALL<
0src\main\java\org\jabref\logic\util\Version.javaï? ï(K2õ
Uorg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)!otherVersionCALL<
0src\main\java\org\jabref\logic\util\Version.javaó8 ó(D2õ
Uorg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)!otherVersionCALL<
0src\main\java\org\jabref\logic\util\Version.javaô7 ô(C2õ
Uorg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)!otherVersionCALL<
0src\main\java\org\jabref\logic\util\Version.javaõ? õ(K2õ
Uorg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)!otherVersionCALL<
0src\main\java\org\jabref\logic\util\Version.javaùA ù(M2Ä
:org.jabref.logic.util.Version?developmentStage@37.29:37.45CALL<
0src\main\java\org\jabref\logic\util\Version.javaï ï(-2Ä
:org.jabref.logic.util.Version?developmentStage@37.29:37.45CALL<
0src\main\java\org\jabref\logic\util\Version.javaïL ï(\2Ä
:org.jabref.logic.util.Version?developmentStage@37.29:37.45CALL<
0src\main\java\org\jabref\logic\util\Version.javaó$ ó(42Ä
:org.jabref.logic.util.Version?developmentStage@37.29:37.45CALL<
0src\main\java\org\jabref\logic\util\Version.javaóE ó(U2Ñ
>org.jabref.logic.util.Version?isDevelopmentVersion@39.20:39.40CALL<
0src\main\java\org\jabref\logic\util\Version.javaù) ù(=2Ñ
>org.jabref.logic.util.Version?isDevelopmentVersion@39.20:39.40CALL<
0src\main\java\org\jabref\logic\util\Version.javaùN ù(b2û
Uorg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)!otherVersion	PARAMETER:
0src\main\java\org\jabref\logic\util\Version.java~' ~(32R
booleanRETURN_TYPE:
0src\main\java\org\jabref\logic\util\Version.java~ ~(›
Uorg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)!otherVersion	PARAMETER:
0src\main\java\org\jabref\logic\util\Version.java~' ~(3"
typeVersion"
isFinalfalse")
declarationStringVersion otherVersion*otherVersion2a
org.jabref.logic.util.VersionTYPE:
0src\main\java\org\jabref\logic\util\Version.java~ ~(&ì
^org.jabref.logic.util.Version.shouldBeUpdatedTo(java.util.List<org.jabref.logic.util.Version>)METHOD<
0src\main\java\org\jabref\logic\util\Version.java´ ´(."
isFinalfalse"ß
declarationStringë<mark class="modifier">public </mark>Optional&lt;Version&gt; <mark class="method">shouldBeUpdatedTo</mark>(List&lt;Version&gt; availableVersions)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeOptional<Version>*shouldBeUpdatedTo2`
java.util.Optional.empty()CALL<
0src\main\java\org\jabref\logic\util\Version.java¨2 ¨(72î
Norg.jabref.logic.util.Version.shouldBeUpdatedTo(org.jabref.logic.util.Version)CALL<
0src\main\java\org\jabref\logic\util\Version.javaÆ Æ(&2d
java.util.Optional.isPresent()CALL<
0src\main\java\org\jabref\logic\util\Version.javaØ& Ø(/2é
Horg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)CALL<
0src\main\java\org\jabref\logic\util\Version.javaØ= Ø(H2^
java.util.Optional.get()CALL<
0src\main\java\org\jabref\logic\util\Version.javaØV Ø(Y2^
java.util.Optional.of(T)CALL<
0src\main\java\org\jabref\logic\util\Version.java∞( ∞(*2∂
porg.jabref.logic.util.Version.shouldBeUpdatedTo(java.util.List<org.jabref.logic.util.Version>)!availableVersionsCALL<
0src\main\java\org\jabref\logic\util\Version.java≠ ≠(02∫
torg.jabref.logic.util.Version.shouldBeUpdatedTo(java.util.List<org.jabref.logic.util.Version>)?version@173.21:173.28CALL<
0src\main\java\org\jabref\logic\util\Version.javaÆ' Æ(.2ø
yorg.jabref.logic.util.Version.shouldBeUpdatedTo(java.util.List<org.jabref.logic.util.Version>)?newerVersion@172.26:172.38CALL<
0src\main\java\org\jabref\logic\util\Version.javaØ Ø(%2∫
torg.jabref.logic.util.Version.shouldBeUpdatedTo(java.util.List<org.jabref.logic.util.Version>)?version@173.21:173.28CALL<
0src\main\java\org\jabref\logic\util\Version.javaØ5 Ø(<2ø
yorg.jabref.logic.util.Version.shouldBeUpdatedTo(java.util.List<org.jabref.logic.util.Version>)?newerVersion@172.26:172.38CALL<
0src\main\java\org\jabref\logic\util\Version.javaØI Ø(U2ø
yorg.jabref.logic.util.Version.shouldBeUpdatedTo(java.util.List<org.jabref.logic.util.Version>)?newerVersion@172.26:172.38CALL<
0src\main\java\org\jabref\logic\util\Version.java∞ ∞(2∫
torg.jabref.logic.util.Version.shouldBeUpdatedTo(java.util.List<org.jabref.logic.util.Version>)?version@173.21:173.28CALL<
0src\main\java\org\jabref\logic\util\Version.java∞+ ∞(22ø
yorg.jabref.logic.util.Version.shouldBeUpdatedTo(java.util.List<org.jabref.logic.util.Version>)?newerVersion@172.26:172.38CALL<
0src\main\java\org\jabref\logic\util\Version.java≥ ≥(2ª
porg.jabref.logic.util.Version.shouldBeUpdatedTo(java.util.List<org.jabref.logic.util.Version>)!availableVersions	PARAMETER<
0src\main\java\org\jabref\logic\util\Version.java´= ´(N2∆
yorg.jabref.logic.util.Version.shouldBeUpdatedTo(java.util.List<org.jabref.logic.util.Version>)?newerVersion@172.26:172.38DECLARATION<
0src\main\java\org\jabref\logic\util\Version.java¨ ¨(&2¡
torg.jabref.logic.util.Version.shouldBeUpdatedTo(java.util.List<org.jabref.logic.util.Version>)?version@173.21:173.28DECLARATION<
0src\main\java\org\jabref\logic\util\Version.java≠ ≠(2_
java.util.OptionalRETURN_TYPE<
0src\main\java\org\jabref\logic\util\Version.java´ ´(2s
org.jabref.logic.util.VersionRETURN_TYPE_ARGUMENT<
0src\main\java\org\jabref\logic\util\Version.java´ ´(±
yorg.jabref.logic.util.Version.shouldBeUpdatedTo(java.util.List<org.jabref.logic.util.Version>)?newerVersion@172.26:172.38VARIABLE<
0src\main\java\org\jabref\logic\util\Version.java¨ ¨(&"
typeOptional<Version>"
isFinalfalse"Ü
declarationStringq<mark class="modifier"> </mark>Optional<Version> <mark class="class-field">newerVersion</mark> = Optional.empty()*newerVersion2X
java.util.OptionalTYPE<
0src\main\java\org\jabref\logic\util\Version.java¨ ¨(2l
org.jabref.logic.util.VersionTYPE_ARGUMENT<
0src\main\java\org\jabref\logic\util\Version.java¨ ¨(2`
java.util.Optional.empty()CALL<
0src\main\java\org\jabref\logic\util\Version.java¨2 ¨(7µ
torg.jabref.logic.util.Version.shouldBeUpdatedTo(java.util.List<org.jabref.logic.util.Version>)?version@173.21:173.28VARIABLE<
0src\main\java\org\jabref\logic\util\Version.java≠ ≠("
typeVersion"
isFinalfalse"d
declarationStringO<mark class="modifier"> </mark>Version <mark class="class-field">version</mark>*version2c
org.jabref.logic.util.VersionTYPE<
0src\main\java\org\jabref\logic\util\Version.java≠ ≠(Ò
porg.jabref.logic.util.Version.shouldBeUpdatedTo(java.util.List<org.jabref.logic.util.Version>)!availableVersions	PARAMETER<
0src\main\java\org\jabref\logic\util\Version.java´= ´(N"
typeList<Version>"
isFinalfalse"4
declarationStringList<Version> availableVersions*availableVersions2T
java.util.ListTYPE<
0src\main\java\org\jabref\logic\util\Version.java´/ ´(32l
org.jabref.logic.util.VersionTYPE_ARGUMENT<
0src\main\java\org\jabref\logic\util\Version.java´4 ´(;Ö
Norg.jabref.logic.util.Version.shouldBeUpdatedTo(org.jabref.logic.util.Version)METHOD<
0src\main\java\org\jabref\logic\util\Version.javaª ª($"
isFinalfalse"§
declarationStringé<mark class="modifier">public </mark><mark class="modifier">boolean</mark> <mark class="method">shouldBeUpdatedTo</mark>(Version otherVersion)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeboolean*shouldBeUpdatedTo2é
Horg.jabref.logic.util.Version.isNewerThan(org.jabref.logic.util.Version)CALL<
0src\main\java\org\jabref\logic\util\Version.java√ √('2Ä
:org.jabref.logic.util.Version?developmentStage@37.29:37.45CALL<
0src\main\java\org\jabref\logic\util\Version.javaΩ Ω(2°
[org.jabref.logic.util.Version.shouldBeUpdatedTo(org.jabref.logic.util.Version)!otherVersionCALL<
0src\main\java\org\jabref\logic\util\Version.javaæ æ(2°
[org.jabref.logic.util.Version.shouldBeUpdatedTo(org.jabref.logic.util.Version)!otherVersionCALL<
0src\main\java\org\jabref\logic\util\Version.java√ √(2{
5org.jabref.logic.util.Version.DevelopmentStage?STABLECALL<
0src\main\java\org\jabref\logic\util\Version.javaΩ9 Ω(?2Ä
:org.jabref.logic.util.Version?developmentStage@37.29:37.45CALL<
0src\main\java\org\jabref\logic\util\Version.javaæ  æ(02{
5org.jabref.logic.util.Version.DevelopmentStage?STABLECALL<
0src\main\java\org\jabref\logic\util\Version.javaæM æ(S2¶
[org.jabref.logic.util.Version.shouldBeUpdatedTo(org.jabref.logic.util.Version)!otherVersion	PARAMETER<
0src\main\java\org\jabref\logic\util\Version.javaª- ª(92T
booleanRETURN_TYPE<
0src\main\java\org\jabref\logic\util\Version.javaª ª(Á
[org.jabref.logic.util.Version.shouldBeUpdatedTo(org.jabref.logic.util.Version)!otherVersion	PARAMETER<
0src\main\java\org\jabref\logic\util\Version.javaª- ª(9"
typeVersion"
isFinalfalse")
declarationStringVersion otherVersion*otherVersion2c
org.jabref.logic.util.VersionTYPE<
0src\main\java\org\jabref\logic\util\Version.javaª% ª(,≠
.org.jabref.logic.util.Version.getFullVersion()METHOD<
0src\main\java\org\jabref\logic\util\Version.java∆ ∆( "
isFinalfalse"m
declarationStringX<mark class="modifier">public </mark>String <mark class="method">getFullVersion</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*getFullVersion2{
5org.jabref.logic.util.Version?fullVersion@33.19:33.30CALL<
0src\main\java\org\jabref\logic\util\Version.java« «(2]
java.lang.StringRETURN_TYPE<
0src\main\java\org\jabref\logic\util\Version.java∆ ∆(°
(org.jabref.logic.util.Version.getMajor()METHOD<
0src\main\java\org\jabref\logic\util\Version.java   ("
isFinalfalse"Ç
declarationStringm<mark class="modifier">public </mark><mark class="modifier">int</mark> <mark class="method">getMajor</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeint*getMajor2u
/org.jabref.logic.util.Version?major@34.16:34.21CALL<
0src\main\java\org\jabref\logic\util\Version.javaÀ À(2P
intRETURN_TYPE<
0src\main\java\org\jabref\logic\util\Version.java   (°
(org.jabref.logic.util.Version.getMinor()METHOD<
0src\main\java\org\jabref\logic\util\Version.javaŒ Œ("
isFinalfalse"Ç
declarationStringm<mark class="modifier">public </mark><mark class="modifier">int</mark> <mark class="method">getMinor</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeint*getMinor2u
/org.jabref.logic.util.Version?minor@35.16:35.21CALL<
0src\main\java\org\jabref\logic\util\Version.javaœ œ(2P
intRETURN_TYPE<
0src\main\java\org\jabref\logic\util\Version.javaŒ Œ(°
(org.jabref.logic.util.Version.getPatch()METHOD<
0src\main\java\org\jabref\logic\util\Version.java“ “("
isFinalfalse"Ç
declarationStringm<mark class="modifier">public </mark><mark class="modifier">int</mark> <mark class="method">getPatch</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeint*getPatch2u
/org.jabref.logic.util.Version?patch@36.16:36.21CALL<
0src\main\java\org\jabref\logic\util\Version.java” ”(2P
intRETURN_TYPE<
0src\main\java\org\jabref\logic\util\Version.java“ “(≈
1org.jabref.logic.util.Version.getDevelopmentNum()METHOD<
0src\main\java\org\jabref\logic\util\Version.java÷ ÷( "
isFinalfalse"ã
declarationStringv<mark class="modifier">public </mark><mark class="modifier">int</mark> <mark class="method">getDevelopmentNum</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeint*getDevelopmentNum2~
8org.jabref.logic.util.Version?developmentNum@38.16:38.30CALL<
0src\main\java\org\jabref\logic\util\Version.java◊ ◊(2P
intRETURN_TYPE<
0src\main\java\org\jabref\logic\util\Version.java÷ ÷(·
4org.jabref.logic.util.Version.isDevelopmentVersion()METHOD<
0src\main\java\org\jabref\logic\util\Version.java⁄ ⁄('"
isFinalfalse"í
declarationString}<mark class="modifier">public </mark><mark class="modifier">boolean</mark> <mark class="method">isDevelopmentVersion</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeboolean*isDevelopmentVersion2Ñ
>org.jabref.logic.util.Version?isDevelopmentVersion@39.20:39.40CALL<
0src\main\java\org\jabref\logic\util\Version.java€ €(#2T
booleanRETURN_TYPE<
0src\main\java\org\jabref\logic\util\Version.java⁄ ⁄(ﬁ
/org.jabref.logic.util.Version.getChangelogUrl()METHOD<
0src\main\java\org\jabref\logic\util\Version.java· ·(!"
isFinalfalse"n
declarationStringY<mark class="modifier">public </mark>String <mark class="method">getChangelogUrl</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*getChangelogUrl2i
#java.lang.StringBuilder.append(int)CALL<
0src\main\java\org\jabref\logic\util\Version.javaÈ È(2v
0java.lang.StringBuilder.append(java.lang.String)CALL<
0src\main\java\org\jabref\logic\util\Version.javaË Ë(2i
#java.lang.StringBuilder.append(int)CALL<
0src\main\java\org\jabref\logic\util\Version.javaÁ Á(2v
0java.lang.StringBuilder.append(java.lang.String)CALL<
0src\main\java\org\jabref\logic\util\Version.javaÊ Ê(2n
(org.jabref.logic.util.Version.getMajor()CALL<
0src\main\java\org\jabref\logic\util\Version.javaÁ! Á()2n
(org.jabref.logic.util.Version.getMinor()CALL<
0src\main\java\org\jabref\logic\util\Version.javaÈ! È()2n
(org.jabref.logic.util.Version.getPatch()CALL<
0src\main\java\org\jabref\logic\util\Version.javaÎ Î(2i
#java.lang.StringBuilder.append(int)CALL<
0src\main\java\org\jabref\logic\util\Version.javaÓ Ó(2v
0java.lang.StringBuilder.append(java.lang.String)CALL<
0src\main\java\org\jabref\logic\util\Version.javaÌ Ì(2n
(org.jabref.logic.util.Version.getPatch()CALL<
0src\main\java\org\jabref\logic\util\Version.javaÓ% Ó(-2w
1org.jabref.logic.util.Version.getDevelopmentNum()CALL<
0src\main\java\org\jabref\logic\util\Version.javaÙ Ù(&2i
#java.lang.StringBuilder.append(int)CALL<
0src\main\java\org\jabref\logic\util\Version.javaˆ ˆ(2w
1org.jabref.logic.util.Version.getDevelopmentNum()CALL<
0src\main\java\org\jabref\logic\util\Version.javaˆ% ˆ(62v
0java.lang.StringBuilder.append(java.lang.String)CALL<
0src\main\java\org\jabref\logic\util\Version.java˘ ˘( 2h
"java.lang.StringBuilder.toString()CALL<
0src\main\java\org\jabref\logic\util\Version.java˚! ˚()2m
'java.lang.StringBuilder.StringBuilder()CALL<
0src\main\java\org\jabref\logic\util\Version.javaÂ. Â(;2Ñ
>org.jabref.logic.util.Version?isDevelopmentVersion@39.20:39.40CALL<
0src\main\java\org\jabref\logic\util\Version.java‚ ‚( 2ë
Korg.jabref.logic.util.Version.getChangelogUrl()?changelogLink@229.26:229.39CALL<
0src\main\java\org\jabref\logic\util\Version.javaÏ Ï(2ë
Korg.jabref.logic.util.Version.getChangelogUrl()?changelogLink@229.26:229.39CALL<
0src\main\java\org\jabref\logic\util\Version.javaÒ Ò(2ë
Korg.jabref.logic.util.Version.getChangelogUrl()?changelogLink@229.26:229.39CALL<
0src\main\java\org\jabref\logic\util\Version.javaı ı(2ë
Korg.jabref.logic.util.Version.getChangelogUrl()?changelogLink@229.26:229.39CALL<
0src\main\java\org\jabref\logic\util\Version.java˘ ˘(2ë
Korg.jabref.logic.util.Version.getChangelogUrl()?changelogLink@229.26:229.39CALL<
0src\main\java\org\jabref\logic\util\Version.java˚ ˚( 2à
Borg.jabref.logic.util.Version.DevelopmentStage?stage@288.29:288.34CALL<
0src\main\java\org\jabref\logic\util\Version.javaÚ2 Ú(72Ä
:org.jabref.logic.util.Version?developmentStage@37.29:37.45CALL<
0src\main\java\org\jabref\logic\util\Version.javaÚ! Ú(12ò
Korg.jabref.logic.util.Version.getChangelogUrl()?changelogLink@229.26:229.39DECLARATION<
0src\main\java\org\jabref\logic\util\Version.javaÂ Â('2]
java.lang.StringRETURN_TYPE<
0src\main\java\org\jabref\logic\util\Version.java· ·(ı

Korg.jabref.logic.util.Version.getChangelogUrl()?changelogLink@229.26:229.39VARIABLE<
0src\main\java\org\jabref\logic\util\Version.javaÂ Â('"
typeStringBuilder"
isFinalfalse"±
declarationStringõ<mark class="modifier"> </mark>StringBuilder <mark class="class-field">changelogLink</mark> = new StringBuilder().append("https://github.com/JabRef/jabref/blob/v").append(<mark class="modifier">this</mark>.getMajor()).append(".").append(<mark class="modifier">this</mark>.getMinor())*changelogLink2]
java.lang.StringBuilderTYPE<
0src\main\java\org\jabref\logic\util\Version.javaÂ Â(2i
#java.lang.StringBuilder.append(int)CALL<
0src\main\java\org\jabref\logic\util\Version.javaÈ È(2v
0java.lang.StringBuilder.append(java.lang.String)CALL<
0src\main\java\org\jabref\logic\util\Version.javaË Ë(2i
#java.lang.StringBuilder.append(int)CALL<
0src\main\java\org\jabref\logic\util\Version.javaÁ Á(2v
0java.lang.StringBuilder.append(java.lang.String)CALL<
0src\main\java\org\jabref\logic\util\Version.javaÊ Ê(2n
(org.jabref.logic.util.Version.getMajor()CALL<
0src\main\java\org\jabref\logic\util\Version.javaÁ! Á()2n
(org.jabref.logic.util.Version.getMinor()CALL<
0src\main\java\org\jabref\logic\util\Version.javaÈ! È()2m
'java.lang.StringBuilder.StringBuilder()CALL<
0src\main\java\org\jabref\logic\util\Version.javaÂ. Â(;Ò

6org.jabref.logic.util.Version.equals(java.lang.Object)METHOD<
0src\main\java\org\jabref\logic\util\Version.javaÄ Ä("
isFinalfalse"ø
declarationString©<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark><mark class="modifier">boolean</mark> <mark class="method">equals</mark>(Object other)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeboolean*equals2o
)java.lang.String.equals(java.lang.Object)CALL<
0src\main\java\org\jabref\logic\util\Version.javaâ% â(+2t
.org.jabref.logic.util.Version.getFullVersion()CALL<
0src\main\java\org\jabref\logic\util\Version.javaâ â("2t
.org.jabref.logic.util.Version.getFullVersion()CALL<
0src\main\java\org\jabref\logic\util\Version.javaâ> â(L2Ç
<org.jabref.logic.util.Version.equals(java.lang.Object)!otherCALL<
0src\main\java\org\jabref\logic\util\Version.javaÅ Å(2Ç
<org.jabref.logic.util.Version.equals(java.lang.Object)!otherCALL<
0src\main\java\org\jabref\logic\util\Version.javaÑ Ñ(2Ç
<org.jabref.logic.util.Version.equals(java.lang.Object)!otherCALL<
0src\main\java\org\jabref\logic\util\Version.javaâ7 â(<2á
<org.jabref.logic.util.Version.equals(java.lang.Object)!other	PARAMETER<
0src\main\java\org\jabref\logic\util\Version.javaÄ! Ä(&2T
booleanRETURN_TYPE<
0src\main\java\org\jabref\logic\util\Version.javaÄ Ä(´
<org.jabref.logic.util.Version.equals(java.lang.Object)!other	PARAMETER<
0src\main\java\org\jabref\logic\util\Version.javaÄ! Ä(&"
typeObject"
isFinalfalse"!
declarationStringObject other*other2V
java.lang.ObjectTYPE<
0src\main\java\org\jabref\logic\util\Version.javaÄ Ä( ≤
(org.jabref.logic.util.Version.hashCode()METHOD<
0src\main\java\org\jabref\logic\util\Version.javaç ç("
isFinalfalse"±
declarationStringõ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark><mark class="modifier">int</mark> <mark class="method">hashCode</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeint*hashCode2a
java.lang.String.hashCode()CALL<
0src\main\java\org\jabref\logic\util\Version.javaé  é((2t
.org.jabref.logic.util.Version.getFullVersion()CALL<
0src\main\java\org\jabref\logic\util\Version.javaé é(2P
intRETURN_TYPE<
0src\main\java\org\jabref\logic\util\Version.javaç ç(ƒ
(org.jabref.logic.util.Version.toString()METHOD<
0src\main\java\org\jabref\logic\util\Version.javaí í("
isFinalfalse"ñ
declarationStringÄ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>String <mark class="method">toString</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeString*toString2t
.org.jabref.logic.util.Version.getFullVersion()CALL<
0src\main\java\org\jabref\logic\util\Version.javaì ì("2]
java.lang.StringRETURN_TYPE<
0src\main\java\org\jabref\logic\util\Version.javaí í(ñ
=org.jabref.logic.util.Version?JABREF_DOWNLOAD_URL@24.31:24.50VALUE:
0src\main\java\org\jabref\logic\util\Version.java (2"
isFinaltrue"
typeString"·
declarationStringÀ<mark class="modifier">public </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>String <mark class="class-field">JABREF_DOWNLOAD_URL</mark> = "https://downloads.jabref.org";"
isStatictrue"
accesspublic*JABREF_DOWNLOAD_URL2T
java.lang.StringTYPE:
0src\main\java\org\jabref\logic\util\Version.java (˜
9org.jabref.logic.util.Version?UNKNOWN_VERSION@26.33:26.48VALUE:
0src\main\java\org\jabref\logic\util\Version.java! (0"
isFinaltrue"
typeVersion"Œ
declarationString∏<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>Version <mark class="class-field">UNKNOWN_VERSION</mark> = new Version();"
isStatictrue"
accessprivate*UNKNOWN_VERSION2a
org.jabref.logic.util.VersionTYPE:
0src\main\java\org\jabref\logic\util\Version.java ( 2k
'org.jabref.logic.util.Version.Version()CALL:
0src\main\java\org\jabref\logic\util\Version.java7 (>Î
9org.jabref.logic.util.Version?VERSION_PATTERN@28.33:28.48VALUE:
0src\main\java\org\jabref\logic\util\Version.java! (0"
isFinaltrue"
typePattern"æ
declarationString®<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>Pattern <mark class="class-field">VERSION_PATTERN</mark> = Pattern.compile("(?<major>\\d+)(\\.(?<minor>\\d+))?(\\.(?<patch>\\d+))?(?<stage>-alpha|-beta)?(?<num>\\d+)?(?<dev>-?dev)?.*");"
isStatictrue"
accessprivate*VERSION_PATTERN2[
java.util.regex.PatternTYPE:
0src\main\java\org\jabref\logic\util\Version.java ( 2u
1java.util.regex.Pattern.compile(java.lang.String)CALL:
0src\main\java\org\jabref\logic\util\Version.java; (Bë
;org.jabref.logic.util.Version?CI_SUFFIX_PATTERN@29.33:29.50VALUE:
0src\main\java\org\jabref\logic\util\Version.java! (2"
isFinaltrue"
typePattern"‡
declarationString <mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>Pattern <mark class="class-field">CI_SUFFIX_PATTERN</mark> = Pattern.compile("-ci\\.\\d+");"
isStatictrue"
accessprivate*CI_SUFFIX_PATTERN2[
java.util.regex.PatternTYPE:
0src\main\java\org\jabref\logic\util\Version.java ( 2u
1java.util.regex.Pattern.compile(java.lang.String)CALL:
0src\main\java\org\jabref\logic\util\Version.java= (D∏
@org.jabref.logic.util.Version?JABREF_GITHUB_RELEASES@31.32:31.54VALUE:
0src\main\java\org\jabref\logic\util\Version.java  (6"
isFinaltrue"
typeString"¸
declarationStringÊ<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>String <mark class="class-field">JABREF_GITHUB_RELEASES</mark> = "https://api.github.com/repos/JabRef/JabRef/releases";"
isStatictrue"
accessprivate*JABREF_GITHUB_RELEASES2T
java.lang.StringTYPE:
0src\main\java\org\jabref\logic\util\Version.java (∂
5org.jabref.logic.util.Version?fullVersion@33.19:33.30VARIABLE:
0src\main\java\org\jabref\logic\util\Version.java! !("
isFinalfalse"
typeString"ã
declarationStringv<mark class="modifier">private </mark>String <mark class="class-field">fullVersion</mark> = BuildInfo.UNKNOWN_VERSION;"
isStaticfalse"
accessprivate*fullVersion2T
java.lang.StringTYPE:
0src\main\java\org\jabref\logic\util\Version.java! !(ò
/org.jabref.logic.util.Version?major@34.16:34.21VARIABLE:
0src\main\java\org\jabref\logic\util\Version.java" "("
isFinalfalse"
typeint"â
declarationStringt<mark class="modifier">private </mark><mark class="modifier">int</mark> <mark class="class-field">major</mark> = -1;"
isStaticfalse"
accessprivate*major2G
intTYPE:
0src\main\java\org\jabref\logic\util\Version.java" "(ò
/org.jabref.logic.util.Version?minor@35.16:35.21VARIABLE:
0src\main\java\org\jabref\logic\util\Version.java# #("
isFinalfalse"
typeint"â
declarationStringt<mark class="modifier">private </mark><mark class="modifier">int</mark> <mark class="class-field">minor</mark> = -1;"
isStaticfalse"
accessprivate*minor2G
intTYPE:
0src\main\java\org\jabref\logic\util\Version.java# #(ò
/org.jabref.logic.util.Version?patch@36.16:36.21VARIABLE:
0src\main\java\org\jabref\logic\util\Version.java$ $("
isFinalfalse"
typeint"â
declarationStringt<mark class="modifier">private </mark><mark class="modifier">int</mark> <mark class="class-field">patch</mark> = -1;"
isStaticfalse"
accessprivate*patch2G
intTYPE:
0src\main\java\org\jabref\logic\util\Version.java$ $(Û
:org.jabref.logic.util.Version?developmentStage@37.29:37.45VARIABLE:
0src\main\java\org\jabref\logic\util\Version.java% %(-"
isFinalfalse"
typeDevelopmentStage"ö
declarationStringÑ<mark class="modifier">private </mark>DevelopmentStage <mark class="class-field">developmentStage</mark> = DevelopmentStage.UNKNOWN;"
isStaticfalse"
accessprivate*developmentStage2r
.org.jabref.logic.util.Version.DevelopmentStageTYPE:
0src\main\java\org\jabref\logic\util\Version.java% %(2z
6org.jabref.logic.util.Version.DevelopmentStage?UNKNOWNCALL:
0src\main\java\org\jabref\logic\util\Version.java%A %(H≥
8org.jabref.logic.util.Version?developmentNum@38.16:38.30VARIABLE:
0src\main\java\org\jabref\logic\util\Version.java& &("
isFinalfalse"
typeint"í
declarationString}<mark class="modifier">private </mark><mark class="modifier">int</mark> <mark class="class-field">developmentNum</mark> = -1;"
isStaticfalse"
accessprivate*developmentNum2G
intTYPE:
0src\main\java\org\jabref\logic\util\Version.java& &(Ã
>org.jabref.logic.util.Version?isDevelopmentVersion@39.20:39.40VARIABLE:
0src\main\java\org\jabref\logic\util\Version.java' '(("
isFinalfalse"
typeboolean"ó
declarationStringÅ<mark class="modifier">private </mark><mark class="modifier">boolean</mark> <mark class="class-field">isDevelopmentVersion</mark>"
isStaticfalse"
accessprivate*isDevelopmentVersion2K
booleanTYPE:
0src\main\java\org\jabref\logic\util\Version.java' '(Ö
.org.jabref.logic.util.Version.DevelopmentStageENUM<
0src\main\java\org\jabref\logic\util\Version.javañ ñ( "H
declarationString3<mark class="modifier">enum </mark>DevelopmentStage*DevelopmentStage2£
Vorg.jabref.logic.util.Version.DevelopmentStage.DevelopmentStage(java.lang.String, int)DECLARATION<
0src\main\java\org\jabref\logic\util\Version.java¢ ¢(2ì
Forg.jabref.logic.util.Version.DevelopmentStage.parse(java.lang.String)DECLARATION<
0src\main\java\org\jabref\logic\util\Version.javaß' ß(,2º
oorg.jabref.logic.util.Version.DevelopmentStage.isMoreStableThan(org.jabref.logic.util.Version.DevelopmentStage)DECLARATION<
0src\main\java\org\jabref\logic\util\Version.javaπ π('2ì
Forg.jabref.logic.util.Version.DevelopmentStage?stability@287.26:287.35DECLARATION<
0src\main\java\org\jabref\logic\util\Version.javaü ü(#2è
Borg.jabref.logic.util.Version.DevelopmentStage?stage@288.29:288.34DECLARATION<
0src\main\java\org\jabref\logic\util\Version.java† †("2É
6org.jabref.logic.util.Version.DevelopmentStage?UNKNOWNDECLARATION<
0src\main\java\org\jabref\logic\util\Version.javaó ó(2Å
4org.jabref.logic.util.Version.DevelopmentStage?ALPHADECLARATION<
0src\main\java\org\jabref\logic\util\Version.javaò ò(2Ä
3org.jabref.logic.util.Version.DevelopmentStage?BETADECLARATION<
0src\main\java\org\jabref\logic\util\Version.javaô ô(2Ç
5org.jabref.logic.util.Version.DevelopmentStage?STABLEDECLARATION<
0src\main\java\org\jabref\logic\util\Version.javaö ö(î
6org.jabref.logic.util.Version.DevelopmentStage?UNKNOWNVALUE<
0src\main\java\org\jabref\logic\util\Version.javaó ó("
enumtrue*UNKNOWNê
4org.jabref.logic.util.Version.DevelopmentStage?ALPHAVALUE<
0src\main\java\org\jabref\logic\util\Version.javaò ò("
enumtrue*ALPHAé
3org.jabref.logic.util.Version.DevelopmentStage?BETAVALUE<
0src\main\java\org\jabref\logic\util\Version.javaô ô("
enumtrue*BETAí
5org.jabref.logic.util.Version.DevelopmentStage?STABLEVALUE<
0src\main\java\org\jabref\logic\util\Version.javaö ö("
enumtrue*STABLEÕ
Vorg.jabref.logic.util.Version.DevelopmentStage.DevelopmentStage(java.lang.String, int)CONSTRUCTOR<
0src\main\java\org\jabref\logic\util\Version.java¢ ¢("ÿ
declarationString¬<mark class="modifier"> </mark><mark class="method">DevelopmentStage</mark>(String stage<mark class="modifier"><mark class="modifier">,</mark></mark> <mark class="modifier">int</mark> stability)*DevelopmentStage2¢
\org.jabref.logic.util.Version.DevelopmentStage.DevelopmentStage(java.lang.String, int)!stageCALL<
0src\main\java\org\jabref\logic\util\Version.java£ £(2¶
`org.jabref.logic.util.Version.DevelopmentStage.DevelopmentStage(java.lang.String, int)!stabilityCALL<
0src\main\java\org\jabref\logic\util\Version.java§ §(&2à
Borg.jabref.logic.util.Version.DevelopmentStage?stage@288.29:288.34CALL<
0src\main\java\org\jabref\logic\util\Version.java£ £(2å
Forg.jabref.logic.util.Version.DevelopmentStage?stability@287.26:287.35CALL<
0src\main\java\org\jabref\logic\util\Version.java§ §(2ß
\org.jabref.logic.util.Version.DevelopmentStage.DevelopmentStage(java.lang.String, int)!stage	PARAMETER<
0src\main\java\org\jabref\logic\util\Version.java¢  ¢(%2´
`org.jabref.logic.util.Version.DevelopmentStage.DevelopmentStage(java.lang.String, int)!stability	PARAMETER<
0src\main\java\org\jabref\logic\util\Version.java¢+ ¢(42{
.org.jabref.logic.util.Version.DevelopmentStageRETURN_TYPE<
0src\main\java\org\jabref\logic\util\Version.java¢ ¢(À
\org.jabref.logic.util.Version.DevelopmentStage.DevelopmentStage(java.lang.String, int)!stage	PARAMETER<
0src\main\java\org\jabref\logic\util\Version.java¢  ¢(%"
typeString"
isFinalfalse"!
declarationStringString stage*stage2V
java.lang.StringTYPE<
0src\main\java\org\jabref\logic\util\Version.java¢ ¢(‚
`org.jabref.logic.util.Version.DevelopmentStage.DevelopmentStage(java.lang.String, int)!stability	PARAMETER<
0src\main\java\org\jabref\logic\util\Version.java¢+ ¢(4"
typeint"
isFinalfalse"@
declarationString+<mark class="modifier">int</mark> stability*	stability2I
intTYPE<
0src\main\java\org\jabref\logic\util\Version.java¢' ¢(*◊
Forg.jabref.logic.util.Version.DevelopmentStage.parse(java.lang.String)METHOD<
0src\main\java\org\jabref\logic\util\Version.javaß' ß(,"
isFinalfalse"†
declarationStringä<mark class="modifier">public </mark><mark class="modifier">static </mark>DevelopmentStage <mark class="method">parse</mark>(String stage)"
isStatictrue"
accesspublic"

isAbstractfalse"
typeDevelopmentStage*parse2o
)org.jabref.logic.util.Version.getLogger()CALL<
0src\main\java\org\jabref\logic\util\Version.java© ©(2o
)java.lang.String.equals(java.lang.Object)CALL<
0src\main\java\org\jabref\logic\util\Version.java´ ´(#2o
)java.lang.String.equals(java.lang.Object)CALL<
0src\main\java\org\jabref\logic\util\Version.java≠ ≠(#2o
)java.lang.String.equals(java.lang.Object)CALL<
0src\main\java\org\jabref\logic\util\Version.javaØ Ø(#2o
)org.jabref.logic.util.Version.getLogger()CALL<
0src\main\java\org\jabref\logic\util\Version.java≤ ≤(2í
Lorg.jabref.logic.util.Version.DevelopmentStage.parse(java.lang.String)!stageCALL<
0src\main\java\org\jabref\logic\util\Version.java® ®(2|
6org.jabref.logic.util.Version.DevelopmentStage?UNKNOWNCALL<
0src\main\java\org\jabref\logic\util\Version.java™ ™(2í
Lorg.jabref.logic.util.Version.DevelopmentStage.parse(java.lang.String)!stageCALL<
0src\main\java\org\jabref\logic\util\Version.java´ ´(2{
5org.jabref.logic.util.Version.DevelopmentStage?STABLECALL<
0src\main\java\org\jabref\logic\util\Version.java´$ ´(*2{
5org.jabref.logic.util.Version.DevelopmentStage?STABLECALL<
0src\main\java\org\jabref\logic\util\Version.java¨ ¨(2í
Lorg.jabref.logic.util.Version.DevelopmentStage.parse(java.lang.String)!stageCALL<
0src\main\java\org\jabref\logic\util\Version.java≠ ≠(2z
4org.jabref.logic.util.Version.DevelopmentStage?ALPHACALL<
0src\main\java\org\jabref\logic\util\Version.java≠$ ≠()2z
4org.jabref.logic.util.Version.DevelopmentStage?ALPHACALL<
0src\main\java\org\jabref\logic\util\Version.javaÆ Æ(2í
Lorg.jabref.logic.util.Version.DevelopmentStage.parse(java.lang.String)!stageCALL<
0src\main\java\org\jabref\logic\util\Version.javaØ Ø(2y
3org.jabref.logic.util.Version.DevelopmentStage?BETACALL<
0src\main\java\org\jabref\logic\util\Version.javaØ$ Ø((2y
3org.jabref.logic.util.Version.DevelopmentStage?BETACALL<
0src\main\java\org\jabref\logic\util\Version.java∞ ∞(2í
Lorg.jabref.logic.util.Version.DevelopmentStage.parse(java.lang.String)!stageCALL<
0src\main\java\org\jabref\logic\util\Version.java≤> ≤(C2|
6org.jabref.logic.util.Version.DevelopmentStage?UNKNOWNCALL<
0src\main\java\org\jabref\logic\util\Version.java≥ ≥(2à
Borg.jabref.logic.util.Version.DevelopmentStage?stage@288.29:288.34CALL<
0src\main\java\org\jabref\logic\util\Version.java´+ ´(02à
Borg.jabref.logic.util.Version.DevelopmentStage?stage@288.29:288.34CALL<
0src\main\java\org\jabref\logic\util\Version.java≠* ≠(/2à
Borg.jabref.logic.util.Version.DevelopmentStage?stage@288.29:288.34CALL<
0src\main\java\org\jabref\logic\util\Version.javaØ) Ø(.2ó
Lorg.jabref.logic.util.Version.DevelopmentStage.parse(java.lang.String)!stage	PARAMETER<
0src\main\java\org\jabref\logic\util\Version.javaß4 ß(92{
.org.jabref.logic.util.Version.DevelopmentStageRETURN_TYPE<
0src\main\java\org\jabref\logic\util\Version.javaß ß(&ª
Lorg.jabref.logic.util.Version.DevelopmentStage.parse(java.lang.String)!stage	PARAMETER<
0src\main\java\org\jabref\logic\util\Version.javaß4 ß(9"
typeString"
isFinalfalse"!
declarationStringString stage*stage2V
java.lang.StringTYPE<
0src\main\java\org\jabref\logic\util\Version.javaß- ß(3“	
oorg.jabref.logic.util.Version.DevelopmentStage.isMoreStableThan(org.jabref.logic.util.Version.DevelopmentStage)METHOD<
0src\main\java\org\jabref\logic\util\Version.javaπ π('"
isFinalfalse"™
declarationStringî<mark class="modifier">public </mark><mark class="modifier">boolean</mark> <mark class="method">isMoreStableThan</mark>(DevelopmentStage otherStage)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeboolean*isMoreStableThan2¿
zorg.jabref.logic.util.Version.DevelopmentStage.isMoreStableThan(org.jabref.logic.util.Version.DevelopmentStage)!otherStageCALL<
0src\main\java\org\jabref\logic\util\Version.java∫$ ∫(.2å
Forg.jabref.logic.util.Version.DevelopmentStage?stability@287.26:287.35CALL<
0src\main\java\org\jabref\logic\util\Version.java∫ ∫(!2å
Forg.jabref.logic.util.Version.DevelopmentStage?stability@287.26:287.35CALL<
0src\main\java\org\jabref\logic\util\Version.java∫/ ∫(82≈
zorg.jabref.logic.util.Version.DevelopmentStage.isMoreStableThan(org.jabref.logic.util.Version.DevelopmentStage)!otherStage	PARAMETER<
0src\main\java\org\jabref\logic\util\Version.javaπ9 π(C2T
booleanRETURN_TYPE<
0src\main\java\org\jabref\logic\util\Version.javaπ π(•
zorg.jabref.logic.util.Version.DevelopmentStage.isMoreStableThan(org.jabref.logic.util.Version.DevelopmentStage)!otherStage	PARAMETER<
0src\main\java\org\jabref\logic\util\Version.javaπ9 π(C"
typeDevelopmentStage"
isFinalfalse"0
declarationStringDevelopmentStage otherStage*
otherStage2t
.org.jabref.logic.util.Version.DevelopmentStageTYPE<
0src\main\java\org\jabref\logic\util\Version.javaπ( π(8÷
Forg.jabref.logic.util.Version.DevelopmentStage?stability@287.26:287.35VALUE<
0src\main\java\org\jabref\logic\util\Version.javaü ü(#"
isFinaltrue"
typeint"¨
declarationStringñ<mark class="modifier">private </mark><mark class="modifier">final </mark><mark class="modifier">int</mark> <mark class="class-field">stability</mark>"
isStaticfalse"
accessprivate*	stability2I
intTYPE<
0src\main\java\org\jabref\logic\util\Version.javaü ü(æ
Borg.jabref.logic.util.Version.DevelopmentStage?stage@288.29:288.34VALUE<
0src\main\java\org\jabref\logic\util\Version.java† †(""
isFinaltrue"
typeString"å
declarationStringw<mark class="modifier">private </mark><mark class="modifier">final </mark>String <mark class="class-field">stage</mark>"
isStaticfalse"
accessprivate*stage2V
java.lang.StringTYPE<
0src\main\java\org\jabref\logic\util\Version.java† †(