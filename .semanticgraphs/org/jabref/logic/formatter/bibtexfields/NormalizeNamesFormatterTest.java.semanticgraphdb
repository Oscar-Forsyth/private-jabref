
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaú2
Corg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTestCLASS`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java
 
(("2
package'org.jabref.logic.formatter.bibtexfields"
isFinalfalse"
inner classfalse"

isAbstractfalse"y
declarationStringd<mark class="modifier">public </mark><mark class="modifier">class </mark>NormalizeNamesFormatterTest"
accesspublic*NormalizeNamesFormatterTest2º
Korg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.setUp()DECLARATION`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java (2 
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.normalizeAuthorList()DECLARATION`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java (#2—
`org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.twoAuthorsSeperatedByColon()DECLARATION`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java* *(*2”
borg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.threeAuthorsSeperatedByColon()DECLARATION`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java/ /(,2—
`org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.threeAuthorsSeperatedByAnd()DECLARATION`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java5 5(*2Ÿ
horg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.threeAuthorsSeperatedByAndWithDash()DECLARATION`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java; ;(22⁄
iorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.threeAuthorsSeperatedByAndWithLatex()DECLARATION`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaA A(32∆
Uorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.lastThenInitial()DECLARATION`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaG G(2«
Vorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.lastThenInitials()DECLARATION`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaL L( 2∆
Uorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.initialThenLast()DECLARATION`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaQ Q(2…
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.initialDotThenLast()DECLARATION`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaV V("2«
Vorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.initialsThenLast()DECLARATION`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java[ [( 2Œ
]org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.lastThenJuniorThenFirst()DECLARATION`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java` `('2◊
forg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.concatenationOfAuthorsWithCommas()DECLARATION`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javae e(02«
Vorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.oddCountOfCommas()DECLARATION`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javak k( 2ƒ
Sorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.formatExample()DECLARATION`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javap p(2¡
Porg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.nameAffixe()DECLARATION`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javau u(2Ã
[org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.avoidSpecialCharacter()DECLARATION`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaz z(%2¿
Oorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.andInName()DECLARATION`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java (2Ã
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.multipleNameAffixes()DECLARATIONb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaÑ Ñ(#2Ã
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.commaSeperatedNames()DECLARATIONb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaâ â(#2«
Torg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.multipleSpaces()DECLARATIONb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaè è(2…
Vorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.avoidPreposition()DECLARATIONb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaï ï( 2ƒ
Qorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.preposition()DECLARATIONb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaö ö(2 
Worg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.oneCommaUntouched()DECLARATIONb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaü ü(!2…
Vorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.avoidNameAffixes()DECLARATIONb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java§ §( 2œ
\org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.upperCaseSensitiveList()DECLARATIONb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java© ©(&2÷
corg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.semiCorrectNamesWithSemicolon()DECLARATIONb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java∞ ∞(-2 
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45DECLARATION`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java$ (-œ
Korg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.setUp()METHOD`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java ("
isFinalfalse"±
declarationStringõ<mark class="annotation">@BeforeEach</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">setUp</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*setUp2√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.NormalizeNamesFormatter()CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java (/2√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java (2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java (  
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.normalizeAuthorList()METHOD`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java (#"
isFinalfalse"π
declarationString£<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">normalizeAuthorList</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*normalizeAuthorList2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java2 (82¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java2 (82¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaZ (`2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java/ (52¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java ( 2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java   ( 2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java"k "(q2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java$U $([2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java&X &(^2√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java( (12√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java( (12√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaP (Y2√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java% (.2√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java (2√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java   (2√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java"a "(j2√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java$K $(T2√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java&N &(W2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java (á
`org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.twoAuthorsSeperatedByColon()METHOD`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java* *(*"
isFinalfalse"¿
declarationString™<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">twoAuthorsSeperatedByColon</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*twoAuthorsSeperatedByColon2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java+A +(G2√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java+7 +(@2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java* *(ç
borg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.threeAuthorsSeperatedByColon()METHOD`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java/ /(,"
isFinalfalse"¬
declarationString¨<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">threeAuthorsSeperatedByColon</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*threeAuthorsSeperatedByColon2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java0P 0(V2√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java0F 0(O2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java/ /(á
`org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.threeAuthorsSeperatedByAnd()METHOD`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java5 5(*"
isFinalfalse"¿
declarationString™<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">threeAuthorsSeperatedByAnd</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*threeAuthorsSeperatedByAnd2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java6X 6(^2√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java6N 6(W2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java5 5(ü
horg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.threeAuthorsSeperatedByAndWithDash()METHOD`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java; ;(2"
isFinalfalse"»
declarationString≤<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">threeAuthorsSeperatedByAndWithDash</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*"threeAuthorsSeperatedByAndWithDash2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java<O <(U2√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java<E <(N2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java; ;(¢
iorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.threeAuthorsSeperatedByAndWithLatex()METHOD`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaA A(3"
isFinalfalse"…
declarationString≥<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">threeAuthorsSeperatedByAndWithLatex</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*#threeAuthorsSeperatedByAndWithLatex2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaC C( 2√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaC C(2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaA A(Ê
Uorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.lastThenInitial()METHOD`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaG G("
isFinalfalse"µ
declarationStringü<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">lastThenInitial</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*lastThenInitial2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaH, H(22√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaH" H(+2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaG G(È
Vorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.lastThenInitials()METHOD`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaL L( "
isFinalfalse"∂
declarationString†<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">lastThenInitials</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*lastThenInitials2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaM/ M(52√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaM% M(.2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaL L(Ê
Uorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.initialThenLast()METHOD`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaQ Q("
isFinalfalse"µ
declarationStringü<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">initialThenLast</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*initialThenLast2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaR, R(22√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaR" R(+2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaQ Q(Ô
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.initialDotThenLast()METHOD`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaV V(""
isFinalfalse"∏
declarationString¢<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">initialDotThenLast</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*initialDotThenLast2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaW, W(22√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaW" W(+2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaV V(È
Vorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.initialsThenLast()METHOD`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java[ [( "
isFinalfalse"∂
declarationString†<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">initialsThenLast</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*initialsThenLast2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java\/ \(52√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java\% \(.2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java[ [(˛
]org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.lastThenJuniorThenFirst()METHOD`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java` `('"
isFinalfalse"Ω
declarationStringß<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">lastThenJuniorThenFirst</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*lastThenJuniorThenFirst2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaa5 a(;2√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaa+ a(42u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java` `(§
forg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.concatenationOfAuthorsWithCommas()METHOD`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javae e(0"
isFinalfalse"∆
declarationString∞<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">concatenationOfAuthorsWithCommas</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid* concatenationOfAuthorsWithCommas2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javafd f(j2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javag0 g(62√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javafZ f(c2√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javag& g(/2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javae e(È
Vorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.oddCountOfCommas()METHOD`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javak k( "
isFinalfalse"∂
declarationString†<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">oddCountOfCommas</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*oddCountOfCommas2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javalE l(K2√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javal; l(D2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javak k(‰

Sorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.formatExample()METHOD`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javap p("
isFinalfalse"≥
declarationStringù<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">formatExample</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*formatExample2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaqD q(J2ª
Qorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.getExampleInput()CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaqU q(d2√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaq: q(C2√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaqK q(T2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javap p(◊
Porg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.nameAffixe()METHOD`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javau u("
isFinalfalse"∞
declarationStringö<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">nameAffixe</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*
nameAffixe2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javavJ v(P2√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javav@ v(I2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javau u(¯
[org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.avoidSpecialCharacter()METHOD`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaz z(%"
isFinalfalse"ª
declarationString•<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">avoidSpecialCharacter</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*avoidSpecialCharacter2¬
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java{F {(L2√
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALL`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java{< {(E2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaz z(ÿ
Oorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.andInName()METHOD`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java ("
isFinalfalse"Ø
declarationStringô<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">andInName</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*	andInName2ƒ
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaÄG Ä(M2≈
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaÄ= Ä(F2u
voidRETURN_TYPE`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java (˙
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.multipleNameAffixes()METHODb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaÑ Ñ(#"
isFinalfalse"π
declarationString£<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">multipleNameAffixes</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*multipleNameAffixes2ƒ
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaÖI Ö(O2≈
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaÖ? Ö(H2w
voidRETURN_TYPEb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaÑ Ñ(˙
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.commaSeperatedNames()METHODb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaâ â(#"
isFinalfalse"π
declarationString£<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">commaSeperatedNames</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*commaSeperatedNames2ƒ
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaã ã( 2≈
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaã ã(2w
voidRETURN_TYPEb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaâ â(Î
Torg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.multipleSpaces()METHODb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaè è("
isFinalfalse"¥
declarationStringû<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">multipleSpaces</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*multipleSpaces2ƒ
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaë ë( 2≈
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaë ë(2w
voidRETURN_TYPEb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaè è(Ò
Vorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.avoidPreposition()METHODb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaï ï( "
isFinalfalse"∂
declarationString†<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">avoidPreposition</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*avoidPreposition2ƒ
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javañe ñ(k2≈
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javañ[ ñ(d2w
voidRETURN_TYPEb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaï ï(‚
Qorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.preposition()METHODb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaö ö("
isFinalfalse"±
declarationStringõ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">preposition</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*preposition2ƒ
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaõe õ(k2≈
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaõ[ õ(d2w
voidRETURN_TYPEb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaö ö(Ù
Worg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.oneCommaUntouched()METHODb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaü ü(!"
isFinalfalse"∑
declarationString°<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">oneCommaUntouched</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*oneCommaUntouched2ƒ
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java†H †(N2≈
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java†> †(G2w
voidRETURN_TYPEb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.javaü ü(Ò
Vorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.avoidNameAffixes()METHODb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java§ §( "
isFinalfalse"∂
declarationString†<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">avoidNameAffixes</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*avoidNameAffixes2ƒ
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java•f •(l2≈
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java•\ •(e2w
voidRETURN_TYPEb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java§ §(°
\org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.upperCaseSensitiveList()METHODb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java© ©(&"
isFinalfalse"º
declarationString¶<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">upperCaseSensitiveList</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*upperCaseSensitiveList2ƒ
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java™M ™(S2ƒ
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java´M ´(S2ƒ
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java¨M ¨(S2≈
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java™C ™(L2≈
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java´C ´(L2≈
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java¨C ¨(L2w
voidRETURN_TYPEb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java© ©(≈
corg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.semiCorrectNamesWithSemicolon()METHODb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java∞ ∞(-"
isFinalfalse"√
declarationString≠<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">semiCorrectNamesWithSemicolon</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*semiCorrectNamesWithSemicolon2ƒ
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java±R ±(X2ƒ
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java≤D ≤(J2ƒ
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java≥d ≥(j2ƒ
Xorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(java.lang.String)CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java¥] ¥(c2≈
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java±H ±(Q2≈
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java≤: ≤(C2≈
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java≥Z ≥(c2≈
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45CALLb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java¥S ¥(\2w
voidRETURN_TYPEb
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java∞ ∞(÷
Yorg.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest?formatter@12.36:12.45VARIABLE`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java$ (-"
isFinalfalse"
typeNormalizeNamesFormatter"}
declarationStringh<mark class="modifier">private </mark>NormalizeNamesFormatter <mark class="class-field">formatter</mark>"
isStaticfalse"
accessprivate*	formatter2©
?org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTYPE`
Vsrc\test\java\org\jabref\logic\formatter\bibtexfields\NormalizeNamesFormatterTest.java (#