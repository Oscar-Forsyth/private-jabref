
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java√	
>org.jabref.logic.formatter.casechanger.CapitalizeFormatterTestCLASS[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java ($"1
package&org.jabref.logic.formatter.casechanger"
isFinalfalse"
inner classfalse"

isAbstractfalse"u
declarationString`<mark class="modifier">public </mark><mark class="modifier">class </mark>CapitalizeFormatterTest"
accesspublic*CapitalizeFormatterTest2≤
Forg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest.setUp()DECLARATION[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java (2∫
Norg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest.formatExample()DECLARATION[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java (2’
iorg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest.inputs(java.lang.String, java.lang.String)DECLARATION[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java5 5(2¿
Torg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest?formatter@14.32:14.41DECLARATION[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java  ()®
Forg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest.setUp()METHOD[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java ("
isFinalfalse"±
declarationStringõ<mark class="annotation">@BeforeEach</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">setUp</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*setUp2µ
Porg.jabref.logic.formatter.casechanger.CapitalizeFormatter.CapitalizeFormatter()CALL[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java (+2π
Torg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest?formatter@14.32:14.41CALL[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java (2p
voidRETURN_TYPE[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java (≠

Norg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest.formatExample()METHOD[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java ("
isFinalfalse"≥
declarationStringù<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">formatExample</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*formatExample2∏
Sorg.jabref.logic.formatter.casechanger.CapitalizeFormatter.format(java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java3 (92±
Lorg.jabref.logic.formatter.casechanger.CapitalizeFormatter.getExampleInput()CALL[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.javaD (S2π
Torg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest?formatter@14.32:14.41CALL[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java) (22π
Torg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest?formatter@14.32:14.41CALL[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java: (C2p
voidRETURN_TYPE[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java (ñ7
iorg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest.inputs(java.lang.String, java.lang.String)METHOD[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java5 5("
isFinalfalse"£&
declarationStringç& = "input={0}<mark class="modifier"><mark class="modifier">,</mark></mark> formattedStr={1}") <br><mark class="annotation">@CsvSource(value</mark> = { // {}
"{}<mark class="modifier"><mark class="modifier">,</mark></mark> {}"<mark class="modifier"><mark class="modifier">,</mark></mark> // unmatched braces
"{upper<mark class="modifier"><mark class="modifier">,</mark></mark> {upper"<mark class="modifier"><mark class="modifier">,</mark></mark> // single word lower case
"upper<mark class="modifier"><mark class="modifier">,</mark></mark> Upper"<mark class="modifier"><mark class="modifier">,</mark></mark> // single word correct
"Upper<mark class="modifier"><mark class="modifier">,</mark></mark> Upper"<mark class="modifier"><mark class="modifier">,</mark></mark> // single word upper case
"UPPER<mark class="modifier"><mark class="modifier">,</mark></mark> Upper"<mark class="modifier"><mark class="modifier">,</mark></mark> // multiple words lower case
"upper each first<mark class="modifier"><mark class="modifier">,</mark></mark> Upper Each First"<mark class="modifier"><mark class="modifier">,</mark></mark> // multiple words correct
"Upper Each First<mark class="modifier"><mark class="modifier">,</mark></mark> Upper Each First"<mark class="modifier"><mark class="modifier">,</mark></mark> // multiple words upper case
"UPPER EACH FIRST<mark class="modifier"><mark class="modifier">,</mark></mark> Upper Each First"<mark class="modifier"><mark class="modifier">,</mark></mark> // multiple words in lower and upper case
"upper each First<mark class="modifier"><mark class="modifier">,</mark></mark> Upper Each First"<mark class="modifier"><mark class="modifier">,</mark></mark> // single word lower case with {}
"{u}pp{e}r<mark class="modifier"><mark class="modifier">,</mark></mark> {u}pp{e}r"<mark class="modifier"><mark class="modifier">,</mark></mark> // single word correct with {}
"{U}pp{e}r<mark class="modifier"><mark class="modifier">,</mark></mark> {U}pp{e}r"<mark class="modifier"><mark class="modifier">,</mark></mark> // single word upper case with {}
"{U}PP{E}R<mark class="modifier"><mark class="modifier">,</mark></mark> {U}pp{E}r"<mark class="modifier"><mark class="modifier">,</mark></mark> // multiple words lower case with {}
"upper each {NOT} first<mark class="modifier"><mark class="modifier">,</mark></mark> Upper Each {NOT} First"<mark class="modifier"><mark class="modifier">,</mark></mark> // multiple words correct with {}
"Upper {E}ach {NOT} First<mark class="modifier"><mark class="modifier">,</mark></mark> Upper {E}ach {NOT} First"<mark class="modifier"><mark class="modifier">,</mark></mark> // multiple words upper case with {}
"UPPER {E}ACH {NOT} FIRST<mark class="modifier"><mark class="modifier">,</mark></mark> Upper {E}ach {NOT} First"<mark class="modifier"><mark class="modifier">,</mark></mark> // multiple words in lower and upper case with {}
"upper each first {NOT} {<mark class="modifier">this</mark>}<mark class="modifier"><mark class="modifier">,</mark></mark> Upper Each First {NOT} {<mark class="modifier">this</mark>}"<mark class="modifier"><mark class="modifier">,</mark></mark> // multiple words in lower and upper case with {} part 2
"upper each first {N}OT {t}his<mark class="modifier"><mark class="modifier">,</mark></mark> Upper Each First {N}ot {t}his"<mark class="modifier"><mark class="modifier">,</mark></mark> // multiple words lower case with -
"upper-each-first<mark class="modifier"><mark class="modifier">,</mark></mark> Upper-Each-First"<mark class="modifier"><mark class="modifier">,</mark></mark> // multiple words correct with -
"Upper-Each-First<mark class="modifier"><mark class="modifier">,</mark></mark> Upper-Each-First"<mark class="modifier"><mark class="modifier">,</mark></mark> // multiple words in lower and upper case with -
"Upper-each-First<mark class="modifier"><mark class="modifier">,</mark></mark> Upper-Each-First"<mark class="modifier"><mark class="modifier">,</mark></mark> // multiple words upper case with -
"UPPER-EACH-FIRST<mark class="modifier"><mark class="modifier">,</mark></mark> Upper-Each-First"<mark class="modifier"><mark class="modifier">,</mark></mark> // multiple words lower case with {} and -
"{u}pper-each-{f}irst<mark class="modifier"><mark class="modifier">,</mark></mark> {u}pper-Each-{f}irst"<mark class="modifier"><mark class="modifier">,</mark></mark> // single word with -
"-upper<mark class="modifier"><mark class="modifier">,</mark></mark> -Upper"<mark class="modifier"><mark class="modifier">,</mark></mark> // single word with {} and -
"-{u}pper<mark class="modifier"><mark class="modifier">,</mark></mark> -{u}pper" }) <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">inputs</mark>(String input<mark class="modifier"><mark class="modifier">,</mark></mark> String expectedResult)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*inputs2∏
Sorg.jabref.logic.formatter.casechanger.CapitalizeFormatter.format(java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java6( 6(.2π
Torg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest?formatter@14.32:14.41CALL[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java6 6('2‘
oorg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest.inputs(java.lang.String, java.lang.String)!inputCALL[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java6/ 6(42›
xorg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest.inputs(java.lang.String, java.lang.String)!expectedResultCALL[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java7 7(#2Ë
Çorg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest.inputs(java.lang.String, java.lang.String)?formattedStr@54.15:54.27CALL[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java7% 7(12Ÿ
oorg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest.inputs(java.lang.String, java.lang.String)!input	PARAMETER[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java5 5(#2‚
xorg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest.inputs(java.lang.String, java.lang.String)!expectedResult	PARAMETER[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java5, 5(:2Ô
Çorg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest.inputs(java.lang.String, java.lang.String)?formattedStr@54.15:54.27DECLARATION[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java6 6(2p
voidRETURN_TYPE[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java5 5(Ê
Çorg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest.inputs(java.lang.String, java.lang.String)?formattedStr@54.15:54.27VARIABLE[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java6 6("
typeString"
isFinalfalse"Ç
declarationStringm<mark class="modifier"> </mark>String <mark class="class-field">formattedStr</mark> = formatter.format(input)*formattedStr2u
java.lang.StringTYPE[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java6 6(2∏
Sorg.jabref.logic.formatter.casechanger.CapitalizeFormatter.format(java.lang.String)CALL[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java6( 6(.2π
Torg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest?formatter@14.32:14.41CALL[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java6 6('2‘
oorg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest.inputs(java.lang.String, java.lang.String)!inputCALL[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java6/ 6(4ú
oorg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest.inputs(java.lang.String, java.lang.String)!input	PARAMETER[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java5 5(#"
typeString"
isFinalfalse"!
declarationStringString input*input2u
java.lang.StringTYPE[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java5 5(∑
xorg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest.inputs(java.lang.String, java.lang.String)!expectedResult	PARAMETER[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java5, 5(:"
typeString"
isFinalfalse"*
declarationStringString expectedResult*expectedResult2u
java.lang.StringTYPE[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java5% 5(+∫
Torg.jabref.logic.formatter.casechanger.CapitalizeFormatterTest?formatter@14.32:14.41VARIABLE[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java  ()"
isFinalfalse"
typeCapitalizeFormatter"y
declarationStringd<mark class="modifier">private </mark>CapitalizeFormatter <mark class="class-field">formatter</mark>"
isStaticfalse"
accessprivate*	formatter2ü
:org.jabref.logic.formatter.casechanger.CapitalizeFormatterTYPE[
Qsrc\test\java\org\jabref\logic\formatter\casechanger\CapitalizeFormatterTest.java (