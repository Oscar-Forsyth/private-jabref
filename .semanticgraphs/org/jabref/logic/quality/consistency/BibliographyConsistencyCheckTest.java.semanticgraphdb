
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java¿
Eorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTestCLASSb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java (&"/
package$org.jabref.logic.quality.consistency"
isFinalfalse"
inner classfalse"

isAbstractfalse"x
declarationStringc<mark class="modifier"> </mark><mark class="modifier">class </mark>BibliographyConsistencyCheckTest"
accesspackage_private* BibliographyConsistencyCheckTest2ﬂ
lorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java	 (2Ë
uorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java*	 *($2‡
morg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java;	 ;(2Ê
sorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkLibraryWithoutIssues(java.nio.file.Path)DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java\	 \("2Õ
Zorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest?importer@24.27:24.35DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java (#œ.
lorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)METHODb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java	 ("
isFinalfalse"è
declarationString˘ <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">checkSimpleLibrary</mark>(<mark class="annotation">@TempDir</mark> Path tempDir)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*checkSimpleLibrary2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java (2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java (2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java! !(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java   (2‰
xorg.jabref.logic.quality.consistency.BibliographyConsistencyCheck.check(java.util.List<org.jabref.model.entry.BibEntry>)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java"X "(]2É
java.util.List.of(E, E)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java"c "(e2Ç
java.util.Set.of(E, E)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java$| $(~2Ö
java.util.List.of(E, E)CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java$≥ $(µ2Œ
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java (%2Œ
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java (&2Ã
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheck.BibliographyConsistencyCheck()CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java"9 "(U2Í
~org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)?first@28.17:28.22CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java"f "(k2Î
org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)?second@31.17:31.23CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java"m "(s2Ï
~org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)?first@28.17:28.22CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java$∂ $(ª2Ì
org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)?second@31.17:31.23CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java$Ω $(√2˜
àorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)?entryTypeResult@36.53:36.68CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java%Å %(ê2Ó
Åorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)?expected@37.44:37.52CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java& &(2Î
org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)?result@34.44:34.50CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java& &(%2Â
torg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)!tempDir	PARAMETERb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java* (12Ò
~org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)?first@28.17:28.22DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java (2Ú
org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)?second@31.17:31.23DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java (2Ú
org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)?result@34.44:34.50DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java", "(22¸
àorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)?entryTypeResult@36.53:36.68DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java$5 $(D2ı
Åorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)?expected@37.44:37.52DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java%, %(42w
voidRETURN_TYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java (â

~org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)?first@28.17:28.22VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java ("
typeBibEntry"
isFinalfalse"Ú
declarationString‹<mark class="modifier"> </mark>BibEntry <mark class="class-field">first</mark> = new BibEntry(StandardEntryType.Article, "first").withField(StandardField.AUTHOR, "Author One").withField(StandardField.PAGES, "some pages")*first2ã
org.jabref.model.entry.BibEntryTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java (2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java (2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java (2Œ
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java (%ê

org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)?second@31.17:31.23VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java ("
typeBibEntry"
isFinalfalse"˜
declarationString·<mark class="modifier"> </mark>BibEntry <mark class="class-field">second</mark> = new BibEntry(StandardEntryType.Article, "second").withField(StandardField.AUTHOR, "Author One").withField(StandardField.PUBLISHER, "publisher")*second2ã
org.jabref.model.entry.BibEntryTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java (2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java! !(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java   (2Œ
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java (&•
org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)?result@34.44:34.50VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java", "(2"+
type#BibliographyConsistencyCheck.Result"
isFinalfalse"√
declarationString≠<mark class="modifier"> </mark>BibliographyConsistencyCheck.Result <mark class="class-field">result</mark> = new BibliographyConsistencyCheck().check(List.of(first, second))*result2è
#BibliographyConsistencyCheck.ResultTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java"% "(+2‰
xorg.jabref.logic.quality.consistency.BibliographyConsistencyCheck.check(java.util.List<org.jabref.model.entry.BibEntry>)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java"X "(]2É
java.util.List.of(E, E)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java"c "(e2Ã
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheck.BibliographyConsistencyCheck()CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java"9 "(U2Í
~org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)?first@28.17:28.22CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java"f "(k2Î
org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)?second@31.17:31.23CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java"m "(sç
àorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)?entryTypeResult@36.53:36.68VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java$5 $(D"4
type,BibliographyConsistencyCheck.EntryTypeResult"
isFinalfalse"±
declarationStringõ<mark class="modifier"> </mark>BibliographyConsistencyCheck.EntryTypeResult <mark class="class-field">entryTypeResult</mark> = new BibliographyConsistencyCheck.EntryTypeResult(Set.of(StandardField.PAGES, StandardField.PUBLISHER)<mark class="modifier">,</mark> List.of(first, second))*entryTypeResult2ò
,BibliographyConsistencyCheck.EntryTypeResultTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java$% $(42Ç
java.util.Set.of(E, E)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java$| $(~2Ö
java.util.List.of(E, E)CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java$≥ $(µ2Ï
~org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)?first@28.17:28.22CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java$∂ $(ª2Ì
org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)?second@31.17:31.23CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java$Ω $(√™
Åorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)?expected@37.44:37.52VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java%, %(4"+
type#BibliographyConsistencyCheck.Result"
isFinalfalse"‡
declarationString <mark class="modifier"> </mark>BibliographyConsistencyCheck.Result <mark class="class-field">expected</mark> = new BibliographyConsistencyCheck.Result(Map.of(StandardEntryType.Article, entryTypeResult))*expected2è
#BibliographyConsistencyCheck.ResultTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java%% %(+2˜
àorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)?entryTypeResult@36.53:36.68CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java%Å %(ê⁄
torg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkSimpleLibrary(java.nio.file.Path)!tempDir	PARAMETERb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java* (1"
typePath"
isFinalfalse"J
declarationString5<mark class="annotation">@TempDir</mark> Path tempDir*tempDir2~
java.nio.file.PathTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java% ()Ú6
uorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)METHODb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java*	 *($"
isFinalfalse"ò
declarationStringÇ <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">checkDifferentOutputSymbols</mark>(<mark class="annotation">@TempDir</mark> Path tempDir)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*checkDifferentOutputSymbols2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java0 0(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java/ /(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java. .(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java- -(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java2 2(2‰
xorg.jabref.logic.quality.consistency.BibliographyConsistencyCheck.check(java.util.List<org.jabref.model.entry.BibEntry>)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java3X 3(]2É
java.util.List.of(E, E)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java3c 3(e2Ö
java.util.Set.of(E, E, E)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java5| 5(~2Ç
java.util.List.of(E)CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java5º 5(æ2¥
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java+' +(32Œ
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java, ,(%2Œ
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java1 1(&2Ã
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheck.BibliographyConsistencyCheck()CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java39 3(U2˙
çorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?customField@43.21:43.32CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java0 0(&2Ù
áorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?first@44.17:44.22CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java3f 3(k2ı
àorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?second@49.17:49.23CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java3m 3(s2¸
çorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?customField@43.21:43.32CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java5© 5(¥2ˆ
áorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?first@44.17:44.22CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java5ø 5(ƒ2Ä
ëorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?entryTypeResult@53.53:53.68CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java6Å 6(ê2˜
äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?expected@54.44:54.52CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java7 7(2ı
àorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?result@51.44:51.50CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java7 7(%2Ó
}org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)!tempDir	PARAMETERb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java*3 *(:2Å
çorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?customField@43.21:43.32DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java+ +( 2˚
áorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?first@44.17:44.22DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java, ,(2¸
àorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?second@49.17:49.23DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java1 1(2¸
àorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?result@51.44:51.50DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java3, 3(22Ö
ëorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?entryTypeResult@53.53:53.68DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java55 5(D2˛
äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?expected@54.44:54.52DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java6, 6(42w
voidRETURN_TYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java* *(è
çorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?customField@43.21:43.32VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java+ +( "
typeUnknownField"
isFinalfalse"ä
declarationStringu<mark class="modifier"> </mark>UnknownField <mark class="class-field">customField</mark> = new UnknownField("custom")*customField2ï
)org.jabref.model.entry.field.UnknownFieldTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java+ +(2¥
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java+' +(3®
áorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?first@44.17:44.22VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java, ,("
typeBibEntry"
isFinalfalse"Ó
declarationStringÿ<mark class="modifier"> </mark>BibEntry <mark class="class-field">first</mark> = new BibEntry(StandardEntryType.Article, "first").withField(StandardField.AUTHOR, // required
"Author One").withField(StandardField.TITLE, // required
"Title").withField(StandardField.PAGES, // optional
"some pages").withField(customField, // unknown
"custom")*first2ã
org.jabref.model.entry.BibEntryTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java, ,(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java0 0(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java/ /(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java. .(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java- -(2Œ
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java, ,(%2˙
çorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?customField@43.21:43.32CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java0 0(&ú
àorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?second@49.17:49.23VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java1 1("
typeBibEntry"
isFinalfalse"«
declarationString±<mark class="modifier"> </mark>BibEntry <mark class="class-field">second</mark> = new BibEntry(StandardEntryType.Article, "second").withField(StandardField.AUTHOR, "Author One")*second2ã
org.jabref.model.entry.BibEntryTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java1 1(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java2 2(2Œ
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java1 1(&√
àorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?result@51.44:51.50VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java3, 3(2"+
type#BibliographyConsistencyCheck.Result"
isFinalfalse"√
declarationString≠<mark class="modifier"> </mark>BibliographyConsistencyCheck.Result <mark class="class-field">result</mark> = new BibliographyConsistencyCheck().check(List.of(first, second))*result2è
#BibliographyConsistencyCheck.ResultTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java3% 3(+2‰
xorg.jabref.logic.quality.consistency.BibliographyConsistencyCheck.check(java.util.List<org.jabref.model.entry.BibEntry>)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java3X 3(]2É
java.util.List.of(E, E)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java3c 3(e2Ã
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheck.BibliographyConsistencyCheck()CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java39 3(U2Ù
áorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?first@44.17:44.22CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java3f 3(k2ı
àorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?second@49.17:49.23CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java3m 3(s∞
ëorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?entryTypeResult@53.53:53.68VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java55 5(D"4
type,BibliographyConsistencyCheck.EntryTypeResult"
isFinalfalse"≤
declarationStringú<mark class="modifier"> </mark>BibliographyConsistencyCheck.EntryTypeResult <mark class="class-field">entryTypeResult</mark> = new BibliographyConsistencyCheck.EntryTypeResult(Set.of(StandardField.PAGES, StandardField.TITLE, customField)<mark class="modifier">,</mark> List.of(first))*entryTypeResult2ò
,BibliographyConsistencyCheck.EntryTypeResultTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java5% 5(42Ö
java.util.Set.of(E, E, E)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java5| 5(~2Ç
java.util.List.of(E)CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java5º 5(æ2¸
çorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?customField@43.21:43.32CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java5© 5(¥2ˆ
áorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?first@44.17:44.22CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java5ø 5(ƒº
äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?expected@54.44:54.52VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java6, 6(4"+
type#BibliographyConsistencyCheck.Result"
isFinalfalse"‡
declarationString <mark class="modifier"> </mark>BibliographyConsistencyCheck.Result <mark class="class-field">expected</mark> = new BibliographyConsistencyCheck.Result(Map.of(StandardEntryType.Article, entryTypeResult))*expected2è
#BibliographyConsistencyCheck.ResultTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java6% 6(+2Ä
ëorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)?entryTypeResult@53.53:53.68CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java6Å 6(ê„
}org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkDifferentOutputSymbols(java.nio.file.Path)!tempDir	PARAMETERb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java*3 *(:"
typePath"
isFinalfalse"J
declarationString5<mark class="annotation">@TempDir</mark> Path tempDir*tempDir2~
java.nio.file.PathTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java*. *(2ΩW
morg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)METHODb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java;	 ;("
isFinalfalse"ê
declarationString˙ <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">checkComplexLibrary</mark>(<mark class="annotation">@TempDir</mark> Path tempDir)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*checkComplexLibrary2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java> >(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java= =(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaA A(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java@ @(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaG G(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaF F(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaE E(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaD D(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaK K(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaJ J(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaI I(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaN N(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaM M(2‰
xorg.jabref.logic.quality.consistency.BibliographyConsistencyCheck.check(java.util.List<org.jabref.model.entry.BibEntry>)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaPX P(]2å
 java.util.List.of(E, E, E, E, E)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaPc P(e2Ç
java.util.Set.of(E, E)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaRz R(|2Ö
java.util.List.of(E, E)CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaR± R(≥2á
java.util.Set.of(E, E, E)CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaSÄ S(Ç2Ö
java.util.List.of(E, E)CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaSœ S(—2Œ
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java< <(%2Œ
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java? ?(&2Œ
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaC C(%2Œ
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaH H(&2Œ
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaL L(%2Ã
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheck.BibliographyConsistencyCheck()CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaP9 P(U2Î
org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?first@60.17:60.22CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaPf P(k2Ì
Äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?second@63.17:63.23CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaPm P(s2Î
org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?third@67.17:67.22CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaPu P(z2Ó
Äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?fourth@72.17:72.23CALLc
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaP| P(Ç2Ì
org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?fifth@76.17:76.22CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaPÑ P(â2Ì
org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?first@60.17:60.22CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaR¥ R(π2Ô
Äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?second@63.17:63.23CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaRª R(¡2Ô
Äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?fourth@72.17:72.23CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaS“ S(ÿ2Ì
org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?third@67.17:67.22CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaS⁄ S(ﬂ2Ù
áorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?articleResult@82.53:82.66CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaU+ U(82˙
çorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?inProceedingsResult@83.53:83.72CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaV1 V(D2Ô
Çorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?expected@84.44:84.52CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaX X(2Ì
Äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?result@80.44:80.50CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaX X(%2Ê
uorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)!tempDir	PARAMETERb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java;+ ;(22Ú
org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?first@60.17:60.22DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java< <(2Ù
Äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?second@63.17:63.23DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java? ?(2Ú
org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?third@67.17:67.22DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaC C(2Ù
Äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?fourth@72.17:72.23DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaH H(2Ú
org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?fifth@76.17:76.22DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaL L(2Ù
Äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?result@80.44:80.50DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaP, P(22˚
áorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?articleResult@82.53:82.66DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaR5 R(B2Å
çorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?inProceedingsResult@83.53:83.72DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaS5 S(H2ˆ
Çorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?expected@84.44:84.52DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaT, T(42w
voidRETURN_TYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java; ;(ä

org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?first@60.17:60.22VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java< <("
typeBibEntry"
isFinalfalse"Ú
declarationString‹<mark class="modifier"> </mark>BibEntry <mark class="class-field">first</mark> = new BibEntry(StandardEntryType.Article, "first").withField(StandardField.AUTHOR, "Author One").withField(StandardField.PAGES, "some pages")*first2ã
org.jabref.model.entry.BibEntryTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java< <(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java> >(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java= =(2Œ
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java< <(%í

Äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?second@63.17:63.23VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java? ?("
typeBibEntry"
isFinalfalse"˜
declarationString·<mark class="modifier"> </mark>BibEntry <mark class="class-field">second</mark> = new BibEntry(StandardEntryType.Article, "second").withField(StandardField.AUTHOR, "Author One").withField(StandardField.PUBLISHER, "publisher")*second2ã
org.jabref.model.entry.BibEntryTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java? ?(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaA A(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java@ @(2Œ
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java? ?(&Ä
org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?third@67.17:67.22VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaC C("
typeBibEntry"
isFinalfalse"Ã
declarationString∂<mark class="modifier"> </mark>BibEntry <mark class="class-field">third</mark> = new BibEntry(StandardEntryType.InProceedings, "third").withField(StandardField.AUTHOR, "Author One").withField(StandardField.LOCATION, "location").withField(StandardField.YEAR, "2024").withField(StandardField.PAGES, "some pages")*third2ã
org.jabref.model.entry.BibEntryTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaC C(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaG G(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaF F(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaE E(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaD D(2Œ
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaC C(%å
Äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?fourth@72.17:72.23VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaH H("
typeBibEntry"
isFinalfalse"£
declarationStringç<mark class="modifier"> </mark>BibEntry <mark class="class-field">fourth</mark> = new BibEntry(StandardEntryType.InProceedings, "fourth").withField(StandardField.AUTHOR, "Author One").withField(StandardField.YEAR, "2024").withField(StandardField.PUBLISHER, "publisher")*fourth2ã
org.jabref.model.entry.BibEntryTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaH H(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaK K(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaJ J(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaI I(2Œ
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaH H(&â

org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?fifth@76.17:76.22VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaL L("
typeBibEntry"
isFinalfalse"Ò
declarationString€<mark class="modifier"> </mark>BibEntry <mark class="class-field">fifth</mark> = new BibEntry(StandardEntryType.InProceedings, "fifth").withField(StandardField.AUTHOR, "Author One").withField(StandardField.YEAR, "2024")*fifth2ã
org.jabref.model.entry.BibEntryTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaL L(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaN N(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaM M(2Œ
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaL L(%ò
Äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?result@80.44:80.50VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaP, P(2"+
type#BibliographyConsistencyCheck.Result"
isFinalfalse"Ÿ
declarationString√<mark class="modifier"> </mark>BibliographyConsistencyCheck.Result <mark class="class-field">result</mark> = new BibliographyConsistencyCheck().check(List.of(first, second, third, fourth, fifth))*result2è
#BibliographyConsistencyCheck.ResultTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaP% P(+2‰
xorg.jabref.logic.quality.consistency.BibliographyConsistencyCheck.check(java.util.List<org.jabref.model.entry.BibEntry>)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaPX P(]2å
 java.util.List.of(E, E, E, E, E)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaPc P(e2Ã
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheck.BibliographyConsistencyCheck()CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaP9 P(U2Î
org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?first@60.17:60.22CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaPf P(k2Ì
Äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?second@63.17:63.23CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaPm P(s2Î
org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?third@67.17:67.22CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaPu P(z2Ó
Äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?fourth@72.17:72.23CALLc
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaP| P(Ç2Ì
org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?fifth@76.17:76.22CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaPÑ P(âã
áorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?articleResult@82.53:82.66VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaR5 R(B"4
type,BibliographyConsistencyCheck.EntryTypeResult"
isFinalfalse"Ø
declarationStringô<mark class="modifier"> </mark>BibliographyConsistencyCheck.EntryTypeResult <mark class="class-field">articleResult</mark> = new BibliographyConsistencyCheck.EntryTypeResult(Set.of(StandardField.PAGES, StandardField.PUBLISHER)<mark class="modifier">,</mark> List.of(first, second))*articleResult2ò
,BibliographyConsistencyCheck.EntryTypeResultTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaR% R(42Ç
java.util.Set.of(E, E)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaRz R(|2Ö
java.util.List.of(E, E)CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaR± R(≥2Ì
org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?first@60.17:60.22CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaR¥ R(π2Ô
Äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?second@63.17:63.23CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaRª R(¡∫
çorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?inProceedingsResult@83.53:83.72VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaS5 S(H"4
type,BibliographyConsistencyCheck.EntryTypeResult"
isFinalfalse"Õ
declarationString∑<mark class="modifier"> </mark>BibliographyConsistencyCheck.EntryTypeResult <mark class="class-field">inProceedingsResult</mark> = new BibliographyConsistencyCheck.EntryTypeResult(Set.of(StandardField.PAGES, StandardField.PUBLISHER, StandardField.LOCATION)<mark class="modifier">,</mark> List.of(fourth, third))*inProceedingsResult2ò
,BibliographyConsistencyCheck.EntryTypeResultTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaS% S(42á
java.util.Set.of(E, E, E)CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaSÄ S(Ç2Ö
java.util.List.of(E, E)CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaSœ S(—2Ô
Äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?fourth@72.17:72.23CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaS“ S(ÿ2Ì
org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?third@67.17:67.22CALLd
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaS⁄ S(ﬂŸ	
Çorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?expected@84.44:84.52VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaT, T(4"+
type#BibliographyConsistencyCheck.Result"
isFinalfalse"î
declarationString˛<mark class="modifier"> </mark>BibliographyConsistencyCheck.Result <mark class="class-field">expected</mark> = new BibliographyConsistencyCheck.Result(Map.of(StandardEntryType.Article, articleResult, StandardEntryType.InProceedings, inProceedingsResult))*expected2è
#BibliographyConsistencyCheck.ResultTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaT% T(+2Ù
áorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?articleResult@82.53:82.66CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaU+ U(82˙
çorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)?inProceedingsResult@83.53:83.72CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaV1 V(D€
uorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkComplexLibrary(java.nio.file.Path)!tempDir	PARAMETERb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java;+ ;(2"
typePath"
isFinalfalse"J
declarationString5<mark class="annotation">@TempDir</mark> Path tempDir*tempDir2~
java.nio.file.PathTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java;& ;(*»&
sorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkLibraryWithoutIssues(java.nio.file.Path)METHODb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java\	 \(""
isFinalfalse"ñ
declarationStringÄ <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">checkLibraryWithoutIssues</mark>(<mark class="annotation">@TempDir</mark> Path tempDir)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*checkLibraryWithoutIssues2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java_ _(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java^ ^(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javab b(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaa a(2‰
xorg.jabref.logic.quality.consistency.BibliographyConsistencyCheck.check(java.util.List<org.jabref.model.entry.BibEntry>)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javacX c(]2É
java.util.List.of(E, E)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javacc c(e2~
java.util.Map.of()CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaec e(e2Œ
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java] ](%2Œ
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java` `(&2Ã
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheck.BibliographyConsistencyCheck()CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javac9 c(U2Ú
Öorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkLibraryWithoutIssues(java.nio.file.Path)?first@93.17:93.22CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javacf c(k2Û
Üorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkLibraryWithoutIssues(java.nio.file.Path)?second@96.17:96.23CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javacm c(s2˜
äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkLibraryWithoutIssues(java.nio.file.Path)?expected@101.44:101.52CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaf f(2Û
Üorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkLibraryWithoutIssues(java.nio.file.Path)?result@99.44:99.50CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaf f(%2Ï
{org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkLibraryWithoutIssues(java.nio.file.Path)!tempDir	PARAMETERb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java\1 \(82˘
Öorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkLibraryWithoutIssues(java.nio.file.Path)?first@93.17:93.22DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java] ](2˙
Üorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkLibraryWithoutIssues(java.nio.file.Path)?second@96.17:96.23DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java` `(2˙
Üorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkLibraryWithoutIssues(java.nio.file.Path)?result@99.44:99.50DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javac, c(22˛
äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkLibraryWithoutIssues(java.nio.file.Path)?expected@101.44:101.52DECLARATIONb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javae, e(42w
voidRETURN_TYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java\ \(ë

Öorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkLibraryWithoutIssues(java.nio.file.Path)?first@93.17:93.22VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java] ]("
typeBibEntry"
isFinalfalse"Ú
declarationString‹<mark class="modifier"> </mark>BibEntry <mark class="class-field">first</mark> = new BibEntry(StandardEntryType.Article, "first").withField(StandardField.AUTHOR, "Author One").withField(StandardField.PAGES, "some pages")*first2ã
org.jabref.model.entry.BibEntryTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java] ](2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java_ _(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java^ ^(2Œ
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java] ](%ï

Üorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkLibraryWithoutIssues(java.nio.file.Path)?second@96.17:96.23VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java` `("
typeBibEntry"
isFinalfalse"Ù
declarationStringﬁ<mark class="modifier"> </mark>BibEntry <mark class="class-field">second</mark> = new BibEntry(StandardEntryType.Article, "second").withField(StandardField.AUTHOR, "Author One").withField(StandardField.PAGES, "some pages")*second2ã
org.jabref.model.entry.BibEntryTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java` `(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javab b(2À
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaa a(2Œ
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java` `(&Ω
Üorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkLibraryWithoutIssues(java.nio.file.Path)?result@99.44:99.50VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javac, c(2"+
type#BibliographyConsistencyCheck.Result"
isFinalfalse"√
declarationString≠<mark class="modifier"> </mark>BibliographyConsistencyCheck.Result <mark class="class-field">result</mark> = new BibliographyConsistencyCheck().check(List.of(first, second))*result2è
#BibliographyConsistencyCheck.ResultTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javac% c(+2‰
xorg.jabref.logic.quality.consistency.BibliographyConsistencyCheck.check(java.util.List<org.jabref.model.entry.BibEntry>)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javacX c(]2É
java.util.List.of(E, E)CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javacc c(e2Ã
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheck.BibliographyConsistencyCheck()CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javac9 c(U2Ú
Öorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkLibraryWithoutIssues(java.nio.file.Path)?first@93.17:93.22CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javacf c(k2Û
Üorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkLibraryWithoutIssues(java.nio.file.Path)?second@96.17:96.23CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javacm c(sè
äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkLibraryWithoutIssues(java.nio.file.Path)?expected@101.44:101.52VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javae, e(4"+
type#BibliographyConsistencyCheck.Result"
isFinalfalse"∂
declarationString†<mark class="modifier"> </mark>BibliographyConsistencyCheck.Result <mark class="class-field">expected</mark> = new BibliographyConsistencyCheck.Result(Map.of())*expected2è
#BibliographyConsistencyCheck.ResultTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javae% e(+2~
java.util.Map.of()CALLb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.javaec e(e·
{org.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest.checkLibraryWithoutIssues(java.nio.file.Path)!tempDir	PARAMETERb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java\1 \(8"
typePath"
isFinalfalse"J
declarationString5<mark class="annotation">@TempDir</mark> Path tempDir*tempDir2~
java.nio.file.PathTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java\, \(0Ö
Zorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckTest?importer@24.27:24.35VARIABLEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java (#"
isFinalfalse"
typeBibtexImporter"á
declarationStringÒ<mark class="modifier">private </mark>BibtexImporter <mark class="class-field">importer</mark> = new BibtexImporter(mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS)<mark class="modifier">,</mark> new DummyFileUpdateMonitor());"
isStaticfalse"
accessprivate*importer2ü
3org.jabref.logic.importer.fileformat.BibtexImporterTYPEb
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java (2≤
Eorg.jabref.model.util.DummyFileUpdateMonitor.DummyFileUpdateMonitor()CALLc
Xsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckTest.java~ (î