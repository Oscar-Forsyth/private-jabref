
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaÉ
Torg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTestCLASSq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java (5"/
package$org.jabref.logic.quality.consistency"
isFinalfalse"
inner classfalse"

isAbstractfalse"á
declarationStringr<mark class="modifier"> </mark><mark class="modifier">class </mark>BibliographyConsistencyCheckResultCsvWriterTest"
accesspackage_private*/BibliographyConsistencyCheckResultCsvWriterTest2˝
{org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java	 (2á
Ñorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java4	 4($2˛
|org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaK	 K(2Ö
Çorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaq	 q("2Î
gorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()DECLARATIONs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaÜ	 Ü(2Î
iorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest?importer@27.27:27.35DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java (#’>
{org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)METHODq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java	 ("
isFinalfalse"è
declarationString˘ <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">checkSimpleLibrary</mark>(<mark class="annotation">@TempDir</mark> Path tempDir)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*checkSimpleLibrary2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java! !(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java   (2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java$ $(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java# #(2Û
xorg.jabref.logic.quality.consistency.BibliographyConsistencyCheck.check(java.util.List<org.jabref.model.entry.BibEntry>)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java%X %(]2í
java.util.List.of(E, E)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java%c %(e2ß
,java.nio.file.Path.resolve(java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java' '(&2œ
Tjava.nio.file.Files.newOutputStream(java.nio.file.Path, java.nio.file.OpenOption...)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java(: ((I2€
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriter.writeFindings()CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java*1 *(>2√
Hjava.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java0/ 0(62≠
2java.nio.file.Files.readString(java.nio.file.Path)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java0 0(%2›
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java (%2›
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java" "(&2€
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheck.BibliographyConsistencyCheck()CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java%9 %(U2æ
Cjava.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java(! ((32â
çorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?first@31.17:31.22CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java%f %(k2ä
éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?second@34.17:34.23CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java%m %(s2ˇ
Éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)!tempDirCALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java' '(2ã
èorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?csvFile@39.13:39.20CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java(J ((Q2å
éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?result@37.44:37.50CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java)ê )(ñ2å
éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?writer@40.20:40.26CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java)ò )(û2®
¨org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?paperConsistencyCheckResultCsvWriter@41.57:41.93CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java* *(02ã
èorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?csvFile@39.13:39.20CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java0& 0(-2Ñ
Éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)!tempDir	PARAMETERq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java* (12ê
çorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?first@31.17:31.22DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java (2ë
éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?second@34.17:34.23DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java" "(2ë
éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?result@37.44:37.50DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java%, %(22í
èorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?csvFile@39.13:39.20DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java' '(2ë
éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?writer@40.20:40.26DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java( ((2Ø
¨org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?paperConsistencyCheckResultCsvWriter@41.57:41.93DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java)9 )(]2Ü
voidRETURN_TYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java (‰

çorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?first@31.17:31.22VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java ("
typeBibEntry"
isFinalfalse"Ú
declarationString‹<mark class="modifier"> </mark>BibEntry <mark class="class-field">first</mark> = new BibEntry(StandardEntryType.Article, "first").withField(StandardField.AUTHOR, "Author One").withField(StandardField.PAGES, "some pages")*first2ö
org.jabref.model.entry.BibEntryTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java (2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java! !(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java   (2›
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java (%Î

éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?second@34.17:34.23VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java" "("
typeBibEntry"
isFinalfalse"˜
declarationString·<mark class="modifier"> </mark>BibEntry <mark class="class-field">second</mark> = new BibEntry(StandardEntryType.Article, "second").withField(StandardField.AUTHOR, "Author One").withField(StandardField.PUBLISHER, "publisher")*second2ö
org.jabref.model.entry.BibEntryTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java" "(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java$ $(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java# #(2›
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java" "(&æ
éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?result@37.44:37.50VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java%, %(2"+
type#BibliographyConsistencyCheck.Result"
isFinalfalse"√
declarationString≠<mark class="modifier"> </mark>BibliographyConsistencyCheck.Result <mark class="class-field">result</mark> = new BibliographyConsistencyCheck().check(List.of(first, second))*result2û
#BibliographyConsistencyCheck.ResultTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java%% %(+2Û
xorg.jabref.logic.quality.consistency.BibliographyConsistencyCheck.check(java.util.List<org.jabref.model.entry.BibEntry>)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java%X %(]2í
java.util.List.of(E, E)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java%c %(e2€
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheck.BibliographyConsistencyCheck()CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java%9 %(U2â
çorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?first@31.17:31.22CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java%f %(k2ä
éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?second@34.17:34.23CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java%m %(sã
èorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?csvFile@39.13:39.20VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java' '("
typePath"
isFinalfalse"î
declarationString<mark class="modifier"> </mark>Path <mark class="class-field">csvFile</mark> = tempDir.resolve("checkSimpleLibrary-result.csv")*csvFile2ç
java.nio.file.PathTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java' '(2ß
,java.nio.file.Path.resolve(java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java' '(&2ˇ
Éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)!tempDirCALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java' '(Ñ

éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?writer@40.20:40.26VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java( (("
typeWriter"
isFinalfalse"ú
declarationStringÜ<mark class="modifier"> </mark>Writer <mark class="class-field">writer</mark> = new OutputStreamWriter(Files.newOutputStream(csvFile))*writer2â
java.io.WriterTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java( ((2œ
Tjava.nio.file.Files.newOutputStream(java.nio.file.Path, java.nio.file.OpenOption...)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java(: ((I2æ
Cjava.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java(! ((32ã
èorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?csvFile@39.13:39.20CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java(J ((Q

¨org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?paperConsistencyCheckResultCsvWriter@41.57:41.93VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java)9 )(]"3
type+BibliographyConsistencyCheckResultCsvWriter"
isFinalfalse"Ë
declarationString“<mark class="modifier"> </mark>BibliographyConsistencyCheckResultCsvWriter <mark class="class-field">paperConsistencyCheckResultCsvWriter</mark> = new BibliographyConsistencyCheckResultCsvWriter(result, writer)*$paperConsistencyCheckResultCsvWriter2À
Porg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java) )(82å
éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?result@37.44:37.50CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java)ê )(ñ2å
éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)?writer@40.20:40.26CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java)ò )(ûâ
Éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkSimpleLibrary(java.nio.file.Path)!tempDir	PARAMETERq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java* (1"
typePath"
isFinalfalse"J
declarationString5<mark class="annotation">@TempDir</mark> Path tempDir*tempDir2ç
java.nio.file.PathTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java% ()ÿG
Ñorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)METHODq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java4	 4($"
isFinalfalse"ò
declarationStringÇ <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">checkDifferentOutputSymbols</mark>(<mark class="annotation">@TempDir</mark> Path tempDir)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*checkDifferentOutputSymbols2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java: :(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java9 9(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java8 8(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java7 7(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java< <(2Û
xorg.jabref.logic.quality.consistency.BibliographyConsistencyCheck.check(java.util.List<org.jabref.model.entry.BibEntry>)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java=X =(]2í
java.util.List.of(E, E)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java=c =(e2ß
,java.nio.file.Path.resolve(java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java? ?(&2œ
Tjava.nio.file.Files.newOutputStream(java.nio.file.Path, java.nio.file.OpenOption...)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java@: @(I2€
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriter.writeFindings()CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaB1 B(>2√
Hjava.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaG/ G(62≠
2java.nio.file.Files.readString(java.nio.file.Path)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaG G(%2√
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java5' 5(32›
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java6 6(%2›
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java; ;(&2€
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheck.BibliographyConsistencyCheck()CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java=9 =(U2æ
Cjava.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java@! @(32ò
úorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?customField@53.21:53.32CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java: :(&2í
ñorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?first@54.17:54.22CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java=f =(k2ì
óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?second@59.17:59.23CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java=m =(s2à
åorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)!tempDirCALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java? ?(2î
òorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?csvFile@63.13:63.20CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java@J @(Q2ï
óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?result@61.44:61.50CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaAê A(ñ2ï
óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?writer@64.20:64.26CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaAò A(û2±
µorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?paperConsistencyCheckResultCsvWriter@65.57:65.93CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaB B(02î
òorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?csvFile@63.13:63.20CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaG& G(-2ç
åorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)!tempDir	PARAMETERq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java43 4(:2ü
úorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?customField@53.21:53.32DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java5 5( 2ô
ñorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?first@54.17:54.22DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java6 6(2ö
óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?second@59.17:59.23DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java; ;(2ö
óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?result@61.44:61.50DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java=, =(22õ
òorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?csvFile@63.13:63.20DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java? ?(2ö
óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?writer@64.20:64.26DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java@ @(2∏
µorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?paperConsistencyCheckResultCsvWriter@65.57:65.93DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaA9 A(]2Ü
voidRETURN_TYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java4 4(À
úorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?customField@53.21:53.32VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java5 5( "
typeUnknownField"
isFinalfalse"ä
declarationStringu<mark class="modifier"> </mark>UnknownField <mark class="class-field">customField</mark> = new UnknownField("custom")*customField2§
)org.jabref.model.entry.field.UnknownFieldTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java5 5(2√
Horg.jabref.model.entry.field.UnknownField.UnknownField(java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java5' 5(3æ
ñorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?first@54.17:54.22VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java6 6("
typeBibEntry"
isFinalfalse"Ó
declarationStringÿ<mark class="modifier"> </mark>BibEntry <mark class="class-field">first</mark> = new BibEntry(StandardEntryType.Article, "first").withField(StandardField.AUTHOR, // required
"Author One").withField(StandardField.TITLE, // required
"Title").withField(StandardField.PAGES, // optional
"some pages").withField(customField, // unknown
"custom")*first2ö
org.jabref.model.entry.BibEntryTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java6 6(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java: :(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java9 9(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java8 8(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java7 7(2›
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java6 6(%2ò
úorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?customField@53.21:53.32CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java: :(&Á
óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?second@59.17:59.23VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java; ;("
typeBibEntry"
isFinalfalse"«
declarationString±<mark class="modifier"> </mark>BibEntry <mark class="class-field">second</mark> = new BibEntry(StandardEntryType.Article, "second").withField(StandardField.AUTHOR, "Author One")*second2ö
org.jabref.model.entry.BibEntryTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java; ;(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java< <(2›
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java; ;(&Ÿ
óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?result@61.44:61.50VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java=, =(2"+
type#BibliographyConsistencyCheck.Result"
isFinalfalse"√
declarationString≠<mark class="modifier"> </mark>BibliographyConsistencyCheck.Result <mark class="class-field">result</mark> = new BibliographyConsistencyCheck().check(List.of(first, second))*result2û
#BibliographyConsistencyCheck.ResultTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java=% =(+2Û
xorg.jabref.logic.quality.consistency.BibliographyConsistencyCheck.check(java.util.List<org.jabref.model.entry.BibEntry>)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java=X =(]2í
java.util.List.of(E, E)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java=c =(e2€
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheck.BibliographyConsistencyCheck()CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java=9 =(U2í
ñorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?first@54.17:54.22CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java=f =(k2ì
óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?second@59.17:59.23CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java=m =(sß
òorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?csvFile@63.13:63.20VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java? ?("
typePath"
isFinalfalse"û
declarationStringà<mark class="modifier"> </mark>Path <mark class="class-field">csvFile</mark> = tempDir.resolve("checkDifferentOutputSymbols-result.csv")*csvFile2ç
java.nio.file.PathTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java? ?(2ß
,java.nio.file.Path.resolve(java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java? ?(&2à
åorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)!tempDirCALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java? ?(ñ

óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?writer@64.20:64.26VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java@ @("
typeWriter"
isFinalfalse"ú
declarationStringÜ<mark class="modifier"> </mark>Writer <mark class="class-field">writer</mark> = new OutputStreamWriter(Files.newOutputStream(csvFile))*writer2â
java.io.WriterTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java@ @(2œ
Tjava.nio.file.Files.newOutputStream(java.nio.file.Path, java.nio.file.OpenOption...)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java@: @(I2æ
Cjava.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java@! @(32î
òorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?csvFile@63.13:63.20CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java@J @(Qã
µorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?paperConsistencyCheckResultCsvWriter@65.57:65.93VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaA9 A(]"3
type+BibliographyConsistencyCheckResultCsvWriter"
isFinalfalse"Ë
declarationString“<mark class="modifier"> </mark>BibliographyConsistencyCheckResultCsvWriter <mark class="class-field">paperConsistencyCheckResultCsvWriter</mark> = new BibliographyConsistencyCheckResultCsvWriter(result, writer)*$paperConsistencyCheckResultCsvWriter2À
Porg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaA A(82ï
óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?result@61.44:61.50CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaAê A(ñ2ï
óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)?writer@64.20:64.26CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaAò A(ûí
åorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkDifferentOutputSymbols(java.nio.file.Path)!tempDir	PARAMETERq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java43 4(:"
typePath"
isFinalfalse"J
declarationString5<mark class="annotation">@TempDir</mark> Path tempDir*tempDir2ç
java.nio.file.PathTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java4. 4(2¡`
|org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)METHODq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaK	 K("
isFinalfalse"ê
declarationString˙ <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">checkComplexLibrary</mark>(<mark class="annotation">@TempDir</mark> Path tempDir)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*checkComplexLibrary2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaN N(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaM M(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaQ Q(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaP P(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaW W(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaV V(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaU U(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaT T(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java[ [(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaZ Z(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaY Y(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java^ ^(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java] ](2Û
xorg.jabref.logic.quality.consistency.BibliographyConsistencyCheck.check(java.util.List<org.jabref.model.entry.BibEntry>)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java`X `(]2õ
 java.util.List.of(E, E, E, E, E)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java`c `(e2ß
,java.nio.file.Path.resolve(java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javab b(&2œ
Tjava.nio.file.Files.newOutputStream(java.nio.file.Path, java.nio.file.OpenOption...)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javac: c(I2€
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriter.writeFindings()CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javae1 e(>2√
Hjava.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javam/ m(62≠
2java.nio.file.Files.readString(java.nio.file.Path)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javam m(%2›
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaL L(%2›
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaO O(&2›
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaS S(%2›
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaX X(&2›
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java\ \(%2€
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheck.BibliographyConsistencyCheck()CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java`9 `(U2æ
Cjava.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javac! c(32ä
éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?first@76.17:76.22CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java`f `(k2ã
èorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?second@79.17:79.23CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java`m `(s2ä
éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?third@83.17:83.22CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java`u `(z2å
èorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?fourth@88.17:88.23CALLr
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java`| `(Ç2å
éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?fifth@92.17:92.22CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java`Ñ `(â2Ä
Ñorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)!tempDirCALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javab b(2å
êorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?csvFile@98.13:98.20CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javacJ c(Q2ç
èorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?result@96.44:96.50CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javadê d(ñ2ç
èorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?writer@99.20:99.26CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javadò d(û2´
Øorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?paperConsistencyCheckResultCsvWriter@100.57:100.93CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javae e(02å
êorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?csvFile@98.13:98.20CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javam& m(-2Ö
Ñorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)!tempDir	PARAMETERq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaK+ K(22ë
éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?first@76.17:76.22DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaL L(2í
èorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?second@79.17:79.23DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaO O(2ë
éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?third@83.17:83.22DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaS S(2í
èorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?fourth@88.17:88.23DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaX X(2ë
éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?fifth@92.17:92.22DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java\ \(2í
èorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?result@96.44:96.50DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java`, `(22ì
êorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?csvFile@98.13:98.20DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javab b(2í
èorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?writer@99.20:99.26DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javac c(2≤
Øorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?paperConsistencyCheckResultCsvWriter@100.57:100.93DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javad9 d(]2Ü
voidRETURN_TYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaK K(Â

éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?first@76.17:76.22VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaL L("
typeBibEntry"
isFinalfalse"Ú
declarationString‹<mark class="modifier"> </mark>BibEntry <mark class="class-field">first</mark> = new BibEntry(StandardEntryType.Article, "first").withField(StandardField.AUTHOR, "Author One").withField(StandardField.PAGES, "some pages")*first2ö
org.jabref.model.entry.BibEntryTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaL L(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaN N(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaM M(2›
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaL L(%Ï

èorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?second@79.17:79.23VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaO O("
typeBibEntry"
isFinalfalse"˜
declarationString·<mark class="modifier"> </mark>BibEntry <mark class="class-field">second</mark> = new BibEntry(StandardEntryType.Article, "second").withField(StandardField.AUTHOR, "Author One").withField(StandardField.PUBLISHER, "publisher")*second2ö
org.jabref.model.entry.BibEntryTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaO O(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaQ Q(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaP P(2›
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaO O(&˘
éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?third@83.17:83.22VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaS S("
typeBibEntry"
isFinalfalse"Ã
declarationString∂<mark class="modifier"> </mark>BibEntry <mark class="class-field">third</mark> = new BibEntry(StandardEntryType.InProceedings, "third").withField(StandardField.AUTHOR, "Author One").withField(StandardField.LOCATION, "location").withField(StandardField.YEAR, "2024").withField(StandardField.PAGES, "some pages")*third2ö
org.jabref.model.entry.BibEntryTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaS S(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaW W(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaV V(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaU U(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaT T(2›
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaS S(%ı
èorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?fourth@88.17:88.23VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaX X("
typeBibEntry"
isFinalfalse"£
declarationStringç<mark class="modifier"> </mark>BibEntry <mark class="class-field">fourth</mark> = new BibEntry(StandardEntryType.InProceedings, "fourth").withField(StandardField.AUTHOR, "Author One").withField(StandardField.YEAR, "2024").withField(StandardField.PUBLISHER, "publisher")*fourth2ö
org.jabref.model.entry.BibEntryTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaX X(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java[ [(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaZ Z(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaY Y(2›
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaX X(&‰

éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?fifth@92.17:92.22VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java\ \("
typeBibEntry"
isFinalfalse"Ò
declarationString€<mark class="modifier"> </mark>BibEntry <mark class="class-field">fifth</mark> = new BibEntry(StandardEntryType.InProceedings, "fifth").withField(StandardField.AUTHOR, "Author One").withField(StandardField.YEAR, "2024")*fifth2ö
org.jabref.model.entry.BibEntryTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java\ \(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java^ ^(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java] ](2›
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java\ \(%ã
èorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?result@96.44:96.50VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java`, `(2"+
type#BibliographyConsistencyCheck.Result"
isFinalfalse"Ÿ
declarationString√<mark class="modifier"> </mark>BibliographyConsistencyCheck.Result <mark class="class-field">result</mark> = new BibliographyConsistencyCheck().check(List.of(first, second, third, fourth, fifth))*result2û
#BibliographyConsistencyCheck.ResultTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java`% `(+2Û
xorg.jabref.logic.quality.consistency.BibliographyConsistencyCheck.check(java.util.List<org.jabref.model.entry.BibEntry>)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java`X `(]2õ
 java.util.List.of(E, E, E, E, E)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java`c `(e2€
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheck.BibliographyConsistencyCheck()CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java`9 `(U2ä
éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?first@76.17:76.22CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java`f `(k2ã
èorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?second@79.17:79.23CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java`m `(s2ä
éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?third@83.17:83.22CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java`u `(z2å
èorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?fourth@88.17:88.23CALLr
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java`| `(Ç2å
éorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?fifth@92.17:92.22CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java`Ñ `(âç
êorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?csvFile@98.13:98.20VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javab b("
typePath"
isFinalfalse"î
declarationString<mark class="modifier"> </mark>Path <mark class="class-field">csvFile</mark> = tempDir.resolve("checkSimpleLibrary-result.csv")*csvFile2ç
java.nio.file.PathTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javab b(2ß
,java.nio.file.Path.resolve(java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javab b(&2Ä
Ñorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)!tempDirCALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javab b(Ü

èorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?writer@99.20:99.26VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javac c("
typeWriter"
isFinalfalse"ú
declarationStringÜ<mark class="modifier"> </mark>Writer <mark class="class-field">writer</mark> = new OutputStreamWriter(Files.newOutputStream(csvFile))*writer2â
java.io.WriterTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javac c(2œ
Tjava.nio.file.Files.newOutputStream(java.nio.file.Path, java.nio.file.OpenOption...)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javac: c(I2æ
Cjava.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javac! c(32å
êorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?csvFile@98.13:98.20CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javacJ c(Qı

Øorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?paperConsistencyCheckResultCsvWriter@100.57:100.93VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javad9 d(]"3
type+BibliographyConsistencyCheckResultCsvWriter"
isFinalfalse"Ë
declarationString“<mark class="modifier"> </mark>BibliographyConsistencyCheckResultCsvWriter <mark class="class-field">paperConsistencyCheckResultCsvWriter</mark> = new BibliographyConsistencyCheckResultCsvWriter(result, writer)*$paperConsistencyCheckResultCsvWriter2À
Porg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javad d(82ç
èorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?result@96.44:96.50CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javadê d(ñ2ç
èorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)?writer@99.20:99.26CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javadò d(ûä
Ñorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkComplexLibrary(java.nio.file.Path)!tempDir	PARAMETERq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaK+ K(2"
typePath"
isFinalfalse"J
declarationString5<mark class="annotation">@TempDir</mark> Path tempDir*tempDir2ç
java.nio.file.PathTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaK& K(*Ù?
Çorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)METHODq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaq	 q(""
isFinalfalse"ñ
declarationStringÄ <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">checkLibraryWithoutIssues</mark>(<mark class="annotation">@TempDir</mark> Path tempDir)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*checkLibraryWithoutIssues2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javat t(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javas s(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaw w(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javav v(2Û
xorg.jabref.logic.quality.consistency.BibliographyConsistencyCheck.check(java.util.List<org.jabref.model.entry.BibEntry>)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaxX x(]2í
java.util.List.of(E, E)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaxc x(e2ß
,java.nio.file.Path.resolve(java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaz z(&2œ
Tjava.nio.file.Files.newOutputStream(java.nio.file.Path, java.nio.file.OpenOption...)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java{: {(I2€
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriter.writeFindings()CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java}1 }(>2≈
Hjava.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence)CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaÅ/ Å(62Ø
2java.nio.file.Files.readString(java.nio.file.Path)CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaÅ Å(%2›
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javar r(%2›
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javau u(&2€
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheck.BibliographyConsistencyCheck()CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javax9 x(U2æ
Cjava.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java{! {(32í
ñorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?first@114.17:114.22CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaxf x(k2ì
óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?second@117.17:117.23CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaxm x(s2Ü
äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)!tempDirCALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaz z(2î
òorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?csvFile@122.13:122.20CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java{J {(Q2ï
óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?result@120.44:120.50CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java|ê |(ñ2ï
óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?writer@123.20:123.26CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java|ò |(û2±
µorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?paperConsistencyCheckResultCsvWriter@124.57:124.93CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java} }(02ñ
òorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?csvFile@122.13:122.20CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaÅ& Å(-2ã
äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)!tempDir	PARAMETERq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaq1 q(82ô
ñorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?first@114.17:114.22DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javar r(2ö
óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?second@117.17:117.23DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javau u(2ö
óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?result@120.44:120.50DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javax, x(22õ
òorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?csvFile@122.13:122.20DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaz z(2ö
óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?writer@123.20:123.26DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java{ {(2∏
µorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?paperConsistencyCheckResultCsvWriter@124.57:124.93DECLARATIONq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java|9 |(]2Ü
voidRETURN_TYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaq q(Ì

ñorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?first@114.17:114.22VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javar r("
typeBibEntry"
isFinalfalse"Ú
declarationString‹<mark class="modifier"> </mark>BibEntry <mark class="class-field">first</mark> = new BibEntry(StandardEntryType.Article, "first").withField(StandardField.AUTHOR, "Author One").withField(StandardField.PAGES, "some pages")*first2ö
org.jabref.model.entry.BibEntryTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javar r(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javat t(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javas s(2›
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javar r(%Ò

óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?second@117.17:117.23VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javau u("
typeBibEntry"
isFinalfalse"Ù
declarationStringﬁ<mark class="modifier"> </mark>BibEntry <mark class="class-field">second</mark> = new BibEntry(StandardEntryType.Article, "second").withField(StandardField.AUTHOR, "Author One").withField(StandardField.PAGES, "some pages")*second2ö
org.jabref.model.entry.BibEntryTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javau u(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaw w(2⁄
_org.jabref.model.entry.BibEntry.withField(org.jabref.model.entry.field.Field, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javav v(2›
borg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType, java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javau u(&Ÿ
óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?result@120.44:120.50VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javax, x(2"+
type#BibliographyConsistencyCheck.Result"
isFinalfalse"√
declarationString≠<mark class="modifier"> </mark>BibliographyConsistencyCheck.Result <mark class="class-field">result</mark> = new BibliographyConsistencyCheck().check(List.of(first, second))*result2û
#BibliographyConsistencyCheck.ResultTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javax% x(+2Û
xorg.jabref.logic.quality.consistency.BibliographyConsistencyCheck.check(java.util.List<org.jabref.model.entry.BibEntry>)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaxX x(]2í
java.util.List.of(E, E)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaxc x(e2€
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheck.BibliographyConsistencyCheck()CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javax9 x(U2í
ñorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?first@114.17:114.22CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaxf x(k2ì
óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?second@117.17:117.23CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaxm x(s£
òorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?csvFile@122.13:122.20VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaz z("
typePath"
isFinalfalse"ú
declarationStringÜ<mark class="modifier"> </mark>Path <mark class="class-field">csvFile</mark> = tempDir.resolve("checkLibraryWithoutIssues-result.csv")*csvFile2ç
java.nio.file.PathTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaz z(2ß
,java.nio.file.Path.resolve(java.lang.String)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaz z(&2Ü
äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)!tempDirCALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaz z(ñ

óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?writer@123.20:123.26VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java{ {("
typeWriter"
isFinalfalse"ú
declarationStringÜ<mark class="modifier"> </mark>Writer <mark class="class-field">writer</mark> = new OutputStreamWriter(Files.newOutputStream(csvFile))*writer2â
java.io.WriterTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java{ {(2œ
Tjava.nio.file.Files.newOutputStream(java.nio.file.Path, java.nio.file.OpenOption...)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java{: {(I2æ
Cjava.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream)CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java{! {(32î
òorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?csvFile@122.13:122.20CALLq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java{J {(Qã
µorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?paperConsistencyCheckResultCsvWriter@124.57:124.93VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java|9 |(]"3
type+BibliographyConsistencyCheckResultCsvWriter"
isFinalfalse"Ë
declarationString“<mark class="modifier"> </mark>BibliographyConsistencyCheckResultCsvWriter <mark class="class-field">paperConsistencyCheckResultCsvWriter</mark> = new BibliographyConsistencyCheckResultCsvWriter(result, writer)*$paperConsistencyCheckResultCsvWriter2À
Porg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java| |(82ï
óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?result@120.44:120.50CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java|ê |(ñ2ï
óorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)?writer@123.20:123.26CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java|ò |(ûê
äorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkLibraryWithoutIssues(java.nio.file.Path)!tempDir	PARAMETERq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaq1 q(8"
typePath"
isFinalfalse"J
declarationString5<mark class="annotation">@TempDir</mark> Path tempDir*tempDir2ç
java.nio.file.PathTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaq, q(0ﬂ2
gorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()METHODs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaÜ	 Ü("
isFinalfalse"Ω
declarationStringß <br><mark class="annotation">@Disabled("This</mark> test is only for manual generation of a report") <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">checkManualInput</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*checkManualInput2π
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaá á(2∞
3java.nio.file.Path.resolveSibling(java.lang.String)CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaà à(*2∏
;org.jabref.logic.importer.ParserResult.getDatabaseContext()CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaâK â(]2”
Vorg.jabref.logic.importer.fileformat.BibtexImporter.importDatabase(java.nio.file.Path)CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaâ6 â(D2ı
xorg.jabref.logic.quality.consistency.BibliographyConsistencyCheck.check(java.util.List<org.jabref.model.entry.BibEntry>)CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaäX ä(]2∂
9org.jabref.model.database.BibDatabaseContext.getEntries()CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaän ä(x2—
Tjava.nio.file.Files.newOutputStream(java.nio.file.Path, java.nio.file.OpenOption...)CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaã: ã(I2›
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriter.writeFindings()CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaç1 ç(>2›
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheck.BibliographyConsistencyCheck()CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaä9 ä(U2¿
Cjava.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream)CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaã! ã(32˜
zorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?file@135.13:135.17CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaà à(2Ê
iorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest?importer@27.27:27.35CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaâ- â(52˜
zorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?file@135.13:135.17CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaâE â(I2É
Öorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?databaseContext@137.27:137.42CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaä^ ä(m2˙
}org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?csvFile@136.13:136.20CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaãJ ã(Q2˚
|org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?result@138.44:138.50CALLu
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaåê å(ñ2˚
|org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?writer@139.20:139.26CALLu
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaåò å(û2ò
öorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?paperConsistencyCheckResultCsvWriter@140.57:140.93CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaç ç(02˛
zorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?file@135.13:135.17DECLARATIONs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaá á(2Å
}org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?csvFile@136.13:136.20DECLARATIONs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaà à(2ä
Öorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?databaseContext@137.27:137.42DECLARATIONs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaâ â(*2Ä
|org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?result@138.44:138.50DECLARATIONs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaä, ä(22Ä
|org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?writer@139.20:139.26DECLARATIONs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaã ã(2ü
öorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?paperConsistencyCheckResultCsvWriter@140.57:140.93DECLARATIONs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaå9 å(]2à
voidRETURN_TYPEs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaÜ Ü(ˇ
zorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?file@135.13:135.17VARIABLEs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaá á("
typePath"
isFinalfalse"ç
declarationStringx<mark class="modifier"> </mark>Path <mark class="class-field">file</mark> = Path.of("C:\\TEMP\\JabRef\\biblio-anon.bib")*file2è
java.nio.file.PathTYPEs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaá á(2π
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaá á(Ù
}org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?csvFile@136.13:136.20VARIABLEs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaà à("
typePath"
isFinalfalse"ã
declarationStringv<mark class="modifier"> </mark>Path <mark class="class-field">csvFile</mark> = file.resolveSibling("biblio-cited.csv")*csvFile2è
java.nio.file.PathTYPEs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaà à(2∞
3java.nio.file.Path.resolveSibling(java.lang.String)CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaà à(*2˜
zorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?file@135.13:135.17CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaà à(ñ
Öorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?databaseContext@137.27:137.42VARIABLEs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaâ â(*"
typeBibDatabaseContext"
isFinalfalse"≠
declarationStringó<mark class="modifier"> </mark>BibDatabaseContext <mark class="class-field">databaseContext</mark> = importer.importDatabase(file).getDatabaseContext()*databaseContext2©
,org.jabref.model.database.BibDatabaseContextTYPEs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaâ â(2∏
;org.jabref.logic.importer.ParserResult.getDatabaseContext()CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaâK â(]2”
Vorg.jabref.logic.importer.fileformat.BibtexImporter.importDatabase(java.nio.file.Path)CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaâ6 â(D2Ê
iorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest?importer@27.27:27.35CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaâ- â(52˜
zorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?file@135.13:135.17CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaâE â(I 
|org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?result@138.44:138.50VARIABLEs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaä, ä(2"+
type#BibliographyConsistencyCheck.Result"
isFinalfalse"…
declarationString≥<mark class="modifier"> </mark>BibliographyConsistencyCheck.Result <mark class="class-field">result</mark> = new BibliographyConsistencyCheck().check(databaseContext.getEntries())*result2†
#BibliographyConsistencyCheck.ResultTYPEs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaä% ä(+2ı
xorg.jabref.logic.quality.consistency.BibliographyConsistencyCheck.check(java.util.List<org.jabref.model.entry.BibEntry>)CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaäX ä(]2∂
9org.jabref.model.database.BibDatabaseContext.getEntries()CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaän ä(x2›
`org.jabref.logic.quality.consistency.BibliographyConsistencyCheck.BibliographyConsistencyCheck()CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaä9 ä(U2É
Öorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?databaseContext@137.27:137.42CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaä^ ä(mË	
|org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?writer@139.20:139.26VARIABLEs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaã ã("
typeWriter"
isFinalfalse"ú
declarationStringÜ<mark class="modifier"> </mark>Writer <mark class="class-field">writer</mark> = new OutputStreamWriter(Files.newOutputStream(csvFile))*writer2ã
java.io.WriterTYPEs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaã ã(2—
Tjava.nio.file.Files.newOutputStream(java.nio.file.Path, java.nio.file.OpenOption...)CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaã: ã(I2¿
Cjava.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream)CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaã! ã(32˙
}org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?csvFile@136.13:136.20CALLs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaãJ ã(Q¿

öorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?paperConsistencyCheckResultCsvWriter@140.57:140.93VARIABLEs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaå9 å(]"3
type+BibliographyConsistencyCheckResultCsvWriter"
isFinalfalse"Ë
declarationString“<mark class="modifier"> </mark>BibliographyConsistencyCheckResultCsvWriter <mark class="class-field">paperConsistencyCheckResultCsvWriter</mark> = new BibliographyConsistencyCheckResultCsvWriter(result, writer)*$paperConsistencyCheckResultCsvWriter2Õ
Porg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTYPEs
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaå å(82˚
|org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?result@138.44:138.50CALLu
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaåê å(ñ2˚
|org.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest.checkManualInput()?writer@139.20:139.26CALLu
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.javaåò å(û¡
iorg.jabref.logic.quality.consistency.BibliographyConsistencyCheckResultCsvWriterTest?importer@27.27:27.35VARIABLEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java (#"
isFinalfalse"
typeBibtexImporter"á
declarationStringÒ<mark class="modifier">private </mark>BibtexImporter <mark class="class-field">importer</mark> = new BibtexImporter(mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS)<mark class="modifier">,</mark> new DummyFileUpdateMonitor());"
isStaticfalse"
accessprivate*importer2Æ
3org.jabref.logic.importer.fileformat.BibtexImporterTYPEq
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java (2¡
Eorg.jabref.model.util.DummyFileUpdateMonitor.DummyFileUpdateMonitor()CALLr
gsrc\test\java\org\jabref\logic\quality\consistency\BibliographyConsistencyCheckResultCsvWriterTest.java~ (î