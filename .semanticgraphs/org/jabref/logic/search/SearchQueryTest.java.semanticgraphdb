
:src\test\java\org\jabref\logic\search\SearchQueryTest.java€'
'org.jabref.logic.search.SearchQueryTestCLASSD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java (""
packageorg.jabref.logic.search"
isFinalfalse"
inner classfalse"

isAbstractfalse"m
declarationStringX<mark class="modifier">public </mark><mark class="modifier">class </mark>SearchQueryTest"
accesspublic*SearchQueryTest2ã
6org.jabref.logic.search.SearchQueryTest.testToString()DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.java (2î
?org.jabref.logic.search.SearchQueryTest.isContainsBasedSearch()DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.java (%2ì
>org.jabref.logic.search.SearchQueryTest.isGrammarBasedSearch()DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.java" "($2å
7org.jabref.logic.search.SearchQueryTest.grammarSearch()DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.java) )(2§
Oorg.jabref.logic.search.SearchQueryTest.grammarSearchFullEntryLastCharMissing()DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.java1 1(52ï
@org.jabref.logic.search.SearchQueryTest.grammarSearchFullEntry()DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.java9 9(&2†
Korg.jabref.logic.search.SearchQueryTest.searchingForOpenBraketInBooktitle()DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaA A(12†
Korg.jabref.logic.search.SearchQueryTest.searchMatchesSingleKeywordNotPart()DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaJ J(12ô
Dorg.jabref.logic.search.SearchQueryTest.searchMatchesSingleKeyword()DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaS S(*2é
9org.jabref.logic.search.SearchQueryTest.searchAllFields()DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.java\ \(2°
Lorg.jabref.logic.search.SearchQueryTest.searchAllFieldsNotForSpecificField()DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaf f(22û
Iorg.jabref.logic.search.SearchQueryTest.searchAllFieldsAndSpecificField()DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.javap p(/2Ü
1org.jabref.logic.search.SearchQueryTest.isMatch()DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaz z(2ó
@org.jabref.logic.search.SearchQueryTest.isValidQueryNotAsRegEx()DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÖ Ö(&2¶
Oorg.jabref.logic.search.SearchQueryTest.isValidQueryContainsBracketNotAsRegEx()DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaä ä(52©
Rorg.jabref.logic.search.SearchQueryTest.isNotValidQueryContainsBracketNotAsRegEx()DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaè è(82î
=org.jabref.logic.search.SearchQueryTest.isValidQueryAsRegEx()DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaî î(#2ü
Horg.jabref.logic.search.SearchQueryTest.isValidQueryWithNumbersAsRegEx()DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaô ô(.2£
Lorg.jabref.logic.search.SearchQueryTest.isValidQueryContainsBracketAsRegEx()DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaû û(22°
Jorg.jabref.logic.search.SearchQueryTest.isValidQueryWithEqualSignAsRegEx()DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java£ £(02´
Torg.jabref.logic.search.SearchQueryTest.isValidQueryWithNumbersAndEqualSignAsRegEx()DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java® ®(:2§
Morg.jabref.logic.search.SearchQueryTest.isValidQueryWithEqualSignNotAsRegEx()DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java≠ ≠(32Æ
Worg.jabref.logic.search.SearchQueryTest.isValidQueryWithNumbersAndEqualSignNotAsRegEx()DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java≤ ≤(=2´
Torg.jabref.logic.search.SearchQueryTest.isMatchedForNormalAndFieldBasedSearchMixed()DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java∑ ∑(:2ã
4org.jabref.logic.search.SearchQueryTest.simpleTerm()DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java¡ ¡(2ã
4org.jabref.logic.search.SearchQueryTest.getPattern()DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java… …(2ë
:org.jabref.logic.search.SearchQueryTest.getRegexpPattern()DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java“ “( 2õ
Dorg.jabref.logic.search.SearchQueryTest.getRegexpJavascriptPattern()DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java⁄ ⁄(*2í
;org.jabref.logic.search.SearchQueryTest.escapingInPattern()DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‚ ‚(!2ú
Eorg.jabref.logic.search.SearchQueryTest.escapingInJavascriptPattern()DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÎ Î(+ü
6org.jabref.logic.search.SearchQueryTest.testToString()METHODD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java ("
isFinalfalse"≤
declarationStringú<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">testToString</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*testToString2~
.org.jabref.logic.search.SearchQuery.toString()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java„ (Î2j
java.util.EnumSet.of(E, E)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaã (ç2}
.org.jabref.logic.search.SearchQuery.toString()CALLE
:src\test\java\org\jabref\logic\search\SearchQueryTest.java~ (Ü2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javac (i2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javao (z2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaG (R2Y
voidRETURN_TYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java (é
?org.jabref.logic.search.SearchQueryTest.isContainsBasedSearch()METHODD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java (%"
isFinalfalse"ª
declarationString•<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">isContainsBasedSearch</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*isContainsBasedSearch2â
;org.jabref.logic.search.SearchQuery.isContainsBasedSearch()CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java_ (t2e
java.util.EnumSet.of(E)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java3 (52ã
;org.jabref.logic.search.SearchQuery.isContainsBasedSearch()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaã (†2h
java.util.EnumSet.of(E, E)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java3 (52â
;org.jabref.logic.search.SearchQuery.isContainsBasedSearch()CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javag (|2e
java.util.EnumSet.of(E)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java; (=2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java ("2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java ("2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java (#2Y
voidRETURN_TYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java (à
>org.jabref.logic.search.SearchQueryTest.isGrammarBasedSearch()METHODD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java" "($"
isFinalfalse"∫
declarationString§<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">isGrammarBasedSearch</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*isGrammarBasedSearch2à
:org.jabref.logic.search.SearchQuery.isGrammarBasedSearch()CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java#` #(t2e
java.util.EnumSet.of(E)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java#4 #(62ä
:org.jabref.logic.search.SearchQuery.isGrammarBasedSearch()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java$å $(†2h
java.util.EnumSet.of(E, E)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java$4 $(62à
:org.jabref.logic.search.SearchQuery.isGrammarBasedSearch()CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java%f %(z2e
java.util.EnumSet.of(E)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java%: %(<2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java# #(#2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java$ $(#2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java% %("2Y
voidRETURN_TYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java" "(Ø
7org.jabref.logic.search.SearchQueryTest.grammarSearch()METHODD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java) )("
isFinalfalse"≥
declarationStringù<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">grammarSearch</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*grammarSearch2ü
Qorg.jabref.model.entry.BibEntry.addKeyword(java.lang.String, java.lang.Character)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java+ +(2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java,R ,(X2ö
Lorg.jabref.logic.search.SearchQuery.isMatch(org.jabref.model.entry.BibEntry)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java- -(&2x
*org.jabref.model.entry.BibEntry.BibEntry()CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java* *(%2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java,& ,(12ó
Iorg.jabref.logic.search.SearchQueryTest.grammarSearch()?entry@42.17:42.22CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java+ +(2ù
Oorg.jabref.logic.search.SearchQueryTest.grammarSearch()?searchQuery@44.20:44.31CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java- -(2ó
Iorg.jabref.logic.search.SearchQueryTest.grammarSearch()?entry@42.17:42.22CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java-' -(,2û
Iorg.jabref.logic.search.SearchQueryTest.grammarSearch()?entry@42.17:42.22DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.java* *(2§
Oorg.jabref.logic.search.SearchQueryTest.grammarSearch()?searchQuery@44.20:44.31DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.java, ,(2Y
voidRETURN_TYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java) )(•
Iorg.jabref.logic.search.SearchQueryTest.grammarSearch()?entry@42.17:42.22VARIABLED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java* *("
typeBibEntry"
isFinalfalse"t
declarationString_<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry</mark> = new BibEntry()*entry2m
org.jabref.model.entry.BibEntryTYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java* *(2x
*org.jabref.model.entry.BibEntry.BibEntry()CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java* *(%¸
Oorg.jabref.logic.search.SearchQueryTest.grammarSearch()?searchQuery@44.20:44.31VARIABLED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java, ,("
typeSearchQuery"
isFinalfalse"ÿ
declarationString¬<mark class="modifier"> </mark>SearchQuery <mark class="class-field">searchQuery</mark> = new SearchQuery("keywords=\"one two\""<mark class="modifier">,</mark> EnumSet.noneOf(SearchFlags.class))*searchQuery2q
#org.jabref.logic.search.SearchQueryTYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java, ,(2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java,R ,(X2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java,& ,(1¸
Oorg.jabref.logic.search.SearchQueryTest.grammarSearchFullEntryLastCharMissing()METHODD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java1 1(5"
isFinalfalse"À
declarationStringµ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">grammarSearchFullEntryLastCharMissing</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*%grammarSearchFullEntryLastCharMissing2¨
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java3 3(2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java4Y 4(_2ö
Lorg.jabref.logic.search.SearchQuery.isMatch(org.jabref.model.entry.BibEntry)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java5  5('2x
*org.jabref.model.entry.BibEntry.BibEntry()CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java2 2(%2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java4& 4(12Ø
aorg.jabref.logic.search.SearchQueryTest.grammarSearchFullEntryLastCharMissing()?entry@50.17:50.22CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java3 3(2µ
gorg.jabref.logic.search.SearchQueryTest.grammarSearchFullEntryLastCharMissing()?searchQuery@52.20:52.31CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java5 5(2Ø
aorg.jabref.logic.search.SearchQueryTest.grammarSearchFullEntryLastCharMissing()?entry@50.17:50.22CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java5( 5(-2∂
aorg.jabref.logic.search.SearchQueryTest.grammarSearchFullEntryLastCharMissing()?entry@50.17:50.22DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.java2 2(2º
gorg.jabref.logic.search.SearchQueryTest.grammarSearchFullEntryLastCharMissing()?searchQuery@52.20:52.31DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.java4 4(2Y
voidRETURN_TYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java1 1(Ω
aorg.jabref.logic.search.SearchQueryTest.grammarSearchFullEntryLastCharMissing()?entry@50.17:50.22VARIABLED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java2 2("
typeBibEntry"
isFinalfalse"t
declarationString_<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry</mark> = new BibEntry()*entry2m
org.jabref.model.entry.BibEntryTYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java2 2(2x
*org.jabref.model.entry.BibEntry.BibEntry()CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java2 2(%õ
gorg.jabref.logic.search.SearchQueryTest.grammarSearchFullEntryLastCharMissing()?searchQuery@52.20:52.31VARIABLED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java4 4("
typeSearchQuery"
isFinalfalse"ﬂ
declarationString…<mark class="modifier"> </mark>SearchQuery <mark class="class-field">searchQuery</mark> = new SearchQuery("title=\"systematic review\""<mark class="modifier">,</mark> EnumSet.noneOf(SearchFlags.class))*searchQuery2q
#org.jabref.logic.search.SearchQueryTYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java4 4(2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java4Y 4(_2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java4& 4(1Ñ
@org.jabref.logic.search.SearchQueryTest.grammarSearchFullEntry()METHODD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java9 9(&"
isFinalfalse"º
declarationString¶<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">grammarSearchFullEntry</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*grammarSearchFullEntry2¨
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java; ;(2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java<Y <(_2ö
Lorg.jabref.logic.search.SearchQuery.isMatch(org.jabref.model.entry.BibEntry)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java= =(&2x
*org.jabref.model.entry.BibEntry.BibEntry()CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java: :(%2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java<& <(12†
Rorg.jabref.logic.search.SearchQueryTest.grammarSearchFullEntry()?entry@58.17:58.22CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java; ;(2¶
Xorg.jabref.logic.search.SearchQueryTest.grammarSearchFullEntry()?searchQuery@60.20:60.31CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java= =(2†
Rorg.jabref.logic.search.SearchQueryTest.grammarSearchFullEntry()?entry@58.17:58.22CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java=' =(,2ß
Rorg.jabref.logic.search.SearchQueryTest.grammarSearchFullEntry()?entry@58.17:58.22DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.java: :(2≠
Xorg.jabref.logic.search.SearchQueryTest.grammarSearchFullEntry()?searchQuery@60.20:60.31DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.java< <(2Y
voidRETURN_TYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java9 9(Æ
Rorg.jabref.logic.search.SearchQueryTest.grammarSearchFullEntry()?entry@58.17:58.22VARIABLED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java: :("
typeBibEntry"
isFinalfalse"t
declarationString_<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry</mark> = new BibEntry()*entry2m
org.jabref.model.entry.BibEntryTYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java: :(2x
*org.jabref.model.entry.BibEntry.BibEntry()CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java: :(%å
Xorg.jabref.logic.search.SearchQueryTest.grammarSearchFullEntry()?searchQuery@60.20:60.31VARIABLED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java< <("
typeSearchQuery"
isFinalfalse"ﬂ
declarationString…<mark class="modifier"> </mark>SearchQuery <mark class="class-field">searchQuery</mark> = new SearchQuery("title=\"systematic review\""<mark class="modifier">,</mark> EnumSet.noneOf(SearchFlags.class))*searchQuery2q
#org.jabref.logic.search.SearchQueryTYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java< <(2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java<Y <(_2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java<& <(1˜
Korg.jabref.logic.search.SearchQueryTest.searchingForOpenBraketInBooktitle()METHODD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaA A(1"
isFinalfalse"«
declarationString±<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">searchingForOpenBraketInBooktitle</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*!searchingForOpenBraketInBooktitle2¨
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaC
 C(2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaEM E(S2ö
Lorg.jabref.logic.search.SearchQuery.isMatch(org.jabref.model.entry.BibEntry)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaF F(&2û
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaB B(!2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaE& E(12ß
Yorg.jabref.logic.search.SearchQueryTest.searchingForOpenBraketInBooktitle()?e@66.17:66.18CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaC C(	2±
corg.jabref.logic.search.SearchQueryTest.searchingForOpenBraketInBooktitle()?searchQuery@69.20:69.31CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaF F(2ß
Yorg.jabref.logic.search.SearchQueryTest.searchingForOpenBraketInBooktitle()?e@66.17:66.18CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaF' F((2Æ
Yorg.jabref.logic.search.SearchQueryTest.searchingForOpenBraketInBooktitle()?e@66.17:66.18DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaB B(2∏
corg.jabref.logic.search.SearchQueryTest.searchingForOpenBraketInBooktitle()?searchQuery@69.20:69.31DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaE E(2Y
voidRETURN_TYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaA A(Ù
Yorg.jabref.logic.search.SearchQueryTest.searchingForOpenBraketInBooktitle()?e@66.17:66.18VARIABLED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaB B("
typeBibEntry"
isFinalfalse"è
declarationStringz<mark class="modifier"> </mark>BibEntry <mark class="class-field">e</mark> = new BibEntry(StandardEntryType.InProceedings)*e2m
org.jabref.model.entry.BibEntryTYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaB B(2û
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaB B(!ã
corg.jabref.logic.search.SearchQueryTest.searchingForOpenBraketInBooktitle()?searchQuery@69.20:69.31VARIABLED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaE E("
typeSearchQuery"
isFinalfalse"”
declarationStringΩ<mark class="modifier"> </mark>SearchQuery <mark class="class-field">searchQuery</mark> = new SearchQuery("booktitle=\"(\""<mark class="modifier">,</mark> EnumSet.noneOf(SearchFlags.class))*searchQuery2q
#org.jabref.logic.search.SearchQueryTYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaE E(2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaEM E(S2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaE& E(1˜
Korg.jabref.logic.search.SearchQueryTest.searchMatchesSingleKeywordNotPart()METHODD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaJ J(1"
isFinalfalse"«
declarationString±<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">searchMatchesSingleKeywordNotPart</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*!searchMatchesSingleKeywordNotPart2¨
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaL
 L(2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaNO N(U2ö
Lorg.jabref.logic.search.SearchQuery.isMatch(org.jabref.model.entry.BibEntry)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaO  O('2û
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaK K(!2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaN& N(12ß
Yorg.jabref.logic.search.SearchQueryTest.searchMatchesSingleKeywordNotPart()?e@75.17:75.18CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaL L(	2±
corg.jabref.logic.search.SearchQueryTest.searchMatchesSingleKeywordNotPart()?searchQuery@78.20:78.31CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaO O(2ß
Yorg.jabref.logic.search.SearchQueryTest.searchMatchesSingleKeywordNotPart()?e@75.17:75.18CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaO( O()2Æ
Yorg.jabref.logic.search.SearchQueryTest.searchMatchesSingleKeywordNotPart()?e@75.17:75.18DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaK K(2∏
corg.jabref.logic.search.SearchQueryTest.searchMatchesSingleKeywordNotPart()?searchQuery@78.20:78.31DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaN N(2Y
voidRETURN_TYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaJ J(Ù
Yorg.jabref.logic.search.SearchQueryTest.searchMatchesSingleKeywordNotPart()?e@75.17:75.18VARIABLED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaK K("
typeBibEntry"
isFinalfalse"è
declarationStringz<mark class="modifier"> </mark>BibEntry <mark class="class-field">e</mark> = new BibEntry(StandardEntryType.InProceedings)*e2m
org.jabref.model.entry.BibEntryTYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaK K(2û
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaK K(!ç
corg.jabref.logic.search.SearchQueryTest.searchMatchesSingleKeywordNotPart()?searchQuery@78.20:78.31VARIABLED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaN N("
typeSearchQuery"
isFinalfalse"’
declarationStringø<mark class="modifier"> </mark>SearchQuery <mark class="class-field">searchQuery</mark> = new SearchQuery("anykeyword==apple"<mark class="modifier">,</mark> EnumSet.noneOf(SearchFlags.class))*searchQuery2q
#org.jabref.logic.search.SearchQueryTYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaN N(2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaNO N(U2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaN& N(1ø
Dorg.jabref.logic.search.SearchQueryTest.searchMatchesSingleKeyword()METHODD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaS S(*"
isFinalfalse"¿
declarationString™<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">searchMatchesSingleKeyword</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*searchMatchesSingleKeyword2¨
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaU
 U(2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaWS W(Y2ö
Lorg.jabref.logic.search.SearchQuery.isMatch(org.jabref.model.entry.BibEntry)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaX X(&2û
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaT T(!2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaW& W(12†
Rorg.jabref.logic.search.SearchQueryTest.searchMatchesSingleKeyword()?e@84.17:84.18CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaU U(	2™
\org.jabref.logic.search.SearchQueryTest.searchMatchesSingleKeyword()?searchQuery@87.20:87.31CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaX X(2†
Rorg.jabref.logic.search.SearchQueryTest.searchMatchesSingleKeyword()?e@84.17:84.18CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaX' X((2ß
Rorg.jabref.logic.search.SearchQueryTest.searchMatchesSingleKeyword()?e@84.17:84.18DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaT T(2±
\org.jabref.logic.search.SearchQueryTest.searchMatchesSingleKeyword()?searchQuery@87.20:87.31DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaW W(2Y
voidRETURN_TYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaS S(Ì
Rorg.jabref.logic.search.SearchQueryTest.searchMatchesSingleKeyword()?e@84.17:84.18VARIABLED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaT T("
typeBibEntry"
isFinalfalse"è
declarationStringz<mark class="modifier"> </mark>BibEntry <mark class="class-field">e</mark> = new BibEntry(StandardEntryType.InProceedings)*e2m
org.jabref.model.entry.BibEntryTYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaT T(2û
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaT T(!ä
\org.jabref.logic.search.SearchQueryTest.searchMatchesSingleKeyword()?searchQuery@87.20:87.31VARIABLED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaW W("
typeSearchQuery"
isFinalfalse"Ÿ
declarationString√<mark class="modifier"> </mark>SearchQuery <mark class="class-field">searchQuery</mark> = new SearchQuery("anykeyword==pineapple"<mark class="modifier">,</mark> EnumSet.noneOf(SearchFlags.class))*searchQuery2q
#org.jabref.logic.search.SearchQueryTYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaW W(2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaWS W(Y2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaW& W(1Æ
9org.jabref.logic.search.SearchQueryTest.searchAllFields()METHODD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java\ \("
isFinalfalse"µ
declarationStringü<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">searchAllFields</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*searchAllFields2¨
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java^
 ^(2¨
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java_
 _(2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaa[ a(a2ö
Lorg.jabref.logic.search.SearchQuery.isMatch(org.jabref.model.entry.BibEntry)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javab b(&2û
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java] ](!2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaa& a(12ï
Gorg.jabref.logic.search.SearchQueryTest.searchAllFields()?e@93.17:93.18CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java^ ^(	2ï
Gorg.jabref.logic.search.SearchQueryTest.searchAllFields()?e@93.17:93.18CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java_ _(	2ü
Qorg.jabref.logic.search.SearchQueryTest.searchAllFields()?searchQuery@97.20:97.31CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javab b(2ï
Gorg.jabref.logic.search.SearchQueryTest.searchAllFields()?e@93.17:93.18CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javab' b((2ú
Gorg.jabref.logic.search.SearchQueryTest.searchAllFields()?e@93.17:93.18DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.java] ](2¶
Qorg.jabref.logic.search.SearchQueryTest.searchAllFields()?searchQuery@97.20:97.31DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaa a(2Y
voidRETURN_TYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java\ \(‚
Gorg.jabref.logic.search.SearchQueryTest.searchAllFields()?e@93.17:93.18VARIABLED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java] ]("
typeBibEntry"
isFinalfalse"è
declarationStringz<mark class="modifier"> </mark>BibEntry <mark class="class-field">e</mark> = new BibEntry(StandardEntryType.InProceedings)*e2m
org.jabref.model.entry.BibEntryTYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java] ](2û
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java] ](!á
Qorg.jabref.logic.search.SearchQueryTest.searchAllFields()?searchQuery@97.20:97.31VARIABLED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaa a("
typeSearchQuery"
isFinalfalse"·
declarationStringÀ<mark class="modifier"> </mark>SearchQuery <mark class="class-field">searchQuery</mark> = new SearchQuery("anyfield==\"fruity features\""<mark class="modifier">,</mark> EnumSet.noneOf(SearchFlags.class))*searchQuery2q
#org.jabref.logic.search.SearchQueryTYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaa a(2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaa[ a(a2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaa& a(1Â
Lorg.jabref.logic.search.SearchQueryTest.searchAllFieldsNotForSpecificField()METHODD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaf f(2"
isFinalfalse"»
declarationString≤<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">searchAllFieldsNotForSpecificField</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*"searchAllFieldsNotForSpecificField2¨
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javah
 h(2¨
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javai
 i(2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaka k(g2ö
Lorg.jabref.logic.search.SearchQuery.isMatch(org.jabref.model.entry.BibEntry)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javal  l('2û
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javag g(!2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javak& k(12™
\org.jabref.logic.search.SearchQueryTest.searchAllFieldsNotForSpecificField()?e@103.17:103.18CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javah h(	2™
\org.jabref.logic.search.SearchQueryTest.searchAllFieldsNotForSpecificField()?e@103.17:103.18CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javai i(	2¥
forg.jabref.logic.search.SearchQueryTest.searchAllFieldsNotForSpecificField()?searchQuery@107.20:107.31CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javal l(2™
\org.jabref.logic.search.SearchQueryTest.searchAllFieldsNotForSpecificField()?e@103.17:103.18CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javal( l()2±
\org.jabref.logic.search.SearchQueryTest.searchAllFieldsNotForSpecificField()?e@103.17:103.18DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.javag g(2ª
forg.jabref.logic.search.SearchQueryTest.searchAllFieldsNotForSpecificField()?searchQuery@107.20:107.31DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.javak k(2Y
voidRETURN_TYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaf f(˜
\org.jabref.logic.search.SearchQueryTest.searchAllFieldsNotForSpecificField()?e@103.17:103.18VARIABLED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javag g("
typeBibEntry"
isFinalfalse"è
declarationStringz<mark class="modifier"> </mark>BibEntry <mark class="class-field">e</mark> = new BibEntry(StandardEntryType.InProceedings)*e2m
org.jabref.model.entry.BibEntryTYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javag g(2û
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javag g(!¢
forg.jabref.logic.search.SearchQueryTest.searchAllFieldsNotForSpecificField()?searchQuery@107.20:107.31VARIABLED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javak k("
typeSearchQuery"
isFinalfalse"Á
declarationString—<mark class="modifier"> </mark>SearchQuery <mark class="class-field">searchQuery</mark> = new SearchQuery("anyfield=fruit and keywords!=banana"<mark class="modifier">,</mark> EnumSet.noneOf(SearchFlags.class))*searchQuery2q
#org.jabref.logic.search.SearchQueryTYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javak k(2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaka k(g2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javak& k(1 
Iorg.jabref.logic.search.SearchQueryTest.searchAllFieldsAndSpecificField()METHODD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javap p(/"
isFinalfalse"≈
declarationStringØ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">searchAllFieldsAndSpecificField</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*searchAllFieldsAndSpecificField2¨
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javar
 r(2¨
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javas
 s(2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javau_ u(e2ö
Lorg.jabref.logic.search.SearchQuery.isMatch(org.jabref.model.entry.BibEntry)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javav v(&2û
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaq q(!2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javau& u(12ß
Yorg.jabref.logic.search.SearchQueryTest.searchAllFieldsAndSpecificField()?e@113.17:113.18CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javar r(	2ß
Yorg.jabref.logic.search.SearchQueryTest.searchAllFieldsAndSpecificField()?e@113.17:113.18CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javas s(	2±
corg.jabref.logic.search.SearchQueryTest.searchAllFieldsAndSpecificField()?searchQuery@117.20:117.31CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javav v(2ß
Yorg.jabref.logic.search.SearchQueryTest.searchAllFieldsAndSpecificField()?e@113.17:113.18CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javav' v((2Æ
Yorg.jabref.logic.search.SearchQueryTest.searchAllFieldsAndSpecificField()?e@113.17:113.18DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaq q(2∏
corg.jabref.logic.search.SearchQueryTest.searchAllFieldsAndSpecificField()?searchQuery@117.20:117.31DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.javau u(2Y
voidRETURN_TYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javap p(Ù
Yorg.jabref.logic.search.SearchQueryTest.searchAllFieldsAndSpecificField()?e@113.17:113.18VARIABLED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaq q("
typeBibEntry"
isFinalfalse"è
declarationStringz<mark class="modifier"> </mark>BibEntry <mark class="class-field">e</mark> = new BibEntry(StandardEntryType.InProceedings)*e2m
org.jabref.model.entry.BibEntryTYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaq q(2û
Porg.jabref.model.entry.BibEntry.BibEntry(org.jabref.model.entry.types.EntryType)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaq q(!ù
corg.jabref.logic.search.SearchQueryTest.searchAllFieldsAndSpecificField()?searchQuery@117.20:117.31VARIABLED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javau u("
typeSearchQuery"
isFinalfalse"Â
declarationStringœ<mark class="modifier"> </mark>SearchQuery <mark class="class-field">searchQuery</mark> = new SearchQuery("anyfield=fruit and keywords=apple"<mark class="modifier">,</mark> EnumSet.noneOf(SearchFlags.class))*searchQuery2q
#org.jabref.logic.search.SearchQueryTYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javau u(2z
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javau_ u(e2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javau& u(1ã
1org.jabref.logic.search.SearchQueryTest.isMatch()METHODD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaz z("
isFinalfalse"≠
declarationStringó<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">isMatch</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*isMatch2ù
Oorg.jabref.model.entry.BibEntry.setType(org.jabref.model.entry.types.EntryType)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java| |(2¨
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java} }(2ú
Lorg.jabref.logic.search.SearchQuery.isMatch(org.jabref.model.entry.BibEntry)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaô (†2h
java.util.EnumSet.of(E, E)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaA (C2û
Lorg.jabref.logic.search.SearchQuery.isMatch(org.jabref.model.entry.BibEntry)CALLH
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÄã Ä(í2j
java.util.EnumSet.of(E, E)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÄ3 Ä(52û
Lorg.jabref.logic.search.SearchQuery.isMatch(org.jabref.model.entry.BibEntry)CALLH
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÅí Å(ô2j
java.util.EnumSet.of(E, E)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÅ: Å(<2x
*org.jabref.model.entry.BibEntry.BibEntry()CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java{ {(%2⁄
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java (#2‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÄ Ä("2‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÅ Å("2ì
Eorg.jabref.logic.search.SearchQueryTest.isMatch()?entry@123.17:123.22CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java| |(2ì
Eorg.jabref.logic.search.SearchQueryTest.isMatch()?entry@123.17:123.22CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java} }(2ï
Eorg.jabref.logic.search.SearchQueryTest.isMatch()?entry@123.17:123.22CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java° (¶2ó
Eorg.jabref.logic.search.SearchQueryTest.isMatch()?entry@123.17:123.22CALLH
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÄì Ä(ò2ó
Eorg.jabref.logic.search.SearchQueryTest.isMatch()?entry@123.17:123.22CALLH
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÅö Å(ü2ö
Eorg.jabref.logic.search.SearchQueryTest.isMatch()?entry@123.17:123.22DECLARATIOND
:src\test\java\org\jabref\logic\search\SearchQueryTest.java{ {(2Y
voidRETURN_TYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaz z(°
Eorg.jabref.logic.search.SearchQueryTest.isMatch()?entry@123.17:123.22VARIABLED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java{ {("
typeBibEntry"
isFinalfalse"t
declarationString_<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry</mark> = new BibEntry()*entry2m
org.jabref.model.entry.BibEntryTYPED
:src\test\java\org\jabref\logic\search\SearchQueryTest.java{ {(2x
*org.jabref.model.entry.BibEntry.BibEntry()CALLD
:src\test\java\org\jabref\logic\search\SearchQueryTest.java{ {(%Á
@org.jabref.logic.search.SearchQueryTest.isValidQueryNotAsRegEx()METHODF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÖ Ö(&"
isFinalfalse"º
declarationString¶<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">isValidQueryNotAsRegEx</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*isValidQueryNotAsRegEx2}
-org.jabref.logic.search.SearchQuery.isValid()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÜ_ Ü(f2g
java.util.EnumSet.of(E)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÜ3 Ü(52‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÜ Ü("2[
voidRETURN_TYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÖ Ö(î
Oorg.jabref.logic.search.SearchQueryTest.isValidQueryContainsBracketNotAsRegEx()METHODF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaä ä(5"
isFinalfalse"À
declarationStringµ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">isValidQueryContainsBracketNotAsRegEx</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*%isValidQueryContainsBracketNotAsRegEx2}
-org.jabref.logic.search.SearchQuery.isValid()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaã` ã(g2g
java.util.EnumSet.of(E)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaã4 ã(62‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaã ã("2[
voidRETURN_TYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaä ä(¢
Rorg.jabref.logic.search.SearchQueryTest.isNotValidQueryContainsBracketNotAsRegEx()METHODF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaè è(8"
isFinalfalse"Œ
declarationString∏<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">isNotValidQueryContainsBracketNotAsRegEx</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*(isNotValidQueryContainsBracketNotAsRegEx2
-org.jabref.logic.search.SearchQuery.isValid()CALLH
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaêå ê(ì2j
java.util.EnumSet.of(E, E)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaê4 ê(62‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaê ê("2[
voidRETURN_TYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaè è(„
=org.jabref.logic.search.SearchQueryTest.isValidQueryAsRegEx()METHODF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaî î(#"
isFinalfalse"π
declarationString£<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">isValidQueryAsRegEx</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*isValidQueryAsRegEx2
-org.jabref.logic.search.SearchQuery.isValid()CALLH
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaïã ï(í2j
java.util.EnumSet.of(E, E)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaï3 ï(52‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaï ï("2[
voidRETURN_TYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaî î(Ñ
Horg.jabref.logic.search.SearchQueryTest.isValidQueryWithNumbersAsRegEx()METHODF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaô ô(."
isFinalfalse"ƒ
declarationStringÆ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">isValidQueryWithNumbersAsRegEx</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*isValidQueryWithNumbersAsRegEx2
-org.jabref.logic.search.SearchQuery.isValid()CALLH
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaöä ö(ë2j
java.util.EnumSet.of(E, E)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaö2 ö(42‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaö ö("2[
voidRETURN_TYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaô ô(ê
Lorg.jabref.logic.search.SearchQueryTest.isValidQueryContainsBracketAsRegEx()METHODF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaû û(2"
isFinalfalse"»
declarationString≤<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">isValidQueryContainsBracketAsRegEx</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*"isValidQueryContainsBracketAsRegEx2
-org.jabref.logic.search.SearchQuery.isValid()CALLH
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaüå ü(ì2j
java.util.EnumSet.of(E, E)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaü4 ü(62‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaü ü("2[
voidRETURN_TYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaû û(ä
Jorg.jabref.logic.search.SearchQueryTest.isValidQueryWithEqualSignAsRegEx()METHODF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java£ £(0"
isFinalfalse"∆
declarationString∞<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">isValidQueryWithEqualSignAsRegEx</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid* isValidQueryWithEqualSignAsRegEx2
-org.jabref.logic.search.SearchQuery.isValid()CALLH
:src\test\java\org\jabref\logic\search\SearchQueryTest.java§í §(ô2j
java.util.EnumSet.of(E, E)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java§: §(<2‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java§ §("2[
voidRETURN_TYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java£ £(®
Torg.jabref.logic.search.SearchQueryTest.isValidQueryWithNumbersAndEqualSignAsRegEx()METHODF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java® ®(:"
isFinalfalse"–
declarationString∫<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">isValidQueryWithNumbersAndEqualSignAsRegEx</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid**isValidQueryWithNumbersAndEqualSignAsRegEx2
-org.jabref.logic.search.SearchQuery.isValid()CALLH
:src\test\java\org\jabref\logic\search\SearchQueryTest.java©ë ©(ò2j
java.util.EnumSet.of(E, E)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java©9 ©(;2‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java© ©("2[
voidRETURN_TYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java® ®(é
Morg.jabref.logic.search.SearchQueryTest.isValidQueryWithEqualSignNotAsRegEx()METHODF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java≠ ≠(3"
isFinalfalse"…
declarationString≥<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">isValidQueryWithEqualSignNotAsRegEx</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*#isValidQueryWithEqualSignNotAsRegEx2}
-org.jabref.logic.search.SearchQuery.isValid()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÆf Æ(m2g
java.util.EnumSet.of(E)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÆ: Æ(<2‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÆ Æ("2[
voidRETURN_TYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java≠ ≠(¨
Worg.jabref.logic.search.SearchQueryTest.isValidQueryWithNumbersAndEqualSignNotAsRegEx()METHODF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java≤ ≤(="
isFinalfalse"”
declarationStringΩ<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">isValidQueryWithNumbersAndEqualSignNotAsRegEx</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*-isValidQueryWithNumbersAndEqualSignNotAsRegEx2}
-org.jabref.logic.search.SearchQuery.isValid()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java≥e ≥(l2g
java.util.EnumSet.of(E)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java≥9 ≥(;2‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java≥ ≥("2[
voidRETURN_TYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java≤ ≤(¯
Torg.jabref.logic.search.SearchQueryTest.isMatchedForNormalAndFieldBasedSearchMixed()METHODF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java∑ ∑(:"
isFinalfalse"–
declarationString∫<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">isMatchedForNormalAndFieldBasedSearchMixed</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid**isMatchedForNormalAndFieldBasedSearchMixed2ü
Oorg.jabref.model.entry.BibEntry.setType(org.jabref.model.entry.types.EntryType)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaπ π(2Æ
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java∫ ∫(2Æ
^org.jabref.model.entry.BibEntry.setField(org.jabref.model.entry.field.Field, java.lang.String)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaª ª(2û
Lorg.jabref.logic.search.SearchQuery.isMatch(org.jabref.model.entry.BibEntry)CALLH
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaΩõ Ω(¢2j
java.util.EnumSet.of(E, E)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaΩC Ω(E2z
*org.jabref.model.entry.BibEntry.BibEntry()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java∏ ∏(%2‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaΩ Ω("2∏
horg.jabref.logic.search.SearchQueryTest.isMatchedForNormalAndFieldBasedSearchMixed()?entry@184.17:184.22CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaπ π(2∏
horg.jabref.logic.search.SearchQueryTest.isMatchedForNormalAndFieldBasedSearchMixed()?entry@184.17:184.22CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java∫ ∫(2∏
horg.jabref.logic.search.SearchQueryTest.isMatchedForNormalAndFieldBasedSearchMixed()?entry@184.17:184.22CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaª ª(2∫
horg.jabref.logic.search.SearchQueryTest.isMatchedForNormalAndFieldBasedSearchMixed()?entry@184.17:184.22CALLH
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaΩ£ Ω(®2ø
horg.jabref.logic.search.SearchQueryTest.isMatchedForNormalAndFieldBasedSearchMixed()?entry@184.17:184.22DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java∏ ∏(2[
voidRETURN_TYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java∑ ∑( 
horg.jabref.logic.search.SearchQueryTest.isMatchedForNormalAndFieldBasedSearchMixed()?entry@184.17:184.22VARIABLEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java∏ ∏("
typeBibEntry"
isFinalfalse"t
declarationString_<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry</mark> = new BibEntry()*entry2o
org.jabref.model.entry.BibEntryTYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java∏ ∏(2z
*org.jabref.model.entry.BibEntry.BibEntry()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java∏ ∏(%‚
4org.jabref.logic.search.SearchQueryTest.simpleTerm()METHODF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java¡ ¡("
isFinalfalse"∞
declarationStringö<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">simpleTerm</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*
simpleTerm2|
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaƒ< ƒ(B2ä
:org.jabref.logic.search.SearchQuery.isGrammarBasedSearch()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java≈ ≈(/2‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaƒ! ƒ(,2ò
Horg.jabref.logic.search.SearchQueryTest.simpleTerm()?query@194.15:194.20CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaƒ- ƒ(22ô
Iorg.jabref.logic.search.SearchQueryTest.simpleTerm()?result@196.20:196.26CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java≈ ≈(2ü
Horg.jabref.logic.search.SearchQueryTest.simpleTerm()?query@194.15:194.20DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java¬ ¬(2†
Iorg.jabref.logic.search.SearchQueryTest.simpleTerm()?result@196.20:196.26DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaƒ ƒ(2[
voidRETURN_TYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java¡ ¡(ó
Horg.jabref.logic.search.SearchQueryTest.simpleTerm()?query@194.15:194.20VARIABLEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java¬ ¬("
typeString"
isFinalfalse"n
declarationStringY<mark class="modifier"> </mark>String <mark class="class-field">query</mark> = "progress"*query2`
java.lang.StringTYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java¬ ¬(‡
Iorg.jabref.logic.search.SearchQueryTest.simpleTerm()?result@196.20:196.26VARIABLEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaƒ ƒ("
typeSearchQuery"
isFinalfalse"§
declarationStringé<mark class="modifier"> </mark>SearchQuery <mark class="class-field">result</mark> = new SearchQuery(query, EnumSet.noneOf(SearchFlags.class))*result2s
#org.jabref.logic.search.SearchQueryTYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaƒ ƒ(2|
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaƒ< ƒ(B2‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaƒ! ƒ(,2ò
Horg.jabref.logic.search.SearchQueryTest.simpleTerm()?query@194.15:194.20CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaƒ- ƒ(2ï
4org.jabref.logic.search.SearchQueryTest.getPattern()METHODF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java… …("
isFinalfalse"∞
declarationStringö<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">getPattern</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*
getPattern2|
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÀ< À(B2Å
1java.util.regex.Pattern.compile(java.lang.String)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÃ" Ã()2h
java.util.Optional.of(T)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaŒ Œ( 2r
"java.util.regex.Pattern.toString()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaŒ) Œ(12õ
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaŒR Œ(U2à
8org.jabref.logic.search.SearchQuery.getPatternForWords()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaŒ= Œ(O2‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÀ! À(,2ò
Horg.jabref.logic.search.SearchQueryTest.getPattern()?query@202.15:202.20CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÀ- À(22ö
Jorg.jabref.logic.search.SearchQueryTest.getPattern()?pattern@204.16:204.23CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaŒ! Œ((2ô
Iorg.jabref.logic.search.SearchQueryTest.getPattern()?result@203.20:203.26CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaŒ6 Œ(<2r
"java.util.regex.Pattern.toString()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaŒV Œ(g2ü
Horg.jabref.logic.search.SearchQueryTest.getPattern()?query@202.15:202.20DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java   (2†
Iorg.jabref.logic.search.SearchQueryTest.getPattern()?result@203.20:203.26DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÀ À(2°
Jorg.jabref.logic.search.SearchQueryTest.getPattern()?pattern@204.16:204.23DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÃ Ã(2[
voidRETURN_TYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java… …(ó
Horg.jabref.logic.search.SearchQueryTest.getPattern()?query@202.15:202.20VARIABLEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java   ("
typeString"
isFinalfalse"n
declarationStringY<mark class="modifier"> </mark>String <mark class="class-field">query</mark> = "progress"*query2`
java.lang.StringTYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java   (‡
Iorg.jabref.logic.search.SearchQueryTest.getPattern()?result@203.20:203.26VARIABLEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÀ À("
typeSearchQuery"
isFinalfalse"§
declarationStringé<mark class="modifier"> </mark>SearchQuery <mark class="class-field">result</mark> = new SearchQuery(query, EnumSet.noneOf(SearchFlags.class))*result2s
#org.jabref.logic.search.SearchQueryTYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÀ À(2|
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÀ< À(B2‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÀ! À(,2ò
Horg.jabref.logic.search.SearchQueryTest.getPattern()?query@202.15:202.20CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÀ- À(2ƒ
Jorg.jabref.logic.search.SearchQueryTest.getPattern()?pattern@204.16:204.23VARIABLEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÃ Ã("
typePattern"
isFinalfalse"ä
declarationStringu<mark class="modifier"> </mark>Pattern <mark class="class-field">pattern</mark> = Pattern.compile("(\\Qprogress\\E)")*pattern2g
java.util.regex.PatternTYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÃ Ã(2Å
1java.util.regex.Pattern.compile(java.lang.String)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÃ" Ã()∆
:org.jabref.logic.search.SearchQueryTest.getRegexpPattern()METHODF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java“ “( "
isFinalfalse"∂
declarationString†<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">getRegexpPattern</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*getRegexpPattern2g
java.util.EnumSet.of(E)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‘D ‘(F2Å
1java.util.regex.Pattern.compile(java.lang.String)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java’" ’()2h
java.util.Optional.of(T)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java÷ ÷( 2r
"java.util.regex.Pattern.toString()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java÷) ÷(12õ
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java÷V ÷(Y2à
8org.jabref.logic.search.SearchQuery.getPatternForWords()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java÷A ÷(S2‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‘% ‘(02¢
Rorg.jabref.logic.search.SearchQueryTest.getRegexpPattern()?queryText@211.15:211.24CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‘1 ‘(:2†
Porg.jabref.logic.search.SearchQueryTest.getRegexpPattern()?pattern@213.16:213.23CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java÷! ÷((2£
Sorg.jabref.logic.search.SearchQueryTest.getRegexpPattern()?regexQuery@212.20:212.30CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java÷6 ÷(@2r
"java.util.regex.Pattern.toString()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java÷Z ÷(k2©
Rorg.jabref.logic.search.SearchQueryTest.getRegexpPattern()?queryText@211.15:211.24DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java” ”(2™
Sorg.jabref.logic.search.SearchQueryTest.getRegexpPattern()?regexQuery@212.20:212.30DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‘ ‘(2ß
Porg.jabref.logic.search.SearchQueryTest.getRegexpPattern()?pattern@213.16:213.23DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java’ ’(2[
voidRETURN_TYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java“ “(Ø
Rorg.jabref.logic.search.SearchQueryTest.getRegexpPattern()?queryText@211.15:211.24VARIABLEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java” ”("
typeString"
isFinalfalse"x
declarationStringc<mark class="modifier"> </mark>String <mark class="class-field">queryText</mark> = "[a-c]\\d* \\d*"*	queryText2`
java.lang.StringTYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java” ”(Ä
Sorg.jabref.logic.search.SearchQueryTest.getRegexpPattern()?regexQuery@212.20:212.30VARIABLEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‘ ‘("
typeSearchQuery"
isFinalfalse"¡
declarationString´<mark class="modifier"> </mark>SearchQuery <mark class="class-field">regexQuery</mark> = new SearchQuery(queryText, EnumSet.of(SearchRules.SearchFlags.REGULAR_EXPRESSION))*
regexQuery2s
#org.jabref.logic.search.SearchQueryTYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‘ ‘(2g
java.util.EnumSet.of(E)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‘D ‘(F2‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‘% ‘(02¢
Rorg.jabref.logic.search.SearchQueryTest.getRegexpPattern()?queryText@211.15:211.24CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‘1 ‘(: 
Porg.jabref.logic.search.SearchQueryTest.getRegexpPattern()?pattern@213.16:213.23VARIABLEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java’ ’("
typePattern"
isFinalfalse"ä
declarationStringu<mark class="modifier"> </mark>Pattern <mark class="class-field">pattern</mark> = Pattern.compile("([a-c]\\d* \\d*)")*pattern2g
java.util.regex.PatternTYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java’ ’(2Å
1java.util.regex.Pattern.compile(java.lang.String)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java’" ’()™
Dorg.jabref.logic.search.SearchQueryTest.getRegexpJavascriptPattern()METHODF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java⁄ ⁄(*"
isFinalfalse"¿
declarationString™<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">getRegexpJavascriptPattern</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*getRegexpJavascriptPattern2g
java.util.EnumSet.of(E)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‹D ‹(F2Å
1java.util.regex.Pattern.compile(java.lang.String)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java›" ›()2h
java.util.Optional.of(T)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaﬁ ﬁ( 2r
"java.util.regex.Pattern.toString()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaﬁ) ﬁ(12õ
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaﬁ` ﬁ(c2í
Borg.jabref.logic.search.SearchQuery.getJavaScriptPatternForWords()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaﬁA ﬁ(]2‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‹% ‹(02¨
\org.jabref.logic.search.SearchQueryTest.getRegexpJavascriptPattern()?queryText@219.15:219.24CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‹1 ‹(:2™
Zorg.jabref.logic.search.SearchQueryTest.getRegexpJavascriptPattern()?pattern@221.16:221.23CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaﬁ! ﬁ((2≠
]org.jabref.logic.search.SearchQueryTest.getRegexpJavascriptPattern()?regexQuery@220.20:220.30CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaﬁ6 ﬁ(@2r
"java.util.regex.Pattern.toString()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaﬁd ﬁ(u2≥
\org.jabref.logic.search.SearchQueryTest.getRegexpJavascriptPattern()?queryText@219.15:219.24DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java€ €(2¥
]org.jabref.logic.search.SearchQueryTest.getRegexpJavascriptPattern()?regexQuery@220.20:220.30DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‹ ‹(2±
Zorg.jabref.logic.search.SearchQueryTest.getRegexpJavascriptPattern()?pattern@221.16:221.23DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java› ›(2[
voidRETURN_TYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java⁄ ⁄(π
\org.jabref.logic.search.SearchQueryTest.getRegexpJavascriptPattern()?queryText@219.15:219.24VARIABLEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java€ €("
typeString"
isFinalfalse"x
declarationStringc<mark class="modifier"> </mark>String <mark class="class-field">queryText</mark> = "[a-c]\\d* \\d*"*	queryText2`
java.lang.StringTYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java€ €(î
]org.jabref.logic.search.SearchQueryTest.getRegexpJavascriptPattern()?regexQuery@220.20:220.30VARIABLEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‹ ‹("
typeSearchQuery"
isFinalfalse"¡
declarationString´<mark class="modifier"> </mark>SearchQuery <mark class="class-field">regexQuery</mark> = new SearchQuery(queryText, EnumSet.of(SearchRules.SearchFlags.REGULAR_EXPRESSION))*
regexQuery2s
#org.jabref.logic.search.SearchQueryTYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‹ ‹(2g
java.util.EnumSet.of(E)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‹D ‹(F2‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‹% ‹(02¨
\org.jabref.logic.search.SearchQueryTest.getRegexpJavascriptPattern()?queryText@219.15:219.24CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‹1 ‹(:‘
Zorg.jabref.logic.search.SearchQueryTest.getRegexpJavascriptPattern()?pattern@221.16:221.23VARIABLEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java› ›("
typePattern"
isFinalfalse"ä
declarationStringu<mark class="modifier"> </mark>Pattern <mark class="class-field">pattern</mark> = Pattern.compile("([a-c]\\d* \\d*)")*pattern2g
java.util.regex.PatternTYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java› ›(2Å
1java.util.regex.Pattern.compile(java.lang.String)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java›" ›()ä
;org.jabref.logic.search.SearchQueryTest.escapingInPattern()METHODF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‚ ‚(!"
isFinalfalse"∑
declarationString°<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">escapingInPattern</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*escapingInPattern2|
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÂS Â(Y2h
java.util.Optional.of(T)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÁ Á( 2õ
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÁZ Á(]2à
8org.jabref.logic.search.SearchQuery.getPatternForWords()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÁE Á(W2‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÂ4 Â(?2£
Sorg.jabref.logic.search.SearchQueryTest.escapingInPattern()?queryText@228.15:228.24CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÂ@ Â(I2°
Qorg.jabref.logic.search.SearchQueryTest.escapingInPattern()?pattern@230.15:230.22CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÁ! Á((2≥
corg.jabref.logic.search.SearchQueryTest.escapingInPattern()?textQueryWithSpecialChars@229.20:229.45CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÁ+ Á(D2r
"java.util.regex.Pattern.toString()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÁ^ Á(o2™
Sorg.jabref.logic.search.SearchQueryTest.escapingInPattern()?queryText@228.15:228.24DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‰ ‰(2∫
corg.jabref.logic.search.SearchQueryTest.escapingInPattern()?textQueryWithSpecialChars@229.20:229.45DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÂ Â(-2®
Qorg.jabref.logic.search.SearchQueryTest.escapingInPattern()?pattern@230.15:230.22DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÊ Ê(2[
voidRETURN_TYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‚ ‚(∆
Sorg.jabref.logic.search.SearchQueryTest.escapingInPattern()?queryText@228.15:228.24VARIABLEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‰ ‰("
typeString"
isFinalfalse"ç
declarationStringx<mark class="modifier"> </mark>String <mark class="class-field">queryText</mark> = "<([{\\\\^-=$!|]})?*+.> word1 word2."*	queryText2`
java.lang.StringTYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java‰ ‰(Ø
corg.jabref.logic.search.SearchQueryTest.escapingInPattern()?textQueryWithSpecialChars@229.20:229.45VARIABLEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÂ Â(-"
typeSearchQuery"
isFinalfalse"ª
declarationString•<mark class="modifier"> </mark>SearchQuery <mark class="class-field">textQueryWithSpecialChars</mark> = new SearchQuery(queryText, EnumSet.noneOf(SearchFlags.class))*textQueryWithSpecialChars2s
#org.jabref.logic.search.SearchQueryTYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÂ Â(2|
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÂS Â(Y2‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÂ4 Â(?2£
Sorg.jabref.logic.search.SearchQueryTest.escapingInPattern()?queryText@228.15:228.24CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÂ@ Â(I◊
Qorg.jabref.logic.search.SearchQueryTest.escapingInPattern()?pattern@230.15:230.22VARIABLEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÊ Ê("
typeString"
isFinalfalse"¢
declarationStringå<mark class="modifier"> </mark>String <mark class="class-field">pattern</mark> = "(\\Q<([{\\^-=$!|]})?*+.>\\E)|(\\Qword1\\E)|(\\Qword2.\\E)"*pattern2`
java.lang.StringTYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÊ Ê(Ó
Eorg.jabref.logic.search.SearchQueryTest.escapingInJavascriptPattern()METHODF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÎ Î(+"
isFinalfalse"¡
declarationString´<mark class="annotation">@Test</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">escapingInJavascriptPattern</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*escapingInJavascriptPattern2|
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÓS Ó(Y2h
java.util.Optional.of(T)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java ( 2õ
Kjava.util.Optional.map(java.util.function.Function<? super T, ? extends U>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javad (g2í
Borg.jabref.logic.search.SearchQuery.getJavaScriptPatternForWords()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaE (a2‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÓ4 Ó(?2≠
]org.jabref.logic.search.SearchQueryTest.escapingInJavascriptPattern()?queryText@237.15:237.24CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÓ@ Ó(I2´
[org.jabref.logic.search.SearchQueryTest.escapingInJavascriptPattern()?pattern@239.15:239.22CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java! ((2Ω
morg.jabref.logic.search.SearchQueryTest.escapingInJavascriptPattern()?textQueryWithSpecialChars@238.20:238.45CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.java+ (D2r
"java.util.regex.Pattern.toString()CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javah (y2¥
]org.jabref.logic.search.SearchQueryTest.escapingInJavascriptPattern()?queryText@237.15:237.24DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÌ Ì(2ƒ
morg.jabref.logic.search.SearchQueryTest.escapingInJavascriptPattern()?textQueryWithSpecialChars@238.20:238.45DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÓ Ó(-2≤
[org.jabref.logic.search.SearchQueryTest.escapingInJavascriptPattern()?pattern@239.15:239.22DECLARATIONF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÔ Ô(2[
voidRETURN_TYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÎ Î(Ã
]org.jabref.logic.search.SearchQueryTest.escapingInJavascriptPattern()?queryText@237.15:237.24VARIABLEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÌ Ì("
typeString"
isFinalfalse"â
declarationStringt<mark class="modifier"> </mark>String <mark class="class-field">queryText</mark> = "([{\\\\^$|]})?*+./ word1 word2."*	queryText2`
java.lang.StringTYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÌ Ì(√
morg.jabref.logic.search.SearchQueryTest.escapingInJavascriptPattern()?textQueryWithSpecialChars@238.20:238.45VARIABLEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÓ Ó(-"
typeSearchQuery"
isFinalfalse"ª
declarationString•<mark class="modifier"> </mark>SearchQuery <mark class="class-field">textQueryWithSpecialChars</mark> = new SearchQuery(queryText, EnumSet.noneOf(SearchFlags.class))*textQueryWithSpecialChars2s
#org.jabref.logic.search.SearchQueryTYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÓ Ó(2|
,java.util.EnumSet.noneOf(java.lang.Class<E>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÓS Ó(Y2‹
ãorg.jabref.logic.search.SearchQuery.SearchQuery(java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÓ4 Ó(?2≠
]org.jabref.logic.search.SearchQueryTest.escapingInJavascriptPattern()?queryText@237.15:237.24CALLF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÓ@ Ó(IÎ
[org.jabref.logic.search.SearchQueryTest.escapingInJavascriptPattern()?pattern@239.15:239.22VARIABLEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÔ Ô("
typeString"
isFinalfalse"¨
declarationStringñ<mark class="modifier"> </mark>String <mark class="class-field">pattern</mark> = "(\\(\\[\\{\\\\\\^\\$\\|\\]\\}\\)\\?\\*\\+\\.\\/)|(word1)|(word2\\.)"*pattern2`
java.lang.StringTYPEF
:src\test\java\org\jabref\logic\search\SearchQueryTest.javaÔ Ô(