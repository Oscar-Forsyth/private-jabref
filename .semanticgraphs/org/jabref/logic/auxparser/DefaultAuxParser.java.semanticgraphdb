
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaø
+org.jabref.logic.auxparser.DefaultAuxParserCLASSH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java ("%
packageorg.jabref.logic.auxparser"
isFinalfalse"
inner classfalse"

isAbstractfalse"•
declarationStringè<mark class="modifier">public </mark><mark class="modifier">class </mark>DefaultAuxParser<mark class="modifier"><br>implements </mark>AuxParser"
accesspublic*DefaultAuxParser2º
corg.jabref.logic.auxparser.DefaultAuxParser.DefaultAuxParser(org.jabref.model.database.BibDatabase)DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java, ,(2û
Eorg.jabref.logic.auxparser.DefaultAuxParser.parse(java.nio.file.Path)DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java1 1( 2•
Lorg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java5 5((2ä
∞org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaU U(2–
worg.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaj j(2º
corg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java| |(2˚
üorg.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)DECLARATIONJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaô ô('2Ú
ñorg.jabref.logic.auxparser.DefaultAuxParser.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)DECLARATIONJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java¥ ¥(2ó
>org.jabref.logic.auxparser.DefaultAuxParser?LOGGER@32.32:32.38DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java    (&2ù
Dorg.jabref.logic.auxparser.DefaultAuxParser?CITE_PATTERN@34.33:34.45DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java"! "(-2û
Eorg.jabref.logic.auxparser.DefaultAuxParser?INPUT_PATTERN@35.33:35.46DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java#! #(.2ü
Forg.jabref.logic.auxparser.DefaultAuxParser?masterDatabase@37.30:37.44DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java% %(,2x
$org.jabref.logic.auxparser.AuxParserEXTENDH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java) (2ı
corg.jabref.logic.auxparser.DefaultAuxParser.DefaultAuxParser(org.jabref.model.database.BibDatabase)CONSTRUCTORH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java, ,("|
declarationStringg<mark class="modifier">public </mark><mark class="method">DefaultAuxParser</mark>(BibDatabase database)*DefaultAuxParser2ò
Forg.jabref.logic.auxparser.DefaultAuxParser?masterDatabase@37.30:37.44CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java- -(2æ
lorg.jabref.logic.auxparser.DefaultAuxParser.DefaultAuxParser(org.jabref.model.database.BibDatabase)!databaseCALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java- -(!2√
lorg.jabref.logic.auxparser.DefaultAuxParser.DefaultAuxParser(org.jabref.model.database.BibDatabase)!database	PARAMETERH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java,( ,(02Ñ
+org.jabref.logic.auxparser.DefaultAuxParserRETURN_TYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java, ,(ò
lorg.jabref.logic.auxparser.DefaultAuxParser.DefaultAuxParser(org.jabref.model.database.BibDatabase)!database	PARAMETERH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java,( ,(0"
typeBibDatabase"
isFinalfalse")
declarationStringBibDatabase database*database2w
%org.jabref.model.database.BibDatabaseTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java, ,('∑	
Eorg.jabref.logic.auxparser.DefaultAuxParser.parse(java.nio.file.Path)METHODH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java1 1( "
isFinalfalse"®
declarationStringí<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark>AuxParserResult <mark class="method">parse</mark>(Path auxFile)"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeAuxParserResult*parse2û
Lorg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java2 2(2ü
Morg.jabref.logic.auxparser.DefaultAuxParser.parse(java.nio.file.Path)!auxFileCALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java2 2(#2î
>org.jabref.logic.auxparser.AuxParser.parse(java.nio.file.Path)OVERRIDEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java1 1( 2§
Morg.jabref.logic.auxparser.DefaultAuxParser.parse(java.nio.file.Path)!auxFile	PARAMETERH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java1& 1(-2É
*org.jabref.logic.auxparser.AuxParserResultRETURN_TYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java1 1(÷
Morg.jabref.logic.auxparser.DefaultAuxParser.parse(java.nio.file.Path)!auxFile	PARAMETERH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java1& 1(-"
typePath"
isFinalfalse"!
declarationStringPath auxFile*auxFile2d
java.nio.file.PathTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java1! 1(%√<
Lorg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)METHODH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java5 5(("
isFinalfalse"Å
declarationStringl<mark class="modifier">private </mark>AuxParserResult <mark class="method">parseAuxFile</mark>(Path auxFile)"
isStaticfalse"
accessprivate"

isAbstractfalse"
typeAuxParserResult*parseAuxFile2g
java.util.List.add(E)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java: :(2g
java.util.List.size()CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java>$ >((2i
java.util.List.get(int)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java?! ?($2ã
9java.nio.file.Files.newBufferedReader(java.nio.file.Path)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaA+ A(<2s
!java.io.BufferedReader.readLine()CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaD" D(*2…
worg.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaE E(!2É
∞org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaF F("2µ
corg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaP P(2≥
aorg.jabref.logic.auxparser.AuxParserResult.AuxParserResult(org.jabref.model.database.BibDatabase)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java6% 6(42t
"java.util.ArrayList.ArrayList(int)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java9" 9(-2ò
Forg.jabref.logic.auxparser.DefaultAuxParser?masterDatabase@37.30:37.44CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java65 6(C2≥
aorg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?fileList@57.19:57.27CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java: :(2¶
Torg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)!auxFileCALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java: :(2¥
borg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?fileIndex@60.12:60.21CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java> >(2≥
aorg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?fileList@57.19:57.27CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java> >(#2≥
aorg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?fileList@57.19:57.27CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java? ?( 2¥
borg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?fileIndex@60.12:60.21CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java?% ?(.2Ø
]org.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?file@63.17:63.21CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaA= A(A2Ø
]org.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?line@66.23:66.27CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaD D(2≠
[org.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?br@65.32:65.34CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaD D(!2±
_org.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?result@54.24:54.30CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaE" E((2Ø
]org.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?line@66.23:66.27CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaE* E(.2¶
Torg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)!auxFileCALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaF# F(*2±
_org.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?result@54.24:54.30CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaF, F(22≥
aorg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?fileList@57.19:57.27CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaF4 F(<2Ø
]org.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?line@66.23:66.27CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaF> F(B2ê
>org.jabref.logic.auxparser.DefaultAuxParser?LOGGER@32.32:32.38CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaI I(2¨
Zorg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?e@72.43:72.44CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaI8 I(92ê
>org.jabref.logic.auxparser.DefaultAuxParser?LOGGER@32.32:32.38CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaK K(2¨
Zorg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?e@74.33:74.34CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaK4 K(52¥
borg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?fileIndex@60.12:60.21CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaN N(2±
_org.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?result@54.24:54.30CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaP P(2±
_org.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?result@54.24:54.30CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaR R(2´
Torg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)!auxFile	PARAMETERH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java5. 5(52∏
_org.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?result@54.24:54.30DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java6 6(2∫
aorg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?fileList@57.19:57.27DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java9 9(2ª
borg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?fileIndex@60.12:60.21DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java< <(2∂
]org.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?file@63.17:63.21DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java? ?(2¥
[org.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?br@65.32:65.34DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaA  A("2∂
]org.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?line@66.23:66.27DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaB B(2≥
Zorg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?e@72.43:72.44DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaH+ H(,2≥
Zorg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?e@74.33:74.34DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaJ! J("2É
*org.jabref.logic.auxparser.AuxParserResultRETURN_TYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java5 5(À
_org.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?result@54.24:54.30VARIABLEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java6 6("
typeAuxParserResult"
isFinalfalse"ë
declarationString|<mark class="modifier"> </mark>AuxParserResult <mark class="class-field">result</mark> = new AuxParserResult(masterDatabase)*result2|
*org.jabref.logic.auxparser.AuxParserResultTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java6 6(2≥
aorg.jabref.logic.auxparser.AuxParserResult.AuxParserResult(org.jabref.model.database.BibDatabase)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java6% 6(42ò
Forg.jabref.logic.auxparser.DefaultAuxParser?masterDatabase@37.30:37.44CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java65 6(C≠
aorg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?fileList@57.19:57.27VARIABLEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java9 9("
type
List<Path>"
isFinalfalse"}
declarationStringh<mark class="modifier"> </mark>List<Path> <mark class="class-field">fileList</mark> = new ArrayList<>(1)*fileList2`
java.util.ListTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java9 9(2m
java.nio.file.PathTYPE_ARGUMENTH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java9 9(2t
"java.util.ArrayList.ArrayList(int)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java9" 9(-¿
borg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?fileIndex@60.12:60.21VARIABLEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java< <("
typeint"
isFinalfalse"Ñ
declarationStringo<mark class="modifier"> </mark><mark class="modifier">int</mark> <mark class="class-field">fileIndex</mark> = 0*	fileIndex2U
intTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java< <(ë
]org.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?file@63.17:63.21VARIABLEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java? ?("
typePath"
isFinalfalse"x
declarationStringc<mark class="modifier"> </mark>Path <mark class="class-field">file</mark> = fileList.get(fileIndex)*file2d
java.nio.file.PathTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java? ?(2i
java.util.List.get(int)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java?! ?($2≥
aorg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?fileList@57.19:57.27CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java? ?( 2¥
borg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?fileIndex@60.12:60.21CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java?% ?(.í
[org.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?br@65.32:65.34VARIABLEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaA  A(""
typeBufferedReader"
isFinalfalse"Ü
declarationStringq<mark class="modifier"> </mark>BufferedReader <mark class="class-field">br</mark> = Files.newBufferedReader(file)*br2h
java.io.BufferedReaderTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaA A(2ã
9java.nio.file.Files.newBufferedReader(java.nio.file.Path)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaA+ A(<2Ø
]org.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?file@63.17:63.21CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaA= A(A°
]org.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?line@66.23:66.27VARIABLEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaB B("
typeString"
isFinalfalse"`
declarationStringK<mark class="modifier"> </mark>String <mark class="class-field">line</mark>*line2b
java.lang.StringTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaB B(›
Torg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)!auxFile	PARAMETERH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java5. 5(5"
typePath"
isFinalfalse"!
declarationStringPath auxFile*auxFile2d
java.nio.file.PathTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java5) 5(-É
Zorg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?e@72.43:72.44VARIABLEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaH+ H(,"
typeFileNotFoundException"
isFinalfalse",
declarationStringFileNotFoundException e*e2o
java.io.FileNotFoundExceptionTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaH H(*Â
Zorg.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(java.nio.file.Path)?e@74.33:74.34VARIABLEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaJ! J(""
typeIOException"
isFinalfalse""
declarationStringIOException e*e2e
java.io.IOExceptionTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaJ J( ∂C
∞org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)METHODH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaU U("
isFinalfalse"è
declarationString˘<mark class="modifier">private </mark><mark class="modifier">void</mark> <mark class="method">matchNestedAux</mark>(Path baseAuxFile<mark class="modifier"><mark class="modifier">,</mark></mark> AuxParserResult result<mark class="modifier"><mark class="modifier">,</mark></mark> List&lt;Path&gt; fileList<mark class="modifier"><mark class="modifier">,</mark></mark> String line)"
isStaticfalse"
accessprivate"

isAbstractfalse"
typevoid*matchNestedAux2â
7java.util.regex.Pattern.matcher(java.lang.CharSequence)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaV+ V(22p
java.util.regex.Matcher.find()CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaX X(2t
"java.util.regex.Matcher.group(int)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaY, Y(12p
java.nio.file.Path.getParent()CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java\( \(12~
,java.nio.file.Path.resolve(java.lang.String)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java^% ^(,2é
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java`! `(#2{
)java.util.List.contains(java.lang.Object)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javac c("2g
java.util.List.add(E)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javad d(2ú
Jorg.jabref.logic.auxparser.AuxParserResult.increaseNestedAuxFilesCounter()CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javae e(42ó
Eorg.jabref.logic.auxparser.DefaultAuxParser?INPUT_PATTERN@35.33:35.46CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaV V(*2à
µorg.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)!lineCALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaV3 V(72ö
«org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)?inputMatch@86.16:86.26CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaX X(2ö
«org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)?inputMatch@86.16:86.26CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaY! Y(+2è
ºorg.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)!baseAuxFileCALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java\ \('2ò
≈org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)?rootPath@92.17:92.25CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java] ](2ô
∆org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)?inputFile@91.17:91.26CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java^ ^(2ò
≈org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)?rootPath@92.17:92.25CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java^ ^($2õ
»org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)?inputString@89.19:89.30CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java^- ^(82ô
∆org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)?inputFile@91.17:91.26CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java` `(2õ
»org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)?inputString@89.19:89.30CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java`$ `(/2å
πorg.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)!fileListCALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javac c(2ô
∆org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)?inputFile@91.17:91.26CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javac# c(,2å
πorg.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)!fileListCALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javad d(2ô
∆org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)?inputFile@91.17:91.26CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javad d(&2ä
∑org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)!resultCALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javae e(2î
ºorg.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)!baseAuxFile	PARAMETERH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaU% U(02è
∑org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)!result	PARAMETERH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaUB U(H2ë
πorg.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)!fileList	PARAMETERH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaUU U(]2ç
µorg.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)!line	PARAMETERH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaUf U(j2°
«org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)?inputMatch@86.16:86.26DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaV V(2¢
»org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)?inputString@89.19:89.30DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaY Y(2†
∆org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)?inputFile@91.17:91.26DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java[ [(2ü
≈org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)?rootPath@92.17:92.25DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java\ \(2]
voidRETURN_TYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaU U(Ò
«org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)?inputMatch@86.16:86.26VARIABLEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaV V("
typeMatcher"
isFinalfalse"Ö
declarationStringp<mark class="modifier"> </mark>Matcher <mark class="class-field">inputMatch</mark> = INPUT_PATTERN.matcher(line)*
inputMatch2i
java.util.regex.MatcherTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaV V(2â
7java.util.regex.Pattern.matcher(java.lang.CharSequence)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaV+ V(22ó
Eorg.jabref.logic.auxparser.DefaultAuxParser?INPUT_PATTERN@35.33:35.46CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaV V(*2à
µorg.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)!lineCALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaV3 V(7ƒ
»org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)?inputString@89.19:89.30VARIABLEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaY Y("
typeString"
isFinalfalse"}
declarationStringh<mark class="modifier"> </mark>String <mark class="class-field">inputString</mark> = inputMatch.group(1)*inputString2b
java.lang.StringTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaY Y(2t
"java.util.regex.Matcher.group(int)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaY, Y(12ö
«org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)?inputMatch@86.16:86.26CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaY! Y(+ì
∆org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)?inputFile@91.17:91.26VARIABLEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java[ [("
typePath"
isFinalfalse"c
declarationStringN<mark class="modifier"> </mark>Path <mark class="class-field">inputFile</mark>*	inputFile2d
java.nio.file.PathTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java[ [(Æ
≈org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)?rootPath@92.17:92.25VARIABLEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java\ \("
typePath"
isFinalfalse"|
declarationStringg<mark class="modifier"> </mark>Path <mark class="class-field">rootPath</mark> = baseAuxFile.getParent()*rootPath2d
java.nio.file.PathTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java\ \(2p
java.nio.file.Path.getParent()CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java\( \(12è
ºorg.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)!baseAuxFileCALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java\ \('Œ
ºorg.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)!baseAuxFile	PARAMETERH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaU% U(0"
typePath"
isFinalfalse"%
declarationStringPath baseAuxFile*baseAuxFile2d
java.nio.file.PathTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaU  U($Ì
∑org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)!result	PARAMETERH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaUB U(H"
typeAuxParserResult"
isFinalfalse"+
declarationStringAuxParserResult result*result2|
*org.jabref.logic.auxparser.AuxParserResultTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaU2 U(Aº
πorg.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)!fileList	PARAMETERH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaUU U(]"
type
List<Path>"
isFinalfalse"(
declarationStringList<Path> fileList*fileList2`
java.util.ListTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaUJ U(N2m
java.nio.file.PathTYPE_ARGUMENTH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaUO U(Sª
µorg.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(java.nio.file.Path, org.jabref.logic.auxparser.AuxParserResult, java.util.List<java.nio.file.Path>, java.lang.String)!line	PARAMETERH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaUf U(j"
typeString"
isFinalfalse" 
declarationStringString line*line2b
java.lang.StringTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaU_ U(eﬁ#
worg.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)METHODH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaj j("
isFinalfalse"È
declarationString”<mark class="modifier">private </mark><mark class="modifier">void</mark> <mark class="method">matchCitation</mark>(AuxParserResult result<mark class="modifier"><mark class="modifier">,</mark></mark> String line)"
isStaticfalse"
accessprivate"

isAbstractfalse"
typevoid*matchCitation2â
7java.util.regex.Pattern.matcher(java.lang.CharSequence)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javak) k(02p
java.util.regex.Matcher.find()CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javam m(2Å
/java.util.regex.Matcher.group(java.lang.String)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javan) n(.2z
(java.lang.String.split(java.lang.String)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javao& o(+2f
java.util.Set.add(E)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javar' r(*2å
:org.jabref.logic.auxparser.AuxParserResult.getUniqueKeys()CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javar r($2i
java.lang.String.trim()CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javar/ r(32ñ
Dorg.jabref.logic.auxparser.DefaultAuxParser?CITE_PATTERN@34.33:34.45CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javak k((2Œ
|org.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)!lineCALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javak1 k(52‚
èorg.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)?citeMatch@107.16:107.25CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javam m(2‚
èorg.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)?citeMatch@107.16:107.25CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javan n((2‚
èorg.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)?keyString@110.19:110.28CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javao o(%2›
äorg.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)?keys@111.21:111.25CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaq q("2–
~org.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)!resultCALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javar r(2‹
âorg.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)?key@113.24:113.27CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javar+ r(.2’
~org.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)!result	PARAMETERH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaj/ j(52”
|org.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)!line	PARAMETERH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaj> j(B2È
èorg.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)?citeMatch@107.16:107.25DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javak k(2È
èorg.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)?keyString@110.19:110.28DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javan n(2‰
äorg.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)?keys@111.21:111.25DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javao o(2„
âorg.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)?key@113.24:113.27DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaq q(2]
voidRETURN_TYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaj j(˚
èorg.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)?citeMatch@107.16:107.25VARIABLEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javak k("
typeMatcher"
isFinalfalse"É
declarationStringn<mark class="modifier"> </mark>Matcher <mark class="class-field">citeMatch</mark> = CITE_PATTERN.matcher(line)*	citeMatch2i
java.util.regex.MatcherTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javak k(2â
7java.util.regex.Pattern.matcher(java.lang.CharSequence)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javak) k(02ñ
Dorg.jabref.logic.auxparser.DefaultAuxParser?CITE_PATTERN@34.33:34.45CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javak k((2Œ
|org.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)!lineCALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javak1 k(5È
èorg.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)?keyString@110.19:110.28VARIABLEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javan n("
typeString"
isFinalfalse"Ü
declarationStringq<mark class="modifier"> </mark>String <mark class="class-field">keyString</mark> = citeMatch.group("citationkey")*	keyString2b
java.lang.StringTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javan n(2Å
/java.util.regex.Matcher.group(java.lang.String)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javan) n(.2‚
èorg.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)?citeMatch@107.16:107.25CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javan n((Î
äorg.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)?keys@111.21:111.25VARIABLEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javao o("
typeString"
isFinalfalse"ò
declarationStringÇ<mark class="modifier"> </mark>String[] <mark class="class-field">keys</mark> = keyString.split("<mark class="modifier">,</mark>")*keys2d
java.lang.String[]TYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javao o(2z
(java.lang.String.split(java.lang.String)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javao& o(+2‚
èorg.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)?keyString@110.19:110.28CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javao o(%Ã
âorg.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)?key@113.24:113.27VARIABLEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaq q("
typeString"
isFinalfalse"_
declarationStringJ<mark class="modifier"> </mark>String <mark class="class-field">key</mark>*key2b
java.lang.StringTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaq q(≥
~org.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)!result	PARAMETERH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaj/ j(5"
typeAuxParserResult"
isFinalfalse"+
declarationStringAuxParserResult result*result2|
*org.jabref.logic.auxparser.AuxParserResultTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaj j(.Å
|org.jabref.logic.auxparser.DefaultAuxParser.matchCitation(org.jabref.logic.auxparser.AuxParserResult, java.lang.String)!line	PARAMETERH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaj> j(B"
typeString"
isFinalfalse" 
declarationStringString line*line2b
java.lang.StringTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaj7 j(=Æ?
corg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)METHODH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java| |("
isFinalfalse"û
declarationStringà<mark class="modifier">private </mark><mark class="modifier">void</mark> <mark class="method">resolveTags</mark>(AuxParserResult result)"
isStaticfalse"
accessprivate"

isAbstractfalse"
typevoid*resolveTags2å
:org.jabref.logic.auxparser.AuxParserResult.getUniqueKeys()CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java! (.2r
java.util.Optional.isPresent()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÄM Ä(V2°
Morg.jabref.model.database.BibDatabase.getEntryByCitationKey(java.lang.String)CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÄ2 Ä(G2ò
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÄ Ä(/2°
Morg.jabref.model.database.BibDatabase.getEntryByCitationKey(java.lang.String)CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÅ: Å(O2r
java.util.Optional.isPresent()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÇ Ç(#2i
java.util.List.add(E)CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÉ$ É('2l
java.util.Optional.get()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÉ. É(12i
java.util.List.add(E)CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÖ/ Ö(22í
>org.jabref.logic.auxparser.AuxParserResult.getUnresolvedKeys()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÖ Ö(,2Î
ñorg.jabref.logic.auxparser.DefaultAuxParser.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaâ â(2Ù
üorg.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaä ä(2Ü
2org.jabref.model.database.BibDatabase.hasEntries()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaç- ç(72ò
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaç ç(*2≠
Yorg.jabref.model.database.BibDatabase.copyPreamble(org.jabref.model.database.BibDatabase)CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaé- é(92ò
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaé é(*2Ü
2org.jabref.model.database.BibDatabase.getEntries()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaè` è(j2ò
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaèF è(]2q
java.util.ArrayList.ArrayList()CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java}- }(82º
jorg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)!resultCALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java ( 2æ
jorg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)!resultCALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÄ Ä(2…
uorg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)?key@127.20:127.23CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÄH Ä(K2ö
Forg.jabref.logic.auxparser.DefaultAuxParser?masterDatabase@37.30:37.44CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÅ+ Å(92…
uorg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)?key@127.20:127.23CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÅP Å(S2À
worg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)?entry@129.35:129.40CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÇ Ç(2÷
Åorg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)?entriesToInsert@125.23:125.38CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÉ É(#2À
worg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)?entry@129.35:129.40CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÉ( É(-2æ
jorg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)!resultCALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÖ Ö(2…
uorg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)?key@127.20:127.23CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÖ3 Ö(62÷
Åorg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)?entriesToInsert@125.23:125.38CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaâ â(%2æ
jorg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)!resultCALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaâ' â(-2÷
Åorg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)?entriesToInsert@125.23:125.38CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaä ä(.2æ
jorg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)!resultCALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaä0 ä(62æ
jorg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)!resultCALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaç ç(2æ
jorg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)!resultCALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaé é(2ö
Forg.jabref.logic.auxparser.DefaultAuxParser?masterDatabase@37.30:37.44CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaé: é(H2æ
jorg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)!resultCALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaè è(2ö
Forg.jabref.logic.auxparser.DefaultAuxParser?masterDatabase@37.30:37.44CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaè! è(/2æ
jorg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)!resultCALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaè? è(E2¡
jorg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)!result	PARAMETERH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java|- |(32€
Åorg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)?entriesToInsert@125.23:125.38DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java} }(&2Œ
uorg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)?key@127.20:127.23DECLARATIONH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java (2“
worg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)?entry@129.35:129.40DECLARATIONJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÅ# Å((2]
voidRETURN_TYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java| |(Ó
Åorg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)?entriesToInsert@125.23:125.38VARIABLEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java} }(&"
typeList<BibEntry>"
isFinalfalse"á
declarationStringr<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">entriesToInsert</mark> = new ArrayList<>()*entriesToInsert2`
java.util.ListTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java} }(2z
org.jabref.model.entry.BibEntryTYPE_ARGUMENTH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java} }(2q
java.util.ArrayList.ArrayList()CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java}- }(8∑
uorg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)?key@127.20:127.23VARIABLEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java ("
typeString"
isFinalfalse"_
declarationStringJ<mark class="modifier"> </mark>String <mark class="class-field">key</mark>*key2b
java.lang.StringTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java (î	
worg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)?entry@129.35:129.40VARIABLEJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÅ# Å(("
typeOptional<BibEntry>"
isFinalfalse"ö
declarationStringÑ<mark class="modifier"> </mark>Optional<BibEntry> <mark class="class-field">entry</mark> = masterDatabase.getEntryByCitationKey(key)*entry2f
java.util.OptionalTYPEJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÅ Å(2|
org.jabref.model.entry.BibEntryTYPE_ARGUMENTJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÅ Å(!2°
Morg.jabref.model.database.BibDatabase.getEntryByCitationKey(java.lang.String)CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÅ: Å(O2ö
Forg.jabref.logic.auxparser.DefaultAuxParser?masterDatabase@37.30:37.44CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÅ+ Å(92…
uorg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)?key@127.20:127.23CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaÅP Å(Sü
jorg.jabref.logic.auxparser.DefaultAuxParser.resolveTags(org.jabref.logic.auxparser.AuxParserResult)!result	PARAMETERH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java|- |(3"
typeAuxParserResult"
isFinalfalse"+
declarationStringAuxParserResult result*result2|
*org.jabref.logic.auxparser.AuxParserResultTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java| |(,µD
üorg.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)METHODJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaô ô('"
isFinalfalse"É
declarationStringÌ<mark class="modifier">private </mark><mark class="modifier">void</mark> <mark class="method">resolveCrossReferences</mark>(List&lt;BibEntry&gt; entries<mark class="modifier"><mark class="modifier">,</mark></mark> AuxParserResult result)"
isStaticfalse"
accessprivate"

isAbstractfalse"
typevoid*resolveCrossReferences2ò
Djava.util.Optional.ifPresent(java.util.function.Consumer<? super T>)CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaú3 ú(<2†
Lorg.jabref.model.entry.BibEntry.getField(org.jabref.model.entry.field.Field)CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaú ú(2r
java.util.Optional.isPresent()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaùV ù(_2°
Morg.jabref.model.database.BibDatabase.getEntryByCitationKey(java.lang.String)CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaù6 ù(K2ò
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaù ù(32°
Morg.jabref.model.database.BibDatabase.getEntryByCitationKey(java.lang.String)CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaûA û(V2r
java.util.Optional.isPresent()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java†! †(*2}
)java.util.List.contains(java.lang.Object)CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java°- °(52l
java.util.Optional.get()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java°? °(B2i
java.util.List.add(E)CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java¢, ¢(/2l
java.util.Optional.get()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java¢9 ¢(<2ü
Korg.jabref.logic.auxparser.AuxParserResult.increaseCrossRefEntriesCounter()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java£# £(A2i
java.util.List.add(E)CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java¶3 ¶(62í
>org.jabref.logic.auxparser.AuxParserResult.getUnresolvedKeys()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java¶ ¶(02Î
ñorg.jabref.logic.auxparser.DefaultAuxParser.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java´ ´(2s
java.util.ArrayList.ArrayList()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaö- ö(82¸
ßorg.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)!entriesCALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaõ õ(%2à
≥org.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?entry@155.22:155.27CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaú ú(2˚
¶org.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)!resultCALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaù ù(2ã
∂org.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?crossref@156.61:156.69CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaùL ù(T2ö
Forg.jabref.logic.auxparser.DefaultAuxParser?masterDatabase@37.30:37.44CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaû2 û(@2ã
∂org.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?crossref@156.61:156.69CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaûW û(_2ã
∂org.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?refEntry@158.39:158.47CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java† †( 2í
Ωorg.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?entriesToInsert@154.23:154.38CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java° °(,2ã
∂org.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?refEntry@158.39:158.47CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java°6 °(>2í
Ωorg.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?entriesToInsert@154.23:154.38CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java¢ ¢(+2ã
∂org.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?refEntry@158.39:158.47CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java¢0 ¢(82˚
¶org.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)!resultCALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java£ £("2˚
¶org.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)!resultCALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java¶ ¶(2ã
∂org.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?crossref@156.61:156.69CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java¶7 ¶(?2í
Ωorg.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?entriesToInsert@154.23:154.38CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java´ ´(%2˚
¶org.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)!resultCALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java´' ´(-2Å
ßorg.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)!entries	PARAMETERJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaô7 ô(>2Ä
¶org.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)!result	PARAMETERJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaôP ô(V2ô
Ωorg.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?entriesToInsert@154.23:154.38DECLARATIONJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaö ö(&2è
≥org.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?entry@155.22:155.27DECLARATIONJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaõ õ(2í
∂org.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?refEntry@158.39:158.47DECLARATIONJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaû' û(/2í
∂org.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?crossref@156.61:156.69DECLARATIONJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaú= ú(E2_
voidRETURN_TYPEJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaô ô(≤
Ωorg.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?entriesToInsert@154.23:154.38VARIABLEJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaö ö(&"
typeList<BibEntry>"
isFinalfalse"á
declarationStringr<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">entriesToInsert</mark> = new ArrayList<>()*entriesToInsert2b
java.util.ListTYPEJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaö ö(2|
org.jabref.model.entry.BibEntryTYPE_ARGUMENTJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaö ö(2s
java.util.ArrayList.ArrayList()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaö- ö(8ë
≥org.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?entry@155.22:155.27VARIABLEJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaõ õ("
typeBibEntry"
isFinalfalse"c
declarationStringN<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry</mark>*entry2s
org.jabref.model.entry.BibEntryTYPEJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaõ õ(°

∂org.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?refEntry@158.39:158.47VARIABLEJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaû' û(/"
typeOptional<BibEntry>"
isFinalfalse"¢
declarationStringå<mark class="modifier"> </mark>Optional<BibEntry> <mark class="class-field">refEntry</mark> = masterDatabase.getEntryByCitationKey(crossref)*refEntry2f
java.util.OptionalTYPEJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaû û(2|
org.jabref.model.entry.BibEntryTYPE_ARGUMENTJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaû û(%2°
Morg.jabref.model.database.BibDatabase.getEntryByCitationKey(java.lang.String)CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaûA û(V2ö
Forg.jabref.logic.auxparser.DefaultAuxParser?masterDatabase@37.30:37.44CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaû2 û(@2ã
∂org.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?crossref@156.61:156.69CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaûW û(_√
ßorg.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)!entries	PARAMETERJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaô7 ô(>"
typeList<BibEntry>"
isFinalfalse"+
declarationStringList<BibEntry> entries*entries2b
java.util.ListTYPEJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaô( ô(,2|
org.jabref.model.entry.BibEntryTYPE_ARGUMENTJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaô- ô(5‡
¶org.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)!result	PARAMETERJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaôP ô(V"
typeAuxParserResult"
isFinalfalse"+
declarationStringAuxParserResult result*result2~
*org.jabref.logic.auxparser.AuxParserResultTYPEJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaô@ ô(O€
∂org.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?crossref@156.61:156.69VARIABLEJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaú= ú(E"
type"
isFinalfalse"
declarationString	 crossref*crossref2TYPEß$
ñorg.jabref.logic.auxparser.DefaultAuxParser.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)METHODJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java¥ ¥("
isFinalfalse"˙
declarationString‰<mark class="modifier">private </mark><mark class="modifier">void</mark> <mark class="method">insertEntries</mark>(List&lt;BibEntry&gt; entries<mark class="modifier"><mark class="modifier">,</mark></mark> AuxParserResult result)"
isStaticfalse"
accessprivate"

isAbstractfalse"
typevoid*insertEntries2{
'org.jabref.model.entry.BibEntry.clone()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java∑6 ∑(;2á
3org.jabref.model.entry.BibEntry.setChanged(boolean)CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaπ π($2i
java.util.List.add(E)CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java∫ ∫(2∏
dorg.jabref.model.database.BibDatabase.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>)CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaº) º(62ò
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaº º(&2s
java.util.ArrayList.ArrayList()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaµ+ µ(62Û
ûorg.jabref.logic.auxparser.DefaultAuxParser.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)!entriesCALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java∂ ∂(%2ˇ
™org.jabref.logic.auxparser.DefaultAuxParser.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?entry@182.22:182.27CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java∑0 ∑(52á
≤org.jabref.logic.auxparser.DefaultAuxParser.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?bibEntryToAdd@183.21:183.34CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaπ π(2á
≤org.jabref.logic.auxparser.DefaultAuxParser.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?clonedEntries@181.23:181.36CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java∫ ∫(2á
≤org.jabref.logic.auxparser.DefaultAuxParser.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?bibEntryToAdd@183.21:183.34CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java∫ ∫(+2Ú
ùorg.jabref.logic.auxparser.DefaultAuxParser.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)!resultCALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaº º(2á
≤org.jabref.logic.auxparser.DefaultAuxParser.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?clonedEntries@181.23:181.36CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaº7 º(D2¯
ûorg.jabref.logic.auxparser.DefaultAuxParser.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)!entries	PARAMETERJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java¥. ¥(52˜
ùorg.jabref.logic.auxparser.DefaultAuxParser.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)!result	PARAMETERJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java¥G ¥(M2é
≤org.jabref.logic.auxparser.DefaultAuxParser.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?clonedEntries@181.23:181.36DECLARATIONJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaµ µ($2Ü
™org.jabref.logic.auxparser.DefaultAuxParser.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?entry@182.22:182.27DECLARATIONJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java∂ ∂(2é
≤org.jabref.logic.auxparser.DefaultAuxParser.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?bibEntryToAdd@183.21:183.34DECLARATIONJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java∑ ∑("2_
voidRETURN_TYPEJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java¥ ¥(£
≤org.jabref.logic.auxparser.DefaultAuxParser.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?clonedEntries@181.23:181.36VARIABLEJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaµ µ($"
typeList<BibEntry>"
isFinalfalse"Ö
declarationStringp<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">clonedEntries</mark> = new ArrayList<>()*clonedEntries2b
java.util.ListTYPEJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaµ µ(2|
org.jabref.model.entry.BibEntryTYPE_ARGUMENTJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaµ µ(2s
java.util.ArrayList.ArrayList()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.javaµ+ µ(6à
™org.jabref.logic.auxparser.DefaultAuxParser.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?entry@182.22:182.27VARIABLEJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java∂ ∂("
typeBibEntry"
isFinalfalse"c
declarationStringN<mark class="modifier"> </mark>BibEntry <mark class="class-field">entry</mark>*entry2s
org.jabref.model.entry.BibEntryTYPEJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java∂ ∂(ª
≤org.jabref.logic.auxparser.DefaultAuxParser.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?bibEntryToAdd@183.21:183.34VARIABLEJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java∑ ∑(""
typeBibEntry"
isFinalfalse"Ü
declarationStringq<mark class="modifier"> </mark>BibEntry <mark class="class-field">bibEntryToAdd</mark> = (BibEntry) entry.clone()*bibEntryToAdd2s
org.jabref.model.entry.BibEntryTYPEJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java∑ ∑(2{
'org.jabref.model.entry.BibEntry.clone()CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java∑6 ∑(;2ˇ
™org.jabref.logic.auxparser.DefaultAuxParser.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)?entry@182.22:182.27CALLJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java∑0 ∑(5∫
ûorg.jabref.logic.auxparser.DefaultAuxParser.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)!entries	PARAMETERJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java¥. ¥(5"
typeList<BibEntry>"
isFinalfalse"+
declarationStringList<BibEntry> entries*entries2b
java.util.ListTYPEJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java¥ ¥(#2|
org.jabref.model.entry.BibEntryTYPE_ARGUMENTJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java¥$ ¥(,◊
ùorg.jabref.logic.auxparser.DefaultAuxParser.insertEntries(java.util.List<org.jabref.model.entry.BibEntry>, org.jabref.logic.auxparser.AuxParserResult)!result	PARAMETERJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java¥G ¥(M"
typeAuxParserResult"
isFinalfalse"+
declarationStringAuxParserResult result*result2~
*org.jabref.logic.auxparser.AuxParserResultTYPEJ
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java¥7 ¥(F¨
>org.jabref.logic.auxparser.DefaultAuxParser?LOGGER@32.32:32.38VALUEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java    (&"
isFinaltrue"
typeLogger"Ê
declarationString–<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>Logger <mark class="class-field">LOGGER</mark> = LoggerFactory.getLogger(DefaultAuxParser.class);"
isStatictrue"
accessprivate*LOGGER2b
org.slf4j.LoggerTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java   (Ò
Dorg.jabref.logic.auxparser.DefaultAuxParser?CITE_PATTERN@34.33:34.45VALUEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java"! "(-"
isFinaltrue"
typePattern"ë
declarationString˚<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>Pattern <mark class="class-field">CITE_PATTERN</mark> = Pattern.compile("\\\\(citation|abx@aux@cite)(\\{\\d+\\})?\\{(?<citationkey>.+)\\}");"
isStatictrue"
accessprivate*CITE_PATTERN2i
java.util.regex.PatternTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java" "( 2É
1java.util.regex.Pattern.compile(java.lang.String)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java"8 "(?»
Eorg.jabref.logic.auxparser.DefaultAuxParser?INPUT_PATTERN@35.33:35.46VALUEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java#! #(."
isFinaltrue"
typePattern"Ê
declarationString–<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>Pattern <mark class="class-field">INPUT_PATTERN</mark> = Pattern.compile("\\\\@input\\{(.+)\\}");"
isStatictrue"
accessprivate*INPUT_PATTERN2i
java.util.regex.PatternTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java# #( 2É
1java.util.regex.Pattern.compile(java.lang.String)CALLH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java#9 #(@å
Forg.jabref.logic.auxparser.DefaultAuxParser?masterDatabase@37.30:37.44VALUEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java% %(,"
isFinaltrue"
typeBibDatabase"õ
declarationStringÖ<mark class="modifier">private </mark><mark class="modifier">final </mark>BibDatabase <mark class="class-field">masterDatabase</mark>"
isStaticfalse"
accessprivate*masterDatabase2w
%org.jabref.model.database.BibDatabaseTYPEH
>src\main\java\org\jabref\logic\auxparser\DefaultAuxParser.java% %(