
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java£
(org.jabref.logic.auxparser.AuxParserTestCLASSE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java ("%
packageorg.jabref.logic.auxparser"
isFinalfalse"
inner classfalse"

isAbstractfalse"e
declarationStringP<mark class="modifier"> </mark><mark class="modifier">class </mark>AuxParserTest"
accesspackage_private*AuxParserTest2Ü
0org.jabref.logic.auxparser.AuxParserTest.setUp()DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java	 (2â
3org.jabref.logic.auxparser.AuxParserTest.tearDown()DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java$	 $(2á
1org.jabref.logic.auxparser.AuxParserTest.normal()DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java)	 )(2å
6org.jabref.logic.auxparser.AuxParserTest.twoArgMacro()DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaB	 B(2å
6org.jabref.logic.auxparser.AuxParserTest.notAllFound()DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java]	 ](2¢
Lorg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javas	 s(*2å
4org.jabref.logic.auxparser.AuxParserTest.nestedAux()DECLARATIONG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÉ	 É(2ã
3org.jabref.logic.auxparser.AuxParserTest.crossRef()DECLARATIONG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaô	 ô(2è
7org.jabref.logic.auxparser.AuxParserTest.fileNotFound()DECLARATIONG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaØ	 Ø(2¢
Lorg.jabref.logic.auxparser.AuxParserTest?importFormatPreferences@28.36:28.59DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java$ (;ì
0org.jabref.logic.auxparser.AuxParserTest.setUp()METHODE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java	 ("
isFinalfalse"´
declarationStringï<mark class="annotation">@BeforeEach</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">setUp</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*setUp2õ
Lorg.jabref.logic.auxparser.AuxParserTest?importFormatPreferences@28.36:28.59CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java   (2Z
voidRETURN_TYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java (õ
3org.jabref.logic.auxparser.AuxParserTest.tearDown()METHODE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java$	 $("
isFinalfalse"≠
declarationStringó<mark class="annotation">@AfterEach</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">tearDown</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*tearDown2õ
Lorg.jabref.logic.auxparser.AuxParserTest?importFormatPreferences@28.36:28.59CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java% %(2Z
voidRETURN_TYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java$ $(ôA
1org.jabref.logic.auxparser.AuxParserTest.normal()METHODE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java)	 )("
isFinalfalse"≈
declarationStringØ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">normal</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>URISyntaxException<mark class="modifier"><mark class="modifier">,</mark></mark> IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*normal2Ñ
5java.lang.Class.getResourceAsStream(java.lang.String)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java*9 *(L2r
#java.nio.file.Path.of(java.net.URI)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java+ +(2c
java.net.URL.toURI()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java+L +(Q2|
-java.lang.Class.getResource(java.lang.String)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java+3 +(>2ñ
Gorg.jabref.logic.importer.fileformat.BibtexParser.parse(java.io.Reader)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java-L -(Q2É
4org.jabref.logic.importer.ParserResult.getDatabase()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java/> /(I2ç
>org.jabref.logic.auxparser.AuxParser.parse(java.nio.file.Path)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java02 0(72Å
2org.jabref.model.database.BibDatabase.hasEntries()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java2; 2(E2ì
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java2! 2(82í
Corg.jabref.logic.auxparser.AuxParserResult.getUnresolvedKeysCount()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java3& 3(<2ì
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java4* 4(A2Å
2org.jabref.model.database.BibDatabase.getEntries()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java5. 5(82d
java.util.List.size()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java6' 6(+2{
,org.jabref.model.entry.BibEntry.hasChanged()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java8) 8(32f
java.util.List.get(int)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java8" 8(%2ê
Aorg.jabref.logic.auxparser.AuxParserResult.getResolvedKeysCount()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java9& 9(:2ç
>org.jabref.logic.auxparser.AuxParserResult.getFoundKeysInAux()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java:& :(72ç
>org.jabref.logic.auxparser.AuxParserResult.getFoundKeysInAux()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java;# ;(42ì
Dorg.jabref.logic.auxparser.AuxParserResult.getCrossRefEntriesCount()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java;C ;(Z2ê
Aorg.jabref.logic.auxparser.AuxParserResult.getResolvedKeysCount()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java< <(22í
Corg.jabref.logic.auxparser.AuxParserResult.getUnresolvedKeysCount()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java<A <(W2ì
Dorg.jabref.logic.auxparser.AuxParserResult.getCrossRefEntriesCount()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java=& =(=2©
Zjava.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.nio.charset.Charset)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java,4 ,(E2≤
corg.jabref.logic.auxparser.DefaultAuxParser.DefaultAuxParser(org.jabref.model.database.BibDatabase)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java/& /(62õ
Lorg.jabref.logic.auxparser.AuxParserTest.normal()?originalStream@42.20:42.34CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java,F ,(T2õ
Lorg.jabref.logic.auxparser.AuxParserTest?importFormatPreferences@28.36:28.59CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java-3 -(J2õ
Lorg.jabref.logic.auxparser.AuxParserTest.normal()?originalReader@44.31:44.45CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java-R -(`2ì
Dorg.jabref.logic.auxparser.AuxParserTest.normal()?result@45.25:45.31CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java/7 /(=2ñ
Gorg.jabref.logic.auxparser.AuxParserTest.normal()?auxParser@47.22:47.31CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java0( 0(12î
Eorg.jabref.logic.auxparser.AuxParserTest.normal()?auxFile@43.13:43.20CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java08 0(?2ñ
Gorg.jabref.logic.auxparser.AuxParserTest.normal()?auxResult@48.28:48.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java2 2( 2ñ
Gorg.jabref.logic.auxparser.AuxParserTest.normal()?auxResult@48.28:48.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java3 3(%2ñ
Gorg.jabref.logic.auxparser.AuxParserTest.normal()?auxResult@48.28:48.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java4  4()2í
Corg.jabref.logic.auxparser.AuxParserTest.normal()?newDB@52.24:52.29CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java5( 5(-2ó
Horg.jabref.logic.auxparser.AuxParserTest.normal()?newEntries@53.27:53.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java6 6(&2ó
Horg.jabref.logic.auxparser.AuxParserTest.normal()?newEntries@53.27:53.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java7 7(!2ó
Horg.jabref.logic.auxparser.AuxParserTest.normal()?newEntries@53.27:53.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java8 8(!2ñ
Gorg.jabref.logic.auxparser.AuxParserTest.normal()?auxResult@48.28:48.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java9 9(%2ñ
Gorg.jabref.logic.auxparser.AuxParserTest.normal()?auxResult@48.28:48.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java: :(%2ñ
Gorg.jabref.logic.auxparser.AuxParserTest.normal()?auxResult@48.28:48.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java; ;("2ñ
Gorg.jabref.logic.auxparser.AuxParserTest.normal()?auxResult@48.28:48.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java;9 ;(B2ñ
Gorg.jabref.logic.auxparser.AuxParserTest.normal()?auxResult@48.28:48.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java< <(2ñ
Gorg.jabref.logic.auxparser.AuxParserTest.normal()?auxResult@48.28:48.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java<7 <(@2ñ
Gorg.jabref.logic.auxparser.AuxParserTest.normal()?auxResult@48.28:48.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java= =(%2¢
Lorg.jabref.logic.auxparser.AuxParserTest.normal()?originalStream@42.20:42.34DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java* *("2õ
Eorg.jabref.logic.auxparser.AuxParserTest.normal()?auxFile@43.13:43.20DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java+ +(2¢
Lorg.jabref.logic.auxparser.AuxParserTest.normal()?originalReader@44.31:44.45DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java, ,(-2ö
Dorg.jabref.logic.auxparser.AuxParserTest.normal()?result@45.25:45.31DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java- -(2ù
Gorg.jabref.logic.auxparser.AuxParserTest.normal()?auxParser@47.22:47.31DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java/ /(2ù
Gorg.jabref.logic.auxparser.AuxParserTest.normal()?auxResult@48.28:48.37DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java0 0(%2ô
Corg.jabref.logic.auxparser.AuxParserTest.normal()?newDB@52.24:52.29DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java4 4(2û
Horg.jabref.logic.auxparser.AuxParserTest.normal()?newEntries@53.27:53.37DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java5 5(%2Z
voidRETURN_TYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java) )(Ï
Lorg.jabref.logic.auxparser.AuxParserTest.normal()?originalStream@42.20:42.34VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java* *(""
typeInputStream"
isFinalfalse"®
declarationStringí<mark class="modifier"> </mark>InputStream <mark class="class-field">originalStream</mark> = AuxParserTest.class.getResourceAsStream("origin.bib")*originalStream2b
java.io.InputStreamTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java* *(2Ñ
5java.lang.Class.getResourceAsStream(java.lang.String)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java*9 *(L†
Eorg.jabref.logic.auxparser.AuxParserTest.normal()?auxFile@43.13:43.20VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java+ +("
typePath"
isFinalfalse"¢
declarationStringå<mark class="modifier"> </mark>Path <mark class="class-field">auxFile</mark> = Path.of(AuxParserTest.class.getResource("paper.aux").toURI())*auxFile2a
java.nio.file.PathTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java+ +(2r
#java.nio.file.Path.of(java.net.URI)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java+ +(2c
java.net.URL.toURI()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java+L +(Q2|
-java.lang.Class.getResource(java.lang.String)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java+3 +(>…
Lorg.jabref.logic.auxparser.AuxParserTest.normal()?originalReader@44.31:44.45VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java, ,(-"
typeInputStreamReader"
isFinalfalse"∂
declarationString†<mark class="modifier"> </mark>InputStreamReader <mark class="class-field">originalReader</mark> = new InputStreamReader(originalStream, StandardCharsets.UTF_8)*originalReader2h
java.io.InputStreamReaderTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java, ,(2©
Zjava.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.nio.charset.Charset)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java,4 ,(E2õ
Lorg.jabref.logic.auxparser.AuxParserTest.normal()?originalStream@42.20:42.34CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java,F ,(T¡
Dorg.jabref.logic.auxparser.AuxParserTest.normal()?result@45.25:45.31VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java- -("
typeParserResult"
isFinalfalse"´
declarationStringï<mark class="modifier"> </mark>ParserResult <mark class="class-field">result</mark> = new BibtexParser(importFormatPreferences).parse(originalReader)*result2u
&org.jabref.logic.importer.ParserResultTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java- -(2ñ
Gorg.jabref.logic.importer.fileformat.BibtexParser.parse(java.io.Reader)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java-L -(Q2õ
Lorg.jabref.logic.auxparser.AuxParserTest?importFormatPreferences@28.36:28.59CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java-3 -(J2õ
Lorg.jabref.logic.auxparser.AuxParserTest.normal()?originalReader@44.31:44.45CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java-R -(`©
Gorg.jabref.logic.auxparser.AuxParserTest.normal()?auxParser@47.22:47.31VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java/ /("
type	AuxParser"
isFinalfalse"ñ
declarationStringÄ<mark class="modifier"> </mark>AuxParser <mark class="class-field">auxParser</mark> = new DefaultAuxParser(result.getDatabase())*	auxParser2s
$org.jabref.logic.auxparser.AuxParserTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java/ /(2É
4org.jabref.logic.importer.ParserResult.getDatabase()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java/> /(I2≤
corg.jabref.logic.auxparser.DefaultAuxParser.DefaultAuxParser(org.jabref.model.database.BibDatabase)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java/& /(62ì
Dorg.jabref.logic.auxparser.AuxParserTest.normal()?result@45.25:45.31CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java/7 /(=ó
Gorg.jabref.logic.auxparser.AuxParserTest.normal()?auxResult@48.28:48.37VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java0 0(%"
typeAuxParserResult"
isFinalfalse"â
declarationStringt<mark class="modifier"> </mark>AuxParserResult <mark class="class-field">auxResult</mark> = auxParser.parse(auxFile)*	auxResult2y
*org.jabref.logic.auxparser.AuxParserResultTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java0 0(2ç
>org.jabref.logic.auxparser.AuxParser.parse(java.nio.file.Path)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java02 0(72ñ
Gorg.jabref.logic.auxparser.AuxParserTest.normal()?auxParser@47.22:47.31CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java0( 0(12î
Eorg.jabref.logic.auxparser.AuxParserTest.normal()?auxFile@43.13:43.20CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java08 0(?¯
Corg.jabref.logic.auxparser.AuxParserTest.normal()?newDB@52.24:52.29VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java4 4("
typeBibDatabase"
isFinalfalse"å
declarationStringw<mark class="modifier"> </mark>BibDatabase <mark class="class-field">newDB</mark> = auxResult.getGeneratedBibDatabase()*newDB2t
%org.jabref.model.database.BibDatabaseTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java4 4(2ì
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java4* 4(A2ñ
Gorg.jabref.logic.auxparser.AuxParserTest.normal()?auxResult@48.28:48.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java4  4()»
Horg.jabref.logic.auxparser.AuxParserTest.normal()?newEntries@53.27:53.37VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java5 5(%"
typeList<BibEntry>"
isFinalfalse"É
declarationStringn<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">newEntries</mark> = newDB.getEntries()*
newEntries2]
java.util.ListTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java5 5(2w
org.jabref.model.entry.BibEntryTYPE_ARGUMENTE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java5 5(2Å
2org.jabref.model.database.BibDatabase.getEntries()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java5. 5(82í
Corg.jabref.logic.auxparser.AuxParserTest.normal()?newDB@52.24:52.29CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java5( 5(-ØB
6org.jabref.logic.auxparser.AuxParserTest.twoArgMacro()METHODE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaB	 B("
isFinalfalse" 
declarationString¥<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">twoArgMacro</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>URISyntaxException<mark class="modifier"><mark class="modifier">,</mark></mark> IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*twoArgMacro2Ñ
5java.lang.Class.getResourceAsStream(java.lang.String)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaE9 E(L2r
#java.nio.file.Path.of(java.net.URI)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaF F(2c
java.net.URL.toURI()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaFW F(\2|
-java.lang.Class.getResource(java.lang.String)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaF3 F(>2ñ
Gorg.jabref.logic.importer.fileformat.BibtexParser.parse(java.io.Reader)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaHL H(Q2É
4org.jabref.logic.importer.ParserResult.getDatabase()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaJ> J(I2ç
>org.jabref.logic.auxparser.AuxParser.parse(java.nio.file.Path)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaK2 K(72Å
2org.jabref.model.database.BibDatabase.hasEntries()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaM; M(E2ì
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaM! M(82í
Corg.jabref.logic.auxparser.AuxParserResult.getUnresolvedKeysCount()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaN& N(<2ì
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaO* O(A2Å
2org.jabref.model.database.BibDatabase.getEntries()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaP. P(82d
java.util.List.size()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaQ' Q(+2{
,org.jabref.model.entry.BibEntry.hasChanged()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaS) S(32f
java.util.List.get(int)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaS" S(%2ê
Aorg.jabref.logic.auxparser.AuxParserResult.getResolvedKeysCount()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaT& T(:2ç
>org.jabref.logic.auxparser.AuxParserResult.getFoundKeysInAux()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaU& U(72ç
>org.jabref.logic.auxparser.AuxParserResult.getFoundKeysInAux()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaV# V(42ì
Dorg.jabref.logic.auxparser.AuxParserResult.getCrossRefEntriesCount()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaVC V(Z2ê
Aorg.jabref.logic.auxparser.AuxParserResult.getResolvedKeysCount()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaW W(22í
Corg.jabref.logic.auxparser.AuxParserResult.getUnresolvedKeysCount()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaWA W(W2ì
Dorg.jabref.logic.auxparser.AuxParserResult.getCrossRefEntriesCount()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaX& X(=2©
Zjava.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.nio.charset.Charset)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaG4 G(E2≤
corg.jabref.logic.auxparser.DefaultAuxParser.DefaultAuxParser(org.jabref.model.database.BibDatabase)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaJ& J(62†
Qorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?originalStream@69.20:69.34CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaGF G(T2õ
Lorg.jabref.logic.auxparser.AuxParserTest?importFormatPreferences@28.36:28.59CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaH3 H(J2†
Qorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?originalReader@71.31:71.45CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaHR H(`2ò
Iorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?result@72.25:72.31CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaJ7 J(=2õ
Lorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?auxParser@74.22:74.31CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaK( K(12ô
Jorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?auxFile@70.13:70.20CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaK8 K(?2õ
Lorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?auxResult@75.28:75.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaM M( 2õ
Lorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?auxResult@75.28:75.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaN N(%2õ
Lorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?auxResult@75.28:75.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaO  O()2ó
Horg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?newDB@79.24:79.29CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaP( P(-2ú
Morg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?newEntries@80.27:80.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaQ Q(&2ú
Morg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?newEntries@80.27:80.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaR R(!2ú
Morg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?newEntries@80.27:80.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaS S(!2õ
Lorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?auxResult@75.28:75.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaT T(%2õ
Lorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?auxResult@75.28:75.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaU U(%2õ
Lorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?auxResult@75.28:75.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaV V("2õ
Lorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?auxResult@75.28:75.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaV9 V(B2õ
Lorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?auxResult@75.28:75.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaW W(2õ
Lorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?auxResult@75.28:75.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaW7 W(@2õ
Lorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?auxResult@75.28:75.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaX X(%2ß
Qorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?originalStream@69.20:69.34DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaE E("2†
Jorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?auxFile@70.13:70.20DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaF F(2ß
Qorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?originalReader@71.31:71.45DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaG G(-2ü
Iorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?result@72.25:72.31DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaH H(2¢
Lorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?auxParser@74.22:74.31DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaJ J(2¢
Lorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?auxResult@75.28:75.37DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaK K(%2û
Horg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?newDB@79.24:79.29DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaO O(2£
Morg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?newEntries@80.27:80.37DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaP P(%2Z
voidRETURN_TYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaB B(Ò
Qorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?originalStream@69.20:69.34VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaE E(""
typeInputStream"
isFinalfalse"®
declarationStringí<mark class="modifier"> </mark>InputStream <mark class="class-field">originalStream</mark> = AuxParserTest.class.getResourceAsStream("origin.bib")*originalStream2b
java.io.InputStreamTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaE E(2Ñ
5java.lang.Class.getResourceAsStream(java.lang.String)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaE9 E(L∞
Jorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?auxFile@70.13:70.20VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaF F("
typePath"
isFinalfalse"≠
declarationStringó<mark class="modifier"> </mark>Path <mark class="class-field">auxFile</mark> = Path.of(AuxParserTest.class.getResource("papertwoargmacro.aux").toURI())*auxFile2a
java.nio.file.PathTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaF F(2r
#java.nio.file.Path.of(java.net.URI)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaF F(2c
java.net.URL.toURI()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaFW F(\2|
-java.lang.Class.getResource(java.lang.String)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaF3 F(>”
Qorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?originalReader@71.31:71.45VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaG G(-"
typeInputStreamReader"
isFinalfalse"∂
declarationString†<mark class="modifier"> </mark>InputStreamReader <mark class="class-field">originalReader</mark> = new InputStreamReader(originalStream, StandardCharsets.UTF_8)*originalReader2h
java.io.InputStreamReaderTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaG G(2©
Zjava.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.nio.charset.Charset)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaG4 G(E2†
Qorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?originalStream@69.20:69.34CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaGF G(TÀ
Iorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?result@72.25:72.31VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaH H("
typeParserResult"
isFinalfalse"´
declarationStringï<mark class="modifier"> </mark>ParserResult <mark class="class-field">result</mark> = new BibtexParser(importFormatPreferences).parse(originalReader)*result2u
&org.jabref.logic.importer.ParserResultTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaH H(2ñ
Gorg.jabref.logic.importer.fileformat.BibtexParser.parse(java.io.Reader)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaHL H(Q2õ
Lorg.jabref.logic.auxparser.AuxParserTest?importFormatPreferences@28.36:28.59CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaH3 H(J2†
Qorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?originalReader@71.31:71.45CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaHR H(`≥
Lorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?auxParser@74.22:74.31VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaJ J("
type	AuxParser"
isFinalfalse"ñ
declarationStringÄ<mark class="modifier"> </mark>AuxParser <mark class="class-field">auxParser</mark> = new DefaultAuxParser(result.getDatabase())*	auxParser2s
$org.jabref.logic.auxparser.AuxParserTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaJ J(2É
4org.jabref.logic.importer.ParserResult.getDatabase()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaJ> J(I2≤
corg.jabref.logic.auxparser.DefaultAuxParser.DefaultAuxParser(org.jabref.model.database.BibDatabase)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaJ& J(62ò
Iorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?result@72.25:72.31CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaJ7 J(=¶
Lorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?auxResult@75.28:75.37VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaK K(%"
typeAuxParserResult"
isFinalfalse"â
declarationStringt<mark class="modifier"> </mark>AuxParserResult <mark class="class-field">auxResult</mark> = auxParser.parse(auxFile)*	auxResult2y
*org.jabref.logic.auxparser.AuxParserResultTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaK K(2ç
>org.jabref.logic.auxparser.AuxParser.parse(java.nio.file.Path)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaK2 K(72õ
Lorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?auxParser@74.22:74.31CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaK( K(12ô
Jorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?auxFile@70.13:70.20CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaK8 K(?Ç
Horg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?newDB@79.24:79.29VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaO O("
typeBibDatabase"
isFinalfalse"å
declarationStringw<mark class="modifier"> </mark>BibDatabase <mark class="class-field">newDB</mark> = auxResult.getGeneratedBibDatabase()*newDB2t
%org.jabref.model.database.BibDatabaseTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaO O(2ì
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaO* O(A2õ
Lorg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?auxResult@75.28:75.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaO  O()“
Morg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?newEntries@80.27:80.37VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaP P(%"
typeList<BibEntry>"
isFinalfalse"É
declarationStringn<mark class="modifier"> </mark>List<BibEntry> <mark class="class-field">newEntries</mark> = newDB.getEntries()*
newEntries2]
java.util.ListTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaP P(2w
org.jabref.model.entry.BibEntryTYPE_ARGUMENTE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaP P(2Å
2org.jabref.model.database.BibDatabase.getEntries()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaP. P(82ó
Horg.jabref.logic.auxparser.AuxParserTest.twoArgMacro()?newDB@79.24:79.29CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaP( P(-˚:
6org.jabref.logic.auxparser.AuxParserTest.notAllFound()METHODE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java]	 ]("
isFinalfalse" 
declarationString¥<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">notAllFound</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>URISyntaxException<mark class="modifier"><mark class="modifier">,</mark></mark> IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*notAllFound2Ñ
5java.lang.Class.getResourceAsStream(java.lang.String)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java^9 ^(L2r
#java.nio.file.Path.of(java.net.URI)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java_ _(2c
java.net.URL.toURI()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java_O _(T2|
-java.lang.Class.getResource(java.lang.String)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java_3 _(>2ñ
Gorg.jabref.logic.importer.fileformat.BibtexParser.parse(java.io.Reader)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaaL a(Q2É
4org.jabref.logic.importer.ParserResult.getDatabase()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javac> c(I2ç
>org.jabref.logic.auxparser.AuxParser.parse(java.nio.file.Path)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javad2 d(72Å
2org.jabref.model.database.BibDatabase.hasEntries()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaf; f(E2ì
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaf! f(82í
Corg.jabref.logic.auxparser.AuxParserResult.getUnresolvedKeysCount()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javag& g(<2ì
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javah* h(A2Å
2org.jabref.model.database.BibDatabase.getEntries()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javai" i(,2ê
Aorg.jabref.logic.auxparser.AuxParserResult.getResolvedKeysCount()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaj& j(:2ç
>org.jabref.logic.auxparser.AuxParserResult.getFoundKeysInAux()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javak& k(72ç
>org.jabref.logic.auxparser.AuxParserResult.getFoundKeysInAux()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javal# l(42ì
Dorg.jabref.logic.auxparser.AuxParserResult.getCrossRefEntriesCount()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javalC l(Z2ê
Aorg.jabref.logic.auxparser.AuxParserResult.getResolvedKeysCount()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javam m(22í
Corg.jabref.logic.auxparser.AuxParserResult.getUnresolvedKeysCount()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javamA m(W2ì
Dorg.jabref.logic.auxparser.AuxParserResult.getCrossRefEntriesCount()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javan& n(=2©
Zjava.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.nio.charset.Charset)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java`4 `(E2≤
corg.jabref.logic.auxparser.DefaultAuxParser.DefaultAuxParser(org.jabref.model.database.BibDatabase)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javac& c(62†
Qorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?originalStream@94.20:94.34CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java`F `(T2õ
Lorg.jabref.logic.auxparser.AuxParserTest?importFormatPreferences@28.36:28.59CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaa3 a(J2†
Qorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?originalReader@96.31:96.45CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaaR a(`2ò
Iorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?result@97.25:97.31CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javac7 c(=2õ
Lorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?auxParser@99.22:99.31CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javad( d(12ô
Jorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?auxFile@95.13:95.20CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javad8 d(?2ù
Norg.jabref.logic.auxparser.AuxParserTest.notAllFound()?auxResult@100.28:100.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaf f( 2ù
Norg.jabref.logic.auxparser.AuxParserTest.notAllFound()?auxResult@100.28:100.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javag g(%2ù
Norg.jabref.logic.auxparser.AuxParserTest.notAllFound()?auxResult@100.28:100.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javah  h()2ô
Jorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?newDB@104.24:104.29CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javai i(!2ù
Norg.jabref.logic.auxparser.AuxParserTest.notAllFound()?auxResult@100.28:100.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaj j(%2ù
Norg.jabref.logic.auxparser.AuxParserTest.notAllFound()?auxResult@100.28:100.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javak k(%2ù
Norg.jabref.logic.auxparser.AuxParserTest.notAllFound()?auxResult@100.28:100.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javal l("2ù
Norg.jabref.logic.auxparser.AuxParserTest.notAllFound()?auxResult@100.28:100.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javal9 l(B2ù
Norg.jabref.logic.auxparser.AuxParserTest.notAllFound()?auxResult@100.28:100.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javam m(2ù
Norg.jabref.logic.auxparser.AuxParserTest.notAllFound()?auxResult@100.28:100.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javam7 m(@2ù
Norg.jabref.logic.auxparser.AuxParserTest.notAllFound()?auxResult@100.28:100.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javan n(%2ß
Qorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?originalStream@94.20:94.34DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java^ ^("2†
Jorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?auxFile@95.13:95.20DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java_ _(2ß
Qorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?originalReader@96.31:96.45DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java` `(-2ü
Iorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?result@97.25:97.31DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaa a(2¢
Lorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?auxParser@99.22:99.31DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javac c(2§
Norg.jabref.logic.auxparser.AuxParserTest.notAllFound()?auxResult@100.28:100.37DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javad d(%2†
Jorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?newDB@104.24:104.29DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javah h(2Z
voidRETURN_TYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java] ](Ò
Qorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?originalStream@94.20:94.34VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java^ ^(""
typeInputStream"
isFinalfalse"®
declarationStringí<mark class="modifier"> </mark>InputStream <mark class="class-field">originalStream</mark> = AuxParserTest.class.getResourceAsStream("origin.bib")*originalStream2b
java.io.InputStreamTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java^ ^(2Ñ
5java.lang.Class.getResourceAsStream(java.lang.String)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java^9 ^(L®
Jorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?auxFile@95.13:95.20VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java_ _("
typePath"
isFinalfalse"•
declarationStringè<mark class="modifier"> </mark>Path <mark class="class-field">auxFile</mark> = Path.of(AuxParserTest.class.getResource("badpaper.aux").toURI())*auxFile2a
java.nio.file.PathTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java_ _(2r
#java.nio.file.Path.of(java.net.URI)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java_ _(2c
java.net.URL.toURI()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java_O _(T2|
-java.lang.Class.getResource(java.lang.String)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java_3 _(>”
Qorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?originalReader@96.31:96.45VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java` `(-"
typeInputStreamReader"
isFinalfalse"∂
declarationString†<mark class="modifier"> </mark>InputStreamReader <mark class="class-field">originalReader</mark> = new InputStreamReader(originalStream, StandardCharsets.UTF_8)*originalReader2h
java.io.InputStreamReaderTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java` `(2©
Zjava.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.nio.charset.Charset)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java`4 `(E2†
Qorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?originalStream@94.20:94.34CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java`F `(TÀ
Iorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?result@97.25:97.31VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaa a("
typeParserResult"
isFinalfalse"´
declarationStringï<mark class="modifier"> </mark>ParserResult <mark class="class-field">result</mark> = new BibtexParser(importFormatPreferences).parse(originalReader)*result2u
&org.jabref.logic.importer.ParserResultTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaa a(2ñ
Gorg.jabref.logic.importer.fileformat.BibtexParser.parse(java.io.Reader)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaaL a(Q2õ
Lorg.jabref.logic.auxparser.AuxParserTest?importFormatPreferences@28.36:28.59CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaa3 a(J2†
Qorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?originalReader@96.31:96.45CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaaR a(`≥
Lorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?auxParser@99.22:99.31VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javac c("
type	AuxParser"
isFinalfalse"ñ
declarationStringÄ<mark class="modifier"> </mark>AuxParser <mark class="class-field">auxParser</mark> = new DefaultAuxParser(result.getDatabase())*	auxParser2s
$org.jabref.logic.auxparser.AuxParserTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javac c(2É
4org.jabref.logic.importer.ParserResult.getDatabase()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javac> c(I2≤
corg.jabref.logic.auxparser.DefaultAuxParser.DefaultAuxParser(org.jabref.model.database.BibDatabase)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javac& c(62ò
Iorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?result@97.25:97.31CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javac7 c(=®
Norg.jabref.logic.auxparser.AuxParserTest.notAllFound()?auxResult@100.28:100.37VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javad d(%"
typeAuxParserResult"
isFinalfalse"â
declarationStringt<mark class="modifier"> </mark>AuxParserResult <mark class="class-field">auxResult</mark> = auxParser.parse(auxFile)*	auxResult2y
*org.jabref.logic.auxparser.AuxParserResultTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javad d(2ç
>org.jabref.logic.auxparser.AuxParser.parse(java.nio.file.Path)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javad2 d(72õ
Lorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?auxParser@99.22:99.31CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javad( d(12ô
Jorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?auxFile@95.13:95.20CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javad8 d(?Ü
Jorg.jabref.logic.auxparser.AuxParserTest.notAllFound()?newDB@104.24:104.29VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javah h("
typeBibDatabase"
isFinalfalse"å
declarationStringw<mark class="modifier"> </mark>BibDatabase <mark class="class-field">newDB</mark> = auxResult.getGeneratedBibDatabase()*newDB2t
%org.jabref.model.database.BibDatabaseTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javah h(2ì
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javah* h(A2ù
Norg.jabref.logic.auxparser.AuxParserTest.notAllFound()?auxResult@100.28:100.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javah  h() *
Lorg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()METHODE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javas	 s(*"
isFinalfalse"‡
declarationString <mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">duplicateBibDatabaseConfiguration</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>URISyntaxException<mark class="modifier"><mark class="modifier">,</mark></mark> IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*!duplicateBibDatabaseConfiguration2Ñ
5java.lang.Class.getResourceAsStream(java.lang.String)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javat9 t(L2r
#java.nio.file.Path.of(java.net.URI)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javau u(2c
java.net.URL.toURI()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javauL u(Q2|
-java.lang.Class.getResource(java.lang.String)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javau3 u(>2ñ
Gorg.jabref.logic.importer.fileformat.BibtexParser.parse(java.io.Reader)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javawL w(Q2É
4org.jabref.logic.importer.ParserResult.getDatabase()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javay> y(I2ç
>org.jabref.logic.auxparser.AuxParser.parse(java.nio.file.Path)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaz2 z(72ì
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java{' {(>2g
java.util.Optional.of(T)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java}" }($2Ç
3org.jabref.model.database.BibDatabase.getPreamble()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java}L }(W2Ö
6org.jabref.model.database.BibDatabase.getStringCount()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java~ ~(-2©
Zjava.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.nio.charset.Charset)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javav4 v(E2≤
corg.jabref.logic.auxparser.DefaultAuxParser.DefaultAuxParser(org.jabref.model.database.BibDatabase)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javay& y(62∏
iorg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?originalStream@116.20:116.34CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javavF v(T2õ
Lorg.jabref.logic.auxparser.AuxParserTest?importFormatPreferences@28.36:28.59CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaw3 w(J2∏
iorg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?originalReader@118.31:118.45CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javawR w(`2∞
aorg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?result@119.25:119.31CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javay7 y(=2≥
dorg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?auxParser@121.22:121.31CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaz( z(12±
borg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?auxFile@117.13:117.20CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaz8 z(?2≥
dorg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?auxResult@122.28:122.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java{ {(&2¨
]org.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?db@123.24:123.26CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java}I }(K2¨
]org.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?db@123.24:123.26CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java~ ~(2ø
iorg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?originalStream@116.20:116.34DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javat t("2∏
borg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?auxFile@117.13:117.20DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javau u(2ø
iorg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?originalReader@118.31:118.45DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javav v(-2∑
aorg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?result@119.25:119.31DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaw w(2∫
dorg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?auxParser@121.22:121.31DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javay y(2∫
dorg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?auxResult@122.28:122.37DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaz z(%2≥
]org.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?db@123.24:123.26DECLARATIONE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java{ {(2Z
voidRETURN_TYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javas s(â
iorg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?originalStream@116.20:116.34VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javat t(""
typeInputStream"
isFinalfalse"®
declarationStringí<mark class="modifier"> </mark>InputStream <mark class="class-field">originalStream</mark> = AuxParserTest.class.getResourceAsStream("config.bib")*originalStream2b
java.io.InputStreamTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javat t(2Ñ
5java.lang.Class.getResourceAsStream(java.lang.String)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javat9 t(LΩ
borg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?auxFile@117.13:117.20VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javau u("
typePath"
isFinalfalse"¢
declarationStringå<mark class="modifier"> </mark>Path <mark class="class-field">auxFile</mark> = Path.of(AuxParserTest.class.getResource("paper.aux").toURI())*auxFile2a
java.nio.file.PathTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javau u(2r
#java.nio.file.Path.of(java.net.URI)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javau u(2c
java.net.URL.toURI()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javauL u(Q2|
-java.lang.Class.getResource(java.lang.String)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javau3 u(>É
iorg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?originalReader@118.31:118.45VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javav v(-"
typeInputStreamReader"
isFinalfalse"∂
declarationString†<mark class="modifier"> </mark>InputStreamReader <mark class="class-field">originalReader</mark> = new InputStreamReader(originalStream, StandardCharsets.UTF_8)*originalReader2h
java.io.InputStreamReaderTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javav v(2©
Zjava.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.nio.charset.Charset)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javav4 v(E2∏
iorg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?originalStream@116.20:116.34CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javavF v(T˚
aorg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?result@119.25:119.31VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaw w("
typeParserResult"
isFinalfalse"´
declarationStringï<mark class="modifier"> </mark>ParserResult <mark class="class-field">result</mark> = new BibtexParser(importFormatPreferences).parse(originalReader)*result2u
&org.jabref.logic.importer.ParserResultTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaw w(2ñ
Gorg.jabref.logic.importer.fileformat.BibtexParser.parse(java.io.Reader)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javawL w(Q2õ
Lorg.jabref.logic.auxparser.AuxParserTest?importFormatPreferences@28.36:28.59CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaw3 w(J2∏
iorg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?originalReader@118.31:118.45CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javawR w(`„
dorg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?auxParser@121.22:121.31VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javay y("
type	AuxParser"
isFinalfalse"ñ
declarationStringÄ<mark class="modifier"> </mark>AuxParser <mark class="class-field">auxParser</mark> = new DefaultAuxParser(result.getDatabase())*	auxParser2s
$org.jabref.logic.auxparser.AuxParserTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javay y(2É
4org.jabref.logic.importer.ParserResult.getDatabase()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javay> y(I2≤
corg.jabref.logic.auxparser.DefaultAuxParser.DefaultAuxParser(org.jabref.model.database.BibDatabase)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javay& y(62∞
aorg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?result@119.25:119.31CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javay7 y(=Ó
dorg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?auxResult@122.28:122.37VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaz z(%"
typeAuxParserResult"
isFinalfalse"â
declarationStringt<mark class="modifier"> </mark>AuxParserResult <mark class="class-field">auxResult</mark> = auxParser.parse(auxFile)*	auxResult2y
*org.jabref.logic.auxparser.AuxParserResultTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaz z(2ç
>org.jabref.logic.auxparser.AuxParser.parse(java.nio.file.Path)CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaz2 z(72≥
dorg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?auxParser@121.22:121.31CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaz( z(12±
borg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?auxFile@117.13:117.20CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaz8 z(?©
]org.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?db@123.24:123.26VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java{ {("
typeBibDatabase"
isFinalfalse"â
declarationStringt<mark class="modifier"> </mark>BibDatabase <mark class="class-field">db</mark> = auxResult.getGeneratedBibDatabase()*db2t
%org.jabref.model.database.BibDatabaseTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java{ {(2ì
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java{' {(>2≥
dorg.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()?auxResult@122.28:122.37CALLE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java{ {(&π;
4org.jabref.logic.auxparser.AuxParserTest.nestedAux()METHODG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÉ	 É("
isFinalfalse"»
declarationString≤<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">nestedAux</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>URISyntaxException<mark class="modifier"><mark class="modifier">,</mark></mark> IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*	nestedAux2Ü
5java.lang.Class.getResourceAsStream(java.lang.String)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÑ9 Ñ(L2t
#java.nio.file.Path.of(java.net.URI)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÖ Ö(2e
java.net.URL.toURI()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÖM Ö(R2~
-java.lang.Class.getResource(java.lang.String)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÖ3 Ö(>2ò
Gorg.jabref.logic.importer.fileformat.BibtexParser.parse(java.io.Reader)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaáL á(Q2Ö
4org.jabref.logic.importer.ParserResult.getDatabase()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaâ> â(I2è
>org.jabref.logic.auxparser.AuxParser.parse(java.nio.file.Path)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaä2 ä(72É
2org.jabref.model.database.BibDatabase.hasEntries()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaå; å(E2ï
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaå! å(82î
Corg.jabref.logic.auxparser.AuxParserResult.getUnresolvedKeysCount()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaç& ç(<2ï
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaé* é(A2É
2org.jabref.model.database.BibDatabase.getEntries()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaè" è(,2í
Aorg.jabref.logic.auxparser.AuxParserResult.getResolvedKeysCount()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaê& ê(:2è
>org.jabref.logic.auxparser.AuxParserResult.getFoundKeysInAux()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaë& ë(72è
>org.jabref.logic.auxparser.AuxParserResult.getFoundKeysInAux()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaí# í(42ï
Dorg.jabref.logic.auxparser.AuxParserResult.getCrossRefEntriesCount()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaíC í(Z2í
Aorg.jabref.logic.auxparser.AuxParserResult.getResolvedKeysCount()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaì ì(22î
Corg.jabref.logic.auxparser.AuxParserResult.getUnresolvedKeysCount()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaìA ì(W2ï
Dorg.jabref.logic.auxparser.AuxParserResult.getCrossRefEntriesCount()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaî& î(=2´
Zjava.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.nio.charset.Charset)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÜ4 Ü(E2¥
corg.jabref.logic.auxparser.DefaultAuxParser.DefaultAuxParser(org.jabref.model.database.BibDatabase)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaâ& â(62¢
Qorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?originalStream@132.20:132.34CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÜF Ü(T2ù
Lorg.jabref.logic.auxparser.AuxParserTest?importFormatPreferences@28.36:28.59CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaá3 á(J2¢
Qorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?originalReader@134.31:134.45CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaáR á(`2ö
Iorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?result@135.25:135.31CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaâ7 â(=2ù
Lorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?auxParser@137.22:137.31CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaä( ä(12õ
Jorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?auxFile@133.13:133.20CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaä8 ä(?2ù
Lorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?auxResult@138.28:138.37CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaå å( 2ù
Lorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?auxResult@138.28:138.37CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaç ç(%2ù
Lorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?auxResult@138.28:138.37CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaé  é()2ô
Horg.jabref.logic.auxparser.AuxParserTest.nestedAux()?newDB@142.24:142.29CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaè è(!2ù
Lorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?auxResult@138.28:138.37CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaê ê(%2ù
Lorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?auxResult@138.28:138.37CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaë ë(%2ù
Lorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?auxResult@138.28:138.37CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaí í("2ù
Lorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?auxResult@138.28:138.37CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaí9 í(B2ù
Lorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?auxResult@138.28:138.37CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaì ì(2ù
Lorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?auxResult@138.28:138.37CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaì7 ì(@2ù
Lorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?auxResult@138.28:138.37CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaî î(%2©
Qorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?originalStream@132.20:132.34DECLARATIONG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÑ Ñ("2¢
Jorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?auxFile@133.13:133.20DECLARATIONG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÖ Ö(2©
Qorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?originalReader@134.31:134.45DECLARATIONG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÜ Ü(-2°
Iorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?result@135.25:135.31DECLARATIONG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaá á(2§
Lorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?auxParser@137.22:137.31DECLARATIONG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaâ â(2§
Lorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?auxResult@138.28:138.37DECLARATIONG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaä ä(%2†
Horg.jabref.logic.auxparser.AuxParserTest.nestedAux()?newDB@142.24:142.29DECLARATIONG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaé é(2\
voidRETURN_TYPEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÉ É(˜
Qorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?originalStream@132.20:132.34VARIABLEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÑ Ñ(""
typeInputStream"
isFinalfalse"®
declarationStringí<mark class="modifier"> </mark>InputStream <mark class="class-field">originalStream</mark> = AuxParserTest.class.getResourceAsStream("origin.bib")*originalStream2d
java.io.InputStreamTYPEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÑ Ñ(2Ü
5java.lang.Class.getResourceAsStream(java.lang.String)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÑ9 Ñ(L∞
Jorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?auxFile@133.13:133.20VARIABLEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÖ Ö("
typePath"
isFinalfalse"£
declarationStringç<mark class="modifier"> </mark>Path <mark class="class-field">auxFile</mark> = Path.of(AuxParserTest.class.getResource("nested.aux").toURI())*auxFile2c
java.nio.file.PathTYPEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÖ Ö(2t
#java.nio.file.Path.of(java.net.URI)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÖ Ö(2e
java.net.URL.toURI()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÖM Ö(R2~
-java.lang.Class.getResource(java.lang.String)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÖ3 Ö(>€
Qorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?originalReader@134.31:134.45VARIABLEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÜ Ü(-"
typeInputStreamReader"
isFinalfalse"∂
declarationString†<mark class="modifier"> </mark>InputStreamReader <mark class="class-field">originalReader</mark> = new InputStreamReader(originalStream, StandardCharsets.UTF_8)*originalReader2j
java.io.InputStreamReaderTYPEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÜ Ü(2´
Zjava.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.nio.charset.Charset)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÜ4 Ü(E2¢
Qorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?originalStream@132.20:132.34CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaÜF Ü(T’
Iorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?result@135.25:135.31VARIABLEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaá á("
typeParserResult"
isFinalfalse"´
declarationStringï<mark class="modifier"> </mark>ParserResult <mark class="class-field">result</mark> = new BibtexParser(importFormatPreferences).parse(originalReader)*result2w
&org.jabref.logic.importer.ParserResultTYPEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaá á(2ò
Gorg.jabref.logic.importer.fileformat.BibtexParser.parse(java.io.Reader)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaáL á(Q2ù
Lorg.jabref.logic.auxparser.AuxParserTest?importFormatPreferences@28.36:28.59CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaá3 á(J2¢
Qorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?originalReader@134.31:134.45CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaáR á(`Ω
Lorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?auxParser@137.22:137.31VARIABLEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaâ â("
type	AuxParser"
isFinalfalse"ñ
declarationStringÄ<mark class="modifier"> </mark>AuxParser <mark class="class-field">auxParser</mark> = new DefaultAuxParser(result.getDatabase())*	auxParser2u
$org.jabref.logic.auxparser.AuxParserTYPEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaâ â(2Ö
4org.jabref.logic.importer.ParserResult.getDatabase()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaâ> â(I2¥
corg.jabref.logic.auxparser.DefaultAuxParser.DefaultAuxParser(org.jabref.model.database.BibDatabase)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaâ& â(62ö
Iorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?result@135.25:135.31CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaâ7 â(=∞
Lorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?auxResult@138.28:138.37VARIABLEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaä ä(%"
typeAuxParserResult"
isFinalfalse"â
declarationStringt<mark class="modifier"> </mark>AuxParserResult <mark class="class-field">auxResult</mark> = auxParser.parse(auxFile)*	auxResult2{
*org.jabref.logic.auxparser.AuxParserResultTYPEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaä ä(2è
>org.jabref.logic.auxparser.AuxParser.parse(java.nio.file.Path)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaä2 ä(72ù
Lorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?auxParser@137.22:137.31CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaä( ä(12õ
Jorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?auxFile@133.13:133.20CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaä8 ä(?ä
Horg.jabref.logic.auxparser.AuxParserTest.nestedAux()?newDB@142.24:142.29VARIABLEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaé é("
typeBibDatabase"
isFinalfalse"å
declarationStringw<mark class="modifier"> </mark>BibDatabase <mark class="class-field">newDB</mark> = auxResult.getGeneratedBibDatabase()*newDB2v
%org.jabref.model.database.BibDatabaseTYPEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaé é(2ï
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaé* é(A2ù
Lorg.jabref.logic.auxparser.AuxParserTest.nestedAux()?auxResult@138.28:138.37CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaé  é()ü;
3org.jabref.logic.auxparser.AuxParserTest.crossRef()METHODG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaô	 ô("
isFinalfalse"«
declarationString±<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">crossRef</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>URISyntaxException<mark class="modifier"><mark class="modifier">,</mark></mark> IOException"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*crossRef2Ü
5java.lang.Class.getResourceAsStream(java.lang.String)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaö9 ö(L2t
#java.nio.file.Path.of(java.net.URI)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaõ õ(2e
java.net.URL.toURI()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaõO õ(T2~
-java.lang.Class.getResource(java.lang.String)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaõ3 õ(>2ò
Gorg.jabref.logic.importer.fileformat.BibtexParser.parse(java.io.Reader)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaùL ù(Q2Ö
4org.jabref.logic.importer.ParserResult.getDatabase()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaü> ü(I2è
>org.jabref.logic.auxparser.AuxParser.parse(java.nio.file.Path)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java†2 †(72É
2org.jabref.model.database.BibDatabase.hasEntries()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java¢; ¢(E2ï
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java¢! ¢(82î
Corg.jabref.logic.auxparser.AuxParserResult.getUnresolvedKeysCount()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java£& £(<2ï
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java§* §(A2É
2org.jabref.model.database.BibDatabase.getEntries()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java•" •(,2í
Aorg.jabref.logic.auxparser.AuxParserResult.getResolvedKeysCount()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java¶& ¶(:2è
>org.jabref.logic.auxparser.AuxParserResult.getFoundKeysInAux()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaß& ß(72è
>org.jabref.logic.auxparser.AuxParserResult.getFoundKeysInAux()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java®# ®(42ï
Dorg.jabref.logic.auxparser.AuxParserResult.getCrossRefEntriesCount()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java®C ®(Z2í
Aorg.jabref.logic.auxparser.AuxParserResult.getResolvedKeysCount()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java© ©(22î
Corg.jabref.logic.auxparser.AuxParserResult.getUnresolvedKeysCount()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java©A ©(W2ï
Dorg.jabref.logic.auxparser.AuxParserResult.getCrossRefEntriesCount()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java™& ™(=2´
Zjava.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.nio.charset.Charset)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaú4 ú(E2¥
corg.jabref.logic.auxparser.DefaultAuxParser.DefaultAuxParser(org.jabref.model.database.BibDatabase)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaü& ü(62°
Porg.jabref.logic.auxparser.AuxParserTest.crossRef()?originalStream@154.20:154.34CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaúF ú(T2ù
Lorg.jabref.logic.auxparser.AuxParserTest?importFormatPreferences@28.36:28.59CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaù3 ù(J2°
Porg.jabref.logic.auxparser.AuxParserTest.crossRef()?originalReader@156.31:156.45CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaùR ù(`2ô
Horg.jabref.logic.auxparser.AuxParserTest.crossRef()?result@157.25:157.31CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaü7 ü(=2ú
Korg.jabref.logic.auxparser.AuxParserTest.crossRef()?auxParser@159.22:159.31CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java†( †(12ö
Iorg.jabref.logic.auxparser.AuxParserTest.crossRef()?auxFile@155.13:155.20CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java†8 †(?2ú
Korg.jabref.logic.auxparser.AuxParserTest.crossRef()?auxResult@160.28:160.37CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java¢ ¢( 2ú
Korg.jabref.logic.auxparser.AuxParserTest.crossRef()?auxResult@160.28:160.37CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java£ £(%2ú
Korg.jabref.logic.auxparser.AuxParserTest.crossRef()?auxResult@160.28:160.37CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java§  §()2ò
Gorg.jabref.logic.auxparser.AuxParserTest.crossRef()?newDB@164.24:164.29CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java• •(!2ú
Korg.jabref.logic.auxparser.AuxParserTest.crossRef()?auxResult@160.28:160.37CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java¶ ¶(%2ú
Korg.jabref.logic.auxparser.AuxParserTest.crossRef()?auxResult@160.28:160.37CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaß ß(%2ú
Korg.jabref.logic.auxparser.AuxParserTest.crossRef()?auxResult@160.28:160.37CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java® ®("2ú
Korg.jabref.logic.auxparser.AuxParserTest.crossRef()?auxResult@160.28:160.37CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java®9 ®(B2ú
Korg.jabref.logic.auxparser.AuxParserTest.crossRef()?auxResult@160.28:160.37CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java© ©(2ú
Korg.jabref.logic.auxparser.AuxParserTest.crossRef()?auxResult@160.28:160.37CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java©7 ©(@2ú
Korg.jabref.logic.auxparser.AuxParserTest.crossRef()?auxResult@160.28:160.37CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java™ ™(%2®
Porg.jabref.logic.auxparser.AuxParserTest.crossRef()?originalStream@154.20:154.34DECLARATIONG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaö ö("2°
Iorg.jabref.logic.auxparser.AuxParserTest.crossRef()?auxFile@155.13:155.20DECLARATIONG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaõ õ(2®
Porg.jabref.logic.auxparser.AuxParserTest.crossRef()?originalReader@156.31:156.45DECLARATIONG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaú ú(-2†
Horg.jabref.logic.auxparser.AuxParserTest.crossRef()?result@157.25:157.31DECLARATIONG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaù ù(2£
Korg.jabref.logic.auxparser.AuxParserTest.crossRef()?auxParser@159.22:159.31DECLARATIONG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaü ü(2£
Korg.jabref.logic.auxparser.AuxParserTest.crossRef()?auxResult@160.28:160.37DECLARATIONG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java† †(%2ü
Gorg.jabref.logic.auxparser.AuxParserTest.crossRef()?newDB@164.24:164.29DECLARATIONG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java§ §(2\
voidRETURN_TYPEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaô ô(ˆ
Porg.jabref.logic.auxparser.AuxParserTest.crossRef()?originalStream@154.20:154.34VARIABLEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaö ö(""
typeInputStream"
isFinalfalse"®
declarationStringí<mark class="modifier"> </mark>InputStream <mark class="class-field">originalStream</mark> = AuxParserTest.class.getResourceAsStream("origin.bib")*originalStream2d
java.io.InputStreamTYPEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaö ö(2Ü
5java.lang.Class.getResourceAsStream(java.lang.String)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaö9 ö(L±
Iorg.jabref.logic.auxparser.AuxParserTest.crossRef()?auxFile@155.13:155.20VARIABLEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaõ õ("
typePath"
isFinalfalse"•
declarationStringè<mark class="modifier"> </mark>Path <mark class="class-field">auxFile</mark> = Path.of(AuxParserTest.class.getResource("crossref.aux").toURI())*auxFile2c
java.nio.file.PathTYPEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaõ õ(2t
#java.nio.file.Path.of(java.net.URI)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaõ õ(2e
java.net.URL.toURI()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaõO õ(T2~
-java.lang.Class.getResource(java.lang.String)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaõ3 õ(>Ÿ
Porg.jabref.logic.auxparser.AuxParserTest.crossRef()?originalReader@156.31:156.45VARIABLEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaú ú(-"
typeInputStreamReader"
isFinalfalse"∂
declarationString†<mark class="modifier"> </mark>InputStreamReader <mark class="class-field">originalReader</mark> = new InputStreamReader(originalStream, StandardCharsets.UTF_8)*originalReader2j
java.io.InputStreamReaderTYPEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaú ú(2´
Zjava.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.nio.charset.Charset)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaú4 ú(E2°
Porg.jabref.logic.auxparser.AuxParserTest.crossRef()?originalStream@154.20:154.34CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaúF ú(T”
Horg.jabref.logic.auxparser.AuxParserTest.crossRef()?result@157.25:157.31VARIABLEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaù ù("
typeParserResult"
isFinalfalse"´
declarationStringï<mark class="modifier"> </mark>ParserResult <mark class="class-field">result</mark> = new BibtexParser(importFormatPreferences).parse(originalReader)*result2w
&org.jabref.logic.importer.ParserResultTYPEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaù ù(2ò
Gorg.jabref.logic.importer.fileformat.BibtexParser.parse(java.io.Reader)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaùL ù(Q2ù
Lorg.jabref.logic.auxparser.AuxParserTest?importFormatPreferences@28.36:28.59CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaù3 ù(J2°
Porg.jabref.logic.auxparser.AuxParserTest.crossRef()?originalReader@156.31:156.45CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaùR ù(`ª
Korg.jabref.logic.auxparser.AuxParserTest.crossRef()?auxParser@159.22:159.31VARIABLEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaü ü("
type	AuxParser"
isFinalfalse"ñ
declarationStringÄ<mark class="modifier"> </mark>AuxParser <mark class="class-field">auxParser</mark> = new DefaultAuxParser(result.getDatabase())*	auxParser2u
$org.jabref.logic.auxparser.AuxParserTYPEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaü ü(2Ö
4org.jabref.logic.importer.ParserResult.getDatabase()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaü> ü(I2¥
corg.jabref.logic.auxparser.DefaultAuxParser.DefaultAuxParser(org.jabref.model.database.BibDatabase)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaü& ü(62ô
Horg.jabref.logic.auxparser.AuxParserTest.crossRef()?result@157.25:157.31CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaü7 ü(=≠
Korg.jabref.logic.auxparser.AuxParserTest.crossRef()?auxResult@160.28:160.37VARIABLEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java† †(%"
typeAuxParserResult"
isFinalfalse"â
declarationStringt<mark class="modifier"> </mark>AuxParserResult <mark class="class-field">auxResult</mark> = auxParser.parse(auxFile)*	auxResult2{
*org.jabref.logic.auxparser.AuxParserResultTYPEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java† †(2è
>org.jabref.logic.auxparser.AuxParser.parse(java.nio.file.Path)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java†2 †(72ú
Korg.jabref.logic.auxparser.AuxParserTest.crossRef()?auxParser@159.22:159.31CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java†( †(12ö
Iorg.jabref.logic.auxparser.AuxParserTest.crossRef()?auxFile@155.13:155.20CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java†8 †(?à
Gorg.jabref.logic.auxparser.AuxParserTest.crossRef()?newDB@164.24:164.29VARIABLEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java§ §("
typeBibDatabase"
isFinalfalse"å
declarationStringw<mark class="modifier"> </mark>BibDatabase <mark class="class-field">newDB</mark> = auxResult.getGeneratedBibDatabase()*newDB2v
%org.jabref.model.database.BibDatabaseTYPEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java§ §(2ï
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java§* §(A2ú
Korg.jabref.logic.auxparser.AuxParserTest.crossRef()?auxResult@160.28:160.37CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java§  §()Í)
7org.jabref.logic.auxparser.AuxParserTest.fileNotFound()METHODG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaØ	 Ø("
isFinalfalse"¨
declarationStringñ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">fileNotFound</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*fileNotFound2è
>org.jabref.logic.auxparser.AuxParser.parse(java.nio.file.Path)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java±. ±(32ç
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java±9 ±(;2É
2org.jabref.model.database.BibDatabase.hasEntries()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java≥8 ≥(B2ï
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java≥ ≥(52î
Corg.jabref.logic.auxparser.AuxParserResult.getUnresolvedKeysCount()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java¥" ¥(82ï
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaµ& µ(=2É
2org.jabref.model.database.BibDatabase.getEntries()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java∂ ∂((2í
Aorg.jabref.logic.auxparser.AuxParserResult.getResolvedKeysCount()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java∑" ∑(62è
>org.jabref.logic.auxparser.AuxParserResult.getFoundKeysInAux()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java∏" ∏(32è
>org.jabref.logic.auxparser.AuxParserResult.getFoundKeysInAux()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaπ π(02ï
Dorg.jabref.logic.auxparser.AuxParserResult.getCrossRefEntriesCount()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaπ? π(V2í
Aorg.jabref.logic.auxparser.AuxParserResult.getResolvedKeysCount()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java∫ ∫(.2î
Corg.jabref.logic.auxparser.AuxParserResult.getUnresolvedKeysCount()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java∫= ∫(S2ï
Dorg.jabref.logic.auxparser.AuxParserResult.getCrossRefEntriesCount()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaª" ª(92¥
corg.jabref.logic.auxparser.DefaultAuxParser.DefaultAuxParser(org.jabref.model.database.BibDatabase)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java∞" ∞(22Ñ
3org.jabref.model.database.BibDatabase.BibDatabase()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java∞7 ∞(B2†
Oorg.jabref.logic.auxparser.AuxParserTest.fileNotFound()?auxParser@176.18:176.27CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java±$ ±(-2†
Oorg.jabref.logic.auxparser.AuxParserTest.fileNotFound()?auxResult@177.24:177.33CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java≥ ≥(2†
Oorg.jabref.logic.auxparser.AuxParserTest.fileNotFound()?auxResult@177.24:177.33CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java¥ ¥(!2†
Oorg.jabref.logic.auxparser.AuxParserTest.fileNotFound()?auxResult@177.24:177.33CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaµ µ(%2ú
Korg.jabref.logic.auxparser.AuxParserTest.fileNotFound()?newDB@181.20:181.25CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java∂ ∂(2†
Oorg.jabref.logic.auxparser.AuxParserTest.fileNotFound()?auxResult@177.24:177.33CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java∑ ∑(!2†
Oorg.jabref.logic.auxparser.AuxParserTest.fileNotFound()?auxResult@177.24:177.33CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java∏ ∏(!2†
Oorg.jabref.logic.auxparser.AuxParserTest.fileNotFound()?auxResult@177.24:177.33CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaπ π(2†
Oorg.jabref.logic.auxparser.AuxParserTest.fileNotFound()?auxResult@177.24:177.33CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaπ5 π(>2†
Oorg.jabref.logic.auxparser.AuxParserTest.fileNotFound()?auxResult@177.24:177.33CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java∫ ∫(2†
Oorg.jabref.logic.auxparser.AuxParserTest.fileNotFound()?auxResult@177.24:177.33CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java∫3 ∫(<2†
Oorg.jabref.logic.auxparser.AuxParserTest.fileNotFound()?auxResult@177.24:177.33CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaª ª(!2ß
Oorg.jabref.logic.auxparser.AuxParserTest.fileNotFound()?auxParser@176.18:176.27DECLARATIONG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java∞ ∞(2ß
Oorg.jabref.logic.auxparser.AuxParserTest.fileNotFound()?auxResult@177.24:177.33DECLARATIONG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java± ±(!2£
Korg.jabref.logic.auxparser.AuxParserTest.fileNotFound()?newDB@181.20:181.25DECLARATIONG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaµ µ(2\
voidRETURN_TYPEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaØ Ø(û
Oorg.jabref.logic.auxparser.AuxParserTest.fileNotFound()?auxParser@176.18:176.27VARIABLEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java∞ ∞("
type	AuxParser"
isFinalfalse"í
declarationString}<mark class="modifier"> </mark>AuxParser <mark class="class-field">auxParser</mark> = new DefaultAuxParser(new BibDatabase())*	auxParser2u
$org.jabref.logic.auxparser.AuxParserTYPEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java∞ ∞(2¥
corg.jabref.logic.auxparser.DefaultAuxParser.DefaultAuxParser(org.jabref.model.database.BibDatabase)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java∞" ∞(22Ñ
3org.jabref.model.database.BibDatabase.BibDatabase()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java∞7 ∞(Bº
Oorg.jabref.logic.auxparser.AuxParserTest.fileNotFound()?auxResult@177.24:177.33VARIABLEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java± ±(!"
typeAuxParserResult"
isFinalfalse"ù
declarationStringá<mark class="modifier"> </mark>AuxParserResult <mark class="class-field">auxResult</mark> = auxParser.parse(Path.of("unknownfile.aux"))*	auxResult2{
*org.jabref.logic.auxparser.AuxParserResultTYPEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java± ±(2è
>org.jabref.logic.auxparser.AuxParser.parse(java.nio.file.Path)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java±. ±(32ç
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java±9 ±(;2†
Oorg.jabref.logic.auxparser.AuxParserTest.fileNotFound()?auxParser@176.18:176.27CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java±$ ±(-ê
Korg.jabref.logic.auxparser.AuxParserTest.fileNotFound()?newDB@181.20:181.25VARIABLEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaµ µ("
typeBibDatabase"
isFinalfalse"å
declarationStringw<mark class="modifier"> </mark>BibDatabase <mark class="class-field">newDB</mark> = auxResult.getGeneratedBibDatabase()*newDB2v
%org.jabref.model.database.BibDatabaseTYPEG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaµ µ(2ï
Dorg.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaµ& µ(=2†
Oorg.jabref.logic.auxparser.AuxParserTest.fileNotFound()?auxResult@177.24:177.33CALLG
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.javaµ µ(%á
Lorg.jabref.logic.auxparser.AuxParserTest?importFormatPreferences@28.36:28.59VARIABLEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java$ (;"
isFinalfalse"
typeImportFormatPreferences"ã
declarationStringv<mark class="modifier">private </mark>ImportFormatPreferences <mark class="class-field">importFormatPreferences</mark>"
isStaticfalse"
accessprivate*importFormatPreferences2f
ImportFormatPreferencesTYPEE
;src\test\java\org\jabref\logic\auxparser\AuxParserTest.java (#