
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.javaΩ
*org.jabref.logic.exporter.AtomicFileWriterCLASSG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java ("$
packageorg.jabref.logic.exporter"
isFinalfalse"
inner classfalse"

isAbstractfalse"®
declarationStringí<mark class="modifier">public </mark><mark class="modifier">class </mark>AtomicFileWriter<mark class="modifier"> extends </mark>OutputStreamWriter"
accesspublic*AtomicFileWriter2¡
iorg.jabref.logic.exporter.AtomicFileWriter.AtomicFileWriter(java.nio.file.Path, java.nio.charset.Charset)DECLARATIONG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java (2 
rorg.jabref.logic.exporter.AtomicFileWriter.AtomicFileWriter(java.nio.file.Path, java.nio.charset.Charset, boolean)DECLARATIONG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java (2ö
Borg.jabref.logic.exporter.AtomicFileWriter.write(java.lang.String)DECLARATIONG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java! !(2ò
@org.jabref.logic.exporter.AtomicFileWriter.hasEncodingProblems()DECLARATIONG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java- -(&2ò
@org.jabref.logic.exporter.AtomicFileWriter.getEncodingProblems()DECLARATIONG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java1 1(-2ñ
>org.jabref.logic.exporter.AtomicFileWriter?encoder@20.33:20.40DECLARATIONG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java! ((2†
Horg.jabref.logic.exporter.AtomicFileWriter?problemCharacters@21.33:21.50DECLARATIONG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java! (22m
java.io.OutputStreamWriterEXTENDG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java& (8Ñ
iorg.jabref.logic.exporter.AtomicFileWriter.AtomicFileWriter(java.nio.file.Path, java.nio.charset.Charset)CONSTRUCTORG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java ("è
declarationString˘<mark class="modifier">public </mark><mark class="method">AtomicFileWriter</mark>(Path file<mark class="modifier"><mark class="modifier">,</mark></mark> Charset encoding)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException*AtomicFileWriter2ø
norg.jabref.logic.exporter.AtomicFileWriter.AtomicFileWriter(java.nio.file.Path, java.nio.charset.Charset)!fileCALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java (2√
rorg.jabref.logic.exporter.AtomicFileWriter.AtomicFileWriter(java.nio.file.Path, java.nio.charset.Charset)!encodingCALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java (2ƒ
norg.jabref.logic.exporter.AtomicFileWriter.AtomicFileWriter(java.nio.file.Path, java.nio.charset.Charset)!file	PARAMETERG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java! (%2»
rorg.jabref.logic.exporter.AtomicFileWriter.AtomicFileWriter(java.nio.file.Path, java.nio.charset.Charset)!encoding	PARAMETERG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java/ (72Ç
*org.jabref.logic.exporter.AtomicFileWriterRETURN_TYPEG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java@ (KÔ
norg.jabref.logic.exporter.AtomicFileWriter.AtomicFileWriter(java.nio.file.Path, java.nio.charset.Charset)!file	PARAMETERG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java! (%"
typePath"
isFinalfalse"
declarationString	Path file*file2c
java.nio.file.PathTYPEG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java ( á
rorg.jabref.logic.exporter.AtomicFileWriter.AtomicFileWriter(java.nio.file.Path, java.nio.charset.Charset)!encoding	PARAMETERG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java/ (7"
typeCharset"
isFinalfalse"%
declarationStringCharset encoding*encoding2i
java.nio.charset.CharsetTYPEG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java' (.à
rorg.jabref.logic.exporter.AtomicFileWriter.AtomicFileWriter(java.nio.file.Path, java.nio.charset.Charset, boolean)CONSTRUCTORG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java ("˝
declarationStringÁ<mark class="modifier">public </mark><mark class="method">AtomicFileWriter</mark>(Path file<mark class="modifier"><mark class="modifier">,</mark></mark> Charset encoding<mark class="modifier"><mark class="modifier">,</mark></mark> <mark class="modifier">boolean</mark> keepBackup)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException*AtomicFileWriter2v
%java.nio.charset.Charset.newEncoder()CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java (%2µ
dorg.jabref.logic.exporter.AtomicFileOutputStream.AtomicFileOutputStream(java.nio.file.Path, boolean)CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java ((2Æ
]java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream, java.nio.charset.Charset)CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java (2»
worg.jabref.logic.exporter.AtomicFileWriter.AtomicFileWriter(java.nio.file.Path, java.nio.charset.Charset, boolean)!fileCALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java) (-2Œ
}org.jabref.logic.exporter.AtomicFileWriter.AtomicFileWriter(java.nio.file.Path, java.nio.charset.Charset, boolean)!keepBackupCALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java/ (92Ã
{org.jabref.logic.exporter.AtomicFileWriter.AtomicFileWriter(java.nio.file.Path, java.nio.charset.Charset, boolean)!encodingCALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java< (D2è
>org.jabref.logic.exporter.AtomicFileWriter?encoder@20.33:20.40CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java (2Ã
{org.jabref.logic.exporter.AtomicFileWriter.AtomicFileWriter(java.nio.file.Path, java.nio.charset.Charset, boolean)!encodingCALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java (2Õ
worg.jabref.logic.exporter.AtomicFileWriter.AtomicFileWriter(java.nio.file.Path, java.nio.charset.Charset, boolean)!file	PARAMETERG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java! (%2—
{org.jabref.logic.exporter.AtomicFileWriter.AtomicFileWriter(java.nio.file.Path, java.nio.charset.Charset, boolean)!encoding	PARAMETERG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java/ (72”
}org.jabref.logic.exporter.AtomicFileWriter.AtomicFileWriter(java.nio.file.Path, java.nio.charset.Charset, boolean)!keepBackup	PARAMETERG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.javaA (K2Ç
*org.jabref.logic.exporter.AtomicFileWriterRETURN_TYPEG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.javaT (_¯
worg.jabref.logic.exporter.AtomicFileWriter.AtomicFileWriter(java.nio.file.Path, java.nio.charset.Charset, boolean)!file	PARAMETERG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java! (%"
typePath"
isFinalfalse"
declarationString	Path file*file2c
java.nio.file.PathTYPEG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java ( ê
{org.jabref.logic.exporter.AtomicFileWriter.AtomicFileWriter(java.nio.file.Path, java.nio.charset.Charset, boolean)!encoding	PARAMETERG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java/ (7"
typeCharset"
isFinalfalse"%
declarationStringCharset encoding*encoding2i
java.nio.charset.CharsetTYPEG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java' (.£
}org.jabref.logic.exporter.AtomicFileWriter.AtomicFileWriter(java.nio.file.Path, java.nio.charset.Charset, boolean)!keepBackup	PARAMETERG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.javaA (K"
typeboolean"
isFinalfalse"E
declarationString0<mark class="modifier">boolean</mark> keepBackup*
keepBackup2X
booleanTYPEG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java9 (@õ
Borg.jabref.logic.exporter.AtomicFileWriter.write(java.lang.String)METHODG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java! !("
isFinalfalse"à
declarationStringÚ<mark class="annotation">@Override</mark> <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">write</mark>(String str)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>IOException"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*write2w
&java.io.Writer.write(java.lang.String)CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java" "(2í
Ajava.nio.charset.CharsetEncoder.canEncode(java.lang.CharSequence)CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java# #(2j
java.lang.String.length()CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java$$ $(*2m
java.lang.String.charAt(int)CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java%% %(+2Ä
/java.nio.charset.CharsetEncoder.canEncode(char)CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java& &(&2e
java.util.Set.add(E)CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java'& '()2ó
Forg.jabref.logic.exporter.AtomicFileWriter.write(java.lang.String)!strCALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java" "(2è
>org.jabref.logic.exporter.AtomicFileWriter?encoder@20.33:20.40CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java# #(2ó
Forg.jabref.logic.exporter.AtomicFileWriter.write(java.lang.String)!strCALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java# #("2°
Porg.jabref.logic.exporter.AtomicFileWriter.write(java.lang.String)?i@36.21:36.22CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java$ $(2ó
Forg.jabref.logic.exporter.AtomicFileWriter.write(java.lang.String)!strCALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java$  $(#2°
Porg.jabref.logic.exporter.AtomicFileWriter.write(java.lang.String)?i@36.21:36.22CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java$. $(/2ó
Forg.jabref.logic.exporter.AtomicFileWriter.write(java.lang.String)!strCALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java%! %($2°
Porg.jabref.logic.exporter.AtomicFileWriter.write(java.lang.String)?i@36.21:36.22CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java%, %(-2è
>org.jabref.logic.exporter.AtomicFileWriter?encoder@20.33:20.40CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java& &(2©
Xorg.jabref.logic.exporter.AtomicFileWriter.write(java.lang.String)?character@37.21:37.30CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java&' &(02ô
Horg.jabref.logic.exporter.AtomicFileWriter?problemCharacters@21.33:21.50CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java' '(%2©
Xorg.jabref.logic.exporter.AtomicFileWriter.write(java.lang.String)?character@37.21:37.30CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java'* '(32ú
Forg.jabref.logic.exporter.AtomicFileWriter.write(java.lang.String)!str	PARAMETERG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java! !( 2®
Porg.jabref.logic.exporter.AtomicFileWriter.write(java.lang.String)?i@36.21:36.22DECLARATIONG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java$ $(2∞
Xorg.jabref.logic.exporter.AtomicFileWriter.write(java.lang.String)?character@37.21:37.30DECLARATIONG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java% %(2\
voidRETURN_TYPEG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java! !(õ
Porg.jabref.logic.exporter.AtomicFileWriter.write(java.lang.String)?i@36.21:36.22VARIABLEG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java$ $("
typeint"
isFinalfalse"|
declarationStringg<mark class="modifier"> </mark><mark class="modifier">int</mark> <mark class="class-field">i</mark> = 0*i2T
intTYPEG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java$ $(—
Xorg.jabref.logic.exporter.AtomicFileWriter.write(java.lang.String)?character@37.21:37.30VARIABLEG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java% %("
typechar"
isFinalfalse"s
declarationString^<mark class="modifier"> </mark>char <mark class="class-field">character</mark> = str.charAt(i)*	character2U
charTYPEG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java% %(2m
java.lang.String.charAt(int)CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java%% %(+2ó
Forg.jabref.logic.exporter.AtomicFileWriter.write(java.lang.String)!strCALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java%! %($2°
Porg.jabref.logic.exporter.AtomicFileWriter.write(java.lang.String)?i@36.21:36.22CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java%, %(-«
Forg.jabref.logic.exporter.AtomicFileWriter.write(java.lang.String)!str	PARAMETERG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java! !( "
typeString"
isFinalfalse"
declarationString
String str*str2a
java.lang.StringTYPEG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java! !(Ä
@org.jabref.logic.exporter.AtomicFileWriter.hasEncodingProblems()METHODG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java- -(&"
isFinalfalse"ë
declarationString|<mark class="modifier">public </mark><mark class="modifier">boolean</mark> <mark class="method">hasEncodingProblems</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeboolean*hasEncodingProblems2h
java.util.Set.isEmpty()CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java." .()2ô
Horg.jabref.logic.exporter.AtomicFileWriter?problemCharacters@21.33:21.50CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java. .(!2_
booleanRETURN_TYPEG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java- -(ù
@org.jabref.logic.exporter.AtomicFileWriter.getEncodingProblems()METHODG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java1 1(-"
isFinalfalse"Ä
declarationStringk<mark class="modifier">public </mark>Set&lt;Character&gt; <mark class="method">getEncodingProblems</mark>()"
isStaticfalse"
accesspublic"

isAbstractfalse"
typeSet<Character>*getEncodingProblems2í
Ajava.util.Collections.unmodifiableSet(java.util.Set<? extends T>)CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java2 2(*2ô
Horg.jabref.logic.exporter.AtomicFileWriter?problemCharacters@21.33:21.50CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java2+ 2(<2e
java.util.SetRETURN_TYPEG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java1 1(2t
java.lang.CharacterRETURN_TYPE_ARGUMENTG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java1 1(Ù
>org.jabref.logic.exporter.AtomicFileWriter?encoder@20.33:20.40VALUEG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java! (("
isFinaltrue"
typeCharsetEncoder"ó
declarationStringÅ<mark class="modifier">private </mark><mark class="modifier">final </mark>CharsetEncoder <mark class="class-field">encoder</mark>"
isStaticfalse"
accessprivate*encoder2p
java.nio.charset.CharsetEncoderTYPEG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java ( 
Horg.jabref.logic.exporter.AtomicFileWriter?problemCharacters@21.33:21.50VALUEG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java! (2"
isFinaltrue"
typeSet<Character>"¥
declarationStringû<mark class="modifier">private </mark><mark class="modifier">final </mark>Set<Character> <mark class="class-field">problemCharacters</mark> = new TreeSet<>();"
isStaticfalse"
accessprivate*problemCharacters2^
java.util.SetTYPEG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java (2m
java.lang.CharacterTYPE_ARGUMENTG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java (2l
java.util.TreeSet.TreeSet()CALLG
=src\main\java\org\jabref\logic\exporter\AtomicFileWriter.java9 (B