
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaü
-org.jabref.logic.exporter.GroupSerializerTestCLASSJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java" "("$
packageorg.jabref.logic.exporter"
isFinalfalse"
inner classfalse"

isAbstractfalse"k
declarationStringV<mark class="modifier"> </mark><mark class="modifier">class </mark>GroupSerializerTest"
accesspackage_private*GroupSerializerTest2ê
5org.jabref.logic.exporter.GroupSerializerTest.setUp()DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java'	 '(2©
Norg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAllEntriesGroup()DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java,	 ,('2ß
Lorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroup()DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java3	 3(%2Ω
borg.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithIconAndDescription()DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java:	 :(;2∑
\org.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithEscapedSlash()DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaF	 F(52¨
Qorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSimpleKeywordGroup()DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaM	 M(*2´
Porg.jabref.logic.exporter.GroupSerializerTest.serializeSingleRegexKeywordGroup()DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaT	 T()2•
Jorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSearchGroup()DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java[	 [(#2Æ
Sorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSearchGroupWithRegex()DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javab	 b(,2Ø
Torg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAutomaticKeywordGroup()DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javai	 i(-2Æ
Sorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAutomaticPersonGroup()DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javap	 p(,2¢
Gorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleTexGroup()DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaw	 w( 2¶
Korg.jabref.logic.exporter.GroupSerializerTest.getTreeAsStringInSimpleTree()DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java~	 ~($2©
Lorg.jabref.logic.exporter.GroupSerializerTest.getTreeAsStringInComplexTree()DECLARATIONL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaå	 å(%2§
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java$ $(+É
5org.jabref.logic.exporter.GroupSerializerTest.setUp()METHODJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java'	 '("
isFinalfalse"¯
declarationString‚<mark class="annotation">@BeforeEach</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">setUp</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*setUp2è
;org.jabref.logic.exporter.GroupSerializer.GroupSerializer()CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java( ((-2ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java( ((2_
voidRETURN_TYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java' '(·
Norg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAllEntriesGroup()METHODJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java,	 ,('"
isFinalfalse"æ
declarationString®<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">serializeSingleAllEntriesGroup</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*serializeSingleAllEntriesGroup2≤
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java.5 .(B2™
Vorg.jabref.model.groups.GroupTreeNode.fromGroup(org.jabref.model.groups.AbstractGroup)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java.Q .(Z2z
&java.util.Collections.singletonList(T)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java/! /(.2ù
Iorg.jabref.model.groups.AllEntriesGroup.AllEntriesGroup(java.lang.String)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java-$ -(32ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java.% .(42¥
`org.jabref.logic.exporter.GroupSerializerTest.serializeSingleAllEntriesGroup()?group@45.24:45.29CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java.[ .(`2º
horg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAllEntriesGroup()?serialization@46.21:46.34CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java/F /(S2ª
`org.jabref.logic.exporter.GroupSerializerTest.serializeSingleAllEntriesGroup()?group@45.24:45.29DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java- -(2√
horg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAllEntriesGroup()?serialization@46.21:46.34DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java. .("2_
voidRETURN_TYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java, ,(é
`org.jabref.logic.exporter.GroupSerializerTest.serializeSingleAllEntriesGroup()?group@45.24:45.29VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java- -("
typeAllEntriesGroup"
isFinalfalse"Ñ
declarationStringo<mark class="modifier"> </mark>AllEntriesGroup <mark class="class-field">group</mark> = new AllEntriesGroup("")*group2{
'org.jabref.model.groups.AllEntriesGroupTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java- -(2ù
Iorg.jabref.model.groups.AllEntriesGroup.AllEntriesGroup(java.lang.String)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java-$ -(3∂

horg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAllEntriesGroup()?serialization@46.21:46.34VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java. .(""
typeList<String>"
isFinalfalse"∞
declarationStringö<mark class="modifier"> </mark>List<String> <mark class="class-field">serialization</mark> = groupSerializer.serializeTree(GroupTreeNode.fromGroup(group))*serialization2b
java.util.ListTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java. .(2m
java.lang.StringTYPE_ARGUMENTJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java. .(2≤
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java.5 .(B2™
Vorg.jabref.model.groups.GroupTreeNode.fromGroup(org.jabref.model.groups.AbstractGroup)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java.Q .(Z2ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java.% .(42¥
`org.jabref.logic.exporter.GroupSerializerTest.serializeSingleAllEntriesGroup()?group@45.24:45.29CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java.[ .(`ë
Lorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroup()METHODJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java3	 3(%"
isFinalfalse"º
declarationString¶<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">serializeSingleExplicitGroup</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*serializeSingleExplicitGroup2≤
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java55 5(B2™
Vorg.jabref.model.groups.GroupTreeNode.fromGroup(org.jabref.model.groups.AbstractGroup)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java5Q 5(Z2z
&java.util.Collections.singletonList(T)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java6! 6(.2€
Üorg.jabref.model.groups.ExplicitGroup.ExplicitGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.lang.Character)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java4" 4(/2ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java5% 5(42≤
^org.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroup()?group@52.22:52.27CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java5[ 5(`2∫
forg.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroup()?serialization@53.21:53.34CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java6Y 6(f2π
^org.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroup()?group@52.22:52.27DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java4 4(2¡
forg.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroup()?serialization@53.21:53.34DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java5 5("2_
voidRETURN_TYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java3 3(≥
^org.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroup()?group@52.22:52.27VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java4 4("
typeExplicitGroup"
isFinalfalse"Ò
declarationString€<mark class="modifier"> </mark>ExplicitGroup <mark class="class-field">group</mark> = new ExplicitGroup("myExplicitGroup"<mark class="modifier">,</mark> GroupHierarchyType.INDEPENDENT, '<mark class="modifier">,</mark>')*group2y
%org.jabref.model.groups.ExplicitGroupTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java4 4(2€
Üorg.jabref.model.groups.ExplicitGroup.ExplicitGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.lang.Character)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java4" 4(/≤

forg.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroup()?serialization@53.21:53.34VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java5 5(""
typeList<String>"
isFinalfalse"∞
declarationStringö<mark class="modifier"> </mark>List<String> <mark class="class-field">serialization</mark> = groupSerializer.serializeTree(GroupTreeNode.fromGroup(group))*serialization2b
java.util.ListTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java5 5(2m
java.lang.StringTYPE_ARGUMENTJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java5 5(2≤
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java55 5(B2™
Vorg.jabref.model.groups.GroupTreeNode.fromGroup(org.jabref.model.groups.AbstractGroup)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java5Q 5(Z2ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java5% 5(42≤
^org.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroup()?group@52.22:52.27CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java5[ 5(`†
borg.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithIconAndDescription()METHODJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java:	 :(;"
isFinalfalse"“
declarationStringº<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">serializeSingleExplicitGroupWithIconAndDescription</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*2serializeSingleExplicitGroupWithIconAndDescription2ó
Corg.jabref.model.groups.AbstractGroup.setIconName(java.lang.String)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java< <(2é
:org.jabref.model.groups.AbstractGroup.setExpanded(boolean)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java= =(2ö
Forg.jabref.model.groups.AbstractGroup.setDescription(java.lang.String)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java? ?(2≤
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java@5 @(B2™
Vorg.jabref.model.groups.GroupTreeNode.fromGroup(org.jabref.model.groups.AbstractGroup)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java@Q @(Z2z
&java.util.Collections.singletonList(T)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaA! A(.2€
Üorg.jabref.model.groups.ExplicitGroup.ExplicitGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.lang.Character)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java;" ;(/2»
torg.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithIconAndDescription()?group@59.22:59.27CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java< <(2»
torg.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithIconAndDescription()?group@59.22:59.27CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java= =(2»
torg.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithIconAndDescription()?group@59.22:59.27CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java> >(2»
torg.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithIconAndDescription()?group@59.22:59.27CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java? ?(2ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java@% @(42»
torg.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithIconAndDescription()?group@59.22:59.27CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java@[ @(`2—
|org.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithIconAndDescription()?serialization@64.21:64.34CALLK
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaA| A(â2œ
torg.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithIconAndDescription()?group@59.22:59.27DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java; ;(2◊
|org.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithIconAndDescription()?serialization@64.21:64.34DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java@ @("2_
voidRETURN_TYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java: :(…
torg.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithIconAndDescription()?group@59.22:59.27VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java; ;("
typeExplicitGroup"
isFinalfalse"Ò
declarationString€<mark class="modifier"> </mark>ExplicitGroup <mark class="class-field">group</mark> = new ExplicitGroup("myExplicitGroup"<mark class="modifier">,</mark> GroupHierarchyType.INDEPENDENT, '<mark class="modifier">,</mark>')*group2y
%org.jabref.model.groups.ExplicitGroupTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java; ;(2€
Üorg.jabref.model.groups.ExplicitGroup.ExplicitGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.lang.Character)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java;" ;(/ﬁ

|org.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithIconAndDescription()?serialization@64.21:64.34VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java@ @(""
typeList<String>"
isFinalfalse"∞
declarationStringö<mark class="modifier"> </mark>List<String> <mark class="class-field">serialization</mark> = groupSerializer.serializeTree(GroupTreeNode.fromGroup(group))*serialization2b
java.util.ListTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java@ @(2m
java.lang.StringTYPE_ARGUMENTJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java@ @(2≤
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java@5 @(B2™
Vorg.jabref.model.groups.GroupTreeNode.fromGroup(org.jabref.model.groups.AbstractGroup)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java@Q @(Z2ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java@% @(42»
torg.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithIconAndDescription()?group@59.22:59.27CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java@[ @(`∂
\org.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithEscapedSlash()METHODJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaF	 F(5"
isFinalfalse"Ã
declarationString∂<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">serializeSingleExplicitGroupWithEscapedSlash</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"A
type9// For https://github.com/JabRef/jabref/issues/1681
void*,serializeSingleExplicitGroupWithEscapedSlash2≤
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaH5 H(B2™
Vorg.jabref.model.groups.GroupTreeNode.fromGroup(org.jabref.model.groups.AbstractGroup)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaHQ H(Z2z
&java.util.Collections.singletonList(T)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaI! I(.2€
Üorg.jabref.model.groups.ExplicitGroup.ExplicitGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.lang.Character)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaG" G(/2ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaH% H(42¬
norg.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithEscapedSlash()?group@71.22:71.27CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaH[ H(`2 
vorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithEscapedSlash()?serialization@72.21:72.34CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaIZ I(g2…
norg.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithEscapedSlash()?group@71.22:71.27DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaG G(2—
vorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithEscapedSlash()?serialization@72.21:72.34DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaH H("2_
voidRETURN_TYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaF F(¬
norg.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithEscapedSlash()?group@71.22:71.27VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaG G("
typeExplicitGroup"
isFinalfalse"
declarationString⁄<mark class="modifier"> </mark>ExplicitGroup <mark class="class-field">group</mark> = new ExplicitGroup("B{\\\"{o}}hmer"<mark class="modifier">,</mark> GroupHierarchyType.INDEPENDENT, '<mark class="modifier">,</mark>')*group2y
%org.jabref.model.groups.ExplicitGroupTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaG G(2€
Üorg.jabref.model.groups.ExplicitGroup.ExplicitGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.lang.Character)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaG" G(/“

vorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithEscapedSlash()?serialization@72.21:72.34VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaH H(""
typeList<String>"
isFinalfalse"∞
declarationStringö<mark class="modifier"> </mark>List<String> <mark class="class-field">serialization</mark> = groupSerializer.serializeTree(GroupTreeNode.fromGroup(group))*serialization2b
java.util.ListTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaH H(2m
java.lang.StringTYPE_ARGUMENTJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaH H(2≤
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaH5 H(B2™
Vorg.jabref.model.groups.GroupTreeNode.fromGroup(org.jabref.model.groups.AbstractGroup)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaHQ H(Z2ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaH% H(42¬
norg.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithEscapedSlash()?group@71.22:71.27CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaH[ H(`Ç
Qorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSimpleKeywordGroup()METHODJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaM	 M(*"
isFinalfalse"¡
declarationString´<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">serializeSingleSimpleKeywordGroup</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*!serializeSingleSimpleKeywordGroup2≤
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaO5 O(B2™
Vorg.jabref.model.groups.GroupTreeNode.fromGroup(org.jabref.model.groups.AbstractGroup)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaOQ O(Z2z
&java.util.Collections.singletonList(T)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaP! P(.2©
‘org.jabref.model.groups.WordKeywordGroup.WordKeywordGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, org.jabref.model.entry.field.Field, java.lang.String, boolean, java.lang.Character, boolean)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaN% N(52ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaO% O(42∑
corg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSimpleKeywordGroup()?group@78.25:78.30CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaO[ O(`2ø
korg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSimpleKeywordGroup()?serialization@79.21:79.34CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaPa P(n2æ
corg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSimpleKeywordGroup()?group@78.25:78.30DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaN N(2∆
korg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSimpleKeywordGroup()?serialization@79.21:79.34DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaO O("2_
voidRETURN_TYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaM M(À
corg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSimpleKeywordGroup()?group@78.25:78.30VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaN N("
typeWordKeywordGroup"
isFinalfalse"∞
declarationStringö<mark class="modifier"> </mark>WordKeywordGroup <mark class="class-field">group</mark> = new WordKeywordGroup("name"<mark class="modifier">,</mark> GroupHierarchyType.INDEPENDENT, StandardField.KEYWORDS, "test"<mark class="modifier">,</mark> <mark class="modifier">false</mark><mark class="modifier">,</mark> '<mark class="modifier">,</mark>'<mark class="modifier">,</mark> <mark class="modifier">false</mark>)*group2|
(org.jabref.model.groups.WordKeywordGroupTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaN N(2©
‘org.jabref.model.groups.WordKeywordGroup.WordKeywordGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, org.jabref.model.entry.field.Field, java.lang.String, boolean, java.lang.Character, boolean)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaN% N(5º

korg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSimpleKeywordGroup()?serialization@79.21:79.34VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaO O(""
typeList<String>"
isFinalfalse"∞
declarationStringö<mark class="modifier"> </mark>List<String> <mark class="class-field">serialization</mark> = groupSerializer.serializeTree(GroupTreeNode.fromGroup(group))*serialization2b
java.util.ListTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaO O(2m
java.lang.StringTYPE_ARGUMENTJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaO O(2≤
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaO5 O(B2™
Vorg.jabref.model.groups.GroupTreeNode.fromGroup(org.jabref.model.groups.AbstractGroup)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaOQ O(Z2ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaO% O(42∑
corg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSimpleKeywordGroup()?group@78.25:78.30CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaO[ O(`ﬂ
Porg.jabref.logic.exporter.GroupSerializerTest.serializeSingleRegexKeywordGroup()METHODJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaT	 T()"
isFinalfalse"¿
declarationString™<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">serializeSingleRegexKeywordGroup</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid* serializeSingleRegexKeywordGroup2≤
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaV5 V(B2™
Vorg.jabref.model.groups.GroupTreeNode.fromGroup(org.jabref.model.groups.AbstractGroup)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaVQ V(Z2z
&java.util.Collections.singletonList(T)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaW! W(.2ç
∏org.jabref.model.groups.RegexKeywordGroup.RegexKeywordGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, org.jabref.model.entry.field.Field, java.lang.String, boolean)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaU! U(22ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaV% V(42∂
borg.jabref.logic.exporter.GroupSerializerTest.serializeSingleRegexKeywordGroup()?group@85.21:85.26CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaV[ V(`2æ
jorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleRegexKeywordGroup()?serialization@86.21:86.34CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaWj W(w2Ω
borg.jabref.logic.exporter.GroupSerializerTest.serializeSingleRegexKeywordGroup()?group@85.21:85.26DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaU U(2≈
jorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleRegexKeywordGroup()?serialization@86.21:86.34DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaV V("2_
voidRETURN_TYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaT T(•
borg.jabref.logic.exporter.GroupSerializerTest.serializeSingleRegexKeywordGroup()?group@85.21:85.26VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaU U("
typeKeywordGroup"
isFinalfalse"Ø
declarationStringô<mark class="modifier"> </mark>KeywordGroup <mark class="class-field">group</mark> = new RegexKeywordGroup("myExplicitGroup"<mark class="modifier">,</mark> GroupHierarchyType.REFINING, StandardField.AUTHOR, "asdf"<mark class="modifier">,</mark> <mark class="modifier">false</mark>)*group2x
$org.jabref.model.groups.KeywordGroupTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaU U(2ç
∏org.jabref.model.groups.RegexKeywordGroup.RegexKeywordGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, org.jabref.model.entry.field.Field, java.lang.String, boolean)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaU! U(2∫

jorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleRegexKeywordGroup()?serialization@86.21:86.34VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaV V(""
typeList<String>"
isFinalfalse"∞
declarationStringö<mark class="modifier"> </mark>List<String> <mark class="class-field">serialization</mark> = groupSerializer.serializeTree(GroupTreeNode.fromGroup(group))*serialization2b
java.util.ListTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaV V(2m
java.lang.StringTYPE_ARGUMENTJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaV V(2≤
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaV5 V(B2™
Vorg.jabref.model.groups.GroupTreeNode.fromGroup(org.jabref.model.groups.AbstractGroup)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaVQ V(Z2ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaV% V(42∂
borg.jabref.logic.exporter.GroupSerializerTest.serializeSingleRegexKeywordGroup()?group@85.21:85.26CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaV[ V(`∂
Jorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSearchGroup()METHODJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java[	 [(#"
isFinalfalse"∫
declarationString§<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">serializeSingleSearchGroup</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*serializeSingleSearchGroup2n
java.util.EnumSet.of(E, E)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java\x \(z2≤
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java]5 ](B2™
Vorg.jabref.model.groups.GroupTreeNode.fromGroup(org.jabref.model.groups.AbstractGroup)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java]Q ](Z2z
&java.util.Collections.singletonList(T)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java^! ^(.2û
…org.jabref.model.groups.SearchGroup.SearchGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java\  \(+2ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java]% ](42∞
\org.jabref.logic.exporter.GroupSerializerTest.serializeSingleSearchGroup()?group@92.20:92.25CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java][ ](`2∏
dorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSearchGroup()?serialization@93.21:93.34CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java^k ^(x2∑
\org.jabref.logic.exporter.GroupSerializerTest.serializeSingleSearchGroup()?group@92.20:92.25DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java\ \(2ø
dorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSearchGroup()?serialization@93.21:93.34DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java] ]("2_
voidRETURN_TYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java[ [(»
\org.jabref.logic.exporter.GroupSerializerTest.serializeSingleSearchGroup()?group@92.20:92.25VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java\ \("
typeSearchGroup"
isFinalfalse"Ÿ
declarationString√<mark class="modifier"> </mark>SearchGroup <mark class="class-field">group</mark> = new SearchGroup("myExplicitGroup"<mark class="modifier">,</mark> GroupHierarchyType.INDEPENDENT, "author=harrer"<mark class="modifier">,</mark> EnumSet.of(SearchRules.SearchFlags.CASE_SENSITIVE, SearchRules.SearchFlags.REGULAR_EXPRESSION))*group2w
#org.jabref.model.groups.SearchGroupTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java\ \(2n
java.util.EnumSet.of(E, E)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java\x \(z2û
…org.jabref.model.groups.SearchGroup.SearchGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java\  \(+Æ

dorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSearchGroup()?serialization@93.21:93.34VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java] ](""
typeList<String>"
isFinalfalse"∞
declarationStringö<mark class="modifier"> </mark>List<String> <mark class="class-field">serialization</mark> = groupSerializer.serializeTree(GroupTreeNode.fromGroup(group))*serialization2b
java.util.ListTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java] ](2m
java.lang.StringTYPE_ARGUMENTJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java] ](2≤
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java]5 ](B2™
Vorg.jabref.model.groups.GroupTreeNode.fromGroup(org.jabref.model.groups.AbstractGroup)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java]Q ](Z2ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java]% ](42∞
\org.jabref.logic.exporter.GroupSerializerTest.serializeSingleSearchGroup()?group@92.20:92.25CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java][ ](`ˆ
Sorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSearchGroupWithRegex()METHODJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javab	 b(,"
isFinalfalse"√
declarationString≠<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">serializeSingleSearchGroupWithRegex</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*#serializeSingleSearchGroupWithRegex2k
java.util.EnumSet.of(E)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javacz c(|2≤
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javad5 d(B2™
Vorg.jabref.model.groups.GroupTreeNode.fromGroup(org.jabref.model.groups.AbstractGroup)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javadQ d(Z2z
&java.util.Collections.singletonList(T)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javae! e(.2û
…org.jabref.model.groups.SearchGroup.SearchGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javac  c(+2ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javad% d(42π
eorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSearchGroupWithRegex()?group@99.20:99.25CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javad[ d(`2√
oorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSearchGroupWithRegex()?serialization@100.21:100.34CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaeo e(|2¿
eorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSearchGroupWithRegex()?group@99.20:99.25DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javac c(2 
oorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSearchGroupWithRegex()?serialization@100.21:100.34DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javad d("2_
voidRETURN_TYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javab b(§
eorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSearchGroupWithRegex()?group@99.20:99.25VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javac c("
typeSearchGroup"
isFinalfalse"Ø
declarationStringô<mark class="modifier"> </mark>SearchGroup <mark class="class-field">group</mark> = new SearchGroup("myExplicitGroup"<mark class="modifier">,</mark> GroupHierarchyType.INCLUDING, "author=\"harrer\""<mark class="modifier">,</mark> EnumSet.of(SearchRules.SearchFlags.CASE_SENSITIVE))*group2w
#org.jabref.model.groups.SearchGroupTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javac c(2k
java.util.EnumSet.of(E)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javacz c(|2û
…org.jabref.model.groups.SearchGroup.SearchGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.lang.String, java.util.EnumSet<org.jabref.model.search.rules.SearchRules.SearchFlags>)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javac  c(+¬

oorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSearchGroupWithRegex()?serialization@100.21:100.34VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javad d(""
typeList<String>"
isFinalfalse"∞
declarationStringö<mark class="modifier"> </mark>List<String> <mark class="class-field">serialization</mark> = groupSerializer.serializeTree(GroupTreeNode.fromGroup(group))*serialization2b
java.util.ListTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javad d(2m
java.lang.StringTYPE_ARGUMENTJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javad d(2≤
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javad5 d(B2™
Vorg.jabref.model.groups.GroupTreeNode.fromGroup(org.jabref.model.groups.AbstractGroup)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javadQ d(Z2ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javad% d(42π
eorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleSearchGroupWithRegex()?group@99.20:99.25CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javad[ d(`ö
Torg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAutomaticKeywordGroup()METHODJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javai	 i(-"
isFinalfalse"ƒ
declarationStringÆ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">serializeSingleAutomaticKeywordGroup</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*$serializeSingleAutomaticKeywordGroup2≤
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javak5 k(B2™
Vorg.jabref.model.groups.GroupTreeNode.fromGroup(org.jabref.model.groups.AbstractGroup)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javakQ k(Z2z
&java.util.Collections.singletonList(T)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javal! l(.2§
œorg.jabref.model.groups.AutomaticKeywordGroup.AutomaticKeywordGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, org.jabref.model.entry.field.Field, java.lang.Character, java.lang.Character)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaj# j(82ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javak% k(42º
horg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAutomaticKeywordGroup()?group@106.23:106.28CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javak[ k(`2ƒ
porg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAutomaticKeywordGroup()?serialization@107.21:107.34CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javalq l(~2√
horg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAutomaticKeywordGroup()?group@106.23:106.28DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaj j(2À
porg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAutomaticKeywordGroup()?serialization@107.21:107.34DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javak k("2_
voidRETURN_TYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javai i(Õ
horg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAutomaticKeywordGroup()?group@106.23:106.28VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaj j("
typeAutomaticGroup"
isFinalfalse"∂
declarationString†<mark class="modifier"> </mark>AutomaticGroup <mark class="class-field">group</mark> = new AutomaticKeywordGroup("myAutomaticGroup"<mark class="modifier">,</mark> GroupHierarchyType.INDEPENDENT, StandardField.KEYWORDS, '<mark class="modifier">,</mark>'<mark class="modifier">,</mark> '>')*group2z
&org.jabref.model.groups.AutomaticGroupTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaj j(2§
œorg.jabref.model.groups.AutomaticKeywordGroup.AutomaticKeywordGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, org.jabref.model.entry.field.Field, java.lang.Character, java.lang.Character)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaj# j(8∆

porg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAutomaticKeywordGroup()?serialization@107.21:107.34VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javak k(""
typeList<String>"
isFinalfalse"∞
declarationStringö<mark class="modifier"> </mark>List<String> <mark class="class-field">serialization</mark> = groupSerializer.serializeTree(GroupTreeNode.fromGroup(group))*serialization2b
java.util.ListTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javak k(2m
java.lang.StringTYPE_ARGUMENTJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javak k(2≤
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javak5 k(B2™
Vorg.jabref.model.groups.GroupTreeNode.fromGroup(org.jabref.model.groups.AbstractGroup)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javakQ k(Z2ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javak% k(42º
horg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAutomaticKeywordGroup()?group@106.23:106.28CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javak[ k(`È
Sorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAutomaticPersonGroup()METHODJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javap	 p(,"
isFinalfalse"√
declarationString≠<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">serializeSingleAutomaticPersonGroup</mark>()"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*#serializeSingleAutomaticPersonGroup2≤
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javar5 r(B2™
Vorg.jabref.model.groups.GroupTreeNode.fromGroup(org.jabref.model.groups.AbstractGroup)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javarQ r(Z2z
&java.util.Collections.singletonList(T)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javas! s(.2˙
•org.jabref.model.groups.AutomaticPersonsGroup.AutomaticPersonsGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, org.jabref.model.entry.field.Field)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaq* q(?2ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javar% r(42ª
gorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAutomaticPersonGroup()?group@113.30:113.35CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javar[ r(`2√
oorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAutomaticPersonGroup()?serialization@114.21:114.34CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javask s(x2¬
gorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAutomaticPersonGroup()?group@113.30:113.35DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaq q(#2 
oorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAutomaticPersonGroup()?serialization@114.21:114.34DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javar r("2_
voidRETURN_TYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javap p(
gorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAutomaticPersonGroup()?group@113.30:113.35VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaq q(#"
typeAutomaticPersonsGroup"
isFinalfalse"ı
declarationStringﬂ<mark class="modifier"> </mark>AutomaticPersonsGroup <mark class="class-field">group</mark> = new AutomaticPersonsGroup("myAutomaticGroup"<mark class="modifier">,</mark> GroupHierarchyType.INDEPENDENT, StandardField.AUTHOR)*group2Å
-org.jabref.model.groups.AutomaticPersonsGroupTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaq q(2˙
•org.jabref.model.groups.AutomaticPersonsGroup.AutomaticPersonsGroup(java.lang.String, org.jabref.model.groups.GroupHierarchyType, org.jabref.model.entry.field.Field)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaq* q(?ƒ

oorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAutomaticPersonGroup()?serialization@114.21:114.34VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javar r(""
typeList<String>"
isFinalfalse"∞
declarationStringö<mark class="modifier"> </mark>List<String> <mark class="class-field">serialization</mark> = groupSerializer.serializeTree(GroupTreeNode.fromGroup(group))*serialization2b
java.util.ListTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javar r(2m
java.lang.StringTYPE_ARGUMENTJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javar r(2≤
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javar5 r(B2™
Vorg.jabref.model.groups.GroupTreeNode.fromGroup(org.jabref.model.groups.AbstractGroup)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javarQ r(Z2ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javar% r(42ª
gorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleAutomaticPersonGroup()?group@113.30:113.35CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javar[ r(`‡
Gorg.jabref.logic.exporter.GroupSerializerTest.serializeSingleTexGroup()METHODJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaw	 w( "
isFinalfalse"Ñ
declarationStringÓ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">serializeSingleTexGroup</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*serializeSingleTexGroup2ò
√org.jabref.model.groups.TexGroup.create(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.nio.file.Path, org.jabref.logic.auxparser.AuxParser, org.jabref.model.metadata.MetaData)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javax" x((2ê
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javax\ x(^2≤
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javay5 y(B2™
Vorg.jabref.model.groups.GroupTreeNode.fromGroup(org.jabref.model.groups.AbstractGroup)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javayQ y(Z2z
&java.util.Collections.singletonList(T)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaz! z(.2∏
corg.jabref.logic.auxparser.DefaultAuxParser.DefaultAuxParser(org.jabref.model.database.BibDatabase)CALLK
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaxz x(ä2â
3org.jabref.model.database.BibDatabase.BibDatabase()CALLL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaxè x(ö2É
-org.jabref.model.metadata.MetaData.MetaData()CALLL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javax£ x(´2ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javay% y(42Ø
[org.jabref.logic.exporter.GroupSerializerTest.serializeSingleTexGroup()?group@120.17:120.22CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javay[ y(`2∑
corg.jabref.logic.exporter.GroupSerializerTest.serializeSingleTexGroup()?serialization@121.21:121.34CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaz^ z(k2∂
[org.jabref.logic.exporter.GroupSerializerTest.serializeSingleTexGroup()?group@120.17:120.22DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javax x(2æ
corg.jabref.logic.exporter.GroupSerializerTest.serializeSingleTexGroup()?serialization@121.21:121.34DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javay y("2_
voidRETURN_TYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaw w(‰
[org.jabref.logic.exporter.GroupSerializerTest.serializeSingleTexGroup()?group@120.17:120.22VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javax x("
typeTexGroup"
isFinalfalse"í
declarationString¸<mark class="modifier"> </mark>TexGroup <mark class="class-field">group</mark> = TexGroup.create("myTexGroup"<mark class="modifier">,</mark> GroupHierarchyType.INDEPENDENT, Path.of("path"<mark class="modifier">,</mark> "To"<mark class="modifier">,</mark> "File")<mark class="modifier">,</mark> new DefaultAuxParser(new BibDatabase())<mark class="modifier">,</mark> new MetaData())*group2t
 org.jabref.model.groups.TexGroupTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javax x(2ò
√org.jabref.model.groups.TexGroup.create(java.lang.String, org.jabref.model.groups.GroupHierarchyType, java.nio.file.Path, org.jabref.logic.auxparser.AuxParser, org.jabref.model.metadata.MetaData)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javax" x((2ê
<java.nio.file.Path.of(java.lang.String, java.lang.String...)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javax\ x(^2∏
corg.jabref.logic.auxparser.DefaultAuxParser.DefaultAuxParser(org.jabref.model.database.BibDatabase)CALLK
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaxz x(ä2â
3org.jabref.model.database.BibDatabase.BibDatabase()CALLL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaxè x(ö2É
-org.jabref.model.metadata.MetaData.MetaData()CALLL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javax£ x(´¨

corg.jabref.logic.exporter.GroupSerializerTest.serializeSingleTexGroup()?serialization@121.21:121.34VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javay y(""
typeList<String>"
isFinalfalse"∞
declarationStringö<mark class="modifier"> </mark>List<String> <mark class="class-field">serialization</mark> = groupSerializer.serializeTree(GroupTreeNode.fromGroup(group))*serialization2b
java.util.ListTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javay y(2m
java.lang.StringTYPE_ARGUMENTJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javay y(2≤
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javay5 y(B2™
Vorg.jabref.model.groups.GroupTreeNode.fromGroup(org.jabref.model.groups.AbstractGroup)CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javayQ y(Z2ù
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javay% y(42Ø
[org.jabref.logic.exporter.GroupSerializerTest.serializeSingleTexGroup()?group@120.17:120.22CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javay[ y(`…
Korg.jabref.logic.exporter.GroupSerializerTest.getTreeAsStringInSimpleTree()METHODJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java~	 ~($"
isFinalfalse"à
declarationStringÚ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getTreeAsStringInSimpleTree</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*getTreeAsStringInSimpleTree2á
3org.jabref.model.groups.GroupTreeNodeTest.getRoot()CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java/ (62∫
dorg.jabref.model.groups.GroupTreeNodeTest.getNodeInSimpleTree(org.jabref.model.groups.GroupTreeNode)CALLL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaÄ Ä(-2s
java.util.Arrays.asList(T...)CALLL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaÇ' Ç(-2¥
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaà/ à(<2¥
^org.jabref.logic.exporter.GroupSerializerTest.getTreeAsStringInSimpleTree()?root@127.22:127.26CALLL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaÄ. Ä(22∏
borg.jabref.logic.exporter.GroupSerializerTest.getTreeAsStringInSimpleTree()?expected@130.21:130.29CALLL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaà à(2ü
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaà à(.2¥
^org.jabref.logic.exporter.GroupSerializerTest.getTreeAsStringInSimpleTree()?root@127.22:127.26CALLL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaà= à(A2π
^org.jabref.logic.exporter.GroupSerializerTest.getTreeAsStringInSimpleTree()?root@127.22:127.26DECLARATIONJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java (2ø
borg.jabref.logic.exporter.GroupSerializerTest.getTreeAsStringInSimpleTree()?expected@130.21:130.29DECLARATIONL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaÇ Ç(2_
voidRETURN_TYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java~ ~(Ú
^org.jabref.logic.exporter.GroupSerializerTest.getTreeAsStringInSimpleTree()?root@127.22:127.26VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java ("
typeGroupTreeNode"
isFinalfalse"Ö
declarationStringp<mark class="modifier"> </mark>GroupTreeNode <mark class="class-field">root</mark> = GroupTreeNodeTest.getRoot()*root2y
%org.jabref.model.groups.GroupTreeNodeTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java (2á
3org.jabref.model.groups.GroupTreeNodeTest.getRoot()CALLJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java/ (6ô
borg.jabref.logic.exporter.GroupSerializerTest.getTreeAsStringInSimpleTree()?expected@130.21:130.29VARIABLEL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaÇ Ç("
typeList<String>"
isFinalfalse"‹
declarationString∆<mark class="modifier"> </mark>List<String> <mark class="class-field">expected</mark> = Arrays.asList("0 AllEntriesGroup:"<mark class="modifier">,</mark> "1 StaticGroup:ExplicitA;2;1;;;;"<mark class="modifier">,</mark> "1 StaticGroup:ExplicitParent;0;1;;;;"<mark class="modifier">,</mark> "2 StaticGroup:ExplicitNode;1;1;;;;")*expected2d
java.util.ListTYPEL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaÇ Ç(2o
java.lang.StringTYPE_ARGUMENTL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaÇ Ç(2s
java.util.Arrays.asList(T...)CALLL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaÇ' Ç(-⁄
Lorg.jabref.logic.exporter.GroupSerializerTest.getTreeAsStringInComplexTree()METHODL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaå	 å(%"
isFinalfalse"â
declarationStringÛ<mark class="annotation">@Test</mark> <br><mark class="modifier"> </mark><mark class="modifier">void</mark> <mark class="method">getTreeAsStringInComplexTree</mark>()<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspackage_private"

isAbstractfalse"
typevoid*getTreeAsStringInComplexTree2â
3org.jabref.model.groups.GroupTreeNodeTest.getRoot()CALLL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaç/ ç(62ª
eorg.jabref.model.groups.GroupTreeNodeTest.getNodeInComplexTree(org.jabref.model.groups.GroupTreeNode)CALLL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaé é(.2s
java.util.Arrays.asList(T...)CALLL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaê' ê(-2¥
^org.jabref.logic.exporter.GroupSerializer.serializeTree(org.jabref.model.groups.GroupTreeNode)CALLL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java†/ †(<2µ
_org.jabref.logic.exporter.GroupSerializerTest.getTreeAsStringInComplexTree()?root@141.22:141.26CALLL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaé/ é(32π
corg.jabref.logic.exporter.GroupSerializerTest.getTreeAsStringInComplexTree()?expected@144.21:144.29CALLL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java† †(2ü
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43CALLL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java† †(.2µ
_org.jabref.logic.exporter.GroupSerializerTest.getTreeAsStringInComplexTree()?root@141.22:141.26CALLL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java†= †(A2º
_org.jabref.logic.exporter.GroupSerializerTest.getTreeAsStringInComplexTree()?root@141.22:141.26DECLARATIONL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaç ç(2¿
corg.jabref.logic.exporter.GroupSerializerTest.getTreeAsStringInComplexTree()?expected@144.21:144.29DECLARATIONL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaê ê(2a
voidRETURN_TYPEL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaå å(˘
_org.jabref.logic.exporter.GroupSerializerTest.getTreeAsStringInComplexTree()?root@141.22:141.26VARIABLEL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaç ç("
typeGroupTreeNode"
isFinalfalse"Ö
declarationStringp<mark class="modifier"> </mark>GroupTreeNode <mark class="class-field">root</mark> = GroupTreeNodeTest.getRoot()*root2{
%org.jabref.model.groups.GroupTreeNodeTYPEL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaç ç(2â
3org.jabref.model.groups.GroupTreeNodeTest.getRoot()CALLL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaç/ ç(6Å
corg.jabref.logic.exporter.GroupSerializerTest.getTreeAsStringInComplexTree()?expected@144.21:144.29VARIABLEL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaê ê("
typeList<String>"
isFinalfalse"√	
declarationString≠	<mark class="modifier"> </mark>List<String> <mark class="class-field">expected</mark> = Arrays.asList("0 AllEntriesGroup:"<mark class="modifier">,</mark> "1 SearchGroup:SearchA;2;searchExpression;1;0;1;;;;"<mark class="modifier">,</mark> "1 StaticGroup:ExplicitA;2;1;;;;"<mark class="modifier">,</mark> "1 StaticGroup:ExplicitGrandParent;0;1;;;;"<mark class="modifier">,</mark> "2 StaticGroup:ExplicitB;1;1;;;;"<mark class="modifier">,</mark> "2 KeywordGroup:KeywordParent;0;keywords;searchExpression;1;0;1;;;;"<mark class="modifier">,</mark> "3 KeywordGroup:KeywordNode;0;keywords;searchExpression;1;0;1;;;;"<mark class="modifier">,</mark> "4 StaticGroup:ExplicitChild;1;1;;;;"<mark class="modifier">,</mark> "3 SearchGroup:SearchC;2;searchExpression;1;0;1;;;;"<mark class="modifier">,</mark> "3 StaticGroup:ExplicitC;1;1;;;;"<mark class="modifier">,</mark> "3 KeywordGroup:KeywordC;0;keywords;searchExpression;1;0;1;;;;"<mark class="modifier">,</mark> "2 SearchGroup:SearchB;2;searchExpression;1;0;1;;;;"<mark class="modifier">,</mark> "2 KeywordGroup:KeywordB;0;keywords;searchExpression;1;0;1;;;;"<mark class="modifier">,</mark> "1 KeywordGroup:KeywordA;0;keywords;searchExpression;1;0;1;;;;")*expected2d
java.util.ListTYPEL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaê ê(2o
java.lang.StringTYPE_ARGUMENTL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaê ê(2s
java.util.Arrays.asList(T...)CALLL
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.javaê' ê(-ˇ
Iorg.jabref.logic.exporter.GroupSerializerTest?groupSerializer@36.28:36.43VARIABLEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java$ $(+"
isFinalfalse"
typeGroupSerializer"{
declarationStringf<mark class="modifier">private </mark>GroupSerializer <mark class="class-field">groupSerializer</mark>"
isStaticfalse"
accessprivate*groupSerializer2}
)org.jabref.logic.exporter.GroupSerializerTYPEJ
@src\test\java\org\jabref\logic\exporter\GroupSerializerTest.java$ $(