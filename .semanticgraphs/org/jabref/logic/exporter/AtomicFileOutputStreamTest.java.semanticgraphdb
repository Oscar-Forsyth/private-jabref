
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.javaî	
4org.jabref.logic.exporter.AtomicFileOutputStreamTestCLASSQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java ( "$
packageorg.jabref.logic.exporter"
isFinalfalse"
inner classfalse"

isAbstractfalse"r
declarationString]<mark class="modifier"> </mark><mark class="modifier">class </mark>AtomicFileOutputStreamTest"
accesspackage_private*AtomicFileOutputStreamTest2∫
Xorg.jabref.logic.exporter.AtomicFileOutputStreamTest.normalSaveWorks(java.nio.file.Path)DECLARATIONQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java (2Ã
jorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)DECLARATIONQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java( ((12Æ
Lorg.jabref.logic.exporter.AtomicFileOutputStreamTest?FIFTY_CHARS@22.32:22.43DECLARATIONQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java  (+2∂
Torg.jabref.logic.exporter.AtomicFileOutputStreamTest?FIVE_THOUSAND_CHARS@23.32:23.51DECLARATIONQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java  (3·!
Xorg.jabref.logic.exporter.AtomicFileOutputStreamTest.normalSaveWorks(java.nio.file.Path)METHODQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java ("
isFinalfalse"í
declarationString¸ <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">normalSaveWorks</mark>(<mark class="annotation">@TempDir</mark> Path tempDir)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*normalSaveWorks2á
,java.nio.file.Path.resolve(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java ("2√
hjava.nio.file.Files.writeString(java.nio.file.Path, java.lang.CharSequence, java.nio.file.OpenOption...)CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java (2v
java.lang.String.getBytes()CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.javaS ([2è
4java.io.InputStream.transferTo(java.io.OutputStream)CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java   ("2ç
2java.nio.file.Files.readString(java.nio.file.Path)CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java$0 $(:2∂
[org.jabref.logic.exporter.AtomicFileOutputStream.AtomicFileOutputStream(java.nio.file.Path)CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.javaA (W2î
9java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java* (>2ª
`org.jabref.logic.exporter.AtomicFileOutputStreamTest.normalSaveWorks(java.nio.file.Path)!tempDirCALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java (2√
horg.jabref.logic.exporter.AtomicFileOutputStreamTest.normalSaveWorks(java.nio.file.Path)?out@27.13:27.16CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java (2ß
Lorg.jabref.logic.exporter.AtomicFileOutputStreamTest?FIFTY_CHARS@22.32:22.43CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java (*2√
horg.jabref.logic.exporter.AtomicFileOutputStreamTest.normalSaveWorks(java.nio.file.Path)?out@27.13:27.16CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.javaX ([2Ø
Torg.jabref.logic.exporter.AtomicFileOutputStreamTest?FIVE_THOUSAND_CHARS@23.32:23.51CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java? (R2À
porg.jabref.logic.exporter.AtomicFileOutputStreamTest.normalSaveWorks(java.nio.file.Path)?inputStream@31.24:31.35CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java   (2÷
{org.jabref.logic.exporter.AtomicFileOutputStreamTest.normalSaveWorks(java.nio.file.Path)?atomicFileOutputStream@30.36:30.58CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java #  (92Ø
Torg.jabref.logic.exporter.AtomicFileOutputStreamTest?FIVE_THOUSAND_CHARS@23.32:23.51CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java$ $((2√
horg.jabref.logic.exporter.AtomicFileOutputStreamTest.normalSaveWorks(java.nio.file.Path)?out@27.13:27.16CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java$; $(>2¿
`org.jabref.logic.exporter.AtomicFileOutputStreamTest.normalSaveWorks(java.nio.file.Path)!tempDir	PARAMETERQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java. (52 
horg.jabref.logic.exporter.AtomicFileOutputStreamTest.normalSaveWorks(java.nio.file.Path)?out@27.13:27.16DECLARATIONQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java (2›
{org.jabref.logic.exporter.AtomicFileOutputStreamTest.normalSaveWorks(java.nio.file.Path)?atomicFileOutputStream@30.36:30.58DECLARATIONQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java$ (:2“
porg.jabref.logic.exporter.AtomicFileOutputStreamTest.normalSaveWorks(java.nio.file.Path)?inputStream@31.24:31.35DECLARATIONQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java (#2f
voidRETURN_TYPEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java (®
horg.jabref.logic.exporter.AtomicFileOutputStreamTest.normalSaveWorks(java.nio.file.Path)?out@27.13:27.16VARIABLEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java ("
typePath"
isFinalfalse"Ç
declarationStringm<mark class="modifier"> </mark>Path <mark class="class-field">out</mark> = tempDir.resolve("normal-save.txt")*out2m
java.nio.file.PathTYPEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java (2á
,java.nio.file.Path.resolve(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java ("2ª
`org.jabref.logic.exporter.AtomicFileOutputStreamTest.normalSaveWorks(java.nio.file.Path)!tempDirCALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java (Ÿ
{org.jabref.logic.exporter.AtomicFileOutputStreamTest.normalSaveWorks(java.nio.file.Path)?atomicFileOutputStream@30.36:30.58VARIABLEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java$ (:"
typeAtomicFileOutputStream"
isFinalfalse"•
declarationStringè<mark class="modifier"> </mark>AtomicFileOutputStream <mark class="class-field">atomicFileOutputStream</mark> = new AtomicFileOutputStream(out)*atomicFileOutputStream2ã
0org.jabref.logic.exporter.AtomicFileOutputStreamTYPEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java (#2∂
[org.jabref.logic.exporter.AtomicFileOutputStream.AtomicFileOutputStream(java.nio.file.Path)CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.javaA (W2√
horg.jabref.logic.exporter.AtomicFileOutputStreamTest.normalSaveWorks(java.nio.file.Path)?out@27.13:27.16CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.javaX ([ﬂ
porg.jabref.logic.exporter.AtomicFileOutputStreamTest.normalSaveWorks(java.nio.file.Path)?inputStream@31.24:31.35VARIABLEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java (#"
typeInputStream"
isFinalfalse"®
declarationStringí<mark class="modifier"> </mark>InputStream <mark class="class-field">inputStream</mark> = new ByteArrayInputStream(FIVE_THOUSAND_CHARS.getBytes())*inputStream2n
java.io.InputStreamTYPEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java (2v
java.lang.String.getBytes()CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.javaS ([2î
9java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java* (>2Ø
Torg.jabref.logic.exporter.AtomicFileOutputStreamTest?FIVE_THOUSAND_CHARS@23.32:23.51CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java? (R§
`org.jabref.logic.exporter.AtomicFileOutputStreamTest.normalSaveWorks(java.nio.file.Path)!tempDir	PARAMETERQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java. (5"
typePath"
isFinalfalse"J
declarationString5<mark class="annotation">@TempDir</mark> Path tempDir*tempDir2m
java.nio.file.PathTYPEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java) (-ÃA
jorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)METHODQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java( ((1"
isFinalfalse"§
declarationStringé <br><mark class="modifier">public </mark><mark class="modifier">void</mark> <mark class="method">originalContentExistsAtWriteError</mark>(<mark class="annotation">@TempDir</mark> Path tempDir)<mark class="modifier"> <mark class="modifier">throws</mark> </mark>Exception"
isStaticfalse"
accesspublic"

isAbstractfalse"
typevoid*!originalContentExistsAtWriteError2á
,java.nio.file.Path.resolve(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java)& )(-2√
hjava.nio.file.Files.writeString(java.nio.file.Path, java.lang.CharSequence, java.nio.file.OpenOption...)CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java* *(2á
,java.nio.file.Path.resolve(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java,% ,(,2v
java.nio.file.Path.toFile()CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java.P .(V2~
#java.io.FileOutputStream.write(int)CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java2 2("2w
java.io.OutputStream.flush()CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java3 3("2v
java.lang.String.getBytes()CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java:\ :(d2è
4java.io.InputStream.transferTo(java.io.OutputStream)CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java;  ;(*2ç
2java.nio.file.Files.readString(java.nio.file.Path)CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.javaA( A(22í
7java.io.FileOutputStream.FileOutputStream(java.io.File)CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java.1 .(A2|
!java.io.IOException.IOException()CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java4 4(%2Í
éorg.jabref.logic.exporter.AtomicFileOutputStream.AtomicFileOutputStream(java.nio.file.Path, java.nio.file.Path, java.io.OutputStream, boolean)CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java9I 9(_2î
9java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java:3 :(G2Õ
rorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)!tempDirCALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java) )(%2·
Öorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?pathToTestFile@41.13:41.27CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java* *((2ß
Lorg.jabref.logic.exporter.AtomicFileOutputStreamTest?FIFTY_CHARS@22.32:22.43CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java** *(52Õ
rorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)!tempDirCALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java, ,($2‡
Ñorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?pathToTmpFile@44.13:44.26CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java.B .(O2ﬂ
Éorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?outputStream@46.30:46.42CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java/5 /(A2ﬂ
Éorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?outputStream@46.30:46.42CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java2 2(2›
Åorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?invocation@48.21:48.31CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java2- 2(72ﬂ
Éorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?outputStream@46.30:46.42CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java3 3(2‰
àorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?spiedOutputStream@47.29:47.46CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java5 5(%2·
Öorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?pathToTestFile@41.13:41.27CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java9` 9(n2‡
Ñorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?pathToTmpFile@44.13:44.26CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java9p 9(}2Â
àorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?spiedOutputStream@47.29:47.46CALLR
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java9 9(ê2Ø
Torg.jabref.logic.exporter.AtomicFileOutputStreamTest?FIVE_THOUSAND_CHARS@23.32:23.51CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java:H :([2ﬁ
Çorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?inputStream@58.33:58.44CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java; ;(2È
çorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?atomicFileOutputStream@57.44:57.66CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java;+ ;(A2ß
Lorg.jabref.logic.exporter.AtomicFileOutputStreamTest?FIFTY_CHARS@22.32:22.43CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.javaA A( 2·
Öorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?pathToTestFile@41.13:41.27CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.javaA3 A(A2“
rorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)!tempDir	PARAMETERQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java(@ ((G2Ë
Öorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?pathToTestFile@41.13:41.27DECLARATIONQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java) )(2Á
Ñorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?pathToTmpFile@44.13:44.26DECLARATIONQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java, ,(2Ê
Éorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?outputStream@46.30:46.42DECLARATIONQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java. .(*2Î
àorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?spiedOutputStream@47.29:47.46DECLARATIONQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java/ /(.2
çorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?atomicFileOutputStream@57.44:57.66DECLARATIONQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java9, 9(B2Â
Çorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?inputStream@58.33:58.44DECLARATIONQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java:! :(,2‰
Åorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?invocation@48.21:48.31DECLARATIONQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java0 0(2f
voidRETURN_TYPEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java( ((Ù
Öorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?pathToTestFile@41.13:41.27VARIABLEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java) )("
typePath"
isFinalfalse"ì
declarationString~<mark class="modifier"> </mark>Path <mark class="class-field">pathToTestFile</mark> = tempDir.resolve("error-during-save.txt")*pathToTestFile2m
java.nio.file.PathTYPEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java) )(2á
,java.nio.file.Path.resolve(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java)& )(-2Õ
rorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)!tempDirCALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java) )(%ˆ
Ñorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?pathToTmpFile@44.13:44.26VARIABLEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java, ,("
typePath"
isFinalfalse"ó
declarationStringÅ<mark class="modifier"> </mark>Path <mark class="class-field">pathToTmpFile</mark> = tempDir.resolve("error-during-save.txt.tmp")*pathToTmpFile2m
java.nio.file.PathTYPEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java, ,(2á
,java.nio.file.Path.resolve(java.lang.String)CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java,% ,(,2Õ
rorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)!tempDirCALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java, ,($ß
Éorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?outputStream@46.30:46.42VARIABLEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java. .(*"
typeFileOutputStream"
isFinalfalse"¢
declarationStringå<mark class="modifier"> </mark>FileOutputStream <mark class="class-field">outputStream</mark> = new FileOutputStream(pathToTmpFile.toFile())*outputStream2s
java.io.FileOutputStreamTYPEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java. .(2v
java.nio.file.Path.toFile()CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java.P .(V2í
7java.io.FileOutputStream.FileOutputStream(java.io.File)CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java.1 .(A2‡
Ñorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?pathToTmpFile@44.13:44.26CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java.B .(Oå
àorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?spiedOutputStream@47.29:47.46VARIABLEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java/ /(."
typeFileOutputStream"
isFinalfalse"ã
declarationStringv<mark class="modifier"> </mark>FileOutputStream <mark class="class-field">spiedOutputStream</mark> = spy(outputStream)*spiedOutputStream2s
java.io.FileOutputStreamTYPEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java/ /(2ﬂ
Éorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?outputStream@46.30:46.42CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java/5 /(A€
çorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?atomicFileOutputStream@57.44:57.66VARIABLEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java9, 9(B"
typeAtomicFileOutputStream"
isFinalfalse"˜
declarationString·<mark class="modifier"> </mark>AtomicFileOutputStream <mark class="class-field">atomicFileOutputStream</mark> = new AtomicFileOutputStream(pathToTestFile, pathToTmpFile, spiedOutputStream, <mark class="modifier">false</mark>)*atomicFileOutputStream2ã
0org.jabref.logic.exporter.AtomicFileOutputStreamTYPEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java9 9(+2Í
éorg.jabref.logic.exporter.AtomicFileOutputStream.AtomicFileOutputStream(java.nio.file.Path, java.nio.file.Path, java.io.OutputStream, boolean)CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java9I 9(_2·
Öorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?pathToTestFile@41.13:41.27CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java9` 9(n2‡
Ñorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?pathToTmpFile@44.13:44.26CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java9p 9(}2Â
àorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?spiedOutputStream@47.29:47.46CALLR
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java9 9(êÚ
Çorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?inputStream@58.33:58.44VARIABLEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java:! :(,"
typeInputStream"
isFinalfalse"®
declarationStringí<mark class="modifier"> </mark>InputStream <mark class="class-field">inputStream</mark> = new ByteArrayInputStream(FIVE_THOUSAND_CHARS.getBytes())*inputStream2n
java.io.InputStreamTYPEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java: :( 2v
java.lang.String.getBytes()CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java:\ :(d2î
9java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java:3 :(G2Ø
Torg.jabref.logic.exporter.AtomicFileOutputStreamTest?FIVE_THOUSAND_CHARS@23.32:23.51CALLQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java:H :([∂
rorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)!tempDir	PARAMETERQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java(@ ((G"
typePath"
isFinalfalse"J
declarationString5<mark class="annotation">@TempDir</mark> Path tempDir*tempDir2m
java.nio.file.PathTYPEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java(; ((?±
Åorg.jabref.logic.exporter.AtomicFileOutputStreamTest.originalContentExistsAtWriteError(java.nio.file.Path)?invocation@48.21:48.31VARIABLEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java0 0("
type"
isFinalfalse" 
declarationString invocation*
invocation2TYPE‰
Lorg.jabref.logic.exporter.AtomicFileOutputStreamTest?FIFTY_CHARS@22.32:22.43VALUEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java  (+"
isFinaltrue"
typeString"˘
declarationString„<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>String <mark class="class-field">FIFTY_CHARS</mark> = Strings.repeat("1234567890"<mark class="modifier">,</mark> 5);"
isStatictrue"
accessprivate*FIFTY_CHARS2k
java.lang.StringTYPEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java (˜
Torg.jabref.logic.exporter.AtomicFileOutputStreamTest?FIVE_THOUSAND_CHARS@23.32:23.51VALUEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java  (3"
isFinaltrue"
typeString"¸
declarationStringÊ<mark class="modifier">private </mark><mark class="modifier">static </mark><mark class="modifier">final </mark>String <mark class="class-field">FIVE_THOUSAND_CHARS</mark> = Strings.repeat("A"<mark class="modifier">,</mark> 5_000);"
isStatictrue"
accessprivate*FIVE_THOUSAND_CHARS2k
java.lang.StringTYPEQ
Gsrc\test\java\org\jabref\logic\exporter\AtomicFileOutputStreamTest.java (